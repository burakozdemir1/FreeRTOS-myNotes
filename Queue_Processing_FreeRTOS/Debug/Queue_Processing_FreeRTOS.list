
Queue_Processing_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000637c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  0800643c  0800643c  0001643c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065d4  080065d4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080065d4  080065d4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065d4  080065d4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065d4  080065d4  000165d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065d8  080065d8  000165d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080065dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c54  200001dc  080067b8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e30  080067b8  00021e30  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0da  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002593  00000000  00000000  0002e2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  00030878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  000314c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aad9  00000000  00000000  00032010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eaa0  00000000  00000000  0004cae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099930  00000000  00000000  0005b589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4eb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e34  00000000  00000000  000f4f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006424 	.word	0x08006424

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08006424 	.word	0x08006424

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <vApplicationIdleHook>:
void LED_STATUS_Func(char *ledStateMessage);
void EXIT_APP_Func(void);
void ERROR_MESSAGE();

void vApplicationIdleHook() // mcu boşta çalışırken,mcu da hiç bir görev çalışmadığında neler olacağını bu fonksiyona söyleriz
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	__WFI(); // mcu boşta çalışırken mcu çok güç tüketmesin der düşük güç tüketimi olur
 8000248:	bf30      	wfi





}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}

08000250 <main>:


/* Main function */
int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af02      	add	r7, sp, #8
    /* MCU Configuration--------------------------------------------------------*/
    HAL_Init();
 8000256:	f000 fc5d 	bl	8000b14 <HAL_Init>
    SystemClock_Config();
 800025a:	f000 f891 	bl	8000380 <SystemClock_Config>
    MX_GPIO_Init();
 800025e:	f000 f903 	bl	8000468 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 8000262:	f000 f8c9 	bl	80003f8 <MX_USART1_UART_Init>

    /* Initialize UART */

    /* Create queues */
    Uart_Write_Queue = xQueueCreate(10, sizeof(char*));   // Queue for UART write
 8000266:	2200      	movs	r2, #0
 8000268:	2104      	movs	r1, #4
 800026a:	200a      	movs	r0, #10
 800026c:	f003 f9ca 	bl	8003604 <xQueueGenericCreate>
 8000270:	0002      	movs	r2, r0
 8000272:	4b31      	ldr	r3, [pc, #196]	; (8000338 <main+0xe8>)
 8000274:	601a      	str	r2, [r3, #0]
    Command_Queue = xQueueCreate(10, sizeof(uint8_t));   // Queue for commands
 8000276:	2200      	movs	r2, #0
 8000278:	2101      	movs	r1, #1
 800027a:	200a      	movs	r0, #10
 800027c:	f003 f9c2 	bl	8003604 <xQueueGenericCreate>
 8000280:	0002      	movs	r2, r0
 8000282:	4b2e      	ldr	r3, [pc, #184]	; (800033c <main+0xec>)
 8000284:	601a      	str	r2, [r3, #0]

    /* Check if queues were created successfully */
    if (Uart_Write_Queue != NULL && Command_Queue != NULL)
 8000286:	4b2c      	ldr	r3, [pc, #176]	; (8000338 <main+0xe8>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d040      	beq.n	8000310 <main+0xc0>
 800028e:	4b2b      	ldr	r3, [pc, #172]	; (800033c <main+0xec>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d03c      	beq.n	8000310 <main+0xc0>
    {
        /* Print success message */
        sprintf((char*)myMessage, "Kuyruk Olusturma Basarili\r\n");
 8000296:	4a2a      	ldr	r2, [pc, #168]	; (8000340 <main+0xf0>)
 8000298:	4b2a      	ldr	r3, [pc, #168]	; (8000344 <main+0xf4>)
 800029a:	0011      	movs	r1, r2
 800029c:	0018      	movs	r0, r3
 800029e:	f005 fc59 	bl	8005b54 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t *)myMessage, strlen((char*)myMessage), HAL_MAX_DELAY);
 80002a2:	4b28      	ldr	r3, [pc, #160]	; (8000344 <main+0xf4>)
 80002a4:	0018      	movs	r0, r3
 80002a6:	f7ff ff2f 	bl	8000108 <strlen>
 80002aa:	0003      	movs	r3, r0
 80002ac:	b29a      	uxth	r2, r3
 80002ae:	2301      	movs	r3, #1
 80002b0:	425b      	negs	r3, r3
 80002b2:	4924      	ldr	r1, [pc, #144]	; (8000344 <main+0xf4>)
 80002b4:	4824      	ldr	r0, [pc, #144]	; (8000348 <main+0xf8>)
 80002b6:	f001 fcd3 	bl	8001c60 <HAL_UART_Transmit>

        /* Create tasks */
        xTaskCreate(Task1_Menu_Display_Handler, "Menu Display", configMINIMAL_STACK_SIZE, NULL, 1, &task1MenuHandle); // bunun önceliği düşük olsun ki önce komutum çalışsın sonra diğer göreve geçsin
 80002ba:	4924      	ldr	r1, [pc, #144]	; (800034c <main+0xfc>)
 80002bc:	4824      	ldr	r0, [pc, #144]	; (8000350 <main+0x100>)
 80002be:	4b25      	ldr	r3, [pc, #148]	; (8000354 <main+0x104>)
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	9300      	str	r3, [sp, #0]
 80002c6:	2300      	movs	r3, #0
 80002c8:	223c      	movs	r2, #60	; 0x3c
 80002ca:	f003 fd2e 	bl	8003d2a <xTaskCreate>
        xTaskCreate(Task2_Command_Handling_Handler, "Command Handling", configMINIMAL_STACK_SIZE, NULL, 2, &task2CommandHandle);
 80002ce:	4922      	ldr	r1, [pc, #136]	; (8000358 <main+0x108>)
 80002d0:	4822      	ldr	r0, [pc, #136]	; (800035c <main+0x10c>)
 80002d2:	4b23      	ldr	r3, [pc, #140]	; (8000360 <main+0x110>)
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2302      	movs	r3, #2
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	2300      	movs	r3, #0
 80002dc:	223c      	movs	r2, #60	; 0x3c
 80002de:	f003 fd24 	bl	8003d2a <xTaskCreate>
        xTaskCreate(Task3_Command_Process_Handler, "Command Process", configMINIMAL_STACK_SIZE, NULL, 2, &task3CommandProcessHandle);
 80002e2:	4920      	ldr	r1, [pc, #128]	; (8000364 <main+0x114>)
 80002e4:	4820      	ldr	r0, [pc, #128]	; (8000368 <main+0x118>)
 80002e6:	4b21      	ldr	r3, [pc, #132]	; (800036c <main+0x11c>)
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2302      	movs	r3, #2
 80002ec:	9300      	str	r3, [sp, #0]
 80002ee:	2300      	movs	r3, #0
 80002f0:	223c      	movs	r2, #60	; 0x3c
 80002f2:	f003 fd1a 	bl	8003d2a <xTaskCreate>
        xTaskCreate(Task4_Uart_Write_Handler, "Uart Write", configMINIMAL_STACK_SIZE, NULL, 2, &task4UartWriteHandle);
 80002f6:	491e      	ldr	r1, [pc, #120]	; (8000370 <main+0x120>)
 80002f8:	481e      	ldr	r0, [pc, #120]	; (8000374 <main+0x124>)
 80002fa:	4b1f      	ldr	r3, [pc, #124]	; (8000378 <main+0x128>)
 80002fc:	9301      	str	r3, [sp, #4]
 80002fe:	2302      	movs	r3, #2
 8000300:	9300      	str	r3, [sp, #0]
 8000302:	2300      	movs	r3, #0
 8000304:	223c      	movs	r2, #60	; 0x3c
 8000306:	f003 fd10 	bl	8003d2a <xTaskCreate>

        /* Start FreeRTOS scheduler */
        vTaskStartScheduler();
 800030a:	f003 fef9 	bl	8004100 <vTaskStartScheduler>
 800030e:	e012      	b.n	8000336 <main+0xe6>
    }
    else
    {
        /* Print error message */
        sprintf((char*)myMessage, "Kuyruk Olusturma Hatali!\r\n");
 8000310:	4a1a      	ldr	r2, [pc, #104]	; (800037c <main+0x12c>)
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <main+0xf4>)
 8000314:	0011      	movs	r1, r2
 8000316:	0018      	movs	r0, r3
 8000318:	f005 fc1c 	bl	8005b54 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t *)myMessage, strlen((char*)myMessage), HAL_MAX_DELAY);
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <main+0xf4>)
 800031e:	0018      	movs	r0, r3
 8000320:	f7ff fef2 	bl	8000108 <strlen>
 8000324:	0003      	movs	r3, r0
 8000326:	b29a      	uxth	r2, r3
 8000328:	2301      	movs	r3, #1
 800032a:	425b      	negs	r3, r3
 800032c:	4905      	ldr	r1, [pc, #20]	; (8000344 <main+0xf4>)
 800032e:	4806      	ldr	r0, [pc, #24]	; (8000348 <main+0xf8>)
 8000330:	f001 fc96 	bl	8001c60 <HAL_UART_Transmit>

        /* Loop indefinitely */
        while (1);
 8000334:	e7fe      	b.n	8000334 <main+0xe4>
    }

    /* We should never get here as control is now taken by the scheduler */
    while (1);
 8000336:	e7fe      	b.n	8000336 <main+0xe6>
 8000338:	20000310 	.word	0x20000310
 800033c:	20000314 	.word	0x20000314
 8000340:	0800643c 	.word	0x0800643c
 8000344:	20000280 	.word	0x20000280
 8000348:	200001f8 	.word	0x200001f8
 800034c:	08006458 	.word	0x08006458
 8000350:	0800056d 	.word	0x0800056d
 8000354:	20000300 	.word	0x20000300
 8000358:	08006468 	.word	0x08006468
 800035c:	080005a9 	.word	0x080005a9
 8000360:	20000304 	.word	0x20000304
 8000364:	0800647c 	.word	0x0800647c
 8000368:	08000621 	.word	0x08000621
 800036c:	20000308 	.word	0x20000308
 8000370:	0800648c 	.word	0x0800648c
 8000374:	080006bd 	.word	0x080006bd
 8000378:	2000030c 	.word	0x2000030c
 800037c:	08006498 	.word	0x08006498

08000380 <SystemClock_Config>:
}

/* System Clock Configuration */
void SystemClock_Config(void)
{
 8000380:	b590      	push	{r4, r7, lr}
 8000382:	b093      	sub	sp, #76	; 0x4c
 8000384:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000386:	2414      	movs	r4, #20
 8000388:	193b      	adds	r3, r7, r4
 800038a:	0018      	movs	r0, r3
 800038c:	2334      	movs	r3, #52	; 0x34
 800038e:	001a      	movs	r2, r3
 8000390:	2100      	movs	r1, #0
 8000392:	f005 fbd6 	bl	8005b42 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	0018      	movs	r0, r3
 800039a:	2310      	movs	r3, #16
 800039c:	001a      	movs	r2, r3
 800039e:	2100      	movs	r1, #0
 80003a0:	f005 fbcf 	bl	8005b42 <memset>

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003a4:	193b      	adds	r3, r7, r4
 80003a6:	2201      	movs	r2, #1
 80003a8:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003aa:	193b      	adds	r3, r7, r4
 80003ac:	2201      	movs	r2, #1
 80003ae:	605a      	str	r2, [r3, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003b0:	193b      	adds	r3, r7, r4
 80003b2:	2200      	movs	r2, #0
 80003b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b6:	193b      	adds	r3, r7, r4
 80003b8:	0018      	movs	r0, r3
 80003ba:	f000 ff0b 	bl	80011d4 <HAL_RCC_OscConfig>
 80003be:	1e03      	subs	r3, r0, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0x46>
    {
        Error_Handler();
 80003c2:	f000 fab3 	bl	800092c <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2207      	movs	r2, #7
 80003ca:	601a      	str	r2, [r3, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2201      	movs	r2, #1
 80003d0:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2100      	movs	r1, #0
 80003e2:	0018      	movs	r0, r3
 80003e4:	f001 fa7c 	bl	80018e0 <HAL_RCC_ClockConfig>
 80003e8:	1e03      	subs	r3, r0, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0x70>
    {
        Error_Handler();
 80003ec:	f000 fa9e 	bl	800092c <Error_Handler>
    }
}
 80003f0:	46c0      	nop			; (mov r8, r8)
 80003f2:	46bd      	mov	sp, r7
 80003f4:	b013      	add	sp, #76	; 0x4c
 80003f6:	bd90      	pop	{r4, r7, pc}

080003f8 <MX_USART1_UART_Init>:

/* USART1 UART Initialization */
static void MX_USART1_UART_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 80003fc:	4b17      	ldr	r3, [pc, #92]	; (800045c <MX_USART1_UART_Init+0x64>)
 80003fe:	4a18      	ldr	r2, [pc, #96]	; (8000460 <MX_USART1_UART_Init+0x68>)
 8000400:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8000402:	4b16      	ldr	r3, [pc, #88]	; (800045c <MX_USART1_UART_Init+0x64>)
 8000404:	22e1      	movs	r2, #225	; 0xe1
 8000406:	0252      	lsls	r2, r2, #9
 8000408:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800040a:	4b14      	ldr	r3, [pc, #80]	; (800045c <MX_USART1_UART_Init+0x64>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <MX_USART1_UART_Init+0x64>)
 8000412:	2200      	movs	r2, #0
 8000414:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000416:	4b11      	ldr	r3, [pc, #68]	; (800045c <MX_USART1_UART_Init+0x64>)
 8000418:	2200      	movs	r2, #0
 800041a:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <MX_USART1_UART_Init+0x64>)
 800041e:	220c      	movs	r2, #12
 8000420:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <MX_USART1_UART_Init+0x64>)
 8000424:	2200      	movs	r2, #0
 8000426:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <MX_USART1_UART_Init+0x64>)
 800042a:	2200      	movs	r2, #0
 800042c:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <MX_USART1_UART_Init+0x64>)
 8000430:	2200      	movs	r2, #0
 8000432:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <MX_USART1_UART_Init+0x64>)
 8000436:	2200      	movs	r2, #0
 8000438:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK)
 800043a:	4b08      	ldr	r3, [pc, #32]	; (800045c <MX_USART1_UART_Init+0x64>)
 800043c:	0018      	movs	r0, r3
 800043e:	f001 fbbb 	bl	8001bb8 <HAL_UART_Init>
 8000442:	1e03      	subs	r3, r0, #0
 8000444:	d001      	beq.n	800044a <MX_USART1_UART_Init+0x52>
    {
        Error_Handler();
 8000446:	f000 fa71 	bl	800092c <Error_Handler>
    }

    /* Start UART receive interrupt */
    HAL_UART_Receive_IT(&huart1, &rxCaracter, 1);
 800044a:	4906      	ldr	r1, [pc, #24]	; (8000464 <MX_USART1_UART_Init+0x6c>)
 800044c:	4b03      	ldr	r3, [pc, #12]	; (800045c <MX_USART1_UART_Init+0x64>)
 800044e:	2201      	movs	r2, #1
 8000450:	0018      	movs	r0, r3
 8000452:	f001 fd15 	bl	8001e80 <HAL_UART_Receive_IT>
}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	200001f8 	.word	0x200001f8
 8000460:	40013800 	.word	0x40013800
 8000464:	200002fd 	.word	0x200002fd

08000468 <MX_GPIO_Init>:

/* GPIO Initialization */
static void MX_GPIO_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800046e:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <MX_GPIO_Init+0x60>)
 8000470:	695a      	ldr	r2, [r3, #20]
 8000472:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <MX_GPIO_Init+0x60>)
 8000474:	2180      	movs	r1, #128	; 0x80
 8000476:	0289      	lsls	r1, r1, #10
 8000478:	430a      	orrs	r2, r1
 800047a:	615a      	str	r2, [r3, #20]
 800047c:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <MX_GPIO_Init+0x60>)
 800047e:	695a      	ldr	r2, [r3, #20]
 8000480:	2380      	movs	r3, #128	; 0x80
 8000482:	029b      	lsls	r3, r3, #10
 8000484:	4013      	ands	r3, r2
 8000486:	603b      	str	r3, [r7, #0]
 8000488:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	0018      	movs	r0, r3
 800048e:	2314      	movs	r3, #20
 8000490:	001a      	movs	r2, r3
 8000492:	2100      	movs	r1, #0
 8000494:	f005 fb55 	bl	8005b42 <memset>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2220      	movs	r2, #32
 800049c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2201      	movs	r2, #1
 80004a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2200      	movs	r2, #0
 80004ae:	60da      	str	r2, [r3, #12]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b0:	1d3a      	adds	r2, r7, #4
 80004b2:	2390      	movs	r3, #144	; 0x90
 80004b4:	05db      	lsls	r3, r3, #23
 80004b6:	0011      	movs	r1, r2
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 fcd9 	bl	8000e70 <HAL_GPIO_Init>
}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	b006      	add	sp, #24
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	40021000 	.word	0x40021000

080004cc <HAL_UART_RxCpltCallback>:

/* UART receive interrupt callback */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b087      	sub	sp, #28
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a1e      	ldr	r2, [pc, #120]	; (8000554 <HAL_UART_RxCpltCallback+0x88>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d136      	bne.n	800054c <HAL_UART_RxCpltCallback+0x80>
    {
        BaseType_t xHigherPriorityTaskWoken ;

        // Gelen veriyi tamponda sakla
        command_buffer[command_length++] = rxCaracter;
 80004de:	4b1e      	ldr	r3, [pc, #120]	; (8000558 <HAL_UART_RxCpltCallback+0x8c>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	1c5a      	adds	r2, r3, #1
 80004e4:	b2d1      	uxtb	r1, r2
 80004e6:	4a1c      	ldr	r2, [pc, #112]	; (8000558 <HAL_UART_RxCpltCallback+0x8c>)
 80004e8:	7011      	strb	r1, [r2, #0]
 80004ea:	001a      	movs	r2, r3
 80004ec:	4b1b      	ldr	r3, [pc, #108]	; (800055c <HAL_UART_RxCpltCallback+0x90>)
 80004ee:	7819      	ldrb	r1, [r3, #0]
 80004f0:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <HAL_UART_RxCpltCallback+0x94>)
 80004f2:	5499      	strb	r1, [r3, r2]

        // Belirli uzunluğa ulaştığında görevi bildir
        if(rxCaracter) // Enter tuşuna basıldığında komut sonlanır
 80004f4:	4b19      	ldr	r3, [pc, #100]	; (800055c <HAL_UART_RxCpltCallback+0x90>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d002      	beq.n	8000502 <HAL_UART_RxCpltCallback+0x36>
        {
             // Sonlandırma karakterini ekle
            command_length = 0;
 80004fc:	4b16      	ldr	r3, [pc, #88]	; (8000558 <HAL_UART_RxCpltCallback+0x8c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]
          //  xTaskNotify(task1MenuHandle,0x00,eNoAction);
           // xTaskNotify(task2CommandHandle,0x00,eNoAction);
        }

        // Tekrar alım işlemini başlat
        HAL_UART_Receive_IT(huart, &rxCaracter, 1);
 8000502:	4916      	ldr	r1, [pc, #88]	; (800055c <HAL_UART_RxCpltCallback+0x90>)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2201      	movs	r2, #1
 8000508:	0018      	movs	r0, r3
 800050a:	f001 fcb9 	bl	8001e80 <HAL_UART_Receive_IT>

        if((xTaskNotifyFromISR(task1MenuHandle, 0, eNoAction, &xHigherPriorityTaskWoken)==pdTRUE ) && (xTaskNotifyFromISR(task2CommandHandle, 0, eNoAction, &xHigherPriorityTaskWoken)==pdTRUE))
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <HAL_UART_RxCpltCallback+0x98>)
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	240c      	movs	r4, #12
 8000514:	193b      	adds	r3, r7, r4
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	2300      	movs	r3, #0
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2300      	movs	r3, #0
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	f004 fbf1 	bl	8004d08 <xTaskGenericNotifyFromISR>
 8000526:	0003      	movs	r3, r0
 8000528:	2b01      	cmp	r3, #1
 800052a:	d10f      	bne.n	800054c <HAL_UART_RxCpltCallback+0x80>
 800052c:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <HAL_UART_RxCpltCallback+0x9c>)
 800052e:	6818      	ldr	r0, [r3, #0]
 8000530:	193b      	adds	r3, r7, r4
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	2300      	movs	r3, #0
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	2300      	movs	r3, #0
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	f004 fbe3 	bl	8004d08 <xTaskGenericNotifyFromISR>
 8000542:	0003      	movs	r3, r0
 8000544:	2b01      	cmp	r3, #1
 8000546:	d101      	bne.n	800054c <HAL_UART_RxCpltCallback+0x80>
        {

        	//xTaskNotifyFromISR -> pdTRUE dönerse hazırda bekleyen bir görev var anlamındadır
           taskYIELD(); // o an hangi görev çalışıyorsa onu uyut dedik,yani görevi değiştiririz manuel olarak
 8000548:	f005 f87a 	bl	8005640 <vPortYield>
        }
    }
}
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	b005      	add	sp, #20
 8000552:	bd90      	pop	{r4, r7, pc}
 8000554:	40013800 	.word	0x40013800
 8000558:	200002fc 	.word	0x200002fc
 800055c:	200002fd 	.word	0x200002fd
 8000560:	200002e8 	.word	0x200002e8
 8000564:	20000300 	.word	0x20000300
 8000568:	20000304 	.word	0x20000304

0800056c <Task1_Menu_Display_Handler>:

/* Task function implementations */
void Task1_Menu_Display_Handler(void *params)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af02      	add	r7, sp, #8
 8000572:	6078      	str	r0, [r7, #4]
    // UART kuyruğuna veri göndericeğim
    // her bildirim geldiğinde kuyruğa tekrar mesaj yazması lazım

    char *rxData = menuDisplay;
 8000574:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <Task1_Menu_Display_Handler+0x34>)
 8000576:	60fb      	str	r3, [r7, #12]

    while (1)
    {
    	xQueueSend(Uart_Write_Queue, &rxData, portMAX_DELAY); // Uart_Write_Queue bu kuyruğa veri gödnerceğiz
 8000578:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <Task1_Menu_Display_Handler+0x38>)
 800057a:	6818      	ldr	r0, [r3, #0]
 800057c:	2301      	movs	r3, #1
 800057e:	425a      	negs	r2, r3
 8000580:	230c      	movs	r3, #12
 8000582:	18f9      	adds	r1, r7, r3
 8000584:	2300      	movs	r3, #0
 8000586:	f003 f8c2 	bl	800370e <xQueueGenericSend>

        xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800058a:	2301      	movs	r3, #1
 800058c:	425b      	negs	r3, r3
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2300      	movs	r3, #0
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	2000      	movs	r0, #0
 8000598:	f004 fb38 	bl	8004c0c <xTaskGenericNotifyWait>
    	xQueueSend(Uart_Write_Queue, &rxData, portMAX_DELAY); // Uart_Write_Queue bu kuyruğa veri gödnerceğiz
 800059c:	e7ec      	b.n	8000578 <Task1_Menu_Display_Handler+0xc>
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	20000000 	.word	0x20000000
 80005a4:	20000310 	.word	0x20000310

080005a8 <Task2_Command_Handling_Handler>:
    }
}

void Task2_Command_Handling_Handler(void *params)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b087      	sub	sp, #28
 80005ac:	af02      	add	r7, sp, #8
 80005ae:	6078      	str	r0, [r7, #4]

	APP_COMMAND_t *appTxCmd;

    while (1)
    {
        xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80005b0:	2301      	movs	r3, #1
 80005b2:	425b      	negs	r3, r3
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	2200      	movs	r2, #0
 80005ba:	2100      	movs	r1, #0
 80005bc:	2000      	movs	r0, #0
 80005be:	f004 fb25 	bl	8004c0c <xTaskGenericNotifyWait>
        appTxCmd = (APP_COMMAND_t*) pvPortMalloc(sizeof(APP_COMMAND_t)); // HEAP DE alan ayırdık
 80005c2:	200b      	movs	r0, #11
 80005c4:	f005 f8e4 	bl	8005790 <pvPortMalloc>
 80005c8:	0003      	movs	r3, r0
 80005ca:	60fb      	str	r3, [r7, #12]

        taskENTER_CRITICAL(); // interruptları kapatır,görevler arsındaki rekabeti durdurur
 80005cc:	f005 f848 	bl	8005660 <vPortEnterCritical>

        commandCode = getCommandCode(command_buffer);
 80005d0:	4b10      	ldr	r3, [pc, #64]	; (8000614 <Task2_Command_Handling_Handler+0x6c>)
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 f994 	bl	8000900 <getCommandCode>
 80005d8:	0003      	movs	r3, r0
 80005da:	001a      	movs	r2, r3
 80005dc:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <Task2_Command_Handling_Handler+0x70>)
 80005de:	701a      	strb	r2, [r3, #0]


        appTxCmd->COMMAND_NUM = commandCode;
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <Task2_Command_Handling_Handler+0x70>)
 80005e2:	781a      	ldrb	r2, [r3, #0]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	701a      	strb	r2, [r3, #0]
        uint8_t command_code_copy = appTxCmd->COMMAND_NUM;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	781a      	ldrb	r2, [r3, #0]
 80005ec:	240b      	movs	r4, #11
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	701a      	strb	r2, [r3, #0]
        getArguments(appTxCmd->COMMAND_ARGS);
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	3301      	adds	r3, #1
 80005f6:	0018      	movs	r0, r3
 80005f8:	f000 f98e 	bl	8000918 <getArguments>


        taskEXIT_CRITICAL(); // interrupt fonksityonalrını tekrar aktif hale getirir
 80005fc:	f005 f842 	bl	8005684 <vPortExitCritical>
        xQueueSend(Command_Queue, &command_code_copy, portMAX_DELAY);
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <Task2_Command_Handling_Handler+0x74>)
 8000602:	6818      	ldr	r0, [r3, #0]
 8000604:	2301      	movs	r3, #1
 8000606:	425a      	negs	r2, r3
 8000608:	1939      	adds	r1, r7, r4
 800060a:	2300      	movs	r3, #0
 800060c:	f003 f87f 	bl	800370e <xQueueGenericSend>
    {
 8000610:	e7ce      	b.n	80005b0 <Task2_Command_Handling_Handler+0x8>
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	200002e8 	.word	0x200002e8
 8000618:	200002e4 	.word	0x200002e4
 800061c:	20000314 	.word	0x20000314

08000620 <Task3_Command_Process_Handler>:

    }
}

void Task3_Command_Process_Handler(void *params)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b091      	sub	sp, #68	; 0x44
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	//APP_COMMAND_t *appRxCmd;
	uint8_t received_code;
	char taskStateMessage[50];

	uint32_t toggleTime= pdMS_TO_TICKS(500);
 8000628:	23fa      	movs	r3, #250	; 0xfa
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	63fb      	str	r3, [r7, #60]	; 0x3c

    while (1)
    {
    	control=2;
 800062e:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <Task3_Command_Process_Handler+0x94>)
 8000630:	2202      	movs	r2, #2
 8000632:	701a      	strb	r2, [r3, #0]
    	xQueueReceive(Command_Queue, &received_code, portMAX_DELAY);
 8000634:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <Task3_Command_Process_Handler+0x98>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2201      	movs	r2, #1
 800063a:	4252      	negs	r2, r2
 800063c:	243b      	movs	r4, #59	; 0x3b
 800063e:	1939      	adds	r1, r7, r4
 8000640:	0018      	movs	r0, r3
 8000642:	f003 f928 	bl	8003896 <xQueueReceive>

    	if(received_code==LED_ON)
 8000646:	193b      	adds	r3, r7, r4
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d102      	bne.n	8000654 <Task3_Command_Process_Handler+0x34>
    	{
    		LED_ON_Func();
 800064e:	f000 f87b 	bl	8000748 <LED_ON_Func>
 8000652:	e7ec      	b.n	800062e <Task3_Command_Process_Handler+0xe>
    	}
    	else if(received_code==LED_OFF)
 8000654:	233b      	movs	r3, #59	; 0x3b
 8000656:	18fb      	adds	r3, r7, r3
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b02      	cmp	r3, #2
 800065c:	d102      	bne.n	8000664 <Task3_Command_Process_Handler+0x44>
    	{
    		LED_OFF_Func();
 800065e:	f000 f87f 	bl	8000760 <LED_OFF_Func>
 8000662:	e7e4      	b.n	800062e <Task3_Command_Process_Handler+0xe>
    	}
    	else if(received_code==LED_TOGGLE_ON)
 8000664:	233b      	movs	r3, #59	; 0x3b
 8000666:	18fb      	adds	r3, r7, r3
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b03      	cmp	r3, #3
 800066c:	d104      	bne.n	8000678 <Task3_Command_Process_Handler+0x58>
    	{
    		LED_TOGGLE_ON_Func(toggleTime);
 800066e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000670:	0018      	movs	r0, r3
 8000672:	f000 f881 	bl	8000778 <LED_TOGGLE_ON_Func>
 8000676:	e7da      	b.n	800062e <Task3_Command_Process_Handler+0xe>
    	}
    	else if(received_code==LED_TOGGLE_OFF)
 8000678:	233b      	movs	r3, #59	; 0x3b
 800067a:	18fb      	adds	r3, r7, r3
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b04      	cmp	r3, #4
 8000680:	d102      	bne.n	8000688 <Task3_Command_Process_Handler+0x68>
    	{
    		LED_TOGGLE_OFF_Func();
 8000682:	f000 f895 	bl	80007b0 <LED_TOGGLE_OFF_Func>
 8000686:	e7d2      	b.n	800062e <Task3_Command_Process_Handler+0xe>
    	}
    	else if(received_code==LED_STATUS)
 8000688:	233b      	movs	r3, #59	; 0x3b
 800068a:	18fb      	adds	r3, r7, r3
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b05      	cmp	r3, #5
 8000690:	d105      	bne.n	800069e <Task3_Command_Process_Handler+0x7e>
    	{
    		LED_STATUS_Func(taskStateMessage);
 8000692:	2308      	movs	r3, #8
 8000694:	18fb      	adds	r3, r7, r3
 8000696:	0018      	movs	r0, r3
 8000698:	f000 f896 	bl	80007c8 <LED_STATUS_Func>
 800069c:	e7c7      	b.n	800062e <Task3_Command_Process_Handler+0xe>
    	}
    	else if(received_code==EXIT_APP)
 800069e:	233b      	movs	r3, #59	; 0x3b
 80006a0:	18fb      	adds	r3, r7, r3
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b06      	cmp	r3, #6
 80006a6:	d102      	bne.n	80006ae <Task3_Command_Process_Handler+0x8e>
    	{
    		EXIT_APP_Func();
 80006a8:	f000 f8ee 	bl	8000888 <EXIT_APP_Func>
 80006ac:	e7bf      	b.n	800062e <Task3_Command_Process_Handler+0xe>
    	}
    	else
    	{
    		ERROR_MESSAGE();
 80006ae:	f000 f8d5 	bl	800085c <ERROR_MESSAGE>
    	control=2;
 80006b2:	e7bc      	b.n	800062e <Task3_Command_Process_Handler+0xe>
 80006b4:	200002e5 	.word	0x200002e5
 80006b8:	20000314 	.word	0x20000314

080006bc <Task4_Uart_Write_Handler>:
    }
    control=0;
}

void Task4_Uart_Write_Handler(void *params)
{
 80006bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
    char *txData = NULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]

    while (1)
    {
        // Kuyruktan veri alın
        xQueueReceive(Uart_Write_Queue, &txData, portMAX_DELAY);
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <Task4_Uart_Write_Handler+0x80>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2201      	movs	r2, #1
 80006ce:	4252      	negs	r2, r2
 80006d0:	2108      	movs	r1, #8
 80006d2:	1879      	adds	r1, r7, r1
 80006d4:	0018      	movs	r0, r3
 80006d6:	f003 f8de 	bl	8003896 <xQueueReceive>

        // Veriyi UART ile gönder
        if(txData != NULL)
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d0f3      	beq.n	80006c8 <Task4_Uart_Write_Handler+0xc>
        {
            HAL_StatusTypeDef result;
            do {
                result = HAL_UART_Transmit_IT(&huart1, (uint8_t *)txData, strlen(txData));
 80006e0:	68bd      	ldr	r5, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	0018      	movs	r0, r3
 80006e6:	f7ff fd0f 	bl	8000108 <strlen>
 80006ea:	0003      	movs	r3, r0
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	260f      	movs	r6, #15
 80006f0:	19bc      	adds	r4, r7, r6
 80006f2:	4b13      	ldr	r3, [pc, #76]	; (8000740 <Task4_Uart_Write_Handler+0x84>)
 80006f4:	0029      	movs	r1, r5
 80006f6:	0018      	movs	r0, r3
 80006f8:	f001 fb52 	bl	8001da0 <HAL_UART_Transmit_IT>
 80006fc:	0003      	movs	r3, r0
 80006fe:	7023      	strb	r3, [r4, #0]
                if (result == HAL_BUSY) {
 8000700:	19bb      	adds	r3, r7, r6
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b02      	cmp	r3, #2
 8000706:	d102      	bne.n	800070e <Task4_Uart_Write_Handler+0x52>
                    // UART meşgulse biraz bekleyin ve tekrar deneyin
                    vTaskDelay(pdMS_TO_TICKS(10));
 8000708:	200a      	movs	r0, #10
 800070a:	f003 fcd3 	bl	80040b4 <vTaskDelay>
                }
            } while(result == HAL_BUSY);
 800070e:	220f      	movs	r2, #15
 8000710:	18bb      	adds	r3, r7, r2
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b02      	cmp	r3, #2
 8000716:	d0e3      	beq.n	80006e0 <Task4_Uart_Write_Handler+0x24>

            if (result != HAL_OK) {
 8000718:	18bb      	adds	r3, r7, r2
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d0d3      	beq.n	80006c8 <Task4_Uart_Write_Handler+0xc>
                //sprintf((char*)myMessage, "UART Gönderim Hatası: %d\r\n", result);
                HAL_UART_Transmit(&huart1, (uint8_t *)myMessage, strlen((char*)myMessage), HAL_MAX_DELAY);
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <Task4_Uart_Write_Handler+0x88>)
 8000722:	0018      	movs	r0, r3
 8000724:	f7ff fcf0 	bl	8000108 <strlen>
 8000728:	0003      	movs	r3, r0
 800072a:	b29a      	uxth	r2, r3
 800072c:	2301      	movs	r3, #1
 800072e:	425b      	negs	r3, r3
 8000730:	4904      	ldr	r1, [pc, #16]	; (8000744 <Task4_Uart_Write_Handler+0x88>)
 8000732:	4803      	ldr	r0, [pc, #12]	; (8000740 <Task4_Uart_Write_Handler+0x84>)
 8000734:	f001 fa94 	bl	8001c60 <HAL_UART_Transmit>
        xQueueReceive(Uart_Write_Queue, &txData, portMAX_DELAY);
 8000738:	e7c6      	b.n	80006c8 <Task4_Uart_Write_Handler+0xc>
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	20000310 	.word	0x20000310
 8000740:	200001f8 	.word	0x200001f8
 8000744:	20000280 	.word	0x20000280

08000748 <LED_ON_Func>:
        }
    }
}

void LED_ON_Func(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800074c:	2390      	movs	r3, #144	; 0x90
 800074e:	05db      	lsls	r3, r3, #23
 8000750:	2201      	movs	r2, #1
 8000752:	2120      	movs	r1, #32
 8000754:	0018      	movs	r0, r3
 8000756:	f000 fd20 	bl	800119a <HAL_GPIO_WritePin>
}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <LED_OFF_Func>:
void LED_OFF_Func(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000764:	2390      	movs	r3, #144	; 0x90
 8000766:	05db      	lsls	r3, r3, #23
 8000768:	2200      	movs	r2, #0
 800076a:	2120      	movs	r1, #32
 800076c:	0018      	movs	r0, r3
 800076e:	f000 fd14 	bl	800119a <HAL_GPIO_WritePin>
}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <LED_TOGGLE_ON_Func>:
{
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
}

void LED_TOGGLE_ON_Func(uint32_t duration)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]



		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000780:	2390      	movs	r3, #144	; 0x90
 8000782:	05db      	lsls	r3, r3, #23
 8000784:	2201      	movs	r2, #1
 8000786:	2120      	movs	r1, #32
 8000788:	0018      	movs	r0, r3
 800078a:	f000 fd06 	bl	800119a <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(250));
 800078e:	20fa      	movs	r0, #250	; 0xfa
 8000790:	f003 fc90 	bl	80040b4 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000794:	2390      	movs	r3, #144	; 0x90
 8000796:	05db      	lsls	r3, r3, #23
 8000798:	2200      	movs	r2, #0
 800079a:	2120      	movs	r1, #32
 800079c:	0018      	movs	r0, r3
 800079e:	f000 fcfc 	bl	800119a <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(250));
 80007a2:	20fa      	movs	r0, #250	; 0xfa
 80007a4:	f003 fc86 	bl	80040b4 <vTaskDelay>
	  	  komut kuyruğuna eklenmesi için bekleyebileceğiniz maksimum süreyi belirtir.
	 	 portMAX_DELAY değerini kullanarak, zamanlayıcı komut kuyruğunda
	 	 	 	 	 	 yer açılana kadar bekleyebilirsiniz (bu, zaman aşımlarını devre dışı bırakır)
	 */

}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b002      	add	sp, #8
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <LED_TOGGLE_OFF_Func>:
void LED_TOGGLE_OFF_Func(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80007b4:	2390      	movs	r3, #144	; 0x90
 80007b6:	05db      	lsls	r3, r3, #23
 80007b8:	2200      	movs	r2, #0
 80007ba:	2120      	movs	r1, #32
 80007bc:	0018      	movs	r0, r3
 80007be:	f000 fcec 	bl	800119a <HAL_GPIO_WritePin>
}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <LED_STATUS_Func>:

void LED_STATUS_Func(char *ledStateMessage)
{
 80007c8:	b5b0      	push	{r4, r5, r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
    // Get the state of the LED
    GPIO_PinState state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 80007d0:	2517      	movs	r5, #23
 80007d2:	197c      	adds	r4, r7, r5
 80007d4:	2390      	movs	r3, #144	; 0x90
 80007d6:	05db      	lsls	r3, r3, #23
 80007d8:	2120      	movs	r1, #32
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 fcc0 	bl	8001160 <HAL_GPIO_ReadPin>
 80007e0:	0003      	movs	r3, r0
 80007e2:	7023      	strb	r3, [r4, #0]

    // Manually construct the message string
    char *messagePrefix = " Led is status: ";
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <LED_STATUS_Func+0x84>)
 80007e6:	613b      	str	r3, [r7, #16]
    size_t prefixLength = strlen(messagePrefix);
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	0018      	movs	r0, r3
 80007ec:	f7ff fc8c 	bl	8000108 <strlen>
 80007f0:	0003      	movs	r3, r0
 80007f2:	60fb      	str	r3, [r7, #12]

    // Copy the prefix to the message buffer
    strcpy(ledStateMessage, messagePrefix);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	693a      	ldr	r2, [r7, #16]
 80007f8:	0011      	movs	r1, r2
 80007fa:	0018      	movs	r0, r3
 80007fc:	f005 f9ca 	bl	8005b94 <strcpy>

    // Append the LED state to the message buffer
    if (state == GPIO_PIN_SET)
 8000800:	197b      	adds	r3, r7, r5
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d10a      	bne.n	800081e <LED_STATUS_Func+0x56>
    {
        strcpy(ledStateMessage + prefixLength, "1\r\n");
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	18d2      	adds	r2, r2, r3
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <LED_STATUS_Func+0x88>)
 8000810:	0010      	movs	r0, r2
 8000812:	0019      	movs	r1, r3
 8000814:	2304      	movs	r3, #4
 8000816:	001a      	movs	r2, r3
 8000818:	f005 f98a 	bl	8005b30 <memcpy>
 800081c:	e009      	b.n	8000832 <LED_STATUS_Func+0x6a>
    }
    else
    {
        strcpy(ledStateMessage + prefixLength, "0\r\n");
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	18d2      	adds	r2, r2, r3
 8000824:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <LED_STATUS_Func+0x8c>)
 8000826:	0010      	movs	r0, r2
 8000828:	0019      	movs	r1, r3
 800082a:	2304      	movs	r3, #4
 800082c:	001a      	movs	r2, r3
 800082e:	f005 f97f 	bl	8005b30 <memcpy>
    }


    xQueueSend(Uart_Write_Queue,&ledStateMessage,portMAX_DELAY);
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <LED_STATUS_Func+0x90>)
 8000834:	6818      	ldr	r0, [r3, #0]
 8000836:	2301      	movs	r3, #1
 8000838:	425a      	negs	r2, r3
 800083a:	1d39      	adds	r1, r7, #4
 800083c:	2300      	movs	r3, #0
 800083e:	f002 ff66 	bl	800370e <xQueueGenericSend>
 * 	ama kuruğa veri kouyduğumda task4 de bu kuyruktaki verileri okuyoruz ve daha güzel oluyor
 *
 *
 *
 * */
}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	b006      	add	sp, #24
 8000848:	bdb0      	pop	{r4, r5, r7, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	080064b4 	.word	0x080064b4
 8000850:	080064c8 	.word	0x080064c8
 8000854:	080064cc 	.word	0x080064cc
 8000858:	20000310 	.word	0x20000310

0800085c <ERROR_MESSAGE>:
void ERROR_MESSAGE()
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
	 char *errorMessage="\r\nWrong value...Please try again!\r\n";
 8000862:	4b07      	ldr	r3, [pc, #28]	; (8000880 <ERROR_MESSAGE+0x24>)
 8000864:	607b      	str	r3, [r7, #4]
	 xQueueSend(Uart_Write_Queue,&errorMessage,portMAX_DELAY);
 8000866:	4b07      	ldr	r3, [pc, #28]	; (8000884 <ERROR_MESSAGE+0x28>)
 8000868:	6818      	ldr	r0, [r3, #0]
 800086a:	2301      	movs	r3, #1
 800086c:	425a      	negs	r2, r3
 800086e:	1d39      	adds	r1, r7, #4
 8000870:	2300      	movs	r3, #0
 8000872:	f002 ff4c 	bl	800370e <xQueueGenericSend>
}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b002      	add	sp, #8
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	080064d0 	.word	0x080064d0
 8000884:	20000310 	.word	0x20000310

08000888 <EXIT_APP_Func>:



void EXIT_APP_Func(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
	char *exitMessage= "\r\nThe application exist...\r\n";
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <EXIT_APP_Func+0x60>)
 8000890:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit_IT(&huart1, (uint8_t *)exitMessage, strlen(exitMessage));
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	0018      	movs	r0, r3
 8000896:	f7ff fc37 	bl	8000108 <strlen>
 800089a:	0003      	movs	r3, r0
 800089c:	b29a      	uxth	r2, r3
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <EXIT_APP_Func+0x64>)
 80008a2:	0018      	movs	r0, r3
 80008a4:	f001 fa7c 	bl	8001da0 <HAL_UART_Transmit_IT>
	//önce bi görevleri sil
	vTaskDelete(task1MenuHandle);
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <EXIT_APP_Func+0x68>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	0018      	movs	r0, r3
 80008ae:	f003 fb99 	bl	8003fe4 <vTaskDelete>
	vTaskDelete(task2CommandHandle);
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <EXIT_APP_Func+0x6c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	0018      	movs	r0, r3
 80008b8:	f003 fb94 	bl	8003fe4 <vTaskDelete>
	vTaskDelete(task3CommandProcessHandle);
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <EXIT_APP_Func+0x70>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	0018      	movs	r0, r3
 80008c2:	f003 fb8f 	bl	8003fe4 <vTaskDelete>
	vTaskDelete(task4UartWriteHandle);
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <EXIT_APP_Func+0x74>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	0018      	movs	r0, r3
 80008cc:	f003 fb8a 	bl	8003fe4 <vTaskDelete>


	// Interrupt ı disable et
	__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <EXIT_APP_Func+0x64>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <EXIT_APP_Func+0x64>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2120      	movs	r1, #32
 80008dc:	438a      	bics	r2, r1
 80008de:	601a      	str	r2, [r3, #0]
	 }
	 FONKSİYONINU OLUŞTUR
	 */


}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b002      	add	sp, #8
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	080064f4 	.word	0x080064f4
 80008ec:	200001f8 	.word	0x200001f8
 80008f0:	20000300 	.word	0x20000300
 80008f4:	20000304 	.word	0x20000304
 80008f8:	20000308 	.word	0x20000308
 80008fc:	2000030c 	.word	0x2000030c

08000900 <getCommandCode>:



uint8_t getCommandCode(uint8_t *buffer)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]

	return buffer[0] - 48 ;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	3b30      	subs	r3, #48	; 0x30
 800090e:	b2db      	uxtb	r3, r3
}
 8000910:	0018      	movs	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	b002      	add	sp, #8
 8000916:	bd80      	pop	{r7, pc}

08000918 <getArguments>:
uint8_t getArguments(uint8_t *buffer)
{ // şu an bu fonks kullanımıyoruz
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

	return buffer[0] ;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	781b      	ldrb	r3, [r3, #0]

}
 8000924:	0018      	movs	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	b002      	add	sp, #8
 800092a:	bd80      	pop	{r7, pc}

0800092c <Error_Handler>:
/* Error Handler */
void Error_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
    /* Error handler implementation */
    while (1);
 8000930:	e7fe      	b.n	8000930 <Error_Handler+0x4>
	...

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <HAL_MspInit+0x44>)
 800093c:	699a      	ldr	r2, [r3, #24]
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <HAL_MspInit+0x44>)
 8000940:	2101      	movs	r1, #1
 8000942:	430a      	orrs	r2, r1
 8000944:	619a      	str	r2, [r3, #24]
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_MspInit+0x44>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	2201      	movs	r2, #1
 800094c:	4013      	ands	r3, r2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_MspInit+0x44>)
 8000954:	69da      	ldr	r2, [r3, #28]
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_MspInit+0x44>)
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	0549      	lsls	r1, r1, #21
 800095c:	430a      	orrs	r2, r1
 800095e:	61da      	str	r2, [r3, #28]
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_MspInit+0x44>)
 8000962:	69da      	ldr	r2, [r3, #28]
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	055b      	lsls	r3, r3, #21
 8000968:	4013      	ands	r3, r2
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b002      	add	sp, #8
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	40021000 	.word	0x40021000

0800097c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b08b      	sub	sp, #44	; 0x2c
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	2414      	movs	r4, #20
 8000986:	193b      	adds	r3, r7, r4
 8000988:	0018      	movs	r0, r3
 800098a:	2314      	movs	r3, #20
 800098c:	001a      	movs	r2, r3
 800098e:	2100      	movs	r1, #0
 8000990:	f005 f8d7 	bl	8005b42 <memset>
  if(huart->Instance==USART1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a21      	ldr	r2, [pc, #132]	; (8000a20 <HAL_UART_MspInit+0xa4>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d13b      	bne.n	8000a16 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800099e:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <HAL_UART_MspInit+0xa8>)
 80009a0:	699a      	ldr	r2, [r3, #24]
 80009a2:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <HAL_UART_MspInit+0xa8>)
 80009a4:	2180      	movs	r1, #128	; 0x80
 80009a6:	01c9      	lsls	r1, r1, #7
 80009a8:	430a      	orrs	r2, r1
 80009aa:	619a      	str	r2, [r3, #24]
 80009ac:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <HAL_UART_MspInit+0xa8>)
 80009ae:	699a      	ldr	r2, [r3, #24]
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	01db      	lsls	r3, r3, #7
 80009b4:	4013      	ands	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <HAL_UART_MspInit+0xa8>)
 80009bc:	695a      	ldr	r2, [r3, #20]
 80009be:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <HAL_UART_MspInit+0xa8>)
 80009c0:	2180      	movs	r1, #128	; 0x80
 80009c2:	0289      	lsls	r1, r1, #10
 80009c4:	430a      	orrs	r2, r1
 80009c6:	615a      	str	r2, [r3, #20]
 80009c8:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <HAL_UART_MspInit+0xa8>)
 80009ca:	695a      	ldr	r2, [r3, #20]
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	029b      	lsls	r3, r3, #10
 80009d0:	4013      	ands	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	22c0      	movs	r2, #192	; 0xc0
 80009da:	00d2      	lsls	r2, r2, #3
 80009dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	0021      	movs	r1, r4
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2202      	movs	r2, #2
 80009e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2203      	movs	r2, #3
 80009f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2201      	movs	r2, #1
 80009f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	187a      	adds	r2, r7, r1
 80009fa:	2390      	movs	r3, #144	; 0x90
 80009fc:	05db      	lsls	r3, r3, #23
 80009fe:	0011      	movs	r1, r2
 8000a00:	0018      	movs	r0, r3
 8000a02:	f000 fa35 	bl	8000e70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2103      	movs	r1, #3
 8000a0a:	201b      	movs	r0, #27
 8000a0c:	f000 f980 	bl	8000d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a10:	201b      	movs	r0, #27
 8000a12:	f000 f992 	bl	8000d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b00b      	add	sp, #44	; 0x2c
 8000a1c:	bd90      	pop	{r4, r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	40013800 	.word	0x40013800
 8000a24:	40021000 	.word	0x40021000

08000a28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <HardFault_Handler+0x4>
	...

08000a30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <USART1_IRQHandler+0x14>)
 8000a36:	0018      	movs	r0, r3
 8000a38:	f001 fa7a 	bl	8001f30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	200001f8 	.word	0x200001f8

08000a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a50:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <_sbrk+0x5c>)
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <_sbrk+0x60>)
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <_sbrk+0x64>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d102      	bne.n	8000a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <_sbrk+0x64>)
 8000a66:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <_sbrk+0x68>)
 8000a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	18d3      	adds	r3, r2, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d207      	bcs.n	8000a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a78:	f005 f830 	bl	8005adc <__errno>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	220c      	movs	r2, #12
 8000a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	425b      	negs	r3, r3
 8000a86:	e009      	b.n	8000a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <_sbrk+0x64>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	18d2      	adds	r2, r2, r3
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <_sbrk+0x64>)
 8000a98:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
}
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b006      	add	sp, #24
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20004000 	.word	0x20004000
 8000aa8:	00000400 	.word	0x00000400
 8000aac:	20000318 	.word	0x20000318
 8000ab0:	20001e30 	.word	0x20001e30

08000ab4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ac2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ac4:	f7ff fff6 	bl	8000ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac8:	480c      	ldr	r0, [pc, #48]	; (8000afc <LoopForever+0x6>)
  ldr r1, =_edata
 8000aca:	490d      	ldr	r1, [pc, #52]	; (8000b00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <LoopForever+0xe>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae0:	4c0a      	ldr	r4, [pc, #40]	; (8000b0c <LoopForever+0x16>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aee:	f004 fffb 	bl	8005ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af2:	f7ff fbad 	bl	8000250 <main>

08000af6 <LoopForever>:

LoopForever:
    b LoopForever
 8000af6:	e7fe      	b.n	8000af6 <LoopForever>
  ldr   r0, =_estack
 8000af8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000b04:	080065dc 	.word	0x080065dc
  ldr r2, =_sbss
 8000b08:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000b0c:	20001e30 	.word	0x20001e30

08000b10 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC1_COMP_IRQHandler>
	...

08000b14 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <HAL_Init+0x24>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_Init+0x24>)
 8000b1e:	2110      	movs	r1, #16
 8000b20:	430a      	orrs	r2, r1
 8000b22:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b24:	2000      	movs	r0, #0
 8000b26:	f000 f809 	bl	8000b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2a:	f7ff ff03 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b2e:	2300      	movs	r3, #0
}
 8000b30:	0018      	movs	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	40022000 	.word	0x40022000

08000b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_InitTick+0x5c>)
 8000b46:	681c      	ldr	r4, [r3, #0]
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <HAL_InitTick+0x60>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	0019      	movs	r1, r3
 8000b4e:	23fa      	movs	r3, #250	; 0xfa
 8000b50:	0098      	lsls	r0, r3, #2
 8000b52:	f7ff faeb 	bl	800012c <__udivsi3>
 8000b56:	0003      	movs	r3, r0
 8000b58:	0019      	movs	r1, r3
 8000b5a:	0020      	movs	r0, r4
 8000b5c:	f7ff fae6 	bl	800012c <__udivsi3>
 8000b60:	0003      	movs	r3, r0
 8000b62:	0018      	movs	r0, r3
 8000b64:	f000 f8f9 	bl	8000d5a <HAL_SYSTICK_Config>
 8000b68:	1e03      	subs	r3, r0, #0
 8000b6a:	d001      	beq.n	8000b70 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e00f      	b.n	8000b90 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	d80b      	bhi.n	8000b8e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	425b      	negs	r3, r3
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f000 f8c6 	bl	8000d10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_InitTick+0x64>)
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e000      	b.n	8000b90 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	0018      	movs	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b003      	add	sp, #12
 8000b96:	bd90      	pop	{r4, r7, pc}
 8000b98:	20000164 	.word	0x20000164
 8000b9c:	2000016c 	.word	0x2000016c
 8000ba0:	20000168 	.word	0x20000168

08000ba4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b02      	ldr	r3, [pc, #8]	; (8000bb4 <HAL_GetTick+0x10>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	0018      	movs	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	2000031c 	.word	0x2000031c

08000bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	0002      	movs	r2, r0
 8000bc0:	1dfb      	adds	r3, r7, #7
 8000bc2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	1dfb      	adds	r3, r7, #7
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b7f      	cmp	r3, #127	; 0x7f
 8000bca:	d809      	bhi.n	8000be0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	231f      	movs	r3, #31
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <__NVIC_EnableIRQ+0x30>)
 8000bd8:	2101      	movs	r1, #1
 8000bda:	4091      	lsls	r1, r2
 8000bdc:	000a      	movs	r2, r1
 8000bde:	601a      	str	r2, [r3, #0]
  }
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b002      	add	sp, #8
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	e000e100 	.word	0xe000e100

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	0002      	movs	r2, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8000c00:	d828      	bhi.n	8000c54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c02:	4a2f      	ldr	r2, [pc, #188]	; (8000cc0 <__NVIC_SetPriority+0xd4>)
 8000c04:	1dfb      	adds	r3, r7, #7
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b25b      	sxtb	r3, r3
 8000c0a:	089b      	lsrs	r3, r3, #2
 8000c0c:	33c0      	adds	r3, #192	; 0xc0
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	589b      	ldr	r3, [r3, r2]
 8000c12:	1dfa      	adds	r2, r7, #7
 8000c14:	7812      	ldrb	r2, [r2, #0]
 8000c16:	0011      	movs	r1, r2
 8000c18:	2203      	movs	r2, #3
 8000c1a:	400a      	ands	r2, r1
 8000c1c:	00d2      	lsls	r2, r2, #3
 8000c1e:	21ff      	movs	r1, #255	; 0xff
 8000c20:	4091      	lsls	r1, r2
 8000c22:	000a      	movs	r2, r1
 8000c24:	43d2      	mvns	r2, r2
 8000c26:	401a      	ands	r2, r3
 8000c28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	019b      	lsls	r3, r3, #6
 8000c2e:	22ff      	movs	r2, #255	; 0xff
 8000c30:	401a      	ands	r2, r3
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	0018      	movs	r0, r3
 8000c38:	2303      	movs	r3, #3
 8000c3a:	4003      	ands	r3, r0
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c40:	481f      	ldr	r0, [pc, #124]	; (8000cc0 <__NVIC_SetPriority+0xd4>)
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b25b      	sxtb	r3, r3
 8000c48:	089b      	lsrs	r3, r3, #2
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	33c0      	adds	r3, #192	; 0xc0
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c52:	e031      	b.n	8000cb8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c54:	4a1b      	ldr	r2, [pc, #108]	; (8000cc4 <__NVIC_SetPriority+0xd8>)
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	0019      	movs	r1, r3
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	400b      	ands	r3, r1
 8000c60:	3b08      	subs	r3, #8
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	3306      	adds	r3, #6
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	18d3      	adds	r3, r2, r3
 8000c6a:	3304      	adds	r3, #4
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	1dfa      	adds	r2, r7, #7
 8000c70:	7812      	ldrb	r2, [r2, #0]
 8000c72:	0011      	movs	r1, r2
 8000c74:	2203      	movs	r2, #3
 8000c76:	400a      	ands	r2, r1
 8000c78:	00d2      	lsls	r2, r2, #3
 8000c7a:	21ff      	movs	r1, #255	; 0xff
 8000c7c:	4091      	lsls	r1, r2
 8000c7e:	000a      	movs	r2, r1
 8000c80:	43d2      	mvns	r2, r2
 8000c82:	401a      	ands	r2, r3
 8000c84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	019b      	lsls	r3, r3, #6
 8000c8a:	22ff      	movs	r2, #255	; 0xff
 8000c8c:	401a      	ands	r2, r3
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	0018      	movs	r0, r3
 8000c94:	2303      	movs	r3, #3
 8000c96:	4003      	ands	r3, r0
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c9c:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <__NVIC_SetPriority+0xd8>)
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	001c      	movs	r4, r3
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	4023      	ands	r3, r4
 8000ca8:	3b08      	subs	r3, #8
 8000caa:	089b      	lsrs	r3, r3, #2
 8000cac:	430a      	orrs	r2, r1
 8000cae:	3306      	adds	r3, #6
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	18c3      	adds	r3, r0, r3
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	601a      	str	r2, [r3, #0]
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b003      	add	sp, #12
 8000cbe:	bd90      	pop	{r4, r7, pc}
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	1e5a      	subs	r2, r3, #1
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	045b      	lsls	r3, r3, #17
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d301      	bcc.n	8000ce0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e010      	b.n	8000d02 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <SysTick_Config+0x44>)
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	3a01      	subs	r2, #1
 8000ce6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce8:	2301      	movs	r3, #1
 8000cea:	425b      	negs	r3, r3
 8000cec:	2103      	movs	r1, #3
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f7ff ff7c 	bl	8000bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <SysTick_Config+0x44>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <SysTick_Config+0x44>)
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	0018      	movs	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b002      	add	sp, #8
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	e000e010 	.word	0xe000e010

08000d10 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	1c02      	adds	r2, r0, #0
 8000d20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b25b      	sxtb	r3, r3
 8000d2a:	0011      	movs	r1, r2
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff ff5d 	bl	8000bec <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b004      	add	sp, #16
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	0002      	movs	r2, r0
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	b25b      	sxtb	r3, r3
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f7ff ff33 	bl	8000bb8 <__NVIC_EnableIRQ>
}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b002      	add	sp, #8
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	0018      	movs	r0, r3
 8000d66:	f7ff ffaf 	bl	8000cc8 <SysTick_Config>
 8000d6a:	0003      	movs	r3, r0
}
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b002      	add	sp, #8
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2221      	movs	r2, #33	; 0x21
 8000d80:	5c9b      	ldrb	r3, [r3, r2]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d008      	beq.n	8000d9a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2204      	movs	r2, #4
 8000d8c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2220      	movs	r2, #32
 8000d92:	2100      	movs	r1, #0
 8000d94:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e020      	b.n	8000ddc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	210e      	movs	r1, #14
 8000da6:	438a      	bics	r2, r1
 8000da8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2101      	movs	r1, #1
 8000db6:	438a      	bics	r2, r1
 8000db8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	4091      	lsls	r1, r2
 8000dc6:	000a      	movs	r2, r1
 8000dc8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2221      	movs	r2, #33	; 0x21
 8000dce:	2101      	movs	r1, #1
 8000dd0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2220      	movs	r2, #32
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	0018      	movs	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b002      	add	sp, #8
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dec:	210f      	movs	r1, #15
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2221      	movs	r2, #33	; 0x21
 8000df8:	5c9b      	ldrb	r3, [r3, r2]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d006      	beq.n	8000e0e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2204      	movs	r2, #4
 8000e04:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2201      	movs	r2, #1
 8000e0a:	701a      	strb	r2, [r3, #0]
 8000e0c:	e028      	b.n	8000e60 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	210e      	movs	r1, #14
 8000e1a:	438a      	bics	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2101      	movs	r1, #1
 8000e2a:	438a      	bics	r2, r1
 8000e2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e36:	2101      	movs	r1, #1
 8000e38:	4091      	lsls	r1, r2
 8000e3a:	000a      	movs	r2, r1
 8000e3c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2221      	movs	r2, #33	; 0x21
 8000e42:	2101      	movs	r1, #1
 8000e44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2220      	movs	r2, #32
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d004      	beq.n	8000e60 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	0010      	movs	r0, r2
 8000e5e:	4798      	blx	r3
    }
  }
  return status;
 8000e60:	230f      	movs	r3, #15
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	781b      	ldrb	r3, [r3, #0]
}
 8000e66:	0018      	movs	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b004      	add	sp, #16
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7e:	e155      	b.n	800112c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2101      	movs	r1, #1
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	4091      	lsls	r1, r2
 8000e8a:	000a      	movs	r2, r1
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d100      	bne.n	8000e98 <HAL_GPIO_Init+0x28>
 8000e96:	e146      	b.n	8001126 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d005      	beq.n	8000eb0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d130      	bne.n	8000f12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	2203      	movs	r2, #3
 8000ebc:	409a      	lsls	r2, r3
 8000ebe:	0013      	movs	r3, r2
 8000ec0:	43da      	mvns	r2, r3
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	409a      	lsls	r2, r3
 8000ed2:	0013      	movs	r3, r2
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	409a      	lsls	r2, r3
 8000eec:	0013      	movs	r3, r2
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	091b      	lsrs	r3, r3, #4
 8000efc:	2201      	movs	r2, #1
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	409a      	lsls	r2, r3
 8000f04:	0013      	movs	r3, r2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2203      	movs	r2, #3
 8000f18:	4013      	ands	r3, r2
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d017      	beq.n	8000f4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	0013      	movs	r3, r2
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	0013      	movs	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2203      	movs	r2, #3
 8000f54:	4013      	ands	r3, r2
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d123      	bne.n	8000fa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	08da      	lsrs	r2, r3, #3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3208      	adds	r2, #8
 8000f62:	0092      	lsls	r2, r2, #2
 8000f64:	58d3      	ldr	r3, [r2, r3]
 8000f66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	2207      	movs	r2, #7
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	220f      	movs	r2, #15
 8000f72:	409a      	lsls	r2, r3
 8000f74:	0013      	movs	r3, r2
 8000f76:	43da      	mvns	r2, r3
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	691a      	ldr	r2, [r3, #16]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	2107      	movs	r1, #7
 8000f86:	400b      	ands	r3, r1
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	0013      	movs	r3, r2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	0092      	lsls	r2, r2, #2
 8000f9e:	6939      	ldr	r1, [r7, #16]
 8000fa0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	409a      	lsls	r2, r3
 8000fb0:	0013      	movs	r3, r2
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	409a      	lsls	r2, r3
 8000fc8:	0013      	movs	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	23c0      	movs	r3, #192	; 0xc0
 8000fdc:	029b      	lsls	r3, r3, #10
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d100      	bne.n	8000fe4 <HAL_GPIO_Init+0x174>
 8000fe2:	e0a0      	b.n	8001126 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe4:	4b57      	ldr	r3, [pc, #348]	; (8001144 <HAL_GPIO_Init+0x2d4>)
 8000fe6:	699a      	ldr	r2, [r3, #24]
 8000fe8:	4b56      	ldr	r3, [pc, #344]	; (8001144 <HAL_GPIO_Init+0x2d4>)
 8000fea:	2101      	movs	r1, #1
 8000fec:	430a      	orrs	r2, r1
 8000fee:	619a      	str	r2, [r3, #24]
 8000ff0:	4b54      	ldr	r3, [pc, #336]	; (8001144 <HAL_GPIO_Init+0x2d4>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ffc:	4a52      	ldr	r2, [pc, #328]	; (8001148 <HAL_GPIO_Init+0x2d8>)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	089b      	lsrs	r3, r3, #2
 8001002:	3302      	adds	r3, #2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	589b      	ldr	r3, [r3, r2]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	2203      	movs	r2, #3
 800100e:	4013      	ands	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	220f      	movs	r2, #15
 8001014:	409a      	lsls	r2, r3
 8001016:	0013      	movs	r3, r2
 8001018:	43da      	mvns	r2, r3
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	2390      	movs	r3, #144	; 0x90
 8001024:	05db      	lsls	r3, r3, #23
 8001026:	429a      	cmp	r2, r3
 8001028:	d019      	beq.n	800105e <HAL_GPIO_Init+0x1ee>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a47      	ldr	r2, [pc, #284]	; (800114c <HAL_GPIO_Init+0x2dc>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d013      	beq.n	800105a <HAL_GPIO_Init+0x1ea>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a46      	ldr	r2, [pc, #280]	; (8001150 <HAL_GPIO_Init+0x2e0>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d00d      	beq.n	8001056 <HAL_GPIO_Init+0x1e6>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a45      	ldr	r2, [pc, #276]	; (8001154 <HAL_GPIO_Init+0x2e4>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d007      	beq.n	8001052 <HAL_GPIO_Init+0x1e2>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a44      	ldr	r2, [pc, #272]	; (8001158 <HAL_GPIO_Init+0x2e8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d101      	bne.n	800104e <HAL_GPIO_Init+0x1de>
 800104a:	2304      	movs	r3, #4
 800104c:	e008      	b.n	8001060 <HAL_GPIO_Init+0x1f0>
 800104e:	2305      	movs	r3, #5
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x1f0>
 8001052:	2303      	movs	r3, #3
 8001054:	e004      	b.n	8001060 <HAL_GPIO_Init+0x1f0>
 8001056:	2302      	movs	r3, #2
 8001058:	e002      	b.n	8001060 <HAL_GPIO_Init+0x1f0>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <HAL_GPIO_Init+0x1f0>
 800105e:	2300      	movs	r3, #0
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	2103      	movs	r1, #3
 8001064:	400a      	ands	r2, r1
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	4093      	lsls	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001070:	4935      	ldr	r1, [pc, #212]	; (8001148 <HAL_GPIO_Init+0x2d8>)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	3302      	adds	r3, #2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800107e:	4b37      	ldr	r3, [pc, #220]	; (800115c <HAL_GPIO_Init+0x2ec>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	43da      	mvns	r2, r3
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	2380      	movs	r3, #128	; 0x80
 8001094:	035b      	lsls	r3, r3, #13
 8001096:	4013      	ands	r3, r2
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010a2:	4b2e      	ldr	r3, [pc, #184]	; (800115c <HAL_GPIO_Init+0x2ec>)
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80010a8:	4b2c      	ldr	r3, [pc, #176]	; (800115c <HAL_GPIO_Init+0x2ec>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	43da      	mvns	r2, r3
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	039b      	lsls	r3, r3, #14
 80010c0:	4013      	ands	r3, r2
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010cc:	4b23      	ldr	r3, [pc, #140]	; (800115c <HAL_GPIO_Init+0x2ec>)
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <HAL_GPIO_Init+0x2ec>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	43da      	mvns	r2, r3
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	029b      	lsls	r3, r3, #10
 80010ea:	4013      	ands	r3, r2
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010f6:	4b19      	ldr	r3, [pc, #100]	; (800115c <HAL_GPIO_Init+0x2ec>)
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80010fc:	4b17      	ldr	r3, [pc, #92]	; (800115c <HAL_GPIO_Init+0x2ec>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	43da      	mvns	r2, r3
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	025b      	lsls	r3, r3, #9
 8001114:	4013      	ands	r3, r2
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <HAL_GPIO_Init+0x2ec>)
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3301      	adds	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	40da      	lsrs	r2, r3
 8001134:	1e13      	subs	r3, r2, #0
 8001136:	d000      	beq.n	800113a <HAL_GPIO_Init+0x2ca>
 8001138:	e6a2      	b.n	8000e80 <HAL_GPIO_Init+0x10>
  } 
}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	b006      	add	sp, #24
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40021000 	.word	0x40021000
 8001148:	40010000 	.word	0x40010000
 800114c:	48000400 	.word	0x48000400
 8001150:	48000800 	.word	0x48000800
 8001154:	48000c00 	.word	0x48000c00
 8001158:	48001000 	.word	0x48001000
 800115c:	40010400 	.word	0x40010400

08001160 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	000a      	movs	r2, r1
 800116a:	1cbb      	adds	r3, r7, #2
 800116c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	1cba      	adds	r2, r7, #2
 8001174:	8812      	ldrh	r2, [r2, #0]
 8001176:	4013      	ands	r3, r2
 8001178:	d004      	beq.n	8001184 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800117a:	230f      	movs	r3, #15
 800117c:	18fb      	adds	r3, r7, r3
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	e003      	b.n	800118c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001184:	230f      	movs	r3, #15
 8001186:	18fb      	adds	r3, r7, r3
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800118c:	230f      	movs	r3, #15
 800118e:	18fb      	adds	r3, r7, r3
 8001190:	781b      	ldrb	r3, [r3, #0]
  }
 8001192:	0018      	movs	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	b004      	add	sp, #16
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	0008      	movs	r0, r1
 80011a4:	0011      	movs	r1, r2
 80011a6:	1cbb      	adds	r3, r7, #2
 80011a8:	1c02      	adds	r2, r0, #0
 80011aa:	801a      	strh	r2, [r3, #0]
 80011ac:	1c7b      	adds	r3, r7, #1
 80011ae:	1c0a      	adds	r2, r1, #0
 80011b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011b2:	1c7b      	adds	r3, r7, #1
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d004      	beq.n	80011c4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ba:	1cbb      	adds	r3, r7, #2
 80011bc:	881a      	ldrh	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011c2:	e003      	b.n	80011cc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011c4:	1cbb      	adds	r3, r7, #2
 80011c6:	881a      	ldrh	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011cc:	46c0      	nop			; (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b002      	add	sp, #8
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d102      	bne.n	80011e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	f000 fb76 	bl	80018d4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2201      	movs	r2, #1
 80011ee:	4013      	ands	r3, r2
 80011f0:	d100      	bne.n	80011f4 <HAL_RCC_OscConfig+0x20>
 80011f2:	e08e      	b.n	8001312 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011f4:	4bc5      	ldr	r3, [pc, #788]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	220c      	movs	r2, #12
 80011fa:	4013      	ands	r3, r2
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d00e      	beq.n	800121e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001200:	4bc2      	ldr	r3, [pc, #776]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	220c      	movs	r2, #12
 8001206:	4013      	ands	r3, r2
 8001208:	2b08      	cmp	r3, #8
 800120a:	d117      	bne.n	800123c <HAL_RCC_OscConfig+0x68>
 800120c:	4bbf      	ldr	r3, [pc, #764]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	23c0      	movs	r3, #192	; 0xc0
 8001212:	025b      	lsls	r3, r3, #9
 8001214:	401a      	ands	r2, r3
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	025b      	lsls	r3, r3, #9
 800121a:	429a      	cmp	r2, r3
 800121c:	d10e      	bne.n	800123c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121e:	4bbb      	ldr	r3, [pc, #748]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	029b      	lsls	r3, r3, #10
 8001226:	4013      	ands	r3, r2
 8001228:	d100      	bne.n	800122c <HAL_RCC_OscConfig+0x58>
 800122a:	e071      	b.n	8001310 <HAL_RCC_OscConfig+0x13c>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d000      	beq.n	8001236 <HAL_RCC_OscConfig+0x62>
 8001234:	e06c      	b.n	8001310 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	f000 fb4c 	bl	80018d4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d107      	bne.n	8001254 <HAL_RCC_OscConfig+0x80>
 8001244:	4bb1      	ldr	r3, [pc, #708]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4bb0      	ldr	r3, [pc, #704]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800124a:	2180      	movs	r1, #128	; 0x80
 800124c:	0249      	lsls	r1, r1, #9
 800124e:	430a      	orrs	r2, r1
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	e02f      	b.n	80012b4 <HAL_RCC_OscConfig+0xe0>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d10c      	bne.n	8001276 <HAL_RCC_OscConfig+0xa2>
 800125c:	4bab      	ldr	r3, [pc, #684]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4baa      	ldr	r3, [pc, #680]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001262:	49ab      	ldr	r1, [pc, #684]	; (8001510 <HAL_RCC_OscConfig+0x33c>)
 8001264:	400a      	ands	r2, r1
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	4ba8      	ldr	r3, [pc, #672]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4ba7      	ldr	r3, [pc, #668]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800126e:	49a9      	ldr	r1, [pc, #676]	; (8001514 <HAL_RCC_OscConfig+0x340>)
 8001270:	400a      	ands	r2, r1
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	e01e      	b.n	80012b4 <HAL_RCC_OscConfig+0xe0>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b05      	cmp	r3, #5
 800127c:	d10e      	bne.n	800129c <HAL_RCC_OscConfig+0xc8>
 800127e:	4ba3      	ldr	r3, [pc, #652]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4ba2      	ldr	r3, [pc, #648]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001284:	2180      	movs	r1, #128	; 0x80
 8001286:	02c9      	lsls	r1, r1, #11
 8001288:	430a      	orrs	r2, r1
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	4b9f      	ldr	r3, [pc, #636]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b9e      	ldr	r3, [pc, #632]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001292:	2180      	movs	r1, #128	; 0x80
 8001294:	0249      	lsls	r1, r1, #9
 8001296:	430a      	orrs	r2, r1
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	e00b      	b.n	80012b4 <HAL_RCC_OscConfig+0xe0>
 800129c:	4b9b      	ldr	r3, [pc, #620]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b9a      	ldr	r3, [pc, #616]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80012a2:	499b      	ldr	r1, [pc, #620]	; (8001510 <HAL_RCC_OscConfig+0x33c>)
 80012a4:	400a      	ands	r2, r1
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	4b98      	ldr	r3, [pc, #608]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b97      	ldr	r3, [pc, #604]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80012ae:	4999      	ldr	r1, [pc, #612]	; (8001514 <HAL_RCC_OscConfig+0x340>)
 80012b0:	400a      	ands	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d014      	beq.n	80012e6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fc72 	bl	8000ba4 <HAL_GetTick>
 80012c0:	0003      	movs	r3, r0
 80012c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c6:	f7ff fc6d 	bl	8000ba4 <HAL_GetTick>
 80012ca:	0002      	movs	r2, r0
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b64      	cmp	r3, #100	; 0x64
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e2fd      	b.n	80018d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d8:	4b8c      	ldr	r3, [pc, #560]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	029b      	lsls	r3, r3, #10
 80012e0:	4013      	ands	r3, r2
 80012e2:	d0f0      	beq.n	80012c6 <HAL_RCC_OscConfig+0xf2>
 80012e4:	e015      	b.n	8001312 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e6:	f7ff fc5d 	bl	8000ba4 <HAL_GetTick>
 80012ea:	0003      	movs	r3, r0
 80012ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fc58 	bl	8000ba4 <HAL_GetTick>
 80012f4:	0002      	movs	r2, r0
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e2e8      	b.n	80018d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001302:	4b82      	ldr	r3, [pc, #520]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	029b      	lsls	r3, r3, #10
 800130a:	4013      	ands	r3, r2
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0x11c>
 800130e:	e000      	b.n	8001312 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2202      	movs	r2, #2
 8001318:	4013      	ands	r3, r2
 800131a:	d100      	bne.n	800131e <HAL_RCC_OscConfig+0x14a>
 800131c:	e06c      	b.n	80013f8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800131e:	4b7b      	ldr	r3, [pc, #492]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	220c      	movs	r2, #12
 8001324:	4013      	ands	r3, r2
 8001326:	d00e      	beq.n	8001346 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001328:	4b78      	ldr	r3, [pc, #480]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	220c      	movs	r2, #12
 800132e:	4013      	ands	r3, r2
 8001330:	2b08      	cmp	r3, #8
 8001332:	d11f      	bne.n	8001374 <HAL_RCC_OscConfig+0x1a0>
 8001334:	4b75      	ldr	r3, [pc, #468]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	23c0      	movs	r3, #192	; 0xc0
 800133a:	025b      	lsls	r3, r3, #9
 800133c:	401a      	ands	r2, r3
 800133e:	2380      	movs	r3, #128	; 0x80
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	429a      	cmp	r2, r3
 8001344:	d116      	bne.n	8001374 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001346:	4b71      	ldr	r3, [pc, #452]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2202      	movs	r2, #2
 800134c:	4013      	ands	r3, r2
 800134e:	d005      	beq.n	800135c <HAL_RCC_OscConfig+0x188>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d001      	beq.n	800135c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e2bb      	b.n	80018d4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135c:	4b6b      	ldr	r3, [pc, #428]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	22f8      	movs	r2, #248	; 0xf8
 8001362:	4393      	bics	r3, r2
 8001364:	0019      	movs	r1, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	00da      	lsls	r2, r3, #3
 800136c:	4b67      	ldr	r3, [pc, #412]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800136e:	430a      	orrs	r2, r1
 8001370:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	e041      	b.n	80013f8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d024      	beq.n	80013c6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800137c:	4b63      	ldr	r3, [pc, #396]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b62      	ldr	r3, [pc, #392]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001382:	2101      	movs	r1, #1
 8001384:	430a      	orrs	r2, r1
 8001386:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fc0c 	bl	8000ba4 <HAL_GetTick>
 800138c:	0003      	movs	r3, r0
 800138e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001392:	f7ff fc07 	bl	8000ba4 <HAL_GetTick>
 8001396:	0002      	movs	r2, r0
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e297      	b.n	80018d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a4:	4b59      	ldr	r3, [pc, #356]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2202      	movs	r2, #2
 80013aa:	4013      	ands	r3, r2
 80013ac:	d0f1      	beq.n	8001392 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ae:	4b57      	ldr	r3, [pc, #348]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	22f8      	movs	r2, #248	; 0xf8
 80013b4:	4393      	bics	r3, r2
 80013b6:	0019      	movs	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	00da      	lsls	r2, r3, #3
 80013be:	4b53      	ldr	r3, [pc, #332]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80013c0:	430a      	orrs	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	e018      	b.n	80013f8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c6:	4b51      	ldr	r3, [pc, #324]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4b50      	ldr	r3, [pc, #320]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80013cc:	2101      	movs	r1, #1
 80013ce:	438a      	bics	r2, r1
 80013d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d2:	f7ff fbe7 	bl	8000ba4 <HAL_GetTick>
 80013d6:	0003      	movs	r3, r0
 80013d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013dc:	f7ff fbe2 	bl	8000ba4 <HAL_GetTick>
 80013e0:	0002      	movs	r2, r0
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e272      	b.n	80018d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ee:	4b47      	ldr	r3, [pc, #284]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2202      	movs	r2, #2
 80013f4:	4013      	ands	r3, r2
 80013f6:	d1f1      	bne.n	80013dc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2208      	movs	r2, #8
 80013fe:	4013      	ands	r3, r2
 8001400:	d036      	beq.n	8001470 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d019      	beq.n	800143e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140a:	4b40      	ldr	r3, [pc, #256]	; (800150c <HAL_RCC_OscConfig+0x338>)
 800140c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800140e:	4b3f      	ldr	r3, [pc, #252]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001410:	2101      	movs	r1, #1
 8001412:	430a      	orrs	r2, r1
 8001414:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001416:	f7ff fbc5 	bl	8000ba4 <HAL_GetTick>
 800141a:	0003      	movs	r3, r0
 800141c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001420:	f7ff fbc0 	bl	8000ba4 <HAL_GetTick>
 8001424:	0002      	movs	r2, r0
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e250      	b.n	80018d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001432:	4b36      	ldr	r3, [pc, #216]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	2202      	movs	r2, #2
 8001438:	4013      	ands	r3, r2
 800143a:	d0f1      	beq.n	8001420 <HAL_RCC_OscConfig+0x24c>
 800143c:	e018      	b.n	8001470 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800143e:	4b33      	ldr	r3, [pc, #204]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001442:	4b32      	ldr	r3, [pc, #200]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001444:	2101      	movs	r1, #1
 8001446:	438a      	bics	r2, r1
 8001448:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144a:	f7ff fbab 	bl	8000ba4 <HAL_GetTick>
 800144e:	0003      	movs	r3, r0
 8001450:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001454:	f7ff fba6 	bl	8000ba4 <HAL_GetTick>
 8001458:	0002      	movs	r2, r0
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e236      	b.n	80018d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001466:	4b29      	ldr	r3, [pc, #164]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	2202      	movs	r2, #2
 800146c:	4013      	ands	r3, r2
 800146e:	d1f1      	bne.n	8001454 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2204      	movs	r2, #4
 8001476:	4013      	ands	r3, r2
 8001478:	d100      	bne.n	800147c <HAL_RCC_OscConfig+0x2a8>
 800147a:	e0b5      	b.n	80015e8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800147c:	201f      	movs	r0, #31
 800147e:	183b      	adds	r3, r7, r0
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001484:	4b21      	ldr	r3, [pc, #132]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001486:	69da      	ldr	r2, [r3, #28]
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	055b      	lsls	r3, r3, #21
 800148c:	4013      	ands	r3, r2
 800148e:	d110      	bne.n	80014b2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001492:	69da      	ldr	r2, [r3, #28]
 8001494:	4b1d      	ldr	r3, [pc, #116]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001496:	2180      	movs	r1, #128	; 0x80
 8001498:	0549      	lsls	r1, r1, #21
 800149a:	430a      	orrs	r2, r1
 800149c:	61da      	str	r2, [r3, #28]
 800149e:	4b1b      	ldr	r3, [pc, #108]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80014a0:	69da      	ldr	r2, [r3, #28]
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	055b      	lsls	r3, r3, #21
 80014a6:	4013      	ands	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014ac:	183b      	adds	r3, r7, r0
 80014ae:	2201      	movs	r2, #1
 80014b0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <HAL_RCC_OscConfig+0x344>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	4013      	ands	r3, r2
 80014bc:	d11a      	bne.n	80014f4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014be:	4b16      	ldr	r3, [pc, #88]	; (8001518 <HAL_RCC_OscConfig+0x344>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_RCC_OscConfig+0x344>)
 80014c4:	2180      	movs	r1, #128	; 0x80
 80014c6:	0049      	lsls	r1, r1, #1
 80014c8:	430a      	orrs	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014cc:	f7ff fb6a 	bl	8000ba4 <HAL_GetTick>
 80014d0:	0003      	movs	r3, r0
 80014d2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d6:	f7ff fb65 	bl	8000ba4 <HAL_GetTick>
 80014da:	0002      	movs	r2, r0
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b64      	cmp	r3, #100	; 0x64
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e1f5      	b.n	80018d4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_RCC_OscConfig+0x344>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4013      	ands	r3, r2
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d10f      	bne.n	800151c <HAL_RCC_OscConfig+0x348>
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_RCC_OscConfig+0x338>)
 80014fe:	6a1a      	ldr	r2, [r3, #32]
 8001500:	4b02      	ldr	r3, [pc, #8]	; (800150c <HAL_RCC_OscConfig+0x338>)
 8001502:	2101      	movs	r1, #1
 8001504:	430a      	orrs	r2, r1
 8001506:	621a      	str	r2, [r3, #32]
 8001508:	e036      	b.n	8001578 <HAL_RCC_OscConfig+0x3a4>
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	40021000 	.word	0x40021000
 8001510:	fffeffff 	.word	0xfffeffff
 8001514:	fffbffff 	.word	0xfffbffff
 8001518:	40007000 	.word	0x40007000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10c      	bne.n	800153e <HAL_RCC_OscConfig+0x36a>
 8001524:	4bca      	ldr	r3, [pc, #808]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 8001526:	6a1a      	ldr	r2, [r3, #32]
 8001528:	4bc9      	ldr	r3, [pc, #804]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 800152a:	2101      	movs	r1, #1
 800152c:	438a      	bics	r2, r1
 800152e:	621a      	str	r2, [r3, #32]
 8001530:	4bc7      	ldr	r3, [pc, #796]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 8001532:	6a1a      	ldr	r2, [r3, #32]
 8001534:	4bc6      	ldr	r3, [pc, #792]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 8001536:	2104      	movs	r1, #4
 8001538:	438a      	bics	r2, r1
 800153a:	621a      	str	r2, [r3, #32]
 800153c:	e01c      	b.n	8001578 <HAL_RCC_OscConfig+0x3a4>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b05      	cmp	r3, #5
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x38c>
 8001546:	4bc2      	ldr	r3, [pc, #776]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 8001548:	6a1a      	ldr	r2, [r3, #32]
 800154a:	4bc1      	ldr	r3, [pc, #772]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 800154c:	2104      	movs	r1, #4
 800154e:	430a      	orrs	r2, r1
 8001550:	621a      	str	r2, [r3, #32]
 8001552:	4bbf      	ldr	r3, [pc, #764]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 8001554:	6a1a      	ldr	r2, [r3, #32]
 8001556:	4bbe      	ldr	r3, [pc, #760]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 8001558:	2101      	movs	r1, #1
 800155a:	430a      	orrs	r2, r1
 800155c:	621a      	str	r2, [r3, #32]
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0x3a4>
 8001560:	4bbb      	ldr	r3, [pc, #748]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 8001562:	6a1a      	ldr	r2, [r3, #32]
 8001564:	4bba      	ldr	r3, [pc, #744]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 8001566:	2101      	movs	r1, #1
 8001568:	438a      	bics	r2, r1
 800156a:	621a      	str	r2, [r3, #32]
 800156c:	4bb8      	ldr	r3, [pc, #736]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 800156e:	6a1a      	ldr	r2, [r3, #32]
 8001570:	4bb7      	ldr	r3, [pc, #732]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 8001572:	2104      	movs	r1, #4
 8001574:	438a      	bics	r2, r1
 8001576:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d014      	beq.n	80015aa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001580:	f7ff fb10 	bl	8000ba4 <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001588:	e009      	b.n	800159e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800158a:	f7ff fb0b 	bl	8000ba4 <HAL_GetTick>
 800158e:	0002      	movs	r2, r0
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	4aaf      	ldr	r2, [pc, #700]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e19a      	b.n	80018d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159e:	4bac      	ldr	r3, [pc, #688]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	2202      	movs	r2, #2
 80015a4:	4013      	ands	r3, r2
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x3b6>
 80015a8:	e013      	b.n	80015d2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015aa:	f7ff fafb 	bl	8000ba4 <HAL_GetTick>
 80015ae:	0003      	movs	r3, r0
 80015b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b2:	e009      	b.n	80015c8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b4:	f7ff faf6 	bl	8000ba4 <HAL_GetTick>
 80015b8:	0002      	movs	r2, r0
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	4aa5      	ldr	r2, [pc, #660]	; (8001854 <HAL_RCC_OscConfig+0x680>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e185      	b.n	80018d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c8:	4ba1      	ldr	r3, [pc, #644]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	2202      	movs	r2, #2
 80015ce:	4013      	ands	r3, r2
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015d2:	231f      	movs	r3, #31
 80015d4:	18fb      	adds	r3, r7, r3
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015dc:	4b9c      	ldr	r3, [pc, #624]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 80015de:	69da      	ldr	r2, [r3, #28]
 80015e0:	4b9b      	ldr	r3, [pc, #620]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 80015e2:	499d      	ldr	r1, [pc, #628]	; (8001858 <HAL_RCC_OscConfig+0x684>)
 80015e4:	400a      	ands	r2, r1
 80015e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2210      	movs	r2, #16
 80015ee:	4013      	ands	r3, r2
 80015f0:	d063      	beq.n	80016ba <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d12a      	bne.n	8001650 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015fa:	4b95      	ldr	r3, [pc, #596]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 80015fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015fe:	4b94      	ldr	r3, [pc, #592]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 8001600:	2104      	movs	r1, #4
 8001602:	430a      	orrs	r2, r1
 8001604:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001606:	4b92      	ldr	r3, [pc, #584]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 8001608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800160a:	4b91      	ldr	r3, [pc, #580]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 800160c:	2101      	movs	r1, #1
 800160e:	430a      	orrs	r2, r1
 8001610:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001612:	f7ff fac7 	bl	8000ba4 <HAL_GetTick>
 8001616:	0003      	movs	r3, r0
 8001618:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800161c:	f7ff fac2 	bl	8000ba4 <HAL_GetTick>
 8001620:	0002      	movs	r2, r0
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e152      	b.n	80018d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800162e:	4b88      	ldr	r3, [pc, #544]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 8001630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001632:	2202      	movs	r2, #2
 8001634:	4013      	ands	r3, r2
 8001636:	d0f1      	beq.n	800161c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001638:	4b85      	ldr	r3, [pc, #532]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 800163a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163c:	22f8      	movs	r2, #248	; 0xf8
 800163e:	4393      	bics	r3, r2
 8001640:	0019      	movs	r1, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	00da      	lsls	r2, r3, #3
 8001648:	4b81      	ldr	r3, [pc, #516]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 800164a:	430a      	orrs	r2, r1
 800164c:	635a      	str	r2, [r3, #52]	; 0x34
 800164e:	e034      	b.n	80016ba <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	3305      	adds	r3, #5
 8001656:	d111      	bne.n	800167c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001658:	4b7d      	ldr	r3, [pc, #500]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 800165a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800165c:	4b7c      	ldr	r3, [pc, #496]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 800165e:	2104      	movs	r1, #4
 8001660:	438a      	bics	r2, r1
 8001662:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001664:	4b7a      	ldr	r3, [pc, #488]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 8001666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001668:	22f8      	movs	r2, #248	; 0xf8
 800166a:	4393      	bics	r3, r2
 800166c:	0019      	movs	r1, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	00da      	lsls	r2, r3, #3
 8001674:	4b76      	ldr	r3, [pc, #472]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 8001676:	430a      	orrs	r2, r1
 8001678:	635a      	str	r2, [r3, #52]	; 0x34
 800167a:	e01e      	b.n	80016ba <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800167c:	4b74      	ldr	r3, [pc, #464]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 800167e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001680:	4b73      	ldr	r3, [pc, #460]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 8001682:	2104      	movs	r1, #4
 8001684:	430a      	orrs	r2, r1
 8001686:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001688:	4b71      	ldr	r3, [pc, #452]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 800168a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800168c:	4b70      	ldr	r3, [pc, #448]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 800168e:	2101      	movs	r1, #1
 8001690:	438a      	bics	r2, r1
 8001692:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001694:	f7ff fa86 	bl	8000ba4 <HAL_GetTick>
 8001698:	0003      	movs	r3, r0
 800169a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800169e:	f7ff fa81 	bl	8000ba4 <HAL_GetTick>
 80016a2:	0002      	movs	r2, r0
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e111      	b.n	80018d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016b0:	4b67      	ldr	r3, [pc, #412]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 80016b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b4:	2202      	movs	r2, #2
 80016b6:	4013      	ands	r3, r2
 80016b8:	d1f1      	bne.n	800169e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2220      	movs	r2, #32
 80016c0:	4013      	ands	r3, r2
 80016c2:	d05c      	beq.n	800177e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80016c4:	4b62      	ldr	r3, [pc, #392]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	220c      	movs	r2, #12
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b0c      	cmp	r3, #12
 80016ce:	d00e      	beq.n	80016ee <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80016d0:	4b5f      	ldr	r3, [pc, #380]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	220c      	movs	r2, #12
 80016d6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d114      	bne.n	8001706 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80016dc:	4b5c      	ldr	r3, [pc, #368]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	23c0      	movs	r3, #192	; 0xc0
 80016e2:	025b      	lsls	r3, r3, #9
 80016e4:	401a      	ands	r2, r3
 80016e6:	23c0      	movs	r3, #192	; 0xc0
 80016e8:	025b      	lsls	r3, r3, #9
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d10b      	bne.n	8001706 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80016ee:	4b58      	ldr	r3, [pc, #352]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 80016f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	029b      	lsls	r3, r3, #10
 80016f6:	4013      	ands	r3, r2
 80016f8:	d040      	beq.n	800177c <HAL_RCC_OscConfig+0x5a8>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d03c      	beq.n	800177c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e0e6      	b.n	80018d4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d01b      	beq.n	8001746 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800170e:	4b50      	ldr	r3, [pc, #320]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 8001710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001712:	4b4f      	ldr	r3, [pc, #316]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	0249      	lsls	r1, r1, #9
 8001718:	430a      	orrs	r2, r1
 800171a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff fa42 	bl	8000ba4 <HAL_GetTick>
 8001720:	0003      	movs	r3, r0
 8001722:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001726:	f7ff fa3d 	bl	8000ba4 <HAL_GetTick>
 800172a:	0002      	movs	r2, r0
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e0cd      	b.n	80018d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001738:	4b45      	ldr	r3, [pc, #276]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 800173a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	029b      	lsls	r3, r3, #10
 8001740:	4013      	ands	r3, r2
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x552>
 8001744:	e01b      	b.n	800177e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001746:	4b42      	ldr	r3, [pc, #264]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 8001748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800174a:	4b41      	ldr	r3, [pc, #260]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 800174c:	4943      	ldr	r1, [pc, #268]	; (800185c <HAL_RCC_OscConfig+0x688>)
 800174e:	400a      	ands	r2, r1
 8001750:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001752:	f7ff fa27 	bl	8000ba4 <HAL_GetTick>
 8001756:	0003      	movs	r3, r0
 8001758:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800175c:	f7ff fa22 	bl	8000ba4 <HAL_GetTick>
 8001760:	0002      	movs	r2, r0
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e0b2      	b.n	80018d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800176e:	4b38      	ldr	r3, [pc, #224]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 8001770:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	029b      	lsls	r3, r3, #10
 8001776:	4013      	ands	r3, r2
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x588>
 800177a:	e000      	b.n	800177e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800177c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	2b00      	cmp	r3, #0
 8001784:	d100      	bne.n	8001788 <HAL_RCC_OscConfig+0x5b4>
 8001786:	e0a4      	b.n	80018d2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001788:	4b31      	ldr	r3, [pc, #196]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	220c      	movs	r2, #12
 800178e:	4013      	ands	r3, r2
 8001790:	2b08      	cmp	r3, #8
 8001792:	d100      	bne.n	8001796 <HAL_RCC_OscConfig+0x5c2>
 8001794:	e078      	b.n	8001888 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	2b02      	cmp	r3, #2
 800179c:	d14c      	bne.n	8001838 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179e:	4b2c      	ldr	r3, [pc, #176]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 80017a4:	492e      	ldr	r1, [pc, #184]	; (8001860 <HAL_RCC_OscConfig+0x68c>)
 80017a6:	400a      	ands	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017aa:	f7ff f9fb 	bl	8000ba4 <HAL_GetTick>
 80017ae:	0003      	movs	r3, r0
 80017b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b4:	f7ff f9f6 	bl	8000ba4 <HAL_GetTick>
 80017b8:	0002      	movs	r2, r0
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e086      	b.n	80018d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c6:	4b22      	ldr	r3, [pc, #136]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	049b      	lsls	r3, r3, #18
 80017ce:	4013      	ands	r3, r2
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d2:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 80017d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d6:	220f      	movs	r2, #15
 80017d8:	4393      	bics	r3, r2
 80017da:	0019      	movs	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 80017e2:	430a      	orrs	r2, r1
 80017e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80017e6:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	4a1e      	ldr	r2, [pc, #120]	; (8001864 <HAL_RCC_OscConfig+0x690>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	0019      	movs	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f8:	431a      	orrs	r2, r3
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 80017fc:	430a      	orrs	r2, r1
 80017fe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 8001806:	2180      	movs	r1, #128	; 0x80
 8001808:	0449      	lsls	r1, r1, #17
 800180a:	430a      	orrs	r2, r1
 800180c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180e:	f7ff f9c9 	bl	8000ba4 <HAL_GetTick>
 8001812:	0003      	movs	r3, r0
 8001814:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001818:	f7ff f9c4 	bl	8000ba4 <HAL_GetTick>
 800181c:	0002      	movs	r2, r0
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e054      	b.n	80018d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	049b      	lsls	r3, r3, #18
 8001832:	4013      	ands	r3, r2
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0x644>
 8001836:	e04c      	b.n	80018d2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <HAL_RCC_OscConfig+0x67c>)
 800183e:	4908      	ldr	r1, [pc, #32]	; (8001860 <HAL_RCC_OscConfig+0x68c>)
 8001840:	400a      	ands	r2, r1
 8001842:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff f9ae 	bl	8000ba4 <HAL_GetTick>
 8001848:	0003      	movs	r3, r0
 800184a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800184c:	e015      	b.n	800187a <HAL_RCC_OscConfig+0x6a6>
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	40021000 	.word	0x40021000
 8001854:	00001388 	.word	0x00001388
 8001858:	efffffff 	.word	0xefffffff
 800185c:	fffeffff 	.word	0xfffeffff
 8001860:	feffffff 	.word	0xfeffffff
 8001864:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001868:	f7ff f99c 	bl	8000ba4 <HAL_GetTick>
 800186c:	0002      	movs	r2, r0
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e02c      	b.n	80018d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <HAL_RCC_OscConfig+0x708>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	2380      	movs	r3, #128	; 0x80
 8001880:	049b      	lsls	r3, r3, #18
 8001882:	4013      	ands	r3, r2
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x694>
 8001886:	e024      	b.n	80018d2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e01f      	b.n	80018d4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_RCC_OscConfig+0x708>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <HAL_RCC_OscConfig+0x708>)
 800189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	23c0      	movs	r3, #192	; 0xc0
 80018a4:	025b      	lsls	r3, r3, #9
 80018a6:	401a      	ands	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d10e      	bne.n	80018ce <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	220f      	movs	r2, #15
 80018b4:	401a      	ands	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d107      	bne.n	80018ce <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	23f0      	movs	r3, #240	; 0xf0
 80018c2:	039b      	lsls	r3, r3, #14
 80018c4:	401a      	ands	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d001      	beq.n	80018d2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	0018      	movs	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b008      	add	sp, #32
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40021000 	.word	0x40021000

080018e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0bf      	b.n	8001a74 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018f4:	4b61      	ldr	r3, [pc, #388]	; (8001a7c <HAL_RCC_ClockConfig+0x19c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2201      	movs	r2, #1
 80018fa:	4013      	ands	r3, r2
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d911      	bls.n	8001926 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001902:	4b5e      	ldr	r3, [pc, #376]	; (8001a7c <HAL_RCC_ClockConfig+0x19c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2201      	movs	r2, #1
 8001908:	4393      	bics	r3, r2
 800190a:	0019      	movs	r1, r3
 800190c:	4b5b      	ldr	r3, [pc, #364]	; (8001a7c <HAL_RCC_ClockConfig+0x19c>)
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001914:	4b59      	ldr	r3, [pc, #356]	; (8001a7c <HAL_RCC_ClockConfig+0x19c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2201      	movs	r2, #1
 800191a:	4013      	ands	r3, r2
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d001      	beq.n	8001926 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e0a6      	b.n	8001a74 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2202      	movs	r2, #2
 800192c:	4013      	ands	r3, r2
 800192e:	d015      	beq.n	800195c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2204      	movs	r2, #4
 8001936:	4013      	ands	r3, r2
 8001938:	d006      	beq.n	8001948 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800193a:	4b51      	ldr	r3, [pc, #324]	; (8001a80 <HAL_RCC_ClockConfig+0x1a0>)
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	4b50      	ldr	r3, [pc, #320]	; (8001a80 <HAL_RCC_ClockConfig+0x1a0>)
 8001940:	21e0      	movs	r1, #224	; 0xe0
 8001942:	00c9      	lsls	r1, r1, #3
 8001944:	430a      	orrs	r2, r1
 8001946:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001948:	4b4d      	ldr	r3, [pc, #308]	; (8001a80 <HAL_RCC_ClockConfig+0x1a0>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	22f0      	movs	r2, #240	; 0xf0
 800194e:	4393      	bics	r3, r2
 8001950:	0019      	movs	r1, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	4b4a      	ldr	r3, [pc, #296]	; (8001a80 <HAL_RCC_ClockConfig+0x1a0>)
 8001958:	430a      	orrs	r2, r1
 800195a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2201      	movs	r2, #1
 8001962:	4013      	ands	r3, r2
 8001964:	d04c      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d107      	bne.n	800197e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	4b44      	ldr	r3, [pc, #272]	; (8001a80 <HAL_RCC_ClockConfig+0x1a0>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	029b      	lsls	r3, r3, #10
 8001976:	4013      	ands	r3, r2
 8001978:	d120      	bne.n	80019bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e07a      	b.n	8001a74 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d107      	bne.n	8001996 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001986:	4b3e      	ldr	r3, [pc, #248]	; (8001a80 <HAL_RCC_ClockConfig+0x1a0>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	049b      	lsls	r3, r3, #18
 800198e:	4013      	ands	r3, r2
 8001990:	d114      	bne.n	80019bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e06e      	b.n	8001a74 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b03      	cmp	r3, #3
 800199c:	d107      	bne.n	80019ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800199e:	4b38      	ldr	r3, [pc, #224]	; (8001a80 <HAL_RCC_ClockConfig+0x1a0>)
 80019a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	029b      	lsls	r3, r3, #10
 80019a6:	4013      	ands	r3, r2
 80019a8:	d108      	bne.n	80019bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e062      	b.n	8001a74 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ae:	4b34      	ldr	r3, [pc, #208]	; (8001a80 <HAL_RCC_ClockConfig+0x1a0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2202      	movs	r2, #2
 80019b4:	4013      	ands	r3, r2
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e05b      	b.n	8001a74 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019bc:	4b30      	ldr	r3, [pc, #192]	; (8001a80 <HAL_RCC_ClockConfig+0x1a0>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2203      	movs	r2, #3
 80019c2:	4393      	bics	r3, r2
 80019c4:	0019      	movs	r1, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	4b2d      	ldr	r3, [pc, #180]	; (8001a80 <HAL_RCC_ClockConfig+0x1a0>)
 80019cc:	430a      	orrs	r2, r1
 80019ce:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d0:	f7ff f8e8 	bl	8000ba4 <HAL_GetTick>
 80019d4:	0003      	movs	r3, r0
 80019d6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d8:	e009      	b.n	80019ee <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019da:	f7ff f8e3 	bl	8000ba4 <HAL_GetTick>
 80019de:	0002      	movs	r2, r0
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	4a27      	ldr	r2, [pc, #156]	; (8001a84 <HAL_RCC_ClockConfig+0x1a4>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e042      	b.n	8001a74 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ee:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <HAL_RCC_ClockConfig+0x1a0>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	220c      	movs	r2, #12
 80019f4:	401a      	ands	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d1ec      	bne.n	80019da <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a00:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <HAL_RCC_ClockConfig+0x19c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2201      	movs	r2, #1
 8001a06:	4013      	ands	r3, r2
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d211      	bcs.n	8001a32 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <HAL_RCC_ClockConfig+0x19c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2201      	movs	r2, #1
 8001a14:	4393      	bics	r3, r2
 8001a16:	0019      	movs	r1, r3
 8001a18:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <HAL_RCC_ClockConfig+0x19c>)
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <HAL_RCC_ClockConfig+0x19c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2201      	movs	r2, #1
 8001a26:	4013      	ands	r3, r2
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e020      	b.n	8001a74 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2204      	movs	r2, #4
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d009      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a3c:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <HAL_RCC_ClockConfig+0x1a0>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4a11      	ldr	r2, [pc, #68]	; (8001a88 <HAL_RCC_ClockConfig+0x1a8>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	0019      	movs	r1, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <HAL_RCC_ClockConfig+0x1a0>)
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a50:	f000 f820 	bl	8001a94 <HAL_RCC_GetSysClockFreq>
 8001a54:	0001      	movs	r1, r0
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_RCC_ClockConfig+0x1a0>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	091b      	lsrs	r3, r3, #4
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	4013      	ands	r3, r2
 8001a60:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <HAL_RCC_ClockConfig+0x1ac>)
 8001a62:	5cd3      	ldrb	r3, [r2, r3]
 8001a64:	000a      	movs	r2, r1
 8001a66:	40da      	lsrs	r2, r3
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_RCC_ClockConfig+0x1b0>)
 8001a6a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f7ff f865 	bl	8000b3c <HAL_InitTick>
  
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	0018      	movs	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b004      	add	sp, #16
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40022000 	.word	0x40022000
 8001a80:	40021000 	.word	0x40021000
 8001a84:	00001388 	.word	0x00001388
 8001a88:	fffff8ff 	.word	0xfffff8ff
 8001a8c:	0800652c 	.word	0x0800652c
 8001a90:	20000164 	.word	0x20000164

08001a94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001aae:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	220c      	movs	r2, #12
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2b0c      	cmp	r3, #12
 8001abc:	d046      	beq.n	8001b4c <HAL_RCC_GetSysClockFreq+0xb8>
 8001abe:	d848      	bhi.n	8001b52 <HAL_RCC_GetSysClockFreq+0xbe>
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d002      	beq.n	8001aca <HAL_RCC_GetSysClockFreq+0x36>
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d003      	beq.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x3c>
 8001ac8:	e043      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001aca:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001acc:	613b      	str	r3, [r7, #16]
      break;
 8001ace:	e043      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	0c9b      	lsrs	r3, r3, #18
 8001ad4:	220f      	movs	r2, #15
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	4a24      	ldr	r2, [pc, #144]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xd8>)
 8001ada:	5cd3      	ldrb	r3, [r2, r3]
 8001adc:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ade:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	4a22      	ldr	r2, [pc, #136]	; (8001b70 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001ae8:	5cd3      	ldrb	r3, [r2, r3]
 8001aea:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	23c0      	movs	r3, #192	; 0xc0
 8001af0:	025b      	lsls	r3, r3, #9
 8001af2:	401a      	ands	r2, r3
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	025b      	lsls	r3, r3, #9
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d109      	bne.n	8001b10 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	481a      	ldr	r0, [pc, #104]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001b00:	f7fe fb14 	bl	800012c <__udivsi3>
 8001b04:	0003      	movs	r3, r0
 8001b06:	001a      	movs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4353      	muls	r3, r2
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	e01a      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	23c0      	movs	r3, #192	; 0xc0
 8001b14:	025b      	lsls	r3, r3, #9
 8001b16:	401a      	ands	r2, r3
 8001b18:	23c0      	movs	r3, #192	; 0xc0
 8001b1a:	025b      	lsls	r3, r3, #9
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d109      	bne.n	8001b34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	4814      	ldr	r0, [pc, #80]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001b24:	f7fe fb02 	bl	800012c <__udivsi3>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	001a      	movs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4353      	muls	r3, r2
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	480c      	ldr	r0, [pc, #48]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001b38:	f7fe faf8 	bl	800012c <__udivsi3>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	001a      	movs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4353      	muls	r3, r2
 8001b44:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	613b      	str	r3, [r7, #16]
      break;
 8001b4a:	e005      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001b4e:	613b      	str	r3, [r7, #16]
      break;
 8001b50:	e002      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001b54:	613b      	str	r3, [r7, #16]
      break;
 8001b56:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b58:	693b      	ldr	r3, [r7, #16]
}
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b006      	add	sp, #24
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	40021000 	.word	0x40021000
 8001b68:	007a1200 	.word	0x007a1200
 8001b6c:	08006544 	.word	0x08006544
 8001b70:	08006554 	.word	0x08006554
 8001b74:	02dc6c00 	.word	0x02dc6c00

08001b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b7c:	4b02      	ldr	r3, [pc, #8]	; (8001b88 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	0018      	movs	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	20000164 	.word	0x20000164

08001b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001b90:	f7ff fff2 	bl	8001b78 <HAL_RCC_GetHCLKFreq>
 8001b94:	0001      	movs	r1, r0
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	0a1b      	lsrs	r3, r3, #8
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	4a04      	ldr	r2, [pc, #16]	; (8001bb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ba2:	5cd3      	ldrb	r3, [r2, r3]
 8001ba4:	40d9      	lsrs	r1, r3
 8001ba6:	000b      	movs	r3, r1
}    
 8001ba8:	0018      	movs	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	0800653c 	.word	0x0800653c

08001bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e044      	b.n	8001c54 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d107      	bne.n	8001be2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2278      	movs	r2, #120	; 0x78
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f7fe fecd 	bl	800097c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2224      	movs	r2, #36	; 0x24
 8001be6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	438a      	bics	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	0018      	movs	r0, r3
 8001c04:	f000 fe18 	bl	8002838 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f000 fc8c 	bl	8002528 <UART_SetConfig>
 8001c10:	0003      	movs	r3, r0
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e01c      	b.n	8001c54 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	490d      	ldr	r1, [pc, #52]	; (8001c5c <HAL_UART_Init+0xa4>)
 8001c26:	400a      	ands	r2, r1
 8001c28:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	212a      	movs	r1, #42	; 0x2a
 8001c36:	438a      	bics	r2, r1
 8001c38:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2101      	movs	r1, #1
 8001c46:	430a      	orrs	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f000 fea7 	bl	80029a0 <UART_CheckIdleState>
 8001c52:	0003      	movs	r3, r0
}
 8001c54:	0018      	movs	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b002      	add	sp, #8
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	ffffb7ff 	.word	0xffffb7ff

08001c60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	; 0x28
 8001c64:	af02      	add	r7, sp, #8
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	1dbb      	adds	r3, r7, #6
 8001c6e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c74:	2b20      	cmp	r3, #32
 8001c76:	d000      	beq.n	8001c7a <HAL_UART_Transmit+0x1a>
 8001c78:	e08d      	b.n	8001d96 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_UART_Transmit+0x28>
 8001c80:	1dbb      	adds	r3, r7, #6
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e085      	b.n	8001d98 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	015b      	lsls	r3, r3, #5
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d109      	bne.n	8001cac <HAL_UART_Transmit+0x4c>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d105      	bne.n	8001cac <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d001      	beq.n	8001cac <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e075      	b.n	8001d98 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2284      	movs	r2, #132	; 0x84
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2221      	movs	r2, #33	; 0x21
 8001cb8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cba:	f7fe ff73 	bl	8000ba4 <HAL_GetTick>
 8001cbe:	0003      	movs	r3, r0
 8001cc0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1dba      	adds	r2, r7, #6
 8001cc6:	2150      	movs	r1, #80	; 0x50
 8001cc8:	8812      	ldrh	r2, [r2, #0]
 8001cca:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1dba      	adds	r2, r7, #6
 8001cd0:	2152      	movs	r1, #82	; 0x52
 8001cd2:	8812      	ldrh	r2, [r2, #0]
 8001cd4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	015b      	lsls	r3, r3, #5
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d108      	bne.n	8001cf4 <HAL_UART_Transmit+0x94>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d104      	bne.n	8001cf4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	61bb      	str	r3, [r7, #24]
 8001cf2:	e003      	b.n	8001cfc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001cfc:	e030      	b.n	8001d60 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	0013      	movs	r3, r2
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	f000 fef0 	bl	8002af0 <UART_WaitOnFlagUntilTimeout>
 8001d10:	1e03      	subs	r3, r0, #0
 8001d12:	d004      	beq.n	8001d1e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2220      	movs	r2, #32
 8001d18:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e03c      	b.n	8001d98 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10b      	bne.n	8001d3c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	881a      	ldrh	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	05d2      	lsls	r2, r2, #23
 8001d2e:	0dd2      	lsrs	r2, r2, #23
 8001d30:	b292      	uxth	r2, r2
 8001d32:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	3302      	adds	r3, #2
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	e008      	b.n	8001d4e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	781a      	ldrb	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	b292      	uxth	r2, r2
 8001d46:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2252      	movs	r2, #82	; 0x52
 8001d52:	5a9b      	ldrh	r3, [r3, r2]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	3b01      	subs	r3, #1
 8001d58:	b299      	uxth	r1, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2252      	movs	r2, #82	; 0x52
 8001d5e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2252      	movs	r2, #82	; 0x52
 8001d64:	5a9b      	ldrh	r3, [r3, r2]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1c8      	bne.n	8001cfe <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	0013      	movs	r3, r2
 8001d76:	2200      	movs	r2, #0
 8001d78:	2140      	movs	r1, #64	; 0x40
 8001d7a:	f000 feb9 	bl	8002af0 <UART_WaitOnFlagUntilTimeout>
 8001d7e:	1e03      	subs	r3, r0, #0
 8001d80:	d004      	beq.n	8001d8c <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2220      	movs	r2, #32
 8001d86:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e005      	b.n	8001d98 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	e000      	b.n	8001d98 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8001d96:	2302      	movs	r3, #2
  }
}
 8001d98:	0018      	movs	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	b008      	add	sp, #32
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	1dbb      	adds	r3, r7, #6
 8001dac:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001db2:	2b20      	cmp	r3, #32
 8001db4:	d15b      	bne.n	8001e6e <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_UART_Transmit_IT+0x24>
 8001dbc:	1dbb      	adds	r3, r7, #6
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e053      	b.n	8001e70 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	015b      	lsls	r3, r3, #5
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d109      	bne.n	8001de8 <HAL_UART_Transmit_IT+0x48>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d105      	bne.n	8001de8 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2201      	movs	r2, #1
 8001de0:	4013      	ands	r3, r2
 8001de2:	d001      	beq.n	8001de8 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e043      	b.n	8001e70 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1dba      	adds	r2, r7, #6
 8001df2:	2150      	movs	r1, #80	; 0x50
 8001df4:	8812      	ldrh	r2, [r2, #0]
 8001df6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	1dba      	adds	r2, r7, #6
 8001dfc:	2152      	movs	r1, #82	; 0x52
 8001dfe:	8812      	ldrh	r2, [r2, #0]
 8001e00:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2284      	movs	r2, #132	; 0x84
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2221      	movs	r2, #33	; 0x21
 8001e14:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	015b      	lsls	r3, r3, #5
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d107      	bne.n	8001e32 <HAL_UART_Transmit_IT+0x92>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d103      	bne.n	8001e32 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4a12      	ldr	r2, [pc, #72]	; (8001e78 <HAL_UART_Transmit_IT+0xd8>)
 8001e2e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001e30:	e002      	b.n	8001e38 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4a11      	ldr	r2, [pc, #68]	; (8001e7c <HAL_UART_Transmit_IT+0xdc>)
 8001e36:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e38:	f3ef 8310 	mrs	r3, PRIMASK
 8001e3c:	613b      	str	r3, [r7, #16]
  return(result);
 8001e3e:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001e40:	61fb      	str	r3, [r7, #28]
 8001e42:	2301      	movs	r3, #1
 8001e44:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f383 8810 	msr	PRIMASK, r3
}
 8001e4c:	46c0      	nop			; (mov r8, r8)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2180      	movs	r1, #128	; 0x80
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	f383 8810 	msr	PRIMASK, r3
}
 8001e68:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e000      	b.n	8001e70 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8001e6e:	2302      	movs	r3, #2
  }
}
 8001e70:	0018      	movs	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	b008      	add	sp, #32
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	08002f0f 	.word	0x08002f0f
 8001e7c:	08002e5b 	.word	0x08002e5b

08001e80 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	1dbb      	adds	r3, r7, #6
 8001e8c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2280      	movs	r2, #128	; 0x80
 8001e92:	589b      	ldr	r3, [r3, r2]
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d145      	bne.n	8001f24 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_UART_Receive_IT+0x26>
 8001e9e:	1dbb      	adds	r3, r7, #6
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e03d      	b.n	8001f26 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	015b      	lsls	r3, r3, #5
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d109      	bne.n	8001eca <HAL_UART_Receive_IT+0x4a>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d105      	bne.n	8001eca <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d001      	beq.n	8001eca <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e02d      	b.n	8001f26 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	041b      	lsls	r3, r3, #16
 8001eda:	4013      	ands	r3, r2
 8001edc:	d019      	beq.n	8001f12 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ede:	f3ef 8310 	mrs	r3, PRIMASK
 8001ee2:	613b      	str	r3, [r7, #16]
  return(result);
 8001ee4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001ee6:	61fb      	str	r3, [r7, #28]
 8001ee8:	2301      	movs	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f383 8810 	msr	PRIMASK, r3
}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	04c9      	lsls	r1, r1, #19
 8001f02:	430a      	orrs	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	f383 8810 	msr	PRIMASK, r3
}
 8001f10:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001f12:	1dbb      	adds	r3, r7, #6
 8001f14:	881a      	ldrh	r2, [r3, #0]
 8001f16:	68b9      	ldr	r1, [r7, #8]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f000 fe58 	bl	8002bd0 <UART_Start_Receive_IT>
 8001f20:	0003      	movs	r3, r0
 8001f22:	e000      	b.n	8001f26 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001f24:	2302      	movs	r3, #2
  }
}
 8001f26:	0018      	movs	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b008      	add	sp, #32
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b0ab      	sub	sp, #172	; 0xac
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	22a4      	movs	r2, #164	; 0xa4
 8001f40:	18b9      	adds	r1, r7, r2
 8001f42:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	20a0      	movs	r0, #160	; 0xa0
 8001f4c:	1839      	adds	r1, r7, r0
 8001f4e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	219c      	movs	r1, #156	; 0x9c
 8001f58:	1879      	adds	r1, r7, r1
 8001f5a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001f5c:	0011      	movs	r1, r2
 8001f5e:	18bb      	adds	r3, r7, r2
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a99      	ldr	r2, [pc, #612]	; (80021c8 <HAL_UART_IRQHandler+0x298>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	2298      	movs	r2, #152	; 0x98
 8001f68:	18bc      	adds	r4, r7, r2
 8001f6a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001f6c:	18bb      	adds	r3, r7, r2
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d114      	bne.n	8001f9e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001f74:	187b      	adds	r3, r7, r1
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d00f      	beq.n	8001f9e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001f7e:	183b      	adds	r3, r7, r0
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2220      	movs	r2, #32
 8001f84:	4013      	ands	r3, r2
 8001f86:	d00a      	beq.n	8001f9e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d100      	bne.n	8001f92 <HAL_UART_IRQHandler+0x62>
 8001f90:	e29e      	b.n	80024d0 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	0010      	movs	r0, r2
 8001f9a:	4798      	blx	r3
      }
      return;
 8001f9c:	e298      	b.n	80024d0 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001f9e:	2398      	movs	r3, #152	; 0x98
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <HAL_UART_IRQHandler+0x7a>
 8001fa8:	e114      	b.n	80021d4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001faa:	239c      	movs	r3, #156	; 0x9c
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d106      	bne.n	8001fc4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001fb6:	23a0      	movs	r3, #160	; 0xa0
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a83      	ldr	r2, [pc, #524]	; (80021cc <HAL_UART_IRQHandler+0x29c>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d100      	bne.n	8001fc4 <HAL_UART_IRQHandler+0x94>
 8001fc2:	e107      	b.n	80021d4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001fc4:	23a4      	movs	r3, #164	; 0xa4
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d012      	beq.n	8001ff6 <HAL_UART_IRQHandler+0xc6>
 8001fd0:	23a0      	movs	r3, #160	; 0xa0
 8001fd2:	18fb      	adds	r3, r7, r3
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d00b      	beq.n	8001ff6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2284      	movs	r2, #132	; 0x84
 8001fea:	589b      	ldr	r3, [r3, r2]
 8001fec:	2201      	movs	r2, #1
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2184      	movs	r1, #132	; 0x84
 8001ff4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001ff6:	23a4      	movs	r3, #164	; 0xa4
 8001ff8:	18fb      	adds	r3, r7, r3
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	4013      	ands	r3, r2
 8002000:	d011      	beq.n	8002026 <HAL_UART_IRQHandler+0xf6>
 8002002:	239c      	movs	r3, #156	; 0x9c
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2201      	movs	r2, #1
 800200a:	4013      	ands	r3, r2
 800200c:	d00b      	beq.n	8002026 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2202      	movs	r2, #2
 8002014:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2284      	movs	r2, #132	; 0x84
 800201a:	589b      	ldr	r3, [r3, r2]
 800201c:	2204      	movs	r2, #4
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2184      	movs	r1, #132	; 0x84
 8002024:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002026:	23a4      	movs	r3, #164	; 0xa4
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2204      	movs	r2, #4
 800202e:	4013      	ands	r3, r2
 8002030:	d011      	beq.n	8002056 <HAL_UART_IRQHandler+0x126>
 8002032:	239c      	movs	r3, #156	; 0x9c
 8002034:	18fb      	adds	r3, r7, r3
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2201      	movs	r2, #1
 800203a:	4013      	ands	r3, r2
 800203c:	d00b      	beq.n	8002056 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2204      	movs	r2, #4
 8002044:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2284      	movs	r2, #132	; 0x84
 800204a:	589b      	ldr	r3, [r3, r2]
 800204c:	2202      	movs	r2, #2
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2184      	movs	r1, #132	; 0x84
 8002054:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002056:	23a4      	movs	r3, #164	; 0xa4
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2208      	movs	r2, #8
 800205e:	4013      	ands	r3, r2
 8002060:	d017      	beq.n	8002092 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002062:	23a0      	movs	r3, #160	; 0xa0
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2220      	movs	r2, #32
 800206a:	4013      	ands	r3, r2
 800206c:	d105      	bne.n	800207a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800206e:	239c      	movs	r3, #156	; 0x9c
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2201      	movs	r2, #1
 8002076:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002078:	d00b      	beq.n	8002092 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2208      	movs	r2, #8
 8002080:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2284      	movs	r2, #132	; 0x84
 8002086:	589b      	ldr	r3, [r3, r2]
 8002088:	2208      	movs	r2, #8
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2184      	movs	r1, #132	; 0x84
 8002090:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002092:	23a4      	movs	r3, #164	; 0xa4
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	4013      	ands	r3, r2
 800209e:	d013      	beq.n	80020c8 <HAL_UART_IRQHandler+0x198>
 80020a0:	23a0      	movs	r3, #160	; 0xa0
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	2380      	movs	r3, #128	; 0x80
 80020a8:	04db      	lsls	r3, r3, #19
 80020aa:	4013      	ands	r3, r2
 80020ac:	d00c      	beq.n	80020c8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2280      	movs	r2, #128	; 0x80
 80020b4:	0112      	lsls	r2, r2, #4
 80020b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2284      	movs	r2, #132	; 0x84
 80020bc:	589b      	ldr	r3, [r3, r2]
 80020be:	2220      	movs	r2, #32
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2184      	movs	r1, #132	; 0x84
 80020c6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2284      	movs	r2, #132	; 0x84
 80020cc:	589b      	ldr	r3, [r3, r2]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d100      	bne.n	80020d4 <HAL_UART_IRQHandler+0x1a4>
 80020d2:	e1ff      	b.n	80024d4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80020d4:	23a4      	movs	r3, #164	; 0xa4
 80020d6:	18fb      	adds	r3, r7, r3
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2220      	movs	r2, #32
 80020dc:	4013      	ands	r3, r2
 80020de:	d00e      	beq.n	80020fe <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80020e0:	23a0      	movs	r3, #160	; 0xa0
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2220      	movs	r2, #32
 80020e8:	4013      	ands	r3, r2
 80020ea:	d008      	beq.n	80020fe <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d004      	beq.n	80020fe <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	0010      	movs	r0, r2
 80020fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2284      	movs	r2, #132	; 0x84
 8002102:	589b      	ldr	r3, [r3, r2]
 8002104:	2194      	movs	r1, #148	; 0x94
 8002106:	187a      	adds	r2, r7, r1
 8002108:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2240      	movs	r2, #64	; 0x40
 8002112:	4013      	ands	r3, r2
 8002114:	2b40      	cmp	r3, #64	; 0x40
 8002116:	d004      	beq.n	8002122 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002118:	187b      	adds	r3, r7, r1
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2228      	movs	r2, #40	; 0x28
 800211e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002120:	d047      	beq.n	80021b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	0018      	movs	r0, r3
 8002126:	f000 fe1d 	bl	8002d64 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2240      	movs	r2, #64	; 0x40
 8002132:	4013      	ands	r3, r2
 8002134:	2b40      	cmp	r3, #64	; 0x40
 8002136:	d137      	bne.n	80021a8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002138:	f3ef 8310 	mrs	r3, PRIMASK
 800213c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800213e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002140:	2090      	movs	r0, #144	; 0x90
 8002142:	183a      	adds	r2, r7, r0
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	2301      	movs	r3, #1
 8002148:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800214a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800214c:	f383 8810 	msr	PRIMASK, r3
}
 8002150:	46c0      	nop			; (mov r8, r8)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2140      	movs	r1, #64	; 0x40
 800215e:	438a      	bics	r2, r1
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	183b      	adds	r3, r7, r0
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002168:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800216a:	f383 8810 	msr	PRIMASK, r3
}
 800216e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002174:	2b00      	cmp	r3, #0
 8002176:	d012      	beq.n	800219e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800217c:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <HAL_UART_IRQHandler+0x2a0>)
 800217e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002184:	0018      	movs	r0, r3
 8002186:	f7fe fe2d 	bl	8000de4 <HAL_DMA_Abort_IT>
 800218a:	1e03      	subs	r3, r0, #0
 800218c:	d01a      	beq.n	80021c4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002198:	0018      	movs	r0, r3
 800219a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800219c:	e012      	b.n	80021c4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	0018      	movs	r0, r3
 80021a2:	f000 f9ad 	bl	8002500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021a6:	e00d      	b.n	80021c4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	0018      	movs	r0, r3
 80021ac:	f000 f9a8 	bl	8002500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021b0:	e008      	b.n	80021c4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	0018      	movs	r0, r3
 80021b6:	f000 f9a3 	bl	8002500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2284      	movs	r2, #132	; 0x84
 80021be:	2100      	movs	r1, #0
 80021c0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80021c2:	e187      	b.n	80024d4 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c4:	46c0      	nop			; (mov r8, r8)
    return;
 80021c6:	e185      	b.n	80024d4 <HAL_UART_IRQHandler+0x5a4>
 80021c8:	0000080f 	.word	0x0000080f
 80021cc:	04000120 	.word	0x04000120
 80021d0:	08002e2d 	.word	0x08002e2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d000      	beq.n	80021de <HAL_UART_IRQHandler+0x2ae>
 80021dc:	e139      	b.n	8002452 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80021de:	23a4      	movs	r3, #164	; 0xa4
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2210      	movs	r2, #16
 80021e6:	4013      	ands	r3, r2
 80021e8:	d100      	bne.n	80021ec <HAL_UART_IRQHandler+0x2bc>
 80021ea:	e132      	b.n	8002452 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80021ec:	23a0      	movs	r3, #160	; 0xa0
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2210      	movs	r2, #16
 80021f4:	4013      	ands	r3, r2
 80021f6:	d100      	bne.n	80021fa <HAL_UART_IRQHandler+0x2ca>
 80021f8:	e12b      	b.n	8002452 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2210      	movs	r2, #16
 8002200:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2240      	movs	r2, #64	; 0x40
 800220a:	4013      	ands	r3, r2
 800220c:	2b40      	cmp	r3, #64	; 0x40
 800220e:	d000      	beq.n	8002212 <HAL_UART_IRQHandler+0x2e2>
 8002210:	e09f      	b.n	8002352 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	217e      	movs	r1, #126	; 0x7e
 800221c:	187b      	adds	r3, r7, r1
 800221e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002220:	187b      	adds	r3, r7, r1
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <HAL_UART_IRQHandler+0x2fa>
 8002228:	e156      	b.n	80024d8 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2258      	movs	r2, #88	; 0x58
 800222e:	5a9b      	ldrh	r3, [r3, r2]
 8002230:	187a      	adds	r2, r7, r1
 8002232:	8812      	ldrh	r2, [r2, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d300      	bcc.n	800223a <HAL_UART_IRQHandler+0x30a>
 8002238:	e14e      	b.n	80024d8 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	187a      	adds	r2, r7, r1
 800223e:	215a      	movs	r1, #90	; 0x5a
 8002240:	8812      	ldrh	r2, [r2, #0]
 8002242:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b20      	cmp	r3, #32
 800224c:	d06f      	beq.n	800232e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800224e:	f3ef 8310 	mrs	r3, PRIMASK
 8002252:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002256:	67bb      	str	r3, [r7, #120]	; 0x78
 8002258:	2301      	movs	r3, #1
 800225a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800225c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225e:	f383 8810 	msr	PRIMASK, r3
}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	499e      	ldr	r1, [pc, #632]	; (80024e8 <HAL_UART_IRQHandler+0x5b8>)
 8002270:	400a      	ands	r2, r1
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002276:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800227a:	f383 8810 	msr	PRIMASK, r3
}
 800227e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002280:	f3ef 8310 	mrs	r3, PRIMASK
 8002284:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002288:	677b      	str	r3, [r7, #116]	; 0x74
 800228a:	2301      	movs	r3, #1
 800228c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800228e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002290:	f383 8810 	msr	PRIMASK, r3
}
 8002294:	46c0      	nop			; (mov r8, r8)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2101      	movs	r1, #1
 80022a2:	438a      	bics	r2, r1
 80022a4:	609a      	str	r2, [r3, #8]
 80022a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022a8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ac:	f383 8810 	msr	PRIMASK, r3
}
 80022b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022b2:	f3ef 8310 	mrs	r3, PRIMASK
 80022b6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80022b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022ba:	673b      	str	r3, [r7, #112]	; 0x70
 80022bc:	2301      	movs	r3, #1
 80022be:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022c2:	f383 8810 	msr	PRIMASK, r3
}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2140      	movs	r1, #64	; 0x40
 80022d4:	438a      	bics	r2, r1
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022da:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022de:	f383 8810 	msr	PRIMASK, r3
}
 80022e2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2280      	movs	r2, #128	; 0x80
 80022e8:	2120      	movs	r1, #32
 80022ea:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022f2:	f3ef 8310 	mrs	r3, PRIMASK
 80022f6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80022f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022fc:	2301      	movs	r3, #1
 80022fe:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002300:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002302:	f383 8810 	msr	PRIMASK, r3
}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2110      	movs	r1, #16
 8002314:	438a      	bics	r2, r1
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800231a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800231c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800231e:	f383 8810 	msr	PRIMASK, r3
}
 8002322:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002328:	0018      	movs	r0, r3
 800232a:	f7fe fd23 	bl	8000d74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2202      	movs	r2, #2
 8002332:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2258      	movs	r2, #88	; 0x58
 8002338:	5a9a      	ldrh	r2, [r3, r2]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	215a      	movs	r1, #90	; 0x5a
 800233e:	5a5b      	ldrh	r3, [r3, r1]
 8002340:	b29b      	uxth	r3, r3
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	b29a      	uxth	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	0011      	movs	r1, r2
 800234a:	0018      	movs	r0, r3
 800234c:	f000 f8e0 	bl	8002510 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002350:	e0c2      	b.n	80024d8 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2258      	movs	r2, #88	; 0x58
 8002356:	5a99      	ldrh	r1, [r3, r2]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	225a      	movs	r2, #90	; 0x5a
 800235c:	5a9b      	ldrh	r3, [r3, r2]
 800235e:	b29a      	uxth	r2, r3
 8002360:	208e      	movs	r0, #142	; 0x8e
 8002362:	183b      	adds	r3, r7, r0
 8002364:	1a8a      	subs	r2, r1, r2
 8002366:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	225a      	movs	r2, #90	; 0x5a
 800236c:	5a9b      	ldrh	r3, [r3, r2]
 800236e:	b29b      	uxth	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d100      	bne.n	8002376 <HAL_UART_IRQHandler+0x446>
 8002374:	e0b2      	b.n	80024dc <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8002376:	183b      	adds	r3, r7, r0
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d100      	bne.n	8002380 <HAL_UART_IRQHandler+0x450>
 800237e:	e0ad      	b.n	80024dc <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002380:	f3ef 8310 	mrs	r3, PRIMASK
 8002384:	60fb      	str	r3, [r7, #12]
  return(result);
 8002386:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002388:	2488      	movs	r4, #136	; 0x88
 800238a:	193a      	adds	r2, r7, r4
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	2301      	movs	r3, #1
 8002390:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	f383 8810 	msr	PRIMASK, r3
}
 8002398:	46c0      	nop			; (mov r8, r8)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4951      	ldr	r1, [pc, #324]	; (80024ec <HAL_UART_IRQHandler+0x5bc>)
 80023a6:	400a      	ands	r2, r1
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	193b      	adds	r3, r7, r4
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f383 8810 	msr	PRIMASK, r3
}
 80023b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023b8:	f3ef 8310 	mrs	r3, PRIMASK
 80023bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80023be:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023c0:	2484      	movs	r4, #132	; 0x84
 80023c2:	193a      	adds	r2, r7, r4
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	2301      	movs	r3, #1
 80023c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f383 8810 	msr	PRIMASK, r3
}
 80023d0:	46c0      	nop			; (mov r8, r8)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2101      	movs	r1, #1
 80023de:	438a      	bics	r2, r1
 80023e0:	609a      	str	r2, [r3, #8]
 80023e2:	193b      	adds	r3, r7, r4
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	f383 8810 	msr	PRIMASK, r3
}
 80023ee:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2280      	movs	r2, #128	; 0x80
 80023f4:	2120      	movs	r1, #32
 80023f6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002404:	f3ef 8310 	mrs	r3, PRIMASK
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800240c:	2480      	movs	r4, #128	; 0x80
 800240e:	193a      	adds	r2, r7, r4
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	2301      	movs	r3, #1
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002418:	f383 8810 	msr	PRIMASK, r3
}
 800241c:	46c0      	nop			; (mov r8, r8)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2110      	movs	r1, #16
 800242a:	438a      	bics	r2, r1
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	193b      	adds	r3, r7, r4
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002436:	f383 8810 	msr	PRIMASK, r3
}
 800243a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002442:	183b      	adds	r3, r7, r0
 8002444:	881a      	ldrh	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	0011      	movs	r1, r2
 800244a:	0018      	movs	r0, r3
 800244c:	f000 f860 	bl	8002510 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002450:	e044      	b.n	80024dc <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002452:	23a4      	movs	r3, #164	; 0xa4
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	035b      	lsls	r3, r3, #13
 800245c:	4013      	ands	r3, r2
 800245e:	d010      	beq.n	8002482 <HAL_UART_IRQHandler+0x552>
 8002460:	239c      	movs	r3, #156	; 0x9c
 8002462:	18fb      	adds	r3, r7, r3
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	03db      	lsls	r3, r3, #15
 800246a:	4013      	ands	r3, r2
 800246c:	d009      	beq.n	8002482 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2280      	movs	r2, #128	; 0x80
 8002474:	0352      	lsls	r2, r2, #13
 8002476:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	0018      	movs	r0, r3
 800247c:	f000 ff88 	bl	8003390 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002480:	e02f      	b.n	80024e2 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002482:	23a4      	movs	r3, #164	; 0xa4
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2280      	movs	r2, #128	; 0x80
 800248a:	4013      	ands	r3, r2
 800248c:	d00f      	beq.n	80024ae <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800248e:	23a0      	movs	r3, #160	; 0xa0
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2280      	movs	r2, #128	; 0x80
 8002496:	4013      	ands	r3, r2
 8002498:	d009      	beq.n	80024ae <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d01e      	beq.n	80024e0 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	0010      	movs	r0, r2
 80024aa:	4798      	blx	r3
    }
    return;
 80024ac:	e018      	b.n	80024e0 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80024ae:	23a4      	movs	r3, #164	; 0xa4
 80024b0:	18fb      	adds	r3, r7, r3
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2240      	movs	r2, #64	; 0x40
 80024b6:	4013      	ands	r3, r2
 80024b8:	d013      	beq.n	80024e2 <HAL_UART_IRQHandler+0x5b2>
 80024ba:	23a0      	movs	r3, #160	; 0xa0
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2240      	movs	r2, #64	; 0x40
 80024c2:	4013      	ands	r3, r2
 80024c4:	d00d      	beq.n	80024e2 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	0018      	movs	r0, r3
 80024ca:	f000 fd7e 	bl	8002fca <UART_EndTransmit_IT>
    return;
 80024ce:	e008      	b.n	80024e2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80024d0:	46c0      	nop			; (mov r8, r8)
 80024d2:	e006      	b.n	80024e2 <HAL_UART_IRQHandler+0x5b2>
    return;
 80024d4:	46c0      	nop			; (mov r8, r8)
 80024d6:	e004      	b.n	80024e2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80024d8:	46c0      	nop			; (mov r8, r8)
 80024da:	e002      	b.n	80024e2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80024dc:	46c0      	nop			; (mov r8, r8)
 80024de:	e000      	b.n	80024e2 <HAL_UART_IRQHandler+0x5b2>
    return;
 80024e0:	46c0      	nop			; (mov r8, r8)
  }

}
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b02b      	add	sp, #172	; 0xac
 80024e6:	bd90      	pop	{r4, r7, pc}
 80024e8:	fffffeff 	.word	0xfffffeff
 80024ec:	fffffedf 	.word	0xfffffedf

080024f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80024f8:	46c0      	nop			; (mov r8, r8)
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b002      	add	sp, #8
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002508:	46c0      	nop			; (mov r8, r8)
 800250a:	46bd      	mov	sp, r7
 800250c:	b002      	add	sp, #8
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	000a      	movs	r2, r1
 800251a:	1cbb      	adds	r3, r7, #2
 800251c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	46bd      	mov	sp, r7
 8002522:	b002      	add	sp, #8
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002530:	231e      	movs	r3, #30
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	2200      	movs	r2, #0
 8002536:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	4313      	orrs	r3, r2
 800254e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4aaf      	ldr	r2, [pc, #700]	; (8002814 <UART_SetConfig+0x2ec>)
 8002558:	4013      	ands	r3, r2
 800255a:	0019      	movs	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	430a      	orrs	r2, r1
 8002564:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4aaa      	ldr	r2, [pc, #680]	; (8002818 <UART_SetConfig+0x2f0>)
 800256e:	4013      	ands	r3, r2
 8002570:	0019      	movs	r1, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	4313      	orrs	r3, r2
 800258c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4aa1      	ldr	r2, [pc, #644]	; (800281c <UART_SetConfig+0x2f4>)
 8002596:	4013      	ands	r3, r2
 8002598:	0019      	movs	r1, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a9d      	ldr	r2, [pc, #628]	; (8002820 <UART_SetConfig+0x2f8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d127      	bne.n	80025fe <UART_SetConfig+0xd6>
 80025ae:	4b9d      	ldr	r3, [pc, #628]	; (8002824 <UART_SetConfig+0x2fc>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	2203      	movs	r2, #3
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d00d      	beq.n	80025d6 <UART_SetConfig+0xae>
 80025ba:	d81b      	bhi.n	80025f4 <UART_SetConfig+0xcc>
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d014      	beq.n	80025ea <UART_SetConfig+0xc2>
 80025c0:	d818      	bhi.n	80025f4 <UART_SetConfig+0xcc>
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <UART_SetConfig+0xa4>
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d00a      	beq.n	80025e0 <UART_SetConfig+0xb8>
 80025ca:	e013      	b.n	80025f4 <UART_SetConfig+0xcc>
 80025cc:	231f      	movs	r3, #31
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	e065      	b.n	80026a2 <UART_SetConfig+0x17a>
 80025d6:	231f      	movs	r3, #31
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	2202      	movs	r2, #2
 80025dc:	701a      	strb	r2, [r3, #0]
 80025de:	e060      	b.n	80026a2 <UART_SetConfig+0x17a>
 80025e0:	231f      	movs	r3, #31
 80025e2:	18fb      	adds	r3, r7, r3
 80025e4:	2204      	movs	r2, #4
 80025e6:	701a      	strb	r2, [r3, #0]
 80025e8:	e05b      	b.n	80026a2 <UART_SetConfig+0x17a>
 80025ea:	231f      	movs	r3, #31
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	2208      	movs	r2, #8
 80025f0:	701a      	strb	r2, [r3, #0]
 80025f2:	e056      	b.n	80026a2 <UART_SetConfig+0x17a>
 80025f4:	231f      	movs	r3, #31
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	2210      	movs	r2, #16
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	e051      	b.n	80026a2 <UART_SetConfig+0x17a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a89      	ldr	r2, [pc, #548]	; (8002828 <UART_SetConfig+0x300>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d134      	bne.n	8002672 <UART_SetConfig+0x14a>
 8002608:	4b86      	ldr	r3, [pc, #536]	; (8002824 <UART_SetConfig+0x2fc>)
 800260a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800260c:	23c0      	movs	r3, #192	; 0xc0
 800260e:	029b      	lsls	r3, r3, #10
 8002610:	4013      	ands	r3, r2
 8002612:	22c0      	movs	r2, #192	; 0xc0
 8002614:	0292      	lsls	r2, r2, #10
 8002616:	4293      	cmp	r3, r2
 8002618:	d017      	beq.n	800264a <UART_SetConfig+0x122>
 800261a:	22c0      	movs	r2, #192	; 0xc0
 800261c:	0292      	lsls	r2, r2, #10
 800261e:	4293      	cmp	r3, r2
 8002620:	d822      	bhi.n	8002668 <UART_SetConfig+0x140>
 8002622:	2280      	movs	r2, #128	; 0x80
 8002624:	0292      	lsls	r2, r2, #10
 8002626:	4293      	cmp	r3, r2
 8002628:	d019      	beq.n	800265e <UART_SetConfig+0x136>
 800262a:	2280      	movs	r2, #128	; 0x80
 800262c:	0292      	lsls	r2, r2, #10
 800262e:	4293      	cmp	r3, r2
 8002630:	d81a      	bhi.n	8002668 <UART_SetConfig+0x140>
 8002632:	2b00      	cmp	r3, #0
 8002634:	d004      	beq.n	8002640 <UART_SetConfig+0x118>
 8002636:	2280      	movs	r2, #128	; 0x80
 8002638:	0252      	lsls	r2, r2, #9
 800263a:	4293      	cmp	r3, r2
 800263c:	d00a      	beq.n	8002654 <UART_SetConfig+0x12c>
 800263e:	e013      	b.n	8002668 <UART_SetConfig+0x140>
 8002640:	231f      	movs	r3, #31
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
 8002648:	e02b      	b.n	80026a2 <UART_SetConfig+0x17a>
 800264a:	231f      	movs	r3, #31
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	2202      	movs	r2, #2
 8002650:	701a      	strb	r2, [r3, #0]
 8002652:	e026      	b.n	80026a2 <UART_SetConfig+0x17a>
 8002654:	231f      	movs	r3, #31
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	2204      	movs	r2, #4
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	e021      	b.n	80026a2 <UART_SetConfig+0x17a>
 800265e:	231f      	movs	r3, #31
 8002660:	18fb      	adds	r3, r7, r3
 8002662:	2208      	movs	r2, #8
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	e01c      	b.n	80026a2 <UART_SetConfig+0x17a>
 8002668:	231f      	movs	r3, #31
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	2210      	movs	r2, #16
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	e017      	b.n	80026a2 <UART_SetConfig+0x17a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a6d      	ldr	r2, [pc, #436]	; (800282c <UART_SetConfig+0x304>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d104      	bne.n	8002686 <UART_SetConfig+0x15e>
 800267c:	231f      	movs	r3, #31
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	e00d      	b.n	80026a2 <UART_SetConfig+0x17a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a69      	ldr	r2, [pc, #420]	; (8002830 <UART_SetConfig+0x308>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d104      	bne.n	800269a <UART_SetConfig+0x172>
 8002690:	231f      	movs	r3, #31
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
 8002698:	e003      	b.n	80026a2 <UART_SetConfig+0x17a>
 800269a:	231f      	movs	r3, #31
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	2210      	movs	r2, #16
 80026a0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69da      	ldr	r2, [r3, #28]
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d15c      	bne.n	8002768 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 80026ae:	231f      	movs	r3, #31
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d015      	beq.n	80026e4 <UART_SetConfig+0x1bc>
 80026b8:	dc18      	bgt.n	80026ec <UART_SetConfig+0x1c4>
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d00d      	beq.n	80026da <UART_SetConfig+0x1b2>
 80026be:	dc15      	bgt.n	80026ec <UART_SetConfig+0x1c4>
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <UART_SetConfig+0x1a2>
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d005      	beq.n	80026d4 <UART_SetConfig+0x1ac>
 80026c8:	e010      	b.n	80026ec <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026ca:	f7ff fa5f 	bl	8001b8c <HAL_RCC_GetPCLK1Freq>
 80026ce:	0003      	movs	r3, r0
 80026d0:	61bb      	str	r3, [r7, #24]
        break;
 80026d2:	e012      	b.n	80026fa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026d4:	4b57      	ldr	r3, [pc, #348]	; (8002834 <UART_SetConfig+0x30c>)
 80026d6:	61bb      	str	r3, [r7, #24]
        break;
 80026d8:	e00f      	b.n	80026fa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026da:	f7ff f9db 	bl	8001a94 <HAL_RCC_GetSysClockFreq>
 80026de:	0003      	movs	r3, r0
 80026e0:	61bb      	str	r3, [r7, #24]
        break;
 80026e2:	e00a      	b.n	80026fa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	61bb      	str	r3, [r7, #24]
        break;
 80026ea:	e006      	b.n	80026fa <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026f0:	231e      	movs	r3, #30
 80026f2:	18fb      	adds	r3, r7, r3
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
        break;
 80026f8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d100      	bne.n	8002702 <UART_SetConfig+0x1da>
 8002700:	e07a      	b.n	80027f8 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	005a      	lsls	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	085b      	lsrs	r3, r3, #1
 800270c:	18d2      	adds	r2, r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	0019      	movs	r1, r3
 8002714:	0010      	movs	r0, r2
 8002716:	f7fd fd09 	bl	800012c <__udivsi3>
 800271a:	0003      	movs	r3, r0
 800271c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2b0f      	cmp	r3, #15
 8002722:	d91c      	bls.n	800275e <UART_SetConfig+0x236>
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	2380      	movs	r3, #128	; 0x80
 8002728:	025b      	lsls	r3, r3, #9
 800272a:	429a      	cmp	r2, r3
 800272c:	d217      	bcs.n	800275e <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	b29a      	uxth	r2, r3
 8002732:	200e      	movs	r0, #14
 8002734:	183b      	adds	r3, r7, r0
 8002736:	210f      	movs	r1, #15
 8002738:	438a      	bics	r2, r1
 800273a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	085b      	lsrs	r3, r3, #1
 8002740:	b29b      	uxth	r3, r3
 8002742:	2207      	movs	r2, #7
 8002744:	4013      	ands	r3, r2
 8002746:	b299      	uxth	r1, r3
 8002748:	183b      	adds	r3, r7, r0
 800274a:	183a      	adds	r2, r7, r0
 800274c:	8812      	ldrh	r2, [r2, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	183a      	adds	r2, r7, r0
 8002758:	8812      	ldrh	r2, [r2, #0]
 800275a:	60da      	str	r2, [r3, #12]
 800275c:	e04c      	b.n	80027f8 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800275e:	231e      	movs	r3, #30
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	2201      	movs	r2, #1
 8002764:	701a      	strb	r2, [r3, #0]
 8002766:	e047      	b.n	80027f8 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002768:	231f      	movs	r3, #31
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b08      	cmp	r3, #8
 8002770:	d015      	beq.n	800279e <UART_SetConfig+0x276>
 8002772:	dc18      	bgt.n	80027a6 <UART_SetConfig+0x27e>
 8002774:	2b04      	cmp	r3, #4
 8002776:	d00d      	beq.n	8002794 <UART_SetConfig+0x26c>
 8002778:	dc15      	bgt.n	80027a6 <UART_SetConfig+0x27e>
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <UART_SetConfig+0x25c>
 800277e:	2b02      	cmp	r3, #2
 8002780:	d005      	beq.n	800278e <UART_SetConfig+0x266>
 8002782:	e010      	b.n	80027a6 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002784:	f7ff fa02 	bl	8001b8c <HAL_RCC_GetPCLK1Freq>
 8002788:	0003      	movs	r3, r0
 800278a:	61bb      	str	r3, [r7, #24]
        break;
 800278c:	e012      	b.n	80027b4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800278e:	4b29      	ldr	r3, [pc, #164]	; (8002834 <UART_SetConfig+0x30c>)
 8002790:	61bb      	str	r3, [r7, #24]
        break;
 8002792:	e00f      	b.n	80027b4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002794:	f7ff f97e 	bl	8001a94 <HAL_RCC_GetSysClockFreq>
 8002798:	0003      	movs	r3, r0
 800279a:	61bb      	str	r3, [r7, #24]
        break;
 800279c:	e00a      	b.n	80027b4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800279e:	2380      	movs	r3, #128	; 0x80
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	61bb      	str	r3, [r7, #24]
        break;
 80027a4:	e006      	b.n	80027b4 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80027aa:	231e      	movs	r3, #30
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	2201      	movs	r2, #1
 80027b0:	701a      	strb	r2, [r3, #0]
        break;
 80027b2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d01e      	beq.n	80027f8 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	085a      	lsrs	r2, r3, #1
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	18d2      	adds	r2, r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	0019      	movs	r1, r3
 80027ca:	0010      	movs	r0, r2
 80027cc:	f7fd fcae 	bl	800012c <__udivsi3>
 80027d0:	0003      	movs	r3, r0
 80027d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	2b0f      	cmp	r3, #15
 80027d8:	d90a      	bls.n	80027f0 <UART_SetConfig+0x2c8>
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	2380      	movs	r3, #128	; 0x80
 80027de:	025b      	lsls	r3, r3, #9
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d205      	bcs.n	80027f0 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	e003      	b.n	80027f8 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80027f0:	231e      	movs	r3, #30
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002804:	231e      	movs	r3, #30
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	781b      	ldrb	r3, [r3, #0]
}
 800280a:	0018      	movs	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	b008      	add	sp, #32
 8002810:	bd80      	pop	{r7, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	efff69f3 	.word	0xefff69f3
 8002818:	ffffcfff 	.word	0xffffcfff
 800281c:	fffff4ff 	.word	0xfffff4ff
 8002820:	40013800 	.word	0x40013800
 8002824:	40021000 	.word	0x40021000
 8002828:	40004400 	.word	0x40004400
 800282c:	40004800 	.word	0x40004800
 8002830:	40004c00 	.word	0x40004c00
 8002834:	007a1200 	.word	0x007a1200

08002838 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	2208      	movs	r2, #8
 8002846:	4013      	ands	r3, r2
 8002848:	d00b      	beq.n	8002862 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4a4a      	ldr	r2, [pc, #296]	; (800297c <UART_AdvFeatureConfig+0x144>)
 8002852:	4013      	ands	r3, r2
 8002854:	0019      	movs	r1, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	2201      	movs	r2, #1
 8002868:	4013      	ands	r3, r2
 800286a:	d00b      	beq.n	8002884 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4a43      	ldr	r2, [pc, #268]	; (8002980 <UART_AdvFeatureConfig+0x148>)
 8002874:	4013      	ands	r3, r2
 8002876:	0019      	movs	r1, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	2202      	movs	r2, #2
 800288a:	4013      	ands	r3, r2
 800288c:	d00b      	beq.n	80028a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	4a3b      	ldr	r2, [pc, #236]	; (8002984 <UART_AdvFeatureConfig+0x14c>)
 8002896:	4013      	ands	r3, r2
 8002898:	0019      	movs	r1, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	2204      	movs	r2, #4
 80028ac:	4013      	ands	r3, r2
 80028ae:	d00b      	beq.n	80028c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	4a34      	ldr	r2, [pc, #208]	; (8002988 <UART_AdvFeatureConfig+0x150>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	0019      	movs	r1, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	2210      	movs	r2, #16
 80028ce:	4013      	ands	r3, r2
 80028d0:	d00b      	beq.n	80028ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	4a2c      	ldr	r2, [pc, #176]	; (800298c <UART_AdvFeatureConfig+0x154>)
 80028da:	4013      	ands	r3, r2
 80028dc:	0019      	movs	r1, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	2220      	movs	r2, #32
 80028f0:	4013      	ands	r3, r2
 80028f2:	d00b      	beq.n	800290c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	4a25      	ldr	r2, [pc, #148]	; (8002990 <UART_AdvFeatureConfig+0x158>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	0019      	movs	r1, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	2240      	movs	r2, #64	; 0x40
 8002912:	4013      	ands	r3, r2
 8002914:	d01d      	beq.n	8002952 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4a1d      	ldr	r2, [pc, #116]	; (8002994 <UART_AdvFeatureConfig+0x15c>)
 800291e:	4013      	ands	r3, r2
 8002920:	0019      	movs	r1, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	035b      	lsls	r3, r3, #13
 8002936:	429a      	cmp	r2, r3
 8002938:	d10b      	bne.n	8002952 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	4a15      	ldr	r2, [pc, #84]	; (8002998 <UART_AdvFeatureConfig+0x160>)
 8002942:	4013      	ands	r3, r2
 8002944:	0019      	movs	r1, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	2280      	movs	r2, #128	; 0x80
 8002958:	4013      	ands	r3, r2
 800295a:	d00b      	beq.n	8002974 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	4a0e      	ldr	r2, [pc, #56]	; (800299c <UART_AdvFeatureConfig+0x164>)
 8002964:	4013      	ands	r3, r2
 8002966:	0019      	movs	r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	605a      	str	r2, [r3, #4]
  }
}
 8002974:	46c0      	nop			; (mov r8, r8)
 8002976:	46bd      	mov	sp, r7
 8002978:	b002      	add	sp, #8
 800297a:	bd80      	pop	{r7, pc}
 800297c:	ffff7fff 	.word	0xffff7fff
 8002980:	fffdffff 	.word	0xfffdffff
 8002984:	fffeffff 	.word	0xfffeffff
 8002988:	fffbffff 	.word	0xfffbffff
 800298c:	ffffefff 	.word	0xffffefff
 8002990:	ffffdfff 	.word	0xffffdfff
 8002994:	ffefffff 	.word	0xffefffff
 8002998:	ff9fffff 	.word	0xff9fffff
 800299c:	fff7ffff 	.word	0xfff7ffff

080029a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b092      	sub	sp, #72	; 0x48
 80029a4:	af02      	add	r7, sp, #8
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2284      	movs	r2, #132	; 0x84
 80029ac:	2100      	movs	r1, #0
 80029ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029b0:	f7fe f8f8 	bl	8000ba4 <HAL_GetTick>
 80029b4:	0003      	movs	r3, r0
 80029b6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2208      	movs	r2, #8
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d12c      	bne.n	8002a20 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c8:	2280      	movs	r2, #128	; 0x80
 80029ca:	0391      	lsls	r1, r2, #14
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	4a46      	ldr	r2, [pc, #280]	; (8002ae8 <UART_CheckIdleState+0x148>)
 80029d0:	9200      	str	r2, [sp, #0]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f000 f88c 	bl	8002af0 <UART_WaitOnFlagUntilTimeout>
 80029d8:	1e03      	subs	r3, r0, #0
 80029da:	d021      	beq.n	8002a20 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029dc:	f3ef 8310 	mrs	r3, PRIMASK
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80029e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80029e6:	2301      	movs	r3, #1
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	f383 8810 	msr	PRIMASK, r3
}
 80029f0:	46c0      	nop			; (mov r8, r8)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2180      	movs	r1, #128	; 0x80
 80029fe:	438a      	bics	r2, r1
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a08:	f383 8810 	msr	PRIMASK, r3
}
 8002a0c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2220      	movs	r2, #32
 8002a12:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2278      	movs	r2, #120	; 0x78
 8002a18:	2100      	movs	r1, #0
 8002a1a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e05f      	b.n	8002ae0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2204      	movs	r2, #4
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d146      	bne.n	8002abc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a30:	2280      	movs	r2, #128	; 0x80
 8002a32:	03d1      	lsls	r1, r2, #15
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	4a2c      	ldr	r2, [pc, #176]	; (8002ae8 <UART_CheckIdleState+0x148>)
 8002a38:	9200      	str	r2, [sp, #0]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f000 f858 	bl	8002af0 <UART_WaitOnFlagUntilTimeout>
 8002a40:	1e03      	subs	r3, r0, #0
 8002a42:	d03b      	beq.n	8002abc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a44:	f3ef 8310 	mrs	r3, PRIMASK
 8002a48:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a4e:	2301      	movs	r3, #1
 8002a50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f383 8810 	msr	PRIMASK, r3
}
 8002a58:	46c0      	nop			; (mov r8, r8)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4921      	ldr	r1, [pc, #132]	; (8002aec <UART_CheckIdleState+0x14c>)
 8002a66:	400a      	ands	r2, r1
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f383 8810 	msr	PRIMASK, r3
}
 8002a74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a76:	f3ef 8310 	mrs	r3, PRIMASK
 8002a7a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a7c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a7e:	633b      	str	r3, [r7, #48]	; 0x30
 8002a80:	2301      	movs	r3, #1
 8002a82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f383 8810 	msr	PRIMASK, r3
}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2101      	movs	r1, #1
 8002a98:	438a      	bics	r2, r1
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	f383 8810 	msr	PRIMASK, r3
}
 8002aa6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2280      	movs	r2, #128	; 0x80
 8002aac:	2120      	movs	r1, #32
 8002aae:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2278      	movs	r2, #120	; 0x78
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e011      	b.n	8002ae0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2280      	movs	r2, #128	; 0x80
 8002ac6:	2120      	movs	r1, #32
 8002ac8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2278      	movs	r2, #120	; 0x78
 8002ada:	2100      	movs	r1, #0
 8002adc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b010      	add	sp, #64	; 0x40
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	01ffffff 	.word	0x01ffffff
 8002aec:	fffffedf 	.word	0xfffffedf

08002af0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	1dfb      	adds	r3, r7, #7
 8002afe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b00:	e051      	b.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	3301      	adds	r3, #1
 8002b06:	d04e      	beq.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b08:	f7fe f84c 	bl	8000ba4 <HAL_GetTick>
 8002b0c:	0002      	movs	r2, r0
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d302      	bcc.n	8002b1e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e051      	b.n	8002bc6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2204      	movs	r2, #4
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d03b      	beq.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b80      	cmp	r3, #128	; 0x80
 8002b32:	d038      	beq.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b40      	cmp	r3, #64	; 0x40
 8002b38:	d035      	beq.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	2208      	movs	r2, #8
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d111      	bne.n	8002b6c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2208      	movs	r2, #8
 8002b4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	0018      	movs	r0, r3
 8002b54:	f000 f906 	bl	8002d64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2284      	movs	r2, #132	; 0x84
 8002b5c:	2108      	movs	r1, #8
 8002b5e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2278      	movs	r2, #120	; 0x78
 8002b64:	2100      	movs	r1, #0
 8002b66:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e02c      	b.n	8002bc6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	69da      	ldr	r2, [r3, #28]
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	401a      	ands	r2, r3
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d112      	bne.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2280      	movs	r2, #128	; 0x80
 8002b86:	0112      	lsls	r2, r2, #4
 8002b88:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f000 f8e9 	bl	8002d64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2284      	movs	r2, #132	; 0x84
 8002b96:	2120      	movs	r1, #32
 8002b98:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2278      	movs	r2, #120	; 0x78
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e00f      	b.n	8002bc6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	425a      	negs	r2, r3
 8002bb6:	4153      	adcs	r3, r2
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	001a      	movs	r2, r3
 8002bbc:	1dfb      	adds	r3, r7, #7
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d09e      	beq.n	8002b02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b004      	add	sp, #16
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b090      	sub	sp, #64	; 0x40
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	1dbb      	adds	r3, r7, #6
 8002bdc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1dba      	adds	r2, r7, #6
 8002be8:	2158      	movs	r1, #88	; 0x58
 8002bea:	8812      	ldrh	r2, [r2, #0]
 8002bec:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1dba      	adds	r2, r7, #6
 8002bf2:	215a      	movs	r1, #90	; 0x5a
 8002bf4:	8812      	ldrh	r2, [r2, #0]
 8002bf6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	015b      	lsls	r3, r3, #5
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d10d      	bne.n	8002c26 <UART_Start_Receive_IT+0x56>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d104      	bne.n	8002c1c <UART_Start_Receive_IT+0x4c>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	225c      	movs	r2, #92	; 0x5c
 8002c16:	4950      	ldr	r1, [pc, #320]	; (8002d58 <UART_Start_Receive_IT+0x188>)
 8002c18:	5299      	strh	r1, [r3, r2]
 8002c1a:	e02e      	b.n	8002c7a <UART_Start_Receive_IT+0xaa>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	225c      	movs	r2, #92	; 0x5c
 8002c20:	21ff      	movs	r1, #255	; 0xff
 8002c22:	5299      	strh	r1, [r3, r2]
 8002c24:	e029      	b.n	8002c7a <UART_Start_Receive_IT+0xaa>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10d      	bne.n	8002c4a <UART_Start_Receive_IT+0x7a>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d104      	bne.n	8002c40 <UART_Start_Receive_IT+0x70>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	225c      	movs	r2, #92	; 0x5c
 8002c3a:	21ff      	movs	r1, #255	; 0xff
 8002c3c:	5299      	strh	r1, [r3, r2]
 8002c3e:	e01c      	b.n	8002c7a <UART_Start_Receive_IT+0xaa>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	225c      	movs	r2, #92	; 0x5c
 8002c44:	217f      	movs	r1, #127	; 0x7f
 8002c46:	5299      	strh	r1, [r3, r2]
 8002c48:	e017      	b.n	8002c7a <UART_Start_Receive_IT+0xaa>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	2380      	movs	r3, #128	; 0x80
 8002c50:	055b      	lsls	r3, r3, #21
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d10d      	bne.n	8002c72 <UART_Start_Receive_IT+0xa2>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d104      	bne.n	8002c68 <UART_Start_Receive_IT+0x98>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	225c      	movs	r2, #92	; 0x5c
 8002c62:	217f      	movs	r1, #127	; 0x7f
 8002c64:	5299      	strh	r1, [r3, r2]
 8002c66:	e008      	b.n	8002c7a <UART_Start_Receive_IT+0xaa>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	225c      	movs	r2, #92	; 0x5c
 8002c6c:	213f      	movs	r1, #63	; 0x3f
 8002c6e:	5299      	strh	r1, [r3, r2]
 8002c70:	e003      	b.n	8002c7a <UART_Start_Receive_IT+0xaa>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	225c      	movs	r2, #92	; 0x5c
 8002c76:	2100      	movs	r1, #0
 8002c78:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2284      	movs	r2, #132	; 0x84
 8002c7e:	2100      	movs	r1, #0
 8002c80:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2280      	movs	r2, #128	; 0x80
 8002c86:	2122      	movs	r1, #34	; 0x22
 8002c88:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c94:	2301      	movs	r3, #1
 8002c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9a:	f383 8810 	msr	PRIMASK, r3
}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2101      	movs	r1, #1
 8002cac:	430a      	orrs	r2, r1
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb6:	f383 8810 	msr	PRIMASK, r3
}
 8002cba:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	015b      	lsls	r3, r3, #5
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d107      	bne.n	8002cd8 <UART_Start_Receive_IT+0x108>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d103      	bne.n	8002cd8 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4a22      	ldr	r2, [pc, #136]	; (8002d5c <UART_Start_Receive_IT+0x18c>)
 8002cd4:	669a      	str	r2, [r3, #104]	; 0x68
 8002cd6:	e002      	b.n	8002cde <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4a21      	ldr	r2, [pc, #132]	; (8002d60 <UART_Start_Receive_IT+0x190>)
 8002cdc:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d019      	beq.n	8002d1a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8002cea:	61fb      	str	r3, [r7, #28]
  return(result);
 8002cec:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002cee:	637b      	str	r3, [r7, #52]	; 0x34
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	f383 8810 	msr	PRIMASK, r3
}
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2190      	movs	r1, #144	; 0x90
 8002d08:	0049      	lsls	r1, r1, #1
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	f383 8810 	msr	PRIMASK, r3
}
 8002d18:	e018      	b.n	8002d4c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d1e:	613b      	str	r3, [r7, #16]
  return(result);
 8002d20:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8002d22:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d24:	2301      	movs	r3, #1
 8002d26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f383 8810 	msr	PRIMASK, r3
}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2120      	movs	r1, #32
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d42:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f383 8810 	msr	PRIMASK, r3
}
 8002d4a:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	0018      	movs	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b010      	add	sp, #64	; 0x40
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	000001ff 	.word	0x000001ff
 8002d5c:	080031d9 	.word	0x080031d9
 8002d60:	08003021 	.word	0x08003021

08002d64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08e      	sub	sp, #56	; 0x38
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d70:	617b      	str	r3, [r7, #20]
  return(result);
 8002d72:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d74:	637b      	str	r3, [r7, #52]	; 0x34
 8002d76:	2301      	movs	r3, #1
 8002d78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	f383 8810 	msr	PRIMASK, r3
}
 8002d80:	46c0      	nop			; (mov r8, r8)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4926      	ldr	r1, [pc, #152]	; (8002e28 <UART_EndRxTransfer+0xc4>)
 8002d8e:	400a      	ands	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	f383 8810 	msr	PRIMASK, r3
}
 8002d9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8002da2:	623b      	str	r3, [r7, #32]
  return(result);
 8002da4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da6:	633b      	str	r3, [r7, #48]	; 0x30
 8002da8:	2301      	movs	r3, #1
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	f383 8810 	msr	PRIMASK, r3
}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	438a      	bics	r2, r1
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dca:	f383 8810 	msr	PRIMASK, r3
}
 8002dce:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d118      	bne.n	8002e0a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8002ddc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dde:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002de2:	2301      	movs	r3, #1
 8002de4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f383 8810 	msr	PRIMASK, r3
}
 8002dec:	46c0      	nop			; (mov r8, r8)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2110      	movs	r1, #16
 8002dfa:	438a      	bics	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f383 8810 	msr	PRIMASK, r3
}
 8002e08:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2280      	movs	r2, #128	; 0x80
 8002e0e:	2120      	movs	r1, #32
 8002e10:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b00e      	add	sp, #56	; 0x38
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	fffffedf 	.word	0xfffffedf

08002e2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	225a      	movs	r2, #90	; 0x5a
 8002e3e:	2100      	movs	r1, #0
 8002e40:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2252      	movs	r2, #82	; 0x52
 8002e46:	2100      	movs	r1, #0
 8002e48:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f7ff fb57 	bl	8002500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b004      	add	sp, #16
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b08a      	sub	sp, #40	; 0x28
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e66:	2b21      	cmp	r3, #33	; 0x21
 8002e68:	d14d      	bne.n	8002f06 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2252      	movs	r2, #82	; 0x52
 8002e6e:	5a9b      	ldrh	r3, [r3, r2]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d132      	bne.n	8002edc <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e76:	f3ef 8310 	mrs	r3, PRIMASK
 8002e7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e80:	2301      	movs	r3, #1
 8002e82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f383 8810 	msr	PRIMASK, r3
}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2180      	movs	r1, #128	; 0x80
 8002e98:	438a      	bics	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f383 8810 	msr	PRIMASK, r3
}
 8002ea6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8002eac:	617b      	str	r3, [r7, #20]
  return(result);
 8002eae:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002eb0:	623b      	str	r3, [r7, #32]
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	f383 8810 	msr	PRIMASK, r3
}
 8002ebc:	46c0      	nop			; (mov r8, r8)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2140      	movs	r1, #64	; 0x40
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	f383 8810 	msr	PRIMASK, r3
}
 8002ed8:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8002eda:	e014      	b.n	8002f06 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee0:	781a      	ldrb	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	b292      	uxth	r2, r2
 8002ee8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2252      	movs	r2, #82	; 0x52
 8002ef8:	5a9b      	ldrh	r3, [r3, r2]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b299      	uxth	r1, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2252      	movs	r2, #82	; 0x52
 8002f04:	5299      	strh	r1, [r3, r2]
}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	b00a      	add	sp, #40	; 0x28
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b08c      	sub	sp, #48	; 0x30
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f1a:	2b21      	cmp	r3, #33	; 0x21
 8002f1c:	d151      	bne.n	8002fc2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2252      	movs	r2, #82	; 0x52
 8002f22:	5a9b      	ldrh	r3, [r3, r2]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d132      	bne.n	8002f90 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f30:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f34:	2301      	movs	r3, #1
 8002f36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f383 8810 	msr	PRIMASK, r3
}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2180      	movs	r1, #128	; 0x80
 8002f4c:	438a      	bics	r2, r1
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f383 8810 	msr	PRIMASK, r3
}
 8002f5a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f60:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f62:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
 8002f66:	2301      	movs	r3, #1
 8002f68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f383 8810 	msr	PRIMASK, r3
}
 8002f70:	46c0      	nop			; (mov r8, r8)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2140      	movs	r1, #64	; 0x40
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	f383 8810 	msr	PRIMASK, r3
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8002f8e:	e018      	b.n	8002fc2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f94:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f98:	881a      	ldrh	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	05d2      	lsls	r2, r2, #23
 8002fa0:	0dd2      	lsrs	r2, r2, #23
 8002fa2:	b292      	uxth	r2, r2
 8002fa4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002faa:	1c9a      	adds	r2, r3, #2
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2252      	movs	r2, #82	; 0x52
 8002fb4:	5a9b      	ldrh	r3, [r3, r2]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b299      	uxth	r1, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2252      	movs	r2, #82	; 0x52
 8002fc0:	5299      	strh	r1, [r3, r2]
}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b00c      	add	sp, #48	; 0x30
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b086      	sub	sp, #24
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	2301      	movs	r3, #1
 8002fde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f383 8810 	msr	PRIMASK, r3
}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2140      	movs	r1, #64	; 0x40
 8002ff4:	438a      	bics	r2, r1
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f383 8810 	msr	PRIMASK, r3
}
 8003002:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	0018      	movs	r0, r3
 8003014:	f7ff fa6c 	bl	80024f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003018:	46c0      	nop			; (mov r8, r8)
 800301a:	46bd      	mov	sp, r7
 800301c:	b006      	add	sp, #24
 800301e:	bd80      	pop	{r7, pc}

08003020 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b094      	sub	sp, #80	; 0x50
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003028:	204e      	movs	r0, #78	; 0x4e
 800302a:	183b      	adds	r3, r7, r0
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	215c      	movs	r1, #92	; 0x5c
 8003030:	5a52      	ldrh	r2, [r2, r1]
 8003032:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2280      	movs	r2, #128	; 0x80
 8003038:	589b      	ldr	r3, [r3, r2]
 800303a:	2b22      	cmp	r3, #34	; 0x22
 800303c:	d000      	beq.n	8003040 <UART_RxISR_8BIT+0x20>
 800303e:	e0ba      	b.n	80031b6 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	214c      	movs	r1, #76	; 0x4c
 8003046:	187b      	adds	r3, r7, r1
 8003048:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800304a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800304c:	187b      	adds	r3, r7, r1
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	b2da      	uxtb	r2, r3
 8003052:	183b      	adds	r3, r7, r0
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	b2d9      	uxtb	r1, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305c:	400a      	ands	r2, r1
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	225a      	movs	r2, #90	; 0x5a
 8003070:	5a9b      	ldrh	r3, [r3, r2]
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b299      	uxth	r1, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	225a      	movs	r2, #90	; 0x5a
 800307c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	225a      	movs	r2, #90	; 0x5a
 8003082:	5a9b      	ldrh	r3, [r3, r2]
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d000      	beq.n	800308c <UART_RxISR_8BIT+0x6c>
 800308a:	e09c      	b.n	80031c6 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800308c:	f3ef 8310 	mrs	r3, PRIMASK
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003094:	64bb      	str	r3, [r7, #72]	; 0x48
 8003096:	2301      	movs	r3, #1
 8003098:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309c:	f383 8810 	msr	PRIMASK, r3
}
 80030a0:	46c0      	nop			; (mov r8, r8)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4948      	ldr	r1, [pc, #288]	; (80031d0 <UART_RxISR_8BIT+0x1b0>)
 80030ae:	400a      	ands	r2, r1
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b8:	f383 8810 	msr	PRIMASK, r3
}
 80030bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030be:	f3ef 8310 	mrs	r3, PRIMASK
 80030c2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80030c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c6:	647b      	str	r3, [r7, #68]	; 0x44
 80030c8:	2301      	movs	r3, #1
 80030ca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ce:	f383 8810 	msr	PRIMASK, r3
}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2101      	movs	r1, #1
 80030e0:	438a      	bics	r2, r1
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ea:	f383 8810 	msr	PRIMASK, r3
}
 80030ee:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2280      	movs	r2, #128	; 0x80
 80030f4:	2120      	movs	r1, #32
 80030f6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	041b      	lsls	r3, r3, #16
 800310e:	4013      	ands	r3, r2
 8003110:	d018      	beq.n	8003144 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003112:	f3ef 8310 	mrs	r3, PRIMASK
 8003116:	61bb      	str	r3, [r7, #24]
  return(result);
 8003118:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800311a:	643b      	str	r3, [r7, #64]	; 0x40
 800311c:	2301      	movs	r3, #1
 800311e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f383 8810 	msr	PRIMASK, r3
}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4928      	ldr	r1, [pc, #160]	; (80031d4 <UART_RxISR_8BIT+0x1b4>)
 8003134:	400a      	ands	r2, r1
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800313a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	f383 8810 	msr	PRIMASK, r3
}
 8003142:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003148:	2b01      	cmp	r3, #1
 800314a:	d12f      	bne.n	80031ac <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003152:	f3ef 8310 	mrs	r3, PRIMASK
 8003156:	60fb      	str	r3, [r7, #12]
  return(result);
 8003158:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800315a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800315c:	2301      	movs	r3, #1
 800315e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f383 8810 	msr	PRIMASK, r3
}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2110      	movs	r1, #16
 8003174:	438a      	bics	r2, r1
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800317a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f383 8810 	msr	PRIMASK, r3
}
 8003182:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	2210      	movs	r2, #16
 800318c:	4013      	ands	r3, r2
 800318e:	2b10      	cmp	r3, #16
 8003190:	d103      	bne.n	800319a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2210      	movs	r2, #16
 8003198:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2258      	movs	r2, #88	; 0x58
 800319e:	5a9a      	ldrh	r2, [r3, r2]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	0011      	movs	r1, r2
 80031a4:	0018      	movs	r0, r3
 80031a6:	f7ff f9b3 	bl	8002510 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80031aa:	e00c      	b.n	80031c6 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	0018      	movs	r0, r3
 80031b0:	f7fd f98c 	bl	80004cc <HAL_UART_RxCpltCallback>
}
 80031b4:	e007      	b.n	80031c6 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699a      	ldr	r2, [r3, #24]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2108      	movs	r1, #8
 80031c2:	430a      	orrs	r2, r1
 80031c4:	619a      	str	r2, [r3, #24]
}
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	46bd      	mov	sp, r7
 80031ca:	b014      	add	sp, #80	; 0x50
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	fffffedf 	.word	0xfffffedf
 80031d4:	fbffffff 	.word	0xfbffffff

080031d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b094      	sub	sp, #80	; 0x50
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80031e0:	204e      	movs	r0, #78	; 0x4e
 80031e2:	183b      	adds	r3, r7, r0
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	215c      	movs	r1, #92	; 0x5c
 80031e8:	5a52      	ldrh	r2, [r2, r1]
 80031ea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2280      	movs	r2, #128	; 0x80
 80031f0:	589b      	ldr	r3, [r3, r2]
 80031f2:	2b22      	cmp	r3, #34	; 0x22
 80031f4:	d000      	beq.n	80031f8 <UART_RxISR_16BIT+0x20>
 80031f6:	e0ba      	b.n	800336e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	214c      	movs	r1, #76	; 0x4c
 80031fe:	187b      	adds	r3, r7, r1
 8003200:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003202:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003208:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800320a:	187b      	adds	r3, r7, r1
 800320c:	183a      	adds	r2, r7, r0
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	8812      	ldrh	r2, [r2, #0]
 8003212:	4013      	ands	r3, r2
 8003214:	b29a      	uxth	r2, r3
 8003216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003218:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321e:	1c9a      	adds	r2, r3, #2
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	225a      	movs	r2, #90	; 0x5a
 8003228:	5a9b      	ldrh	r3, [r3, r2]
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b299      	uxth	r1, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	225a      	movs	r2, #90	; 0x5a
 8003234:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	225a      	movs	r2, #90	; 0x5a
 800323a:	5a9b      	ldrh	r3, [r3, r2]
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d000      	beq.n	8003244 <UART_RxISR_16BIT+0x6c>
 8003242:	e09c      	b.n	800337e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003244:	f3ef 8310 	mrs	r3, PRIMASK
 8003248:	623b      	str	r3, [r7, #32]
  return(result);
 800324a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800324c:	647b      	str	r3, [r7, #68]	; 0x44
 800324e:	2301      	movs	r3, #1
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	f383 8810 	msr	PRIMASK, r3
}
 8003258:	46c0      	nop			; (mov r8, r8)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4948      	ldr	r1, [pc, #288]	; (8003388 <UART_RxISR_16BIT+0x1b0>)
 8003266:	400a      	ands	r2, r1
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800326c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	f383 8810 	msr	PRIMASK, r3
}
 8003274:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003276:	f3ef 8310 	mrs	r3, PRIMASK
 800327a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800327e:	643b      	str	r3, [r7, #64]	; 0x40
 8003280:	2301      	movs	r3, #1
 8003282:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	f383 8810 	msr	PRIMASK, r3
}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2101      	movs	r1, #1
 8003298:	438a      	bics	r2, r1
 800329a:	609a      	str	r2, [r3, #8]
 800329c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800329e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a2:	f383 8810 	msr	PRIMASK, r3
}
 80032a6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2280      	movs	r2, #128	; 0x80
 80032ac:	2120      	movs	r1, #32
 80032ae:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	041b      	lsls	r3, r3, #16
 80032c6:	4013      	ands	r3, r2
 80032c8:	d018      	beq.n	80032fc <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ca:	f3ef 8310 	mrs	r3, PRIMASK
 80032ce:	617b      	str	r3, [r7, #20]
  return(result);
 80032d0:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80032d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032d4:	2301      	movs	r3, #1
 80032d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	f383 8810 	msr	PRIMASK, r3
}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4928      	ldr	r1, [pc, #160]	; (800338c <UART_RxISR_16BIT+0x1b4>)
 80032ec:	400a      	ands	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f383 8810 	msr	PRIMASK, r3
}
 80032fa:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003300:	2b01      	cmp	r3, #1
 8003302:	d12f      	bne.n	8003364 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800330a:	f3ef 8310 	mrs	r3, PRIMASK
 800330e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003310:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003312:	63bb      	str	r3, [r7, #56]	; 0x38
 8003314:	2301      	movs	r3, #1
 8003316:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f383 8810 	msr	PRIMASK, r3
}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2110      	movs	r1, #16
 800332c:	438a      	bics	r2, r1
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003332:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f383 8810 	msr	PRIMASK, r3
}
 800333a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	2210      	movs	r2, #16
 8003344:	4013      	ands	r3, r2
 8003346:	2b10      	cmp	r3, #16
 8003348:	d103      	bne.n	8003352 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2210      	movs	r2, #16
 8003350:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2258      	movs	r2, #88	; 0x58
 8003356:	5a9a      	ldrh	r2, [r3, r2]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	0011      	movs	r1, r2
 800335c:	0018      	movs	r0, r3
 800335e:	f7ff f8d7 	bl	8002510 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003362:	e00c      	b.n	800337e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	0018      	movs	r0, r3
 8003368:	f7fd f8b0 	bl	80004cc <HAL_UART_RxCpltCallback>
}
 800336c:	e007      	b.n	800337e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	699a      	ldr	r2, [r3, #24]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2108      	movs	r1, #8
 800337a:	430a      	orrs	r2, r1
 800337c:	619a      	str	r2, [r3, #24]
}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	46bd      	mov	sp, r7
 8003382:	b014      	add	sp, #80	; 0x50
 8003384:	bd80      	pop	{r7, pc}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	fffffedf 	.word	0xfffffedf
 800338c:	fbffffff 	.word	0xfbffffff

08003390 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003398:	46c0      	nop			; (mov r8, r8)
 800339a:	46bd      	mov	sp, r7
 800339c:	b002      	add	sp, #8
 800339e:	bd80      	pop	{r7, pc}

080033a0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3308      	adds	r3, #8
 80033ac:	001a      	movs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	4252      	negs	r2, r2
 80033b8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3308      	adds	r3, #8
 80033be:	001a      	movs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3308      	adds	r3, #8
 80033c8:	001a      	movs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033d4:	46c0      	nop			; (mov r8, r8)
 80033d6:	46bd      	mov	sp, r7
 80033d8:	b002      	add	sp, #8
 80033da:	bd80      	pop	{r7, pc}

080033dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b002      	add	sp, #8
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	601a      	str	r2, [r3, #0]
}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	46bd      	mov	sp, r7
 8003432:	b004      	add	sp, #16
 8003434:	bd80      	pop	{r7, pc}

08003436 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	3301      	adds	r3, #1
 800344a:	d103      	bne.n	8003454 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	e00c      	b.n	800346e <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3308      	adds	r3, #8
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	e002      	b.n	8003462 <vListInsert+0x2c>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	429a      	cmp	r2, r3
 800346c:	d2f6      	bcs.n	800345c <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	601a      	str	r2, [r3, #0]
}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	46bd      	mov	sp, r7
 800349e:	b004      	add	sp, #16
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6892      	ldr	r2, [r2, #8]
 80034b8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6852      	ldr	r2, [r2, #4]
 80034c2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d103      	bne.n	80034d6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	1e5a      	subs	r2, r3, #1
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
}
 80034ea:	0018      	movs	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b004      	add	sp, #16
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80034f2:	b5b0      	push	{r4, r5, r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80034fc:	2301      	movs	r3, #1
 80034fe:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <xQueueGenericReset+0x1c>
 800350a:	b672      	cpsid	i
 800350c:	e7fe      	b.n	800350c <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d100      	bne.n	8003516 <xQueueGenericReset+0x24>
 8003514:	e06a      	b.n	80035ec <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800351a:	2b00      	cmp	r3, #0
 800351c:	d066      	beq.n	80035ec <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003526:	2400      	movs	r4, #0
 8003528:	0c15      	lsrs	r5, r2, #16
 800352a:	0c19      	lsrs	r1, r3, #16
 800352c:	b2a8      	uxth	r0, r5
 800352e:	2800      	cmp	r0, #0
 8003530:	d104      	bne.n	800353c <xQueueGenericReset+0x4a>
 8003532:	b288      	uxth	r0, r1
 8003534:	2800      	cmp	r0, #0
 8003536:	d013      	beq.n	8003560 <xQueueGenericReset+0x6e>
 8003538:	1c10      	adds	r0, r2, #0
 800353a:	e004      	b.n	8003546 <xQueueGenericReset+0x54>
 800353c:	b289      	uxth	r1, r1
 800353e:	2900      	cmp	r1, #0
 8003540:	d10d      	bne.n	800355e <xQueueGenericReset+0x6c>
 8003542:	1c29      	adds	r1, r5, #0
 8003544:	1c18      	adds	r0, r3, #0
 8003546:	b292      	uxth	r2, r2
 8003548:	b29b      	uxth	r3, r3
 800354a:	435a      	muls	r2, r3
 800354c:	b283      	uxth	r3, r0
 800354e:	b289      	uxth	r1, r1
 8003550:	434b      	muls	r3, r1
 8003552:	0c12      	lsrs	r2, r2, #16
 8003554:	189b      	adds	r3, r3, r2
 8003556:	141b      	asrs	r3, r3, #16
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d000      	beq.n	8003560 <xQueueGenericReset+0x6e>
 800355e:	2401      	movs	r4, #1
 8003560:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 8003562:	d143      	bne.n	80035ec <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 8003564:	f002 f87c 	bl	8005660 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	434b      	muls	r3, r1
 8003576:	18d2      	adds	r2, r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2200      	movs	r2, #0
 8003580:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003592:	1e59      	subs	r1, r3, #1
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	434b      	muls	r3, r1
 800359a:	18d2      	adds	r2, r2, r3
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2244      	movs	r2, #68	; 0x44
 80035a4:	21ff      	movs	r1, #255	; 0xff
 80035a6:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2245      	movs	r2, #69	; 0x45
 80035ac:	21ff      	movs	r1, #255	; 0xff
 80035ae:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10d      	bne.n	80035d2 <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d013      	beq.n	80035e6 <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	3310      	adds	r3, #16
 80035c2:	0018      	movs	r0, r3
 80035c4:	f001 f898 	bl	80046f8 <xTaskRemoveFromEventList>
 80035c8:	1e03      	subs	r3, r0, #0
 80035ca:	d00c      	beq.n	80035e6 <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80035cc:	f002 f838 	bl	8005640 <vPortYield>
 80035d0:	e009      	b.n	80035e6 <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	3310      	adds	r3, #16
 80035d6:	0018      	movs	r0, r3
 80035d8:	f7ff fee2 	bl	80033a0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	3324      	adds	r3, #36	; 0x24
 80035e0:	0018      	movs	r0, r3
 80035e2:	f7ff fedd 	bl	80033a0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80035e6:	f002 f84d 	bl	8005684 <vPortExitCritical>
 80035ea:	e001      	b.n	80035f0 <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <xQueueGenericReset+0x108>
 80035f6:	b672      	cpsid	i
 80035f8:	e7fe      	b.n	80035f8 <xQueueGenericReset+0x106>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80035fa:	68fb      	ldr	r3, [r7, #12]
}
 80035fc:	0018      	movs	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	b004      	add	sp, #16
 8003602:	bdb0      	pop	{r4, r5, r7, pc}

08003604 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003606:	b08b      	sub	sp, #44	; 0x2c
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	1dfb      	adds	r3, r7, #7
 8003610:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d047      	beq.n	80036ac <xQueueGenericCreate+0xa8>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800361c:	2000      	movs	r0, #0
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	0c19      	lsrs	r1, r3, #16
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	1c1e      	adds	r6, r3, #0
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	0c1b      	lsrs	r3, r3, #16
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	1c15      	adds	r5, r2, #0
 800362e:	b28a      	uxth	r2, r1
 8003630:	2a00      	cmp	r2, #0
 8003632:	d105      	bne.n	8003640 <xQueueGenericCreate+0x3c>
 8003634:	b29a      	uxth	r2, r3
 8003636:	2a00      	cmp	r2, #0
 8003638:	d013      	beq.n	8003662 <xQueueGenericCreate+0x5e>
 800363a:	1c19      	adds	r1, r3, #0
 800363c:	1c34      	adds	r4, r6, #0
 800363e:	e003      	b.n	8003648 <xQueueGenericCreate+0x44>
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10c      	bne.n	8003660 <xQueueGenericCreate+0x5c>
 8003646:	1c2c      	adds	r4, r5, #0
 8003648:	b2b3      	uxth	r3, r6
 800364a:	b2aa      	uxth	r2, r5
 800364c:	435a      	muls	r2, r3
 800364e:	b2a3      	uxth	r3, r4
 8003650:	b289      	uxth	r1, r1
 8003652:	434b      	muls	r3, r1
 8003654:	0c12      	lsrs	r2, r2, #16
 8003656:	189b      	adds	r3, r3, r2
 8003658:	141b      	asrs	r3, r3, #16
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d000      	beq.n	8003662 <xQueueGenericCreate+0x5e>
 8003660:	2001      	movs	r0, #1
 8003662:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003664:	d122      	bne.n	80036ac <xQueueGenericCreate+0xa8>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800366c:	3351      	adds	r3, #81	; 0x51
 800366e:	d81d      	bhi.n	80036ac <xQueueGenericCreate+0xa8>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	4353      	muls	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	3350      	adds	r3, #80	; 0x50
 800367c:	0018      	movs	r0, r3
 800367e:	f002 f887 	bl	8005790 <pvPortMalloc>
 8003682:	0003      	movs	r3, r0
 8003684:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d014      	beq.n	80036b6 <xQueueGenericCreate+0xb2>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	3350      	adds	r3, #80	; 0x50
 8003694:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003696:	1dfb      	adds	r3, r7, #7
 8003698:	781c      	ldrb	r4, [r3, #0]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	0023      	movs	r3, r4
 80036a6:	f000 f80b 	bl	80036c0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80036aa:	e004      	b.n	80036b6 <xQueueGenericCreate+0xb2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <xQueueGenericCreate+0xb2>
 80036b2:	b672      	cpsid	i
 80036b4:	e7fe      	b.n	80036b4 <xQueueGenericCreate+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80036b6:	69fb      	ldr	r3, [r7, #28]
    }
 80036b8:	0018      	movs	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b009      	add	sp, #36	; 0x24
 80036be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036c0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	001a      	movs	r2, r3
 80036ce:	1cfb      	adds	r3, r7, #3
 80036d0:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d103      	bne.n	80036e0 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	e002      	b.n	80036e6 <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	2101      	movs	r1, #1
 80036f6:	0018      	movs	r0, r3
 80036f8:	f7ff fefb 	bl	80034f2 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	1cfa      	adds	r2, r7, #3
 8003700:	214c      	movs	r1, #76	; 0x4c
 8003702:	7812      	ldrb	r2, [r2, #0]
 8003704:	545a      	strb	r2, [r3, r1]
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	46bd      	mov	sp, r7
 800370a:	b004      	add	sp, #16
 800370c:	bd80      	pop	{r7, pc}

0800370e <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b08a      	sub	sp, #40	; 0x28
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800371c:	2300      	movs	r3, #0
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <xQueueGenericSend+0x20>
 800372a:	b672      	cpsid	i
 800372c:	e7fe      	b.n	800372c <xQueueGenericSend+0x1e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d103      	bne.n	800373c <xQueueGenericSend+0x2e>
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <xQueueGenericSend+0x32>
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <xQueueGenericSend+0x34>
 8003740:	2300      	movs	r3, #0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <xQueueGenericSend+0x3c>
 8003746:	b672      	cpsid	i
 8003748:	e7fe      	b.n	8003748 <xQueueGenericSend+0x3a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d103      	bne.n	8003758 <xQueueGenericSend+0x4a>
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <xQueueGenericSend+0x4e>
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <xQueueGenericSend+0x50>
 800375c:	2300      	movs	r3, #0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <xQueueGenericSend+0x58>
 8003762:	b672      	cpsid	i
 8003764:	e7fe      	b.n	8003764 <xQueueGenericSend+0x56>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003766:	f001 f9b3 	bl	8004ad0 <xTaskGetSchedulerState>
 800376a:	1e03      	subs	r3, r0, #0
 800376c:	d102      	bne.n	8003774 <xQueueGenericSend+0x66>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <xQueueGenericSend+0x6a>
 8003774:	2301      	movs	r3, #1
 8003776:	e000      	b.n	800377a <xQueueGenericSend+0x6c>
 8003778:	2300      	movs	r3, #0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <xQueueGenericSend+0x74>
 800377e:	b672      	cpsid	i
 8003780:	e7fe      	b.n	8003780 <xQueueGenericSend+0x72>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003782:	f001 ff6d 	bl	8005660 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378e:	429a      	cmp	r2, r3
 8003790:	d302      	bcc.n	8003798 <xQueueGenericSend+0x8a>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d11e      	bne.n	80037d6 <xQueueGenericSend+0xc8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	0018      	movs	r0, r3
 80037a0:	f000 f92e 	bl	8003a00 <prvCopyDataToQueue>
 80037a4:	0003      	movs	r3, r0
 80037a6:	61fb      	str	r3, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d009      	beq.n	80037c4 <xQueueGenericSend+0xb6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	3324      	adds	r3, #36	; 0x24
 80037b4:	0018      	movs	r0, r3
 80037b6:	f000 ff9f 	bl	80046f8 <xTaskRemoveFromEventList>
 80037ba:	1e03      	subs	r3, r0, #0
 80037bc:	d007      	beq.n	80037ce <xQueueGenericSend+0xc0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80037be:	f001 ff3f 	bl	8005640 <vPortYield>
 80037c2:	e004      	b.n	80037ce <xQueueGenericSend+0xc0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <xQueueGenericSend+0xc0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80037ca:	f001 ff39 	bl	8005640 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80037ce:	f001 ff59 	bl	8005684 <vPortExitCritical>
                return pdPASS;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e05b      	b.n	800388e <xQueueGenericSend+0x180>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d103      	bne.n	80037e4 <xQueueGenericSend+0xd6>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80037dc:	f001 ff52 	bl	8005684 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	e054      	b.n	800388e <xQueueGenericSend+0x180>
                }
                else if( xEntryTimeSet == pdFALSE )
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <xQueueGenericSend+0xea>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80037ea:	2314      	movs	r3, #20
 80037ec:	18fb      	adds	r3, r7, r3
 80037ee:	0018      	movs	r0, r3
 80037f0:	f001 f84c 	bl	800488c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80037f4:	2301      	movs	r3, #1
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80037f8:	f001 ff44 	bl	8005684 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80037fc:	f000 fcc0 	bl	8004180 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003800:	f001 ff2e 	bl	8005660 <vPortEnterCritical>
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	2244      	movs	r2, #68	; 0x44
 8003808:	5c9b      	ldrb	r3, [r3, r2]
 800380a:	b25b      	sxtb	r3, r3
 800380c:	3301      	adds	r3, #1
 800380e:	d103      	bne.n	8003818 <xQueueGenericSend+0x10a>
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	2244      	movs	r2, #68	; 0x44
 8003814:	2100      	movs	r1, #0
 8003816:	5499      	strb	r1, [r3, r2]
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	2245      	movs	r2, #69	; 0x45
 800381c:	5c9b      	ldrb	r3, [r3, r2]
 800381e:	b25b      	sxtb	r3, r3
 8003820:	3301      	adds	r3, #1
 8003822:	d103      	bne.n	800382c <xQueueGenericSend+0x11e>
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	2245      	movs	r2, #69	; 0x45
 8003828:	2100      	movs	r1, #0
 800382a:	5499      	strb	r1, [r3, r2]
 800382c:	f001 ff2a 	bl	8005684 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003830:	1d3a      	adds	r2, r7, #4
 8003832:	2314      	movs	r3, #20
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	0011      	movs	r1, r2
 8003838:	0018      	movs	r0, r3
 800383a:	f001 f83b 	bl	80048b4 <xTaskCheckForTimeOut>
 800383e:	1e03      	subs	r3, r0, #0
 8003840:	d11e      	bne.n	8003880 <xQueueGenericSend+0x172>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	0018      	movs	r0, r3
 8003846:	f000 f9e0 	bl	8003c0a <prvIsQueueFull>
 800384a:	1e03      	subs	r3, r0, #0
 800384c:	d011      	beq.n	8003872 <xQueueGenericSend+0x164>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	3310      	adds	r3, #16
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	0011      	movs	r1, r2
 8003856:	0018      	movs	r0, r3
 8003858:	f000 fef2 	bl	8004640 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	0018      	movs	r0, r3
 8003860:	f000 f95f 	bl	8003b22 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003864:	f000 fc98 	bl	8004198 <xTaskResumeAll>
 8003868:	1e03      	subs	r3, r0, #0
 800386a:	d18a      	bne.n	8003782 <xQueueGenericSend+0x74>
                {
                    portYIELD_WITHIN_API();
 800386c:	f001 fee8 	bl	8005640 <vPortYield>
 8003870:	e787      	b.n	8003782 <xQueueGenericSend+0x74>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	0018      	movs	r0, r3
 8003876:	f000 f954 	bl	8003b22 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800387a:	f000 fc8d 	bl	8004198 <xTaskResumeAll>
 800387e:	e780      	b.n	8003782 <xQueueGenericSend+0x74>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	0018      	movs	r0, r3
 8003884:	f000 f94d 	bl	8003b22 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003888:	f000 fc86 	bl	8004198 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800388c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800388e:	0018      	movs	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	b00a      	add	sp, #40	; 0x28
 8003894:	bd80      	pop	{r7, pc}

08003896 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b08a      	sub	sp, #40	; 0x28
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80038a2:	2300      	movs	r3, #0
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <xQueueReceive+0x1e>
 80038b0:	b672      	cpsid	i
 80038b2:	e7fe      	b.n	80038b2 <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d103      	bne.n	80038c2 <xQueueReceive+0x2c>
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <xQueueReceive+0x30>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <xQueueReceive+0x32>
 80038c6:	2300      	movs	r3, #0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <xQueueReceive+0x3a>
 80038cc:	b672      	cpsid	i
 80038ce:	e7fe      	b.n	80038ce <xQueueReceive+0x38>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038d0:	f001 f8fe 	bl	8004ad0 <xTaskGetSchedulerState>
 80038d4:	1e03      	subs	r3, r0, #0
 80038d6:	d102      	bne.n	80038de <xQueueReceive+0x48>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <xQueueReceive+0x4c>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <xQueueReceive+0x4e>
 80038e2:	2300      	movs	r3, #0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <xQueueReceive+0x56>
 80038e8:	b672      	cpsid	i
 80038ea:	e7fe      	b.n	80038ea <xQueueReceive+0x54>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80038ec:	f001 feb8 	bl	8005660 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f4:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01a      	beq.n	8003932 <xQueueReceive+0x9c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	0011      	movs	r1, r2
 8003902:	0018      	movs	r0, r3
 8003904:	f000 f8e7 	bl	8003ad6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	1e5a      	subs	r2, r3, #1
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <xQueueReceive+0x94>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	3310      	adds	r3, #16
 800391c:	0018      	movs	r0, r3
 800391e:	f000 feeb 	bl	80046f8 <xTaskRemoveFromEventList>
 8003922:	1e03      	subs	r3, r0, #0
 8003924:	d001      	beq.n	800392a <xQueueReceive+0x94>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003926:	f001 fe8b 	bl	8005640 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800392a:	f001 feab 	bl	8005684 <vPortExitCritical>
                return pdPASS;
 800392e:	2301      	movs	r3, #1
 8003930:	e062      	b.n	80039f8 <xQueueReceive+0x162>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d103      	bne.n	8003940 <xQueueReceive+0xaa>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003938:	f001 fea4 	bl	8005684 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800393c:	2300      	movs	r3, #0
 800393e:	e05b      	b.n	80039f8 <xQueueReceive+0x162>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <xQueueReceive+0xbe>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003946:	2314      	movs	r3, #20
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	0018      	movs	r0, r3
 800394c:	f000 ff9e 	bl	800488c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003950:	2301      	movs	r3, #1
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003954:	f001 fe96 	bl	8005684 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003958:	f000 fc12 	bl	8004180 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800395c:	f001 fe80 	bl	8005660 <vPortEnterCritical>
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	2244      	movs	r2, #68	; 0x44
 8003964:	5c9b      	ldrb	r3, [r3, r2]
 8003966:	b25b      	sxtb	r3, r3
 8003968:	3301      	adds	r3, #1
 800396a:	d103      	bne.n	8003974 <xQueueReceive+0xde>
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	2244      	movs	r2, #68	; 0x44
 8003970:	2100      	movs	r1, #0
 8003972:	5499      	strb	r1, [r3, r2]
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	2245      	movs	r2, #69	; 0x45
 8003978:	5c9b      	ldrb	r3, [r3, r2]
 800397a:	b25b      	sxtb	r3, r3
 800397c:	3301      	adds	r3, #1
 800397e:	d103      	bne.n	8003988 <xQueueReceive+0xf2>
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	2245      	movs	r2, #69	; 0x45
 8003984:	2100      	movs	r1, #0
 8003986:	5499      	strb	r1, [r3, r2]
 8003988:	f001 fe7c 	bl	8005684 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800398c:	1d3a      	adds	r2, r7, #4
 800398e:	2314      	movs	r3, #20
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	0011      	movs	r1, r2
 8003994:	0018      	movs	r0, r3
 8003996:	f000 ff8d 	bl	80048b4 <xTaskCheckForTimeOut>
 800399a:	1e03      	subs	r3, r0, #0
 800399c:	d11e      	bne.n	80039dc <xQueueReceive+0x146>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	0018      	movs	r0, r3
 80039a2:	f000 f91c 	bl	8003bde <prvIsQueueEmpty>
 80039a6:	1e03      	subs	r3, r0, #0
 80039a8:	d011      	beq.n	80039ce <xQueueReceive+0x138>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	3324      	adds	r3, #36	; 0x24
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	0011      	movs	r1, r2
 80039b2:	0018      	movs	r0, r3
 80039b4:	f000 fe44 	bl	8004640 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	0018      	movs	r0, r3
 80039bc:	f000 f8b1 	bl	8003b22 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80039c0:	f000 fbea 	bl	8004198 <xTaskResumeAll>
 80039c4:	1e03      	subs	r3, r0, #0
 80039c6:	d191      	bne.n	80038ec <xQueueReceive+0x56>
                {
                    portYIELD_WITHIN_API();
 80039c8:	f001 fe3a 	bl	8005640 <vPortYield>
 80039cc:	e78e      	b.n	80038ec <xQueueReceive+0x56>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	0018      	movs	r0, r3
 80039d2:	f000 f8a6 	bl	8003b22 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80039d6:	f000 fbdf 	bl	8004198 <xTaskResumeAll>
 80039da:	e787      	b.n	80038ec <xQueueReceive+0x56>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	0018      	movs	r0, r3
 80039e0:	f000 f89f 	bl	8003b22 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80039e4:	f000 fbd8 	bl	8004198 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	0018      	movs	r0, r3
 80039ec:	f000 f8f7 	bl	8003bde <prvIsQueueEmpty>
 80039f0:	1e03      	subs	r3, r0, #0
 80039f2:	d100      	bne.n	80039f6 <xQueueReceive+0x160>
 80039f4:	e77a      	b.n	80038ec <xQueueReceive+0x56>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80039f6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80039f8:	0018      	movs	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b00a      	add	sp, #40	; 0x28
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10e      	bne.n	8003a3c <prvCopyDataToQueue+0x3c>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d14e      	bne.n	8003ac4 <prvCopyDataToQueue+0xc4>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f001 f86c 	bl	8004b08 <xTaskPriorityDisinherit>
 8003a30:	0003      	movs	r3, r0
 8003a32:	617b      	str	r3, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	609a      	str	r2, [r3, #8]
 8003a3a:	e043      	b.n	8003ac4 <prvCopyDataToQueue+0xc4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d119      	bne.n	8003a76 <prvCopyDataToQueue+0x76>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6858      	ldr	r0, [r3, #4]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	0019      	movs	r1, r3
 8003a4e:	f002 f86f 	bl	8005b30 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	18d2      	adds	r2, r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d32b      	bcc.n	8003ac4 <prvCopyDataToQueue+0xc4>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	605a      	str	r2, [r3, #4]
 8003a74:	e026      	b.n	8003ac4 <prvCopyDataToQueue+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	68d8      	ldr	r0, [r3, #12]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	0019      	movs	r1, r3
 8003a82:	f002 f855 	bl	8005b30 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	425b      	negs	r3, r3
 8003a90:	18d2      	adds	r2, r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d207      	bcs.n	8003ab2 <prvCopyDataToQueue+0xb2>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	425b      	negs	r3, r3
 8003aac:	18d2      	adds	r2, r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d105      	bne.n	8003ac4 <prvCopyDataToQueue+0xc4>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <prvCopyDataToQueue+0xc4>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003acc:	697b      	ldr	r3, [r7, #20]
}
 8003ace:	0018      	movs	r0, r3
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	b006      	add	sp, #24
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d018      	beq.n	8003b1a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	18d2      	adds	r2, r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d303      	bcc.n	8003b0a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68d9      	ldr	r1, [r3, #12]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	0018      	movs	r0, r3
 8003b16:	f002 f80b 	bl	8005b30 <memcpy>
    }
}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	b002      	add	sp, #8
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b084      	sub	sp, #16
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003b2a:	f001 fd99 	bl	8005660 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003b2e:	230f      	movs	r3, #15
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	2145      	movs	r1, #69	; 0x45
 8003b36:	5c52      	ldrb	r2, [r2, r1]
 8003b38:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b3a:	e013      	b.n	8003b64 <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d016      	beq.n	8003b72 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3324      	adds	r3, #36	; 0x24
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f000 fdd5 	bl	80046f8 <xTaskRemoveFromEventList>
 8003b4e:	1e03      	subs	r3, r0, #0
 8003b50:	d001      	beq.n	8003b56 <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003b52:	f000 ff03 	bl	800495c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003b56:	210f      	movs	r1, #15
 8003b58:	187b      	adds	r3, r7, r1
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	187b      	adds	r3, r7, r1
 8003b62:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b64:	230f      	movs	r3, #15
 8003b66:	18fb      	adds	r3, r7, r3
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	b25b      	sxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	dce5      	bgt.n	8003b3c <prvUnlockQueue+0x1a>
 8003b70:	e000      	b.n	8003b74 <prvUnlockQueue+0x52>
                    break;
 8003b72:	46c0      	nop			; (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2245      	movs	r2, #69	; 0x45
 8003b78:	21ff      	movs	r1, #255	; 0xff
 8003b7a:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8003b7c:	f001 fd82 	bl	8005684 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003b80:	f001 fd6e 	bl	8005660 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003b84:	230e      	movs	r3, #14
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	2144      	movs	r1, #68	; 0x44
 8003b8c:	5c52      	ldrb	r2, [r2, r1]
 8003b8e:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b90:	e013      	b.n	8003bba <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d016      	beq.n	8003bc8 <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3310      	adds	r3, #16
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f000 fdaa 	bl	80046f8 <xTaskRemoveFromEventList>
 8003ba4:	1e03      	subs	r3, r0, #0
 8003ba6:	d001      	beq.n	8003bac <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8003ba8:	f000 fed8 	bl	800495c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003bac:	210e      	movs	r1, #14
 8003bae:	187b      	adds	r3, r7, r1
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	187b      	adds	r3, r7, r1
 8003bb8:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bba:	230e      	movs	r3, #14
 8003bbc:	18fb      	adds	r3, r7, r3
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	b25b      	sxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	dce5      	bgt.n	8003b92 <prvUnlockQueue+0x70>
 8003bc6:	e000      	b.n	8003bca <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 8003bc8:	46c0      	nop			; (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2244      	movs	r2, #68	; 0x44
 8003bce:	21ff      	movs	r1, #255	; 0xff
 8003bd0:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8003bd2:	f001 fd57 	bl	8005684 <vPortExitCritical>
}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	b004      	add	sp, #16
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003be6:	f001 fd3b 	bl	8005660 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d102      	bne.n	8003bf8 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	e001      	b.n	8003bfc <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003bfc:	f001 fd42 	bl	8005684 <vPortExitCritical>

    return xReturn;
 8003c00:	68fb      	ldr	r3, [r7, #12]
}
 8003c02:	0018      	movs	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b004      	add	sp, #16
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003c12:	f001 fd25 	bl	8005660 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d102      	bne.n	8003c28 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003c22:	2301      	movs	r3, #1
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	e001      	b.n	8003c2c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003c2c:	f001 fd2a 	bl	8005684 <vPortExitCritical>

    return xReturn;
 8003c30:	68fb      	ldr	r3, [r7, #12]
}
 8003c32:	0018      	movs	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b004      	add	sp, #16
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <vQueueAddToRegistry+0x18>
 8003c50:	b672      	cpsid	i
 8003c52:	e7fe      	b.n	8003c52 <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d025      	beq.n	8003ca6 <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	e01f      	b.n	8003ca0 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003c60:	4a17      	ldr	r2, [pc, #92]	; (8003cc0 <vQueueAddToRegistry+0x84>)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	18d3      	adds	r3, r2, r3
 8003c68:	3304      	adds	r3, #4
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d105      	bne.n	8003c7e <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	00da      	lsls	r2, r3, #3
 8003c76:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <vQueueAddToRegistry+0x84>)
 8003c78:	18d3      	adds	r3, r2, r3
 8003c7a:	60bb      	str	r3, [r7, #8]
                    break;
 8003c7c:	e013      	b.n	8003ca6 <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <vQueueAddToRegistry+0x5e>
 8003c84:	4b0e      	ldr	r3, [pc, #56]	; (8003cc0 <vQueueAddToRegistry+0x84>)
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	00d2      	lsls	r2, r2, #3
 8003c8a:	58d3      	ldr	r3, [r2, r3]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d104      	bne.n	8003c9a <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	00da      	lsls	r2, r3, #3
 8003c94:	4b0a      	ldr	r3, [pc, #40]	; (8003cc0 <vQueueAddToRegistry+0x84>)
 8003c96:	18d3      	adds	r3, r2, r3
 8003c98:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b07      	cmp	r3, #7
 8003ca4:	d9dc      	bls.n	8003c60 <vQueueAddToRegistry+0x24>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003cb8:	46c0      	nop			; (mov r8, r8)
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b004      	add	sp, #16
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20000320 	.word	0x20000320

08003cc4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003cd4:	f001 fcc4 	bl	8005660 <vPortEnterCritical>
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2244      	movs	r2, #68	; 0x44
 8003cdc:	5c9b      	ldrb	r3, [r3, r2]
 8003cde:	b25b      	sxtb	r3, r3
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	d103      	bne.n	8003cec <vQueueWaitForMessageRestricted+0x28>
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2244      	movs	r2, #68	; 0x44
 8003ce8:	2100      	movs	r1, #0
 8003cea:	5499      	strb	r1, [r3, r2]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	2245      	movs	r2, #69	; 0x45
 8003cf0:	5c9b      	ldrb	r3, [r3, r2]
 8003cf2:	b25b      	sxtb	r3, r3
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	d103      	bne.n	8003d00 <vQueueWaitForMessageRestricted+0x3c>
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	2245      	movs	r2, #69	; 0x45
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	5499      	strb	r1, [r3, r2]
 8003d00:	f001 fcc0 	bl	8005684 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d106      	bne.n	8003d1a <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	3324      	adds	r3, #36	; 0x24
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	68b9      	ldr	r1, [r7, #8]
 8003d14:	0018      	movs	r0, r3
 8003d16:	f000 fcb1 	bl	800467c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f7ff ff00 	bl	8003b22 <prvUnlockQueue>
    }
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	46bd      	mov	sp, r7
 8003d26:	b006      	add	sp, #24
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003d2a:	b590      	push	{r4, r7, lr}
 8003d2c:	b08d      	sub	sp, #52	; 0x34
 8003d2e:	af04      	add	r7, sp, #16
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	603b      	str	r3, [r7, #0]
 8003d36:	1dbb      	adds	r3, r7, #6
 8003d38:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003d3a:	1dbb      	adds	r3, r7, #6
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	0018      	movs	r0, r3
 8003d42:	f001 fd25 	bl	8005790 <pvPortMalloc>
 8003d46:	0003      	movs	r3, r0
 8003d48:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d016      	beq.n	8003d7e <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003d50:	2054      	movs	r0, #84	; 0x54
 8003d52:	f001 fd1d 	bl	8005790 <pvPortMalloc>
 8003d56:	0003      	movs	r3, r0
 8003d58:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d009      	beq.n	8003d74 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	2254      	movs	r2, #84	; 0x54
 8003d64:	2100      	movs	r1, #0
 8003d66:	0018      	movs	r0, r3
 8003d68:	f001 feeb 	bl	8005b42 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	631a      	str	r2, [r3, #48]	; 0x30
 8003d72:	e006      	b.n	8003d82 <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	0018      	movs	r0, r3
 8003d78:	f001 fdb2 	bl	80058e0 <vPortFree>
 8003d7c:	e001      	b.n	8003d82 <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d016      	beq.n	8003db6 <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d88:	1dbb      	adds	r3, r7, #6
 8003d8a:	881a      	ldrh	r2, [r3, #0]
 8003d8c:	683c      	ldr	r4, [r7, #0]
 8003d8e:	68b9      	ldr	r1, [r7, #8]
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	2300      	movs	r3, #0
 8003d94:	9303      	str	r3, [sp, #12]
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	9302      	str	r3, [sp, #8]
 8003d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	0023      	movs	r3, r4
 8003da4:	f000 f810 	bl	8003dc8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	0018      	movs	r0, r3
 8003dac:	f000 f88c 	bl	8003ec8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003db0:	2301      	movs	r3, #1
 8003db2:	61bb      	str	r3, [r7, #24]
 8003db4:	e002      	b.n	8003dbc <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003db6:	2301      	movs	r3, #1
 8003db8:	425b      	negs	r3, r3
 8003dba:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003dbc:	69bb      	ldr	r3, [r7, #24]
    }
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	b009      	add	sp, #36	; 0x24
 8003dc4:	bd90      	pop	{r4, r7, pc}
	...

08003dc8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	001a      	movs	r2, r3
 8003de0:	21a5      	movs	r1, #165	; 0xa5
 8003de2:	f001 feae 	bl	8005b42 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4935      	ldr	r1, [pc, #212]	; (8003ec4 <prvInitialiseNewTask+0xfc>)
 8003dee:	468c      	mov	ip, r1
 8003df0:	4463      	add	r3, ip
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	18d3      	adds	r3, r2, r3
 8003df6:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	2207      	movs	r2, #7
 8003dfc:	4393      	bics	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2207      	movs	r2, #7
 8003e04:	4013      	ands	r3, r2
 8003e06:	d001      	beq.n	8003e0c <prvInitialiseNewTask+0x44>
 8003e08:	b672      	cpsid	i
 8003e0a:	e7fe      	b.n	8003e0a <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d01f      	beq.n	8003e52 <prvInitialiseNewTask+0x8a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	e013      	b.n	8003e40 <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	18d3      	adds	r3, r2, r3
 8003e1e:	7818      	ldrb	r0, [r3, #0]
 8003e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e22:	2134      	movs	r1, #52	; 0x34
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	18d3      	adds	r3, r2, r3
 8003e28:	185b      	adds	r3, r3, r1
 8003e2a:	1c02      	adds	r2, r0, #0
 8003e2c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	18d3      	adds	r3, r2, r3
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d006      	beq.n	8003e48 <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d9e8      	bls.n	8003e18 <prvInitialiseNewTask+0x50>
 8003e46:	e000      	b.n	8003e4a <prvInitialiseNewTask+0x82>
            {
                break;
 8003e48:	46c0      	nop			; (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4c:	2238      	movs	r2, #56	; 0x38
 8003e4e:	2100      	movs	r1, #0
 8003e50:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d901      	bls.n	8003e5c <prvInitialiseNewTask+0x94>
 8003e58:	b672      	cpsid	i
 8003e5a:	e7fe      	b.n	8003e5a <prvInitialiseNewTask+0x92>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d901      	bls.n	8003e66 <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e62:	2304      	movs	r3, #4
 8003e64:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e68:	6a3a      	ldr	r2, [r7, #32]
 8003e6a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	6a3a      	ldr	r2, [r7, #32]
 8003e70:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	3304      	adds	r3, #4
 8003e76:	0018      	movs	r0, r3
 8003e78:	f7ff fab0 	bl	80033dc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7e:	3318      	adds	r3, #24
 8003e80:	0018      	movs	r0, r3
 8003e82:	f7ff faab 	bl	80033dc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e8a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	2205      	movs	r2, #5
 8003e90:	1ad2      	subs	r2, r2, r3
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e9a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	68f9      	ldr	r1, [r7, #12]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f001 fb44 	bl	8005530 <pxPortInitialiseStack>
 8003ea8:	0002      	movs	r2, r0
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <prvInitialiseNewTask+0xf2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eb8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	b006      	add	sp, #24
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	3fffffff 	.word	0x3fffffff

08003ec8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003ed0:	f001 fbc6 	bl	8005660 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003ed4:	4b3d      	ldr	r3, [pc, #244]	; (8003fcc <prvAddNewTaskToReadyList+0x104>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	4b3c      	ldr	r3, [pc, #240]	; (8003fcc <prvAddNewTaskToReadyList+0x104>)
 8003edc:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 8003ede:	4b3c      	ldr	r3, [pc, #240]	; (8003fd0 <prvAddNewTaskToReadyList+0x108>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d109      	bne.n	8003efa <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003ee6:	4b3a      	ldr	r3, [pc, #232]	; (8003fd0 <prvAddNewTaskToReadyList+0x108>)
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003eec:	4b37      	ldr	r3, [pc, #220]	; (8003fcc <prvAddNewTaskToReadyList+0x104>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d110      	bne.n	8003f16 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003ef4:	f000 fd4e 	bl	8004994 <prvInitialiseTaskLists>
 8003ef8:	e00d      	b.n	8003f16 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003efa:	4b36      	ldr	r3, [pc, #216]	; (8003fd4 <prvAddNewTaskToReadyList+0x10c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f02:	4b33      	ldr	r3, [pc, #204]	; (8003fd0 <prvAddNewTaskToReadyList+0x108>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d802      	bhi.n	8003f16 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003f10:	4b2f      	ldr	r3, [pc, #188]	; (8003fd0 <prvAddNewTaskToReadyList+0x108>)
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003f16:	4b30      	ldr	r3, [pc, #192]	; (8003fd8 <prvAddNewTaskToReadyList+0x110>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	4b2e      	ldr	r3, [pc, #184]	; (8003fd8 <prvAddNewTaskToReadyList+0x110>)
 8003f1e:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003f20:	4b2d      	ldr	r3, [pc, #180]	; (8003fd8 <prvAddNewTaskToReadyList+0x110>)
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2c:	4b2b      	ldr	r3, [pc, #172]	; (8003fdc <prvAddNewTaskToReadyList+0x114>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d903      	bls.n	8003f3c <prvAddNewTaskToReadyList+0x74>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f38:	4b28      	ldr	r3, [pc, #160]	; (8003fdc <prvAddNewTaskToReadyList+0x114>)
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f40:	4927      	ldr	r1, [pc, #156]	; (8003fe0 <prvAddNewTaskToReadyList+0x118>)
 8003f42:	0013      	movs	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	189b      	adds	r3, r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	18cb      	adds	r3, r1, r3
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	609a      	str	r2, [r3, #8]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	60da      	str	r2, [r3, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	3204      	adds	r2, #4
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	1d1a      	adds	r2, r3, #4
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	609a      	str	r2, [r3, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f76:	0013      	movs	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	189b      	adds	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4a18      	ldr	r2, [pc, #96]	; (8003fe0 <prvAddNewTaskToReadyList+0x118>)
 8003f80:	189a      	adds	r2, r3, r2
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	615a      	str	r2, [r3, #20]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8a:	4915      	ldr	r1, [pc, #84]	; (8003fe0 <prvAddNewTaskToReadyList+0x118>)
 8003f8c:	0013      	movs	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	189b      	adds	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	585b      	ldr	r3, [r3, r1]
 8003f96:	1c58      	adds	r0, r3, #1
 8003f98:	4911      	ldr	r1, [pc, #68]	; (8003fe0 <prvAddNewTaskToReadyList+0x118>)
 8003f9a:	0013      	movs	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	189b      	adds	r3, r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003fa4:	f001 fb6e 	bl	8005684 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003fa8:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <prvAddNewTaskToReadyList+0x10c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003fb0:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <prvAddNewTaskToReadyList+0x108>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d201      	bcs.n	8003fc2 <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003fbe:	f001 fb3f 	bl	8005640 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b004      	add	sp, #16
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	20000438 	.word	0x20000438
 8003fd0:	20000360 	.word	0x20000360
 8003fd4:	20000444 	.word	0x20000444
 8003fd8:	20000454 	.word	0x20000454
 8003fdc:	20000440 	.word	0x20000440
 8003fe0:	20000364 	.word	0x20000364

08003fe4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8003fec:	f001 fb38 	bl	8005660 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d102      	bne.n	8003ffc <vTaskDelete+0x18>
 8003ff6:	4b28      	ldr	r3, [pc, #160]	; (8004098 <vTaskDelete+0xb4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	e000      	b.n	8003ffe <vTaskDelete+0x1a>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	3304      	adds	r3, #4
 8004004:	0018      	movs	r0, r3
 8004006:	f7ff fa4c 	bl	80034a2 <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	2b00      	cmp	r3, #0
 8004010:	d004      	beq.n	800401c <vTaskDelete+0x38>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3318      	adds	r3, #24
 8004016:	0018      	movs	r0, r3
 8004018:	f7ff fa43 	bl	80034a2 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800401c:	4b1f      	ldr	r3, [pc, #124]	; (800409c <vTaskDelete+0xb8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	4b1e      	ldr	r3, [pc, #120]	; (800409c <vTaskDelete+0xb8>)
 8004024:	601a      	str	r2, [r3, #0]

            if( pxTCB == pxCurrentTCB )
 8004026:	4b1c      	ldr	r3, [pc, #112]	; (8004098 <vTaskDelete+0xb4>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	429a      	cmp	r2, r3
 800402e:	d10c      	bne.n	800404a <vTaskDelete+0x66>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	1d1a      	adds	r2, r3, #4
 8004034:	4b1a      	ldr	r3, [pc, #104]	; (80040a0 <vTaskDelete+0xbc>)
 8004036:	0011      	movs	r1, r2
 8004038:	0018      	movs	r0, r3
 800403a:	f7ff f9da 	bl	80033f2 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800403e:	4b19      	ldr	r3, [pc, #100]	; (80040a4 <vTaskDelete+0xc0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	4b17      	ldr	r3, [pc, #92]	; (80040a4 <vTaskDelete+0xc0>)
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	e006      	b.n	8004058 <vTaskDelete+0x74>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800404a:	4b17      	ldr	r3, [pc, #92]	; (80040a8 <vTaskDelete+0xc4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	1e5a      	subs	r2, r3, #1
 8004050:	4b15      	ldr	r3, [pc, #84]	; (80040a8 <vTaskDelete+0xc4>)
 8004052:	601a      	str	r2, [r3, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8004054:	f000 fd22 	bl	8004a9c <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8004058:	f001 fb14 	bl	8005684 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 800405c:	4b0e      	ldr	r3, [pc, #56]	; (8004098 <vTaskDelete+0xb4>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	429a      	cmp	r2, r3
 8004064:	d003      	beq.n	800406e <vTaskDelete+0x8a>
        {
            prvDeleteTCB( pxTCB );
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	0018      	movs	r0, r3
 800406a:	f000 fd05 	bl	8004a78 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800406e:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <vTaskDelete+0xc8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00c      	beq.n	8004090 <vTaskDelete+0xac>
        {
            if( pxTCB == pxCurrentTCB )
 8004076:	4b08      	ldr	r3, [pc, #32]	; (8004098 <vTaskDelete+0xb4>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	429a      	cmp	r2, r3
 800407e:	d107      	bne.n	8004090 <vTaskDelete+0xac>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8004080:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <vTaskDelete+0xcc>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <vTaskDelete+0xa8>
 8004088:	b672      	cpsid	i
 800408a:	e7fe      	b.n	800408a <vTaskDelete+0xa6>
                portYIELD_WITHIN_API();
 800408c:	f001 fad8 	bl	8005640 <vPortYield>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8004090:	46c0      	nop			; (mov r8, r8)
 8004092:	46bd      	mov	sp, r7
 8004094:	b004      	add	sp, #16
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20000360 	.word	0x20000360
 800409c:	20000454 	.word	0x20000454
 80040a0:	2000040c 	.word	0x2000040c
 80040a4:	20000420 	.word	0x20000420
 80040a8:	20000438 	.word	0x20000438
 80040ac:	20000444 	.word	0x20000444
 80040b0:	20000460 	.word	0x20000460

080040b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d010      	beq.n	80040e8 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80040c6:	4b0d      	ldr	r3, [pc, #52]	; (80040fc <vTaskDelay+0x48>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <vTaskDelay+0x1e>
 80040ce:	b672      	cpsid	i
 80040d0:	e7fe      	b.n	80040d0 <vTaskDelay+0x1c>
            vTaskSuspendAll();
 80040d2:	f000 f855 	bl	8004180 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2100      	movs	r1, #0
 80040da:	0018      	movs	r0, r3
 80040dc:	f000 ff4c 	bl	8004f78 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80040e0:	f000 f85a 	bl	8004198 <xTaskResumeAll>
 80040e4:	0003      	movs	r3, r0
 80040e6:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 80040ee:	f001 faa7 	bl	8005640 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	46bd      	mov	sp, r7
 80040f6:	b004      	add	sp, #16
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	20000460 	.word	0x20000460

08004100 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8004106:	4917      	ldr	r1, [pc, #92]	; (8004164 <vTaskStartScheduler+0x64>)
 8004108:	4817      	ldr	r0, [pc, #92]	; (8004168 <vTaskStartScheduler+0x68>)
 800410a:	4b18      	ldr	r3, [pc, #96]	; (800416c <vTaskStartScheduler+0x6c>)
 800410c:	9301      	str	r3, [sp, #4]
 800410e:	2300      	movs	r3, #0
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	2300      	movs	r3, #0
 8004114:	223c      	movs	r2, #60	; 0x3c
 8004116:	f7ff fe08 	bl	8003d2a <xTaskCreate>
 800411a:	0003      	movs	r3, r0
 800411c:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d103      	bne.n	800412c <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 8004124:	f000 ff96 	bl	8005054 <xTimerCreateTimerTask>
 8004128:	0003      	movs	r3, r0
 800412a:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d10d      	bne.n	800414e <vTaskStartScheduler+0x4e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8004132:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004134:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <vTaskStartScheduler+0x70>)
 8004136:	2201      	movs	r2, #1
 8004138:	4252      	negs	r2, r2
 800413a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800413c:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <vTaskStartScheduler+0x74>)
 800413e:	2201      	movs	r2, #1
 8004140:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <vTaskStartScheduler+0x78>)
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8004148:	f001 fa56 	bl	80055f8 <xPortStartScheduler>
 800414c:	e004      	b.n	8004158 <vTaskStartScheduler+0x58>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3301      	adds	r3, #1
 8004152:	d101      	bne.n	8004158 <vTaskStartScheduler+0x58>
 8004154:	b672      	cpsid	i
 8004156:	e7fe      	b.n	8004156 <vTaskStartScheduler+0x56>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004158:	4b08      	ldr	r3, [pc, #32]	; (800417c <vTaskStartScheduler+0x7c>)
 800415a:	681b      	ldr	r3, [r3, #0]
}
 800415c:	46c0      	nop			; (mov r8, r8)
 800415e:	46bd      	mov	sp, r7
 8004160:	b002      	add	sp, #8
 8004162:	bd80      	pop	{r7, pc}
 8004164:	08006514 	.word	0x08006514
 8004168:	08004971 	.word	0x08004971
 800416c:	2000045c 	.word	0x2000045c
 8004170:	20000458 	.word	0x20000458
 8004174:	20000444 	.word	0x20000444
 8004178:	2000043c 	.word	0x2000043c
 800417c:	20000170 	.word	0x20000170

08004180 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004184:	4b03      	ldr	r3, [pc, #12]	; (8004194 <vTaskSuspendAll+0x14>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	4b02      	ldr	r3, [pc, #8]	; (8004194 <vTaskSuspendAll+0x14>)
 800418c:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	20000460 	.word	0x20000460

08004198 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80041a2:	2300      	movs	r3, #0
 80041a4:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80041a6:	4b68      	ldr	r3, [pc, #416]	; (8004348 <xTaskResumeAll+0x1b0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <xTaskResumeAll+0x1a>
 80041ae:	b672      	cpsid	i
 80041b0:	e7fe      	b.n	80041b0 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80041b2:	f001 fa55 	bl	8005660 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80041b6:	4b64      	ldr	r3, [pc, #400]	; (8004348 <xTaskResumeAll+0x1b0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	1e5a      	subs	r2, r3, #1
 80041bc:	4b62      	ldr	r3, [pc, #392]	; (8004348 <xTaskResumeAll+0x1b0>)
 80041be:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041c0:	4b61      	ldr	r3, [pc, #388]	; (8004348 <xTaskResumeAll+0x1b0>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d000      	beq.n	80041ca <xTaskResumeAll+0x32>
 80041c8:	e0b7      	b.n	800433a <xTaskResumeAll+0x1a2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80041ca:	4b60      	ldr	r3, [pc, #384]	; (800434c <xTaskResumeAll+0x1b4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d100      	bne.n	80041d4 <xTaskResumeAll+0x3c>
 80041d2:	e0b2      	b.n	800433a <xTaskResumeAll+0x1a2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041d4:	e089      	b.n	80042ea <xTaskResumeAll+0x152>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041d6:	4b5e      	ldr	r3, [pc, #376]	; (8004350 <xTaskResumeAll+0x1b8>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	6a12      	ldr	r2, [r2, #32]
 80041ec:	609a      	str	r2, [r3, #8]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	69d2      	ldr	r2, [r2, #28]
 80041f6:	605a      	str	r2, [r3, #4]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	3318      	adds	r3, #24
 8004200:	429a      	cmp	r2, r3
 8004202:	d103      	bne.n	800420c <xTaskResumeAll+0x74>
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	6a1a      	ldr	r2, [r3, #32]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	605a      	str	r2, [r3, #4]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	2200      	movs	r2, #0
 8004210:	629a      	str	r2, [r3, #40]	; 0x28
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	1e5a      	subs	r2, r3, #1
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	607b      	str	r3, [r7, #4]
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	68d2      	ldr	r2, [r2, #12]
 800422a:	609a      	str	r2, [r3, #8]
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	6892      	ldr	r2, [r2, #8]
 8004234:	605a      	str	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	3304      	adds	r3, #4
 800423e:	429a      	cmp	r2, r3
 8004240:	d103      	bne.n	800424a <xTaskResumeAll+0xb2>
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2200      	movs	r2, #0
 800424e:	615a      	str	r2, [r3, #20]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	1e5a      	subs	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425e:	4b3d      	ldr	r3, [pc, #244]	; (8004354 <xTaskResumeAll+0x1bc>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d903      	bls.n	800426e <xTaskResumeAll+0xd6>
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426a:	4b3a      	ldr	r3, [pc, #232]	; (8004354 <xTaskResumeAll+0x1bc>)
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004272:	4939      	ldr	r1, [pc, #228]	; (8004358 <xTaskResumeAll+0x1c0>)
 8004274:	0013      	movs	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	189b      	adds	r3, r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	18cb      	adds	r3, r1, r3
 800427e:	3304      	adds	r3, #4
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	609a      	str	r2, [r3, #8]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	60da      	str	r2, [r3, #12]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	3204      	adds	r2, #4
 800429a:	605a      	str	r2, [r3, #4]
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	1d1a      	adds	r2, r3, #4
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	609a      	str	r2, [r3, #8]
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a8:	0013      	movs	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	189b      	adds	r3, r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4a29      	ldr	r2, [pc, #164]	; (8004358 <xTaskResumeAll+0x1c0>)
 80042b2:	189a      	adds	r2, r3, r2
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	615a      	str	r2, [r3, #20]
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042bc:	4926      	ldr	r1, [pc, #152]	; (8004358 <xTaskResumeAll+0x1c0>)
 80042be:	0013      	movs	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	189b      	adds	r3, r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	585b      	ldr	r3, [r3, r1]
 80042c8:	1c58      	adds	r0, r3, #1
 80042ca:	4923      	ldr	r1, [pc, #140]	; (8004358 <xTaskResumeAll+0x1c0>)
 80042cc:	0013      	movs	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	189b      	adds	r3, r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042da:	4b20      	ldr	r3, [pc, #128]	; (800435c <xTaskResumeAll+0x1c4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d302      	bcc.n	80042ea <xTaskResumeAll+0x152>
                    {
                        xYieldPending = pdTRUE;
 80042e4:	4b1e      	ldr	r3, [pc, #120]	; (8004360 <xTaskResumeAll+0x1c8>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042ea:	4b19      	ldr	r3, [pc, #100]	; (8004350 <xTaskResumeAll+0x1b8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d000      	beq.n	80042f4 <xTaskResumeAll+0x15c>
 80042f2:	e770      	b.n	80041d6 <xTaskResumeAll+0x3e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <xTaskResumeAll+0x166>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80042fa:	f000 fbcf 	bl	8004a9c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80042fe:	4b19      	ldr	r3, [pc, #100]	; (8004364 <xTaskResumeAll+0x1cc>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00f      	beq.n	800432a <xTaskResumeAll+0x192>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800430a:	f000 f83b 	bl	8004384 <xTaskIncrementTick>
 800430e:	1e03      	subs	r3, r0, #0
 8004310:	d002      	beq.n	8004318 <xTaskResumeAll+0x180>
                            {
                                xYieldPending = pdTRUE;
 8004312:	4b13      	ldr	r3, [pc, #76]	; (8004360 <xTaskResumeAll+0x1c8>)
 8004314:	2201      	movs	r2, #1
 8004316:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	3b01      	subs	r3, #1
 800431c:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f2      	bne.n	800430a <xTaskResumeAll+0x172>

                        xPendedTicks = 0;
 8004324:	4b0f      	ldr	r3, [pc, #60]	; (8004364 <xTaskResumeAll+0x1cc>)
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800432a:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <xTaskResumeAll+0x1c8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <xTaskResumeAll+0x1a2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8004332:	2301      	movs	r3, #1
 8004334:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004336:	f001 f983 	bl	8005640 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800433a:	f001 f9a3 	bl	8005684 <vPortExitCritical>

    return xAlreadyYielded;
 800433e:	693b      	ldr	r3, [r7, #16]
}
 8004340:	0018      	movs	r0, r3
 8004342:	46bd      	mov	sp, r7
 8004344:	b006      	add	sp, #24
 8004346:	bd80      	pop	{r7, pc}
 8004348:	20000460 	.word	0x20000460
 800434c:	20000438 	.word	0x20000438
 8004350:	200003f8 	.word	0x200003f8
 8004354:	20000440 	.word	0x20000440
 8004358:	20000364 	.word	0x20000364
 800435c:	20000360 	.word	0x20000360
 8004360:	2000044c 	.word	0x2000044c
 8004364:	20000448 	.word	0x20000448

08004368 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800436e:	4b04      	ldr	r3, [pc, #16]	; (8004380 <xTaskGetTickCount+0x18>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004374:	687b      	ldr	r3, [r7, #4]
}
 8004376:	0018      	movs	r0, r3
 8004378:	46bd      	mov	sp, r7
 800437a:	b002      	add	sp, #8
 800437c:	bd80      	pop	{r7, pc}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	2000043c 	.word	0x2000043c

08004384 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800438e:	4b78      	ldr	r3, [pc, #480]	; (8004570 <xTaskIncrementTick+0x1ec>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d000      	beq.n	8004398 <xTaskIncrementTick+0x14>
 8004396:	e0e0      	b.n	800455a <xTaskIncrementTick+0x1d6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004398:	4b76      	ldr	r3, [pc, #472]	; (8004574 <xTaskIncrementTick+0x1f0>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3301      	adds	r3, #1
 800439e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80043a0:	4b74      	ldr	r3, [pc, #464]	; (8004574 <xTaskIncrementTick+0x1f0>)
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d117      	bne.n	80043dc <xTaskIncrementTick+0x58>
        {
            taskSWITCH_DELAYED_LISTS();
 80043ac:	4b72      	ldr	r3, [pc, #456]	; (8004578 <xTaskIncrementTick+0x1f4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <xTaskIncrementTick+0x36>
 80043b6:	b672      	cpsid	i
 80043b8:	e7fe      	b.n	80043b8 <xTaskIncrementTick+0x34>
 80043ba:	4b6f      	ldr	r3, [pc, #444]	; (8004578 <xTaskIncrementTick+0x1f4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	4b6e      	ldr	r3, [pc, #440]	; (800457c <xTaskIncrementTick+0x1f8>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	4b6c      	ldr	r3, [pc, #432]	; (8004578 <xTaskIncrementTick+0x1f4>)
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	4b6c      	ldr	r3, [pc, #432]	; (800457c <xTaskIncrementTick+0x1f8>)
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	4b6c      	ldr	r3, [pc, #432]	; (8004580 <xTaskIncrementTick+0x1fc>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	4b6a      	ldr	r3, [pc, #424]	; (8004580 <xTaskIncrementTick+0x1fc>)
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	f000 fb60 	bl	8004a9c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80043dc:	4b69      	ldr	r3, [pc, #420]	; (8004584 <xTaskIncrementTick+0x200>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d200      	bcs.n	80043e8 <xTaskIncrementTick+0x64>
 80043e6:	e0a4      	b.n	8004532 <xTaskIncrementTick+0x1ae>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043e8:	4b63      	ldr	r3, [pc, #396]	; (8004578 <xTaskIncrementTick+0x1f4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d104      	bne.n	80043fc <xTaskIncrementTick+0x78>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043f2:	4b64      	ldr	r3, [pc, #400]	; (8004584 <xTaskIncrementTick+0x200>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	4252      	negs	r2, r2
 80043f8:	601a      	str	r2, [r3, #0]
                    break;
 80043fa:	e09a      	b.n	8004532 <xTaskIncrementTick+0x1ae>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043fc:	4b5e      	ldr	r3, [pc, #376]	; (8004578 <xTaskIncrementTick+0x1f4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	429a      	cmp	r2, r3
 8004412:	d203      	bcs.n	800441c <xTaskIncrementTick+0x98>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004414:	4b5b      	ldr	r3, [pc, #364]	; (8004584 <xTaskIncrementTick+0x200>)
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800441a:	e08a      	b.n	8004532 <xTaskIncrementTick+0x1ae>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	68d2      	ldr	r2, [r2, #12]
 800442a:	609a      	str	r2, [r3, #8]
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	6892      	ldr	r2, [r2, #8]
 8004434:	605a      	str	r2, [r3, #4]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	3304      	adds	r3, #4
 800443e:	429a      	cmp	r2, r3
 8004440:	d103      	bne.n	800444a <xTaskIncrementTick+0xc6>
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	605a      	str	r2, [r3, #4]
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	2200      	movs	r2, #0
 800444e:	615a      	str	r2, [r3, #20]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	1e5a      	subs	r2, r3, #1
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	2b00      	cmp	r3, #0
 8004460:	d01e      	beq.n	80044a0 <xTaskIncrementTick+0x11c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004466:	607b      	str	r3, [r7, #4]
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	6a12      	ldr	r2, [r2, #32]
 8004470:	609a      	str	r2, [r3, #8]
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	69d2      	ldr	r2, [r2, #28]
 800447a:	605a      	str	r2, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	3318      	adds	r3, #24
 8004484:	429a      	cmp	r2, r3
 8004486:	d103      	bne.n	8004490 <xTaskIncrementTick+0x10c>
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	6a1a      	ldr	r2, [r3, #32]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	605a      	str	r2, [r3, #4]
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	2200      	movs	r2, #0
 8004494:	629a      	str	r2, [r3, #40]	; 0x28
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	1e5a      	subs	r2, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a4:	4b38      	ldr	r3, [pc, #224]	; (8004588 <xTaskIncrementTick+0x204>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d903      	bls.n	80044b4 <xTaskIncrementTick+0x130>
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b0:	4b35      	ldr	r3, [pc, #212]	; (8004588 <xTaskIncrementTick+0x204>)
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b8:	4934      	ldr	r1, [pc, #208]	; (800458c <xTaskIncrementTick+0x208>)
 80044ba:	0013      	movs	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	189b      	adds	r3, r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	18cb      	adds	r3, r1, r3
 80044c4:	3304      	adds	r3, #4
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	603b      	str	r3, [r7, #0]
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	609a      	str	r2, [r3, #8]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	60da      	str	r2, [r3, #12]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	3204      	adds	r2, #4
 80044e0:	605a      	str	r2, [r3, #4]
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1d1a      	adds	r2, r3, #4
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	609a      	str	r2, [r3, #8]
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ee:	0013      	movs	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	189b      	adds	r3, r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4a25      	ldr	r2, [pc, #148]	; (800458c <xTaskIncrementTick+0x208>)
 80044f8:	189a      	adds	r2, r3, r2
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	615a      	str	r2, [r3, #20]
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004502:	4922      	ldr	r1, [pc, #136]	; (800458c <xTaskIncrementTick+0x208>)
 8004504:	0013      	movs	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	189b      	adds	r3, r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	585b      	ldr	r3, [r3, r1]
 800450e:	1c58      	adds	r0, r3, #1
 8004510:	491e      	ldr	r1, [pc, #120]	; (800458c <xTaskIncrementTick+0x208>)
 8004512:	0013      	movs	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	189b      	adds	r3, r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004520:	4b1b      	ldr	r3, [pc, #108]	; (8004590 <xTaskIncrementTick+0x20c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	429a      	cmp	r2, r3
 8004528:	d800      	bhi.n	800452c <xTaskIncrementTick+0x1a8>
 800452a:	e75d      	b.n	80043e8 <xTaskIncrementTick+0x64>
                        {
                            xSwitchRequired = pdTRUE;
 800452c:	2301      	movs	r3, #1
 800452e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004530:	e75a      	b.n	80043e8 <xTaskIncrementTick+0x64>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004532:	4b17      	ldr	r3, [pc, #92]	; (8004590 <xTaskIncrementTick+0x20c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004538:	4914      	ldr	r1, [pc, #80]	; (800458c <xTaskIncrementTick+0x208>)
 800453a:	0013      	movs	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	189b      	adds	r3, r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	585b      	ldr	r3, [r3, r1]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d901      	bls.n	800454c <xTaskIncrementTick+0x1c8>
            {
                xSwitchRequired = pdTRUE;
 8004548:	2301      	movs	r3, #1
 800454a:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800454c:	4b11      	ldr	r3, [pc, #68]	; (8004594 <xTaskIncrementTick+0x210>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d007      	beq.n	8004564 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8004554:	2301      	movs	r3, #1
 8004556:	61fb      	str	r3, [r7, #28]
 8004558:	e004      	b.n	8004564 <xTaskIncrementTick+0x1e0>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800455a:	4b0f      	ldr	r3, [pc, #60]	; (8004598 <xTaskIncrementTick+0x214>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	4b0d      	ldr	r3, [pc, #52]	; (8004598 <xTaskIncrementTick+0x214>)
 8004562:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8004564:	69fb      	ldr	r3, [r7, #28]
}
 8004566:	0018      	movs	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	b008      	add	sp, #32
 800456c:	bd80      	pop	{r7, pc}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	20000460 	.word	0x20000460
 8004574:	2000043c 	.word	0x2000043c
 8004578:	200003f0 	.word	0x200003f0
 800457c:	200003f4 	.word	0x200003f4
 8004580:	20000450 	.word	0x20000450
 8004584:	20000458 	.word	0x20000458
 8004588:	20000440 	.word	0x20000440
 800458c:	20000364 	.word	0x20000364
 8004590:	20000360 	.word	0x20000360
 8004594:	2000044c 	.word	0x2000044c
 8004598:	20000448 	.word	0x20000448

0800459c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045a2:	4b22      	ldr	r3, [pc, #136]	; (800462c <vTaskSwitchContext+0x90>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80045aa:	4b21      	ldr	r3, [pc, #132]	; (8004630 <vTaskSwitchContext+0x94>)
 80045ac:	2201      	movs	r2, #1
 80045ae:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80045b0:	e037      	b.n	8004622 <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 80045b2:	4b1f      	ldr	r3, [pc, #124]	; (8004630 <vTaskSwitchContext+0x94>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045b8:	4b1e      	ldr	r3, [pc, #120]	; (8004634 <vTaskSwitchContext+0x98>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	607b      	str	r3, [r7, #4]
 80045be:	e007      	b.n	80045d0 <vTaskSwitchContext+0x34>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <vTaskSwitchContext+0x2e>
 80045c6:	b672      	cpsid	i
 80045c8:	e7fe      	b.n	80045c8 <vTaskSwitchContext+0x2c>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	3b01      	subs	r3, #1
 80045ce:	607b      	str	r3, [r7, #4]
 80045d0:	4919      	ldr	r1, [pc, #100]	; (8004638 <vTaskSwitchContext+0x9c>)
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	0013      	movs	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	189b      	adds	r3, r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	585b      	ldr	r3, [r3, r1]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0ee      	beq.n	80045c0 <vTaskSwitchContext+0x24>
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	0013      	movs	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	189b      	adds	r3, r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4a12      	ldr	r2, [pc, #72]	; (8004638 <vTaskSwitchContext+0x9c>)
 80045ee:	189b      	adds	r3, r3, r2
 80045f0:	603b      	str	r3, [r7, #0]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	605a      	str	r2, [r3, #4]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	3308      	adds	r3, #8
 8004604:	429a      	cmp	r2, r3
 8004606:	d104      	bne.n	8004612 <vTaskSwitchContext+0x76>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	605a      	str	r2, [r3, #4]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	4b08      	ldr	r3, [pc, #32]	; (800463c <vTaskSwitchContext+0xa0>)
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	4b05      	ldr	r3, [pc, #20]	; (8004634 <vTaskSwitchContext+0x98>)
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	601a      	str	r2, [r3, #0]
}
 8004622:	46c0      	nop			; (mov r8, r8)
 8004624:	46bd      	mov	sp, r7
 8004626:	b002      	add	sp, #8
 8004628:	bd80      	pop	{r7, pc}
 800462a:	46c0      	nop			; (mov r8, r8)
 800462c:	20000460 	.word	0x20000460
 8004630:	2000044c 	.word	0x2000044c
 8004634:	20000440 	.word	0x20000440
 8004638:	20000364 	.word	0x20000364
 800463c:	20000360 	.word	0x20000360

08004640 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <vTaskPlaceOnEventList+0x14>
 8004650:	b672      	cpsid	i
 8004652:	e7fe      	b.n	8004652 <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004654:	4b08      	ldr	r3, [pc, #32]	; (8004678 <vTaskPlaceOnEventList+0x38>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3318      	adds	r3, #24
 800465a:	001a      	movs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	0011      	movs	r1, r2
 8004660:	0018      	movs	r0, r3
 8004662:	f7fe fee8 	bl	8003436 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2101      	movs	r1, #1
 800466a:	0018      	movs	r0, r3
 800466c:	f000 fc84 	bl	8004f78 <prvAddCurrentTaskToDelayedList>
}
 8004670:	46c0      	nop			; (mov r8, r8)
 8004672:	46bd      	mov	sp, r7
 8004674:	b002      	add	sp, #8
 8004676:	bd80      	pop	{r7, pc}
 8004678:	20000360 	.word	0x20000360

0800467c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <vTaskPlaceOnEventListRestricted+0x16>
 800468e:	b672      	cpsid	i
 8004690:	e7fe      	b.n	8004690 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	4b16      	ldr	r3, [pc, #88]	; (80046f4 <vTaskPlaceOnEventListRestricted+0x78>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	61da      	str	r2, [r3, #28]
 80046a0:	4b14      	ldr	r3, [pc, #80]	; (80046f4 <vTaskPlaceOnEventListRestricted+0x78>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	6892      	ldr	r2, [r2, #8]
 80046a8:	621a      	str	r2, [r3, #32]
 80046aa:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <vTaskPlaceOnEventListRestricted+0x78>)
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	3218      	adds	r2, #24
 80046b4:	605a      	str	r2, [r3, #4]
 80046b6:	4b0f      	ldr	r3, [pc, #60]	; (80046f4 <vTaskPlaceOnEventListRestricted+0x78>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3318      	adds	r3, #24
 80046bc:	001a      	movs	r2, r3
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	609a      	str	r2, [r3, #8]
 80046c2:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <vTaskPlaceOnEventListRestricted+0x78>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	629a      	str	r2, [r3, #40]	; 0x28
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <vTaskPlaceOnEventListRestricted+0x64>
        {
            xTicksToWait = portMAX_DELAY;
 80046da:	2301      	movs	r3, #1
 80046dc:	425b      	negs	r3, r3
 80046de:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	0011      	movs	r1, r2
 80046e6:	0018      	movs	r0, r3
 80046e8:	f000 fc46 	bl	8004f78 <prvAddCurrentTaskToDelayedList>
    }
 80046ec:	46c0      	nop			; (mov r8, r8)
 80046ee:	46bd      	mov	sp, r7
 80046f0:	b006      	add	sp, #24
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20000360 	.word	0x20000360

080046f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <xTaskRemoveFromEventList+0x1a>
 800470e:	b672      	cpsid	i
 8004710:	e7fe      	b.n	8004710 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	6a12      	ldr	r2, [r2, #32]
 8004720:	609a      	str	r2, [r3, #8]
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	69d2      	ldr	r2, [r2, #28]
 800472a:	605a      	str	r2, [r3, #4]
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	3318      	adds	r3, #24
 8004734:	429a      	cmp	r2, r3
 8004736:	d103      	bne.n	8004740 <xTaskRemoveFromEventList+0x48>
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	6a1a      	ldr	r2, [r3, #32]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	605a      	str	r2, [r3, #4]
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	2200      	movs	r2, #0
 8004744:	629a      	str	r2, [r3, #40]	; 0x28
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	1e5a      	subs	r2, r3, #1
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004750:	4b48      	ldr	r3, [pc, #288]	; (8004874 <xTaskRemoveFromEventList+0x17c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d15d      	bne.n	8004814 <xTaskRemoveFromEventList+0x11c>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	68d2      	ldr	r2, [r2, #12]
 8004766:	609a      	str	r2, [r3, #8]
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	6892      	ldr	r2, [r2, #8]
 8004770:	605a      	str	r2, [r3, #4]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	3304      	adds	r3, #4
 800477a:	429a      	cmp	r2, r3
 800477c:	d103      	bne.n	8004786 <xTaskRemoveFromEventList+0x8e>
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	605a      	str	r2, [r3, #4]
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	2200      	movs	r2, #0
 800478a:	615a      	str	r2, [r3, #20]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	1e5a      	subs	r2, r3, #1
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479a:	4b37      	ldr	r3, [pc, #220]	; (8004878 <xTaskRemoveFromEventList+0x180>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d903      	bls.n	80047aa <xTaskRemoveFromEventList+0xb2>
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a6:	4b34      	ldr	r3, [pc, #208]	; (8004878 <xTaskRemoveFromEventList+0x180>)
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ae:	4933      	ldr	r1, [pc, #204]	; (800487c <xTaskRemoveFromEventList+0x184>)
 80047b0:	0013      	movs	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	189b      	adds	r3, r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	18cb      	adds	r3, r1, r3
 80047ba:	3304      	adds	r3, #4
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	609a      	str	r2, [r3, #8]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	60da      	str	r2, [r3, #12]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	3204      	adds	r2, #4
 80047d6:	605a      	str	r2, [r3, #4]
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	1d1a      	adds	r2, r3, #4
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	609a      	str	r2, [r3, #8]
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e4:	0013      	movs	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	189b      	adds	r3, r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4a23      	ldr	r2, [pc, #140]	; (800487c <xTaskRemoveFromEventList+0x184>)
 80047ee:	189a      	adds	r2, r3, r2
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	615a      	str	r2, [r3, #20]
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f8:	4920      	ldr	r1, [pc, #128]	; (800487c <xTaskRemoveFromEventList+0x184>)
 80047fa:	0013      	movs	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	189b      	adds	r3, r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	585b      	ldr	r3, [r3, r1]
 8004804:	1c58      	adds	r0, r3, #1
 8004806:	491d      	ldr	r1, [pc, #116]	; (800487c <xTaskRemoveFromEventList+0x184>)
 8004808:	0013      	movs	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	189b      	adds	r3, r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	5058      	str	r0, [r3, r1]
 8004812:	e01b      	b.n	800484c <xTaskRemoveFromEventList+0x154>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004814:	4b1a      	ldr	r3, [pc, #104]	; (8004880 <xTaskRemoveFromEventList+0x188>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	61da      	str	r2, [r3, #28]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	621a      	str	r2, [r3, #32]
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	3218      	adds	r2, #24
 8004830:	605a      	str	r2, [r3, #4]
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	3318      	adds	r3, #24
 8004836:	001a      	movs	r2, r3
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	609a      	str	r2, [r3, #8]
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	4a10      	ldr	r2, [pc, #64]	; (8004880 <xTaskRemoveFromEventList+0x188>)
 8004840:	629a      	str	r2, [r3, #40]	; 0x28
 8004842:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <xTaskRemoveFromEventList+0x188>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	4b0d      	ldr	r3, [pc, #52]	; (8004880 <xTaskRemoveFromEventList+0x188>)
 800484a:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004850:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <xTaskRemoveFromEventList+0x18c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	429a      	cmp	r2, r3
 8004858:	d905      	bls.n	8004866 <xTaskRemoveFromEventList+0x16e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800485a:	2301      	movs	r3, #1
 800485c:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800485e:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <xTaskRemoveFromEventList+0x190>)
 8004860:	2201      	movs	r2, #1
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	e001      	b.n	800486a <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        xReturn = pdFALSE;
 8004866:	2300      	movs	r3, #0
 8004868:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800486a:	69fb      	ldr	r3, [r7, #28]
}
 800486c:	0018      	movs	r0, r3
 800486e:	46bd      	mov	sp, r7
 8004870:	b008      	add	sp, #32
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20000460 	.word	0x20000460
 8004878:	20000440 	.word	0x20000440
 800487c:	20000364 	.word	0x20000364
 8004880:	200003f8 	.word	0x200003f8
 8004884:	20000360 	.word	0x20000360
 8004888:	2000044c 	.word	0x2000044c

0800488c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004894:	4b05      	ldr	r3, [pc, #20]	; (80048ac <vTaskInternalSetTimeOutState+0x20>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800489c:	4b04      	ldr	r3, [pc, #16]	; (80048b0 <vTaskInternalSetTimeOutState+0x24>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	605a      	str	r2, [r3, #4]
}
 80048a4:	46c0      	nop			; (mov r8, r8)
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b002      	add	sp, #8
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20000450 	.word	0x20000450
 80048b0:	2000043c 	.word	0x2000043c

080048b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <xTaskCheckForTimeOut+0x14>
 80048c4:	b672      	cpsid	i
 80048c6:	e7fe      	b.n	80048c6 <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <xTaskCheckForTimeOut+0x1e>
 80048ce:	b672      	cpsid	i
 80048d0:	e7fe      	b.n	80048d0 <xTaskCheckForTimeOut+0x1c>

    taskENTER_CRITICAL();
 80048d2:	f000 fec5 	bl	8005660 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80048d6:	4b1f      	ldr	r3, [pc, #124]	; (8004954 <xTaskCheckForTimeOut+0xa0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3301      	adds	r3, #1
 80048ec:	d102      	bne.n	80048f4 <xTaskCheckForTimeOut+0x40>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80048ee:	2300      	movs	r3, #0
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	e027      	b.n	8004944 <xTaskCheckForTimeOut+0x90>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	4b17      	ldr	r3, [pc, #92]	; (8004958 <xTaskCheckForTimeOut+0xa4>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d00a      	beq.n	8004916 <xTaskCheckForTimeOut+0x62>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	429a      	cmp	r2, r3
 8004908:	d305      	bcc.n	8004916 <xTaskCheckForTimeOut+0x62>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800490a:	2301      	movs	r3, #1
 800490c:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2200      	movs	r2, #0
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	e016      	b.n	8004944 <xTaskCheckForTimeOut+0x90>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	429a      	cmp	r2, r3
 800491e:	d20c      	bcs.n	800493a <xTaskCheckForTimeOut+0x86>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	1ad2      	subs	r2, r2, r3
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	0018      	movs	r0, r3
 8004930:	f7ff ffac 	bl	800488c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004934:	2300      	movs	r3, #0
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	e004      	b.n	8004944 <xTaskCheckForTimeOut+0x90>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004940:	2301      	movs	r3, #1
 8004942:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8004944:	f000 fe9e 	bl	8005684 <vPortExitCritical>

    return xReturn;
 8004948:	697b      	ldr	r3, [r7, #20]
}
 800494a:	0018      	movs	r0, r3
 800494c:	46bd      	mov	sp, r7
 800494e:	b006      	add	sp, #24
 8004950:	bd80      	pop	{r7, pc}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	2000043c 	.word	0x2000043c
 8004958:	20000450 	.word	0x20000450

0800495c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004960:	4b02      	ldr	r3, [pc, #8]	; (800496c <vTaskMissedYield+0x10>)
 8004962:	2201      	movs	r2, #1
 8004964:	601a      	str	r2, [r3, #0]
}
 8004966:	46c0      	nop			; (mov r8, r8)
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	2000044c 	.word	0x2000044c

08004970 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004978:	f000 f850 	bl	8004a1c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800497c:	4b04      	ldr	r3, [pc, #16]	; (8004990 <prvIdleTask+0x20>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d901      	bls.n	8004988 <prvIdleTask+0x18>
            {
                taskYIELD();
 8004984:	f000 fe5c 	bl	8005640 <vPortYield>
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 8004988:	f7fb fc5c 	bl	8000244 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 800498c:	e7f4      	b.n	8004978 <prvIdleTask+0x8>
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	20000364 	.word	0x20000364

08004994 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800499a:	2300      	movs	r3, #0
 800499c:	607b      	str	r3, [r7, #4]
 800499e:	e00c      	b.n	80049ba <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	0013      	movs	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	189b      	adds	r3, r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4a14      	ldr	r2, [pc, #80]	; (80049fc <prvInitialiseTaskLists+0x68>)
 80049ac:	189b      	adds	r3, r3, r2
 80049ae:	0018      	movs	r0, r3
 80049b0:	f7fe fcf6 	bl	80033a0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3301      	adds	r3, #1
 80049b8:	607b      	str	r3, [r7, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d9ef      	bls.n	80049a0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80049c0:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <prvInitialiseTaskLists+0x6c>)
 80049c2:	0018      	movs	r0, r3
 80049c4:	f7fe fcec 	bl	80033a0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80049c8:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <prvInitialiseTaskLists+0x70>)
 80049ca:	0018      	movs	r0, r3
 80049cc:	f7fe fce8 	bl	80033a0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80049d0:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <prvInitialiseTaskLists+0x74>)
 80049d2:	0018      	movs	r0, r3
 80049d4:	f7fe fce4 	bl	80033a0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80049d8:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <prvInitialiseTaskLists+0x78>)
 80049da:	0018      	movs	r0, r3
 80049dc:	f7fe fce0 	bl	80033a0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80049e0:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <prvInitialiseTaskLists+0x7c>)
 80049e2:	0018      	movs	r0, r3
 80049e4:	f7fe fcdc 	bl	80033a0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80049e8:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <prvInitialiseTaskLists+0x80>)
 80049ea:	4a05      	ldr	r2, [pc, #20]	; (8004a00 <prvInitialiseTaskLists+0x6c>)
 80049ec:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049ee:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <prvInitialiseTaskLists+0x84>)
 80049f0:	4a04      	ldr	r2, [pc, #16]	; (8004a04 <prvInitialiseTaskLists+0x70>)
 80049f2:	601a      	str	r2, [r3, #0]
}
 80049f4:	46c0      	nop			; (mov r8, r8)
 80049f6:	46bd      	mov	sp, r7
 80049f8:	b002      	add	sp, #8
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	20000364 	.word	0x20000364
 8004a00:	200003c8 	.word	0x200003c8
 8004a04:	200003dc 	.word	0x200003dc
 8004a08:	200003f8 	.word	0x200003f8
 8004a0c:	2000040c 	.word	0x2000040c
 8004a10:	20000424 	.word	0x20000424
 8004a14:	200003f0 	.word	0x200003f0
 8004a18:	200003f4 	.word	0x200003f4

08004a1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a22:	e01a      	b.n	8004a5a <prvCheckTasksWaitingTermination+0x3e>
        {
            taskENTER_CRITICAL();
 8004a24:	f000 fe1c 	bl	8005660 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a28:	4b10      	ldr	r3, [pc, #64]	; (8004a6c <prvCheckTasksWaitingTermination+0x50>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3304      	adds	r3, #4
 8004a34:	0018      	movs	r0, r3
 8004a36:	f7fe fd34 	bl	80034a2 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8004a3a:	4b0d      	ldr	r3, [pc, #52]	; (8004a70 <prvCheckTasksWaitingTermination+0x54>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	1e5a      	subs	r2, r3, #1
 8004a40:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <prvCheckTasksWaitingTermination+0x54>)
 8004a42:	601a      	str	r2, [r3, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004a44:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <prvCheckTasksWaitingTermination+0x58>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	1e5a      	subs	r2, r3, #1
 8004a4a:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <prvCheckTasksWaitingTermination+0x58>)
 8004a4c:	601a      	str	r2, [r3, #0]
            }
            taskEXIT_CRITICAL();
 8004a4e:	f000 fe19 	bl	8005684 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	0018      	movs	r0, r3
 8004a56:	f000 f80f 	bl	8004a78 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a5a:	4b06      	ldr	r3, [pc, #24]	; (8004a74 <prvCheckTasksWaitingTermination+0x58>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e0      	bne.n	8004a24 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	46c0      	nop			; (mov r8, r8)
 8004a66:	46bd      	mov	sp, r7
 8004a68:	b002      	add	sp, #8
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	2000040c 	.word	0x2000040c
 8004a70:	20000438 	.word	0x20000438
 8004a74:	20000420 	.word	0x20000420

08004a78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a84:	0018      	movs	r0, r3
 8004a86:	f000 ff2b 	bl	80058e0 <vPortFree>
            vPortFree( pxTCB );
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f000 ff27 	bl	80058e0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	46bd      	mov	sp, r7
 8004a96:	b002      	add	sp, #8
 8004a98:	bd80      	pop	{r7, pc}
	...

08004a9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <prvResetNextTaskUnblockTime+0x2c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d104      	bne.n	8004ab4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004aaa:	4b08      	ldr	r3, [pc, #32]	; (8004acc <prvResetNextTaskUnblockTime+0x30>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	4252      	negs	r2, r2
 8004ab0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004ab2:	e005      	b.n	8004ac0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ab4:	4b04      	ldr	r3, [pc, #16]	; (8004ac8 <prvResetNextTaskUnblockTime+0x2c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	4b03      	ldr	r3, [pc, #12]	; (8004acc <prvResetNextTaskUnblockTime+0x30>)
 8004abe:	601a      	str	r2, [r3, #0]
}
 8004ac0:	46c0      	nop			; (mov r8, r8)
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	46c0      	nop			; (mov r8, r8)
 8004ac8:	200003f0 	.word	0x200003f0
 8004acc:	20000458 	.word	0x20000458

08004ad0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004ad6:	4b0a      	ldr	r3, [pc, #40]	; (8004b00 <xTaskGetSchedulerState+0x30>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d102      	bne.n	8004ae4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	607b      	str	r3, [r7, #4]
 8004ae2:	e008      	b.n	8004af6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ae4:	4b07      	ldr	r3, [pc, #28]	; (8004b04 <xTaskGetSchedulerState+0x34>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d102      	bne.n	8004af2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004aec:	2302      	movs	r3, #2
 8004aee:	607b      	str	r3, [r7, #4]
 8004af0:	e001      	b.n	8004af6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004af2:	2300      	movs	r3, #0
 8004af4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004af6:	687b      	ldr	r3, [r7, #4]
    }
 8004af8:	0018      	movs	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b002      	add	sp, #8
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20000444 	.word	0x20000444
 8004b04:	20000460 	.word	0x20000460

08004b08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004b14:	2300      	movs	r3, #0
 8004b16:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d06a      	beq.n	8004bf4 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004b1e:	4b38      	ldr	r3, [pc, #224]	; (8004c00 <xTaskPriorityDisinherit+0xf8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d001      	beq.n	8004b2c <xTaskPriorityDisinherit+0x24>
 8004b28:	b672      	cpsid	i
 8004b2a:	e7fe      	b.n	8004b2a <xTaskPriorityDisinherit+0x22>
            configASSERT( pxTCB->uxMutexesHeld );
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <xTaskPriorityDisinherit+0x30>
 8004b34:	b672      	cpsid	i
 8004b36:	e7fe      	b.n	8004b36 <xTaskPriorityDisinherit+0x2e>
            ( pxTCB->uxMutexesHeld )--;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b3c:	1e5a      	subs	r2, r3, #1
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d052      	beq.n	8004bf4 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d14e      	bne.n	8004bf4 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	3304      	adds	r3, #4
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	f7fe fca1 	bl	80034a2 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	2205      	movs	r2, #5
 8004b6e:	1ad2      	subs	r2, r2, r3
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b78:	4b22      	ldr	r3, [pc, #136]	; (8004c04 <xTaskPriorityDisinherit+0xfc>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d903      	bls.n	8004b88 <xTaskPriorityDisinherit+0x80>
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b84:	4b1f      	ldr	r3, [pc, #124]	; (8004c04 <xTaskPriorityDisinherit+0xfc>)
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8c:	491e      	ldr	r1, [pc, #120]	; (8004c08 <xTaskPriorityDisinherit+0x100>)
 8004b8e:	0013      	movs	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	189b      	adds	r3, r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	18cb      	adds	r3, r1, r3
 8004b98:	3304      	adds	r3, #4
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	609a      	str	r2, [r3, #8]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	60da      	str	r2, [r3, #12]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	3204      	adds	r2, #4
 8004bb4:	605a      	str	r2, [r3, #4]
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1d1a      	adds	r2, r3, #4
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	609a      	str	r2, [r3, #8]
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc2:	0013      	movs	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	189b      	adds	r3, r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4a0f      	ldr	r2, [pc, #60]	; (8004c08 <xTaskPriorityDisinherit+0x100>)
 8004bcc:	189a      	adds	r2, r3, r2
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	615a      	str	r2, [r3, #20]
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd6:	490c      	ldr	r1, [pc, #48]	; (8004c08 <xTaskPriorityDisinherit+0x100>)
 8004bd8:	0013      	movs	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	189b      	adds	r3, r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	585b      	ldr	r3, [r3, r1]
 8004be2:	1c58      	adds	r0, r3, #1
 8004be4:	4908      	ldr	r1, [pc, #32]	; (8004c08 <xTaskPriorityDisinherit+0x100>)
 8004be6:	0013      	movs	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	189b      	adds	r3, r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	5058      	str	r0, [r3, r1]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004bf4:	697b      	ldr	r3, [r7, #20]
    }
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	b006      	add	sp, #24
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	20000360 	.word	0x20000360
 8004c04:	20000440 	.word	0x20000440
 8004c08:	20000364 	.word	0x20000364

08004c0c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <xTaskGenericNotifyWait+0x18>
 8004c20:	b672      	cpsid	i
 8004c22:	e7fe      	b.n	8004c22 <xTaskGenericNotifyWait+0x16>

        taskENTER_CRITICAL();
 8004c24:	f000 fd1c 	bl	8005660 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004c28:	4b36      	ldr	r3, [pc, #216]	; (8004d04 <xTaskGenericNotifyWait+0xf8>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	2150      	movs	r1, #80	; 0x50
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	18d3      	adds	r3, r2, r3
 8004c32:	185b      	adds	r3, r3, r1
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d022      	beq.n	8004c82 <xTaskGenericNotifyWait+0x76>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8004c3c:	4b31      	ldr	r3, [pc, #196]	; (8004d04 <xTaskGenericNotifyWait+0xf8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	3212      	adds	r2, #18
 8004c44:	0092      	lsls	r2, r2, #2
 8004c46:	189a      	adds	r2, r3, r2
 8004c48:	3204      	adds	r2, #4
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	68b9      	ldr	r1, [r7, #8]
 8004c4e:	43c9      	mvns	r1, r1
 8004c50:	400a      	ands	r2, r1
 8004c52:	68f9      	ldr	r1, [r7, #12]
 8004c54:	3112      	adds	r1, #18
 8004c56:	0089      	lsls	r1, r1, #2
 8004c58:	185b      	adds	r3, r3, r1
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	601a      	str	r2, [r3, #0]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8004c5e:	4b29      	ldr	r3, [pc, #164]	; (8004d04 <xTaskGenericNotifyWait+0xf8>)
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	2150      	movs	r1, #80	; 0x50
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	18d3      	adds	r3, r2, r3
 8004c68:	185b      	adds	r3, r3, r1
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d006      	beq.n	8004c82 <xTaskGenericNotifyWait+0x76>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	2101      	movs	r1, #1
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f000 f97d 	bl	8004f78 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8004c7e:	f000 fcdf 	bl	8005640 <vPortYield>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004c82:	f000 fcff 	bl	8005684 <vPortExitCritical>

        taskENTER_CRITICAL();
 8004c86:	f000 fceb 	bl	8005660 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d009      	beq.n	8004ca4 <xTaskGenericNotifyWait+0x98>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8004c90:	4b1c      	ldr	r3, [pc, #112]	; (8004d04 <xTaskGenericNotifyWait+0xf8>)
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	3312      	adds	r3, #18
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	18d3      	adds	r3, r2, r3
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004ca4:	4b17      	ldr	r3, [pc, #92]	; (8004d04 <xTaskGenericNotifyWait+0xf8>)
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	2150      	movs	r1, #80	; 0x50
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	18d3      	adds	r3, r2, r3
 8004cae:	185b      	adds	r3, r3, r1
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d002      	beq.n	8004cbe <xTaskGenericNotifyWait+0xb2>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	e012      	b.n	8004ce4 <xTaskGenericNotifyWait+0xd8>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8004cbe:	4b11      	ldr	r3, [pc, #68]	; (8004d04 <xTaskGenericNotifyWait+0xf8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	3212      	adds	r2, #18
 8004cc6:	0092      	lsls	r2, r2, #2
 8004cc8:	189a      	adds	r2, r3, r2
 8004cca:	3204      	adds	r2, #4
 8004ccc:	6812      	ldr	r2, [r2, #0]
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	43c9      	mvns	r1, r1
 8004cd2:	400a      	ands	r2, r1
 8004cd4:	68f9      	ldr	r1, [r7, #12]
 8004cd6:	3112      	adds	r1, #18
 8004cd8:	0089      	lsls	r1, r1, #2
 8004cda:	185b      	adds	r3, r3, r1
 8004cdc:	3304      	adds	r3, #4
 8004cde:	601a      	str	r2, [r3, #0]
                xReturn = pdTRUE;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004ce4:	4b07      	ldr	r3, [pc, #28]	; (8004d04 <xTaskGenericNotifyWait+0xf8>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	2150      	movs	r1, #80	; 0x50
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	18d3      	adds	r3, r2, r3
 8004cee:	185b      	adds	r3, r3, r1
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8004cf4:	f000 fcc6 	bl	8005684 <vPortExitCritical>

        return xReturn;
 8004cf8:	697b      	ldr	r3, [r7, #20]
    }
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b006      	add	sp, #24
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	20000360 	.word	0x20000360

08004d08 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08c      	sub	sp, #48	; 0x30
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
 8004d14:	001a      	movs	r2, r3
 8004d16:	1cfb      	adds	r3, r7, #3
 8004d18:	701a      	strb	r2, [r3, #0]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <xTaskGenericNotifyFromISR+0x20>
 8004d24:	b672      	cpsid	i
 8004d26:	e7fe      	b.n	8004d26 <xTaskGenericNotifyFromISR+0x1e>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <xTaskGenericNotifyFromISR+0x2a>
 8004d2e:	b672      	cpsid	i
 8004d30:	e7fe      	b.n	8004d30 <xTaskGenericNotifyFromISR+0x28>
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

        pxTCB = xTaskToNotify;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	62bb      	str	r3, [r7, #40]	; 0x28

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d36:	f000 fcbd 	bl	80056b4 <ulSetInterruptMaskFromISR>
 8004d3a:	0003      	movs	r3, r0
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
        {
            if( pulPreviousNotificationValue != NULL )
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d008      	beq.n	8004d56 <xTaskGenericNotifyFromISR+0x4e>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	3312      	adds	r3, #18
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	18d3      	adds	r3, r2, r3
 8004d4e:	3304      	adds	r3, #4
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004d56:	2323      	movs	r3, #35	; 0x23
 8004d58:	18fb      	adds	r3, r7, r3
 8004d5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d5c:	2050      	movs	r0, #80	; 0x50
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	188a      	adds	r2, r1, r2
 8004d62:	1812      	adds	r2, r2, r0
 8004d64:	7812      	ldrb	r2, [r2, #0]
 8004d66:	701a      	strb	r2, [r3, #0]
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d6a:	2150      	movs	r1, #80	; 0x50
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	18d3      	adds	r3, r2, r3
 8004d70:	185b      	adds	r3, r3, r1
 8004d72:	2202      	movs	r2, #2
 8004d74:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004d76:	1cfb      	adds	r3, r7, #3
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d83f      	bhi.n	8004dfe <xTaskGenericNotifyFromISR+0xf6>
 8004d7e:	009a      	lsls	r2, r3, #2
 8004d80:	4b75      	ldr	r3, [pc, #468]	; (8004f58 <xTaskGenericNotifyFromISR+0x250>)
 8004d82:	18d3      	adds	r3, r2, r3
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	469f      	mov	pc, r3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004d88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	3312      	adds	r3, #18
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	18d3      	adds	r3, r2, r3
 8004d92:	3304      	adds	r3, #4
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	3312      	adds	r3, #18
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	18cb      	adds	r3, r1, r3
 8004da4:	3304      	adds	r3, #4
 8004da6:	601a      	str	r2, [r3, #0]
                    break;
 8004da8:	e032      	b.n	8004e10 <xTaskGenericNotifyFromISR+0x108>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	3312      	adds	r3, #18
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	18d3      	adds	r3, r2, r3
 8004db4:	3304      	adds	r3, #4
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	3312      	adds	r3, #18
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	18cb      	adds	r3, r1, r3
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	601a      	str	r2, [r3, #0]
                    break;
 8004dc8:	e022      	b.n	8004e10 <xTaskGenericNotifyFromISR+0x108>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	3312      	adds	r3, #18
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	18d3      	adds	r3, r2, r3
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	601a      	str	r2, [r3, #0]
                    break;
 8004dda:	e019      	b.n	8004e10 <xTaskGenericNotifyFromISR+0x108>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004ddc:	2323      	movs	r3, #35	; 0x23
 8004dde:	18fb      	adds	r3, r7, r3
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d008      	beq.n	8004df8 <xTaskGenericNotifyFromISR+0xf0>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	3312      	adds	r3, #18
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	18d3      	adds	r3, r2, r3
 8004df0:	3304      	adds	r3, #4
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	601a      	str	r2, [r3, #0]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004df6:	e00b      	b.n	8004e10 <xTaskGenericNotifyFromISR+0x108>
                        xReturn = pdFAIL;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8004dfc:	e008      	b.n	8004e10 <xTaskGenericNotifyFromISR+0x108>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004dfe:	4b57      	ldr	r3, [pc, #348]	; (8004f5c <xTaskGenericNotifyFromISR+0x254>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <xTaskGenericNotifyFromISR+0x106>
 8004e06:	b672      	cpsid	i
 8004e08:	e7fe      	b.n	8004e08 <xTaskGenericNotifyFromISR+0x100>
                    break;
 8004e0a:	46c0      	nop			; (mov r8, r8)
 8004e0c:	e000      	b.n	8004e10 <xTaskGenericNotifyFromISR+0x108>
                    break;
 8004e0e:	46c0      	nop			; (mov r8, r8)

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004e10:	2323      	movs	r3, #35	; 0x23
 8004e12:	18fb      	adds	r3, r7, r3
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d000      	beq.n	8004e1c <xTaskGenericNotifyFromISR+0x114>
 8004e1a:	e093      	b.n	8004f44 <xTaskGenericNotifyFromISR+0x23c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <xTaskGenericNotifyFromISR+0x120>
 8004e24:	b672      	cpsid	i
 8004e26:	e7fe      	b.n	8004e26 <xTaskGenericNotifyFromISR+0x11e>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e28:	4b4d      	ldr	r3, [pc, #308]	; (8004f60 <xTaskGenericNotifyFromISR+0x258>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d15d      	bne.n	8004eec <xTaskGenericNotifyFromISR+0x1e4>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	61bb      	str	r3, [r7, #24]
 8004e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e3c:	68d2      	ldr	r2, [r2, #12]
 8004e3e:	609a      	str	r2, [r3, #8]
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e46:	6892      	ldr	r2, [r2, #8]
 8004e48:	605a      	str	r2, [r3, #4]
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	3304      	adds	r3, #4
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d103      	bne.n	8004e5e <xTaskGenericNotifyFromISR+0x156>
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	605a      	str	r2, [r3, #4]
 8004e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e60:	2200      	movs	r2, #0
 8004e62:	615a      	str	r2, [r3, #20]
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	1e5a      	subs	r2, r3, #1
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e72:	4b3c      	ldr	r3, [pc, #240]	; (8004f64 <xTaskGenericNotifyFromISR+0x25c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d903      	bls.n	8004e82 <xTaskGenericNotifyFromISR+0x17a>
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e7e:	4b39      	ldr	r3, [pc, #228]	; (8004f64 <xTaskGenericNotifyFromISR+0x25c>)
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e86:	4938      	ldr	r1, [pc, #224]	; (8004f68 <xTaskGenericNotifyFromISR+0x260>)
 8004e88:	0013      	movs	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	189b      	adds	r3, r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	18cb      	adds	r3, r1, r3
 8004e92:	3304      	adds	r3, #4
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	609a      	str	r2, [r3, #8]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea4:	60da      	str	r2, [r3, #12]
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eac:	3204      	adds	r2, #4
 8004eae:	605a      	str	r2, [r3, #4]
 8004eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb2:	1d1a      	adds	r2, r3, #4
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	609a      	str	r2, [r3, #8]
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ebc:	0013      	movs	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	189b      	adds	r3, r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4a28      	ldr	r2, [pc, #160]	; (8004f68 <xTaskGenericNotifyFromISR+0x260>)
 8004ec6:	189a      	adds	r2, r3, r2
 8004ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eca:	615a      	str	r2, [r3, #20]
 8004ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed0:	4925      	ldr	r1, [pc, #148]	; (8004f68 <xTaskGenericNotifyFromISR+0x260>)
 8004ed2:	0013      	movs	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	189b      	adds	r3, r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	585b      	ldr	r3, [r3, r1]
 8004edc:	1c58      	adds	r0, r3, #1
 8004ede:	4922      	ldr	r1, [pc, #136]	; (8004f68 <xTaskGenericNotifyFromISR+0x260>)
 8004ee0:	0013      	movs	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	189b      	adds	r3, r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	5058      	str	r0, [r3, r1]
 8004eea:	e01b      	b.n	8004f24 <xTaskGenericNotifyFromISR+0x21c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004eec:	4b1f      	ldr	r3, [pc, #124]	; (8004f6c <xTaskGenericNotifyFromISR+0x264>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	61fb      	str	r3, [r7, #28]
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	61da      	str	r2, [r3, #28]
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efe:	621a      	str	r2, [r3, #32]
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f06:	3218      	adds	r2, #24
 8004f08:	605a      	str	r2, [r3, #4]
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	3318      	adds	r3, #24
 8004f0e:	001a      	movs	r2, r3
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	609a      	str	r2, [r3, #8]
 8004f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f16:	4a15      	ldr	r2, [pc, #84]	; (8004f6c <xTaskGenericNotifyFromISR+0x264>)
 8004f18:	629a      	str	r2, [r3, #40]	; 0x28
 8004f1a:	4b14      	ldr	r3, [pc, #80]	; (8004f6c <xTaskGenericNotifyFromISR+0x264>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	4b12      	ldr	r3, [pc, #72]	; (8004f6c <xTaskGenericNotifyFromISR+0x264>)
 8004f22:	601a      	str	r2, [r3, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f28:	4b11      	ldr	r3, [pc, #68]	; (8004f70 <xTaskGenericNotifyFromISR+0x268>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d908      	bls.n	8004f44 <xTaskGenericNotifyFromISR+0x23c>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8004f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <xTaskGenericNotifyFromISR+0x236>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8004f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	; (8004f74 <xTaskGenericNotifyFromISR+0x26c>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	601a      	str	r2, [r3, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	0018      	movs	r0, r3
 8004f48:	f000 fbba 	bl	80056c0 <vClearInterruptMaskFromISR>

        return xReturn;
 8004f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8004f4e:	0018      	movs	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	b00c      	add	sp, #48	; 0x30
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	08006564 	.word	0x08006564
 8004f5c:	2000043c 	.word	0x2000043c
 8004f60:	20000460 	.word	0x20000460
 8004f64:	20000440 	.word	0x20000440
 8004f68:	20000364 	.word	0x20000364
 8004f6c:	200003f8 	.word	0x200003f8
 8004f70:	20000360 	.word	0x20000360
 8004f74:	2000044c 	.word	0x2000044c

08004f78 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004f82:	4b2e      	ldr	r3, [pc, #184]	; (800503c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f88:	4b2d      	ldr	r3, [pc, #180]	; (8005040 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	0018      	movs	r0, r3
 8004f90:	f7fe fa87 	bl	80034a2 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3301      	adds	r3, #1
 8004f98:	d124      	bne.n	8004fe4 <prvAddCurrentTaskToDelayedList+0x6c>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d021      	beq.n	8004fe4 <prvAddCurrentTaskToDelayedList+0x6c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fa0:	4b28      	ldr	r3, [pc, #160]	; (8005044 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	613b      	str	r3, [r7, #16]
 8004fa6:	4b26      	ldr	r3, [pc, #152]	; (8005040 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	609a      	str	r2, [r3, #8]
 8004fae:	4b24      	ldr	r3, [pc, #144]	; (8005040 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	6892      	ldr	r2, [r2, #8]
 8004fb6:	60da      	str	r2, [r3, #12]
 8004fb8:	4b21      	ldr	r3, [pc, #132]	; (8005040 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	3204      	adds	r2, #4
 8004fc2:	605a      	str	r2, [r3, #4]
 8004fc4:	4b1e      	ldr	r3, [pc, #120]	; (8005040 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	1d1a      	adds	r2, r3, #4
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	609a      	str	r2, [r3, #8]
 8004fce:	4b1c      	ldr	r3, [pc, #112]	; (8005040 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1c      	ldr	r2, [pc, #112]	; (8005044 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004fd4:	615a      	str	r2, [r3, #20]
 8004fd6:	4b1b      	ldr	r3, [pc, #108]	; (8005044 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	4b19      	ldr	r3, [pc, #100]	; (8005044 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	46c0      	nop			; (mov r8, r8)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004fe2:	e026      	b.n	8005032 <prvAddCurrentTaskToDelayedList+0xba>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	18d3      	adds	r3, r2, r3
 8004fea:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fec:	4b14      	ldr	r3, [pc, #80]	; (8005040 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d209      	bcs.n	8005010 <prvAddCurrentTaskToDelayedList+0x98>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ffc:	4b12      	ldr	r3, [pc, #72]	; (8005048 <prvAddCurrentTaskToDelayedList+0xd0>)
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	4b0f      	ldr	r3, [pc, #60]	; (8005040 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3304      	adds	r3, #4
 8005006:	0019      	movs	r1, r3
 8005008:	0010      	movs	r0, r2
 800500a:	f7fe fa14 	bl	8003436 <vListInsert>
}
 800500e:	e010      	b.n	8005032 <prvAddCurrentTaskToDelayedList+0xba>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005010:	4b0e      	ldr	r3, [pc, #56]	; (800504c <prvAddCurrentTaskToDelayedList+0xd4>)
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	4b0a      	ldr	r3, [pc, #40]	; (8005040 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3304      	adds	r3, #4
 800501a:	0019      	movs	r1, r3
 800501c:	0010      	movs	r0, r2
 800501e:	f7fe fa0a 	bl	8003436 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8005022:	4b0b      	ldr	r3, [pc, #44]	; (8005050 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	429a      	cmp	r2, r3
 800502a:	d202      	bcs.n	8005032 <prvAddCurrentTaskToDelayedList+0xba>
                    xNextTaskUnblockTime = xTimeToWake;
 800502c:	4b08      	ldr	r3, [pc, #32]	; (8005050 <prvAddCurrentTaskToDelayedList+0xd8>)
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	601a      	str	r2, [r3, #0]
}
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	46bd      	mov	sp, r7
 8005036:	b006      	add	sp, #24
 8005038:	bd80      	pop	{r7, pc}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	2000043c 	.word	0x2000043c
 8005040:	20000360 	.word	0x20000360
 8005044:	20000424 	.word	0x20000424
 8005048:	200003f4 	.word	0x200003f4
 800504c:	200003f0 	.word	0x200003f0
 8005050:	20000458 	.word	0x20000458

08005054 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800505a:	2300      	movs	r3, #0
 800505c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800505e:	f000 fa2d 	bl	80054bc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005062:	4b0d      	ldr	r3, [pc, #52]	; (8005098 <xTimerCreateTimerTask+0x44>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00b      	beq.n	8005082 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800506a:	490c      	ldr	r1, [pc, #48]	; (800509c <xTimerCreateTimerTask+0x48>)
 800506c:	480c      	ldr	r0, [pc, #48]	; (80050a0 <xTimerCreateTimerTask+0x4c>)
 800506e:	4b0d      	ldr	r3, [pc, #52]	; (80050a4 <xTimerCreateTimerTask+0x50>)
 8005070:	9301      	str	r3, [sp, #4]
 8005072:	2302      	movs	r3, #2
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	2300      	movs	r3, #0
 8005078:	2250      	movs	r2, #80	; 0x50
 800507a:	f7fe fe56 	bl	8003d2a <xTaskCreate>
 800507e:	0003      	movs	r3, r0
 8005080:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <xTimerCreateTimerTask+0x38>
 8005088:	b672      	cpsid	i
 800508a:	e7fe      	b.n	800508a <xTimerCreateTimerTask+0x36>
        return xReturn;
 800508c:	687b      	ldr	r3, [r7, #4]
    }
 800508e:	0018      	movs	r0, r3
 8005090:	46bd      	mov	sp, r7
 8005092:	b002      	add	sp, #8
 8005094:	bd80      	pop	{r7, pc}
 8005096:	46c0      	nop			; (mov r8, r8)
 8005098:	20000494 	.word	0x20000494
 800509c:	0800651c 	.word	0x0800651c
 80050a0:	08005151 	.word	0x08005151
 80050a4:	20000498 	.word	0x20000498

080050a8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80050b4:	e009      	b.n	80050ca <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	18d3      	adds	r3, r2, r3
 80050be:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	0010      	movs	r0, r2
 80050c8:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	18d1      	adds	r1, r2, r3
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 f8d8 	bl	800528c <prvInsertTimerInActiveList>
 80050dc:	1e03      	subs	r3, r0, #0
 80050de:	d1ea      	bne.n	80050b6 <prvReloadTimer+0xe>
        }
    }
 80050e0:	46c0      	nop			; (mov r8, r8)
 80050e2:	46c0      	nop			; (mov r8, r8)
 80050e4:	46bd      	mov	sp, r7
 80050e6:	b004      	add	sp, #16
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050f6:	4b15      	ldr	r3, [pc, #84]	; (800514c <prvProcessExpiredTimer+0x60>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	3304      	adds	r3, #4
 8005104:	0018      	movs	r0, r3
 8005106:	f7fe f9cc 	bl	80034a2 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2228      	movs	r2, #40	; 0x28
 800510e:	5c9b      	ldrb	r3, [r3, r2]
 8005110:	001a      	movs	r2, r3
 8005112:	2304      	movs	r3, #4
 8005114:	4013      	ands	r3, r2
 8005116:	d006      	beq.n	8005126 <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	6879      	ldr	r1, [r7, #4]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	0018      	movs	r0, r3
 8005120:	f7ff ffc2 	bl	80050a8 <prvReloadTimer>
 8005124:	e008      	b.n	8005138 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2228      	movs	r2, #40	; 0x28
 800512a:	5c9b      	ldrb	r3, [r3, r2]
 800512c:	2201      	movs	r2, #1
 800512e:	4393      	bics	r3, r2
 8005130:	b2d9      	uxtb	r1, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2228      	movs	r2, #40	; 0x28
 8005136:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	0010      	movs	r0, r2
 8005140:	4798      	blx	r3
    }
 8005142:	46c0      	nop			; (mov r8, r8)
 8005144:	46bd      	mov	sp, r7
 8005146:	b004      	add	sp, #16
 8005148:	bd80      	pop	{r7, pc}
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	2000048c 	.word	0x2000048c

08005150 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005158:	2308      	movs	r3, #8
 800515a:	18fb      	adds	r3, r7, r3
 800515c:	0018      	movs	r0, r3
 800515e:	f000 f853 	bl	8005208 <prvGetNextExpireTime>
 8005162:	0003      	movs	r3, r0
 8005164:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	0011      	movs	r1, r2
 800516c:	0018      	movs	r0, r3
 800516e:	f000 f803 	bl	8005178 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005172:	f000 f8cd 	bl	8005310 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005176:	e7ef      	b.n	8005158 <prvTimerTask+0x8>

08005178 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005182:	f7fe fffd 	bl	8004180 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005186:	2308      	movs	r3, #8
 8005188:	18fb      	adds	r3, r7, r3
 800518a:	0018      	movs	r0, r3
 800518c:	f000 f85e 	bl	800524c <prvSampleTimeNow>
 8005190:	0003      	movs	r3, r0
 8005192:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d12b      	bne.n	80051f2 <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10c      	bne.n	80051ba <prvProcessTimerOrBlockTask+0x42>
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d808      	bhi.n	80051ba <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 80051a8:	f7fe fff6 	bl	8004198 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	0011      	movs	r1, r2
 80051b2:	0018      	movs	r0, r3
 80051b4:	f7ff ff9a 	bl	80050ec <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80051b8:	e01d      	b.n	80051f6 <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d008      	beq.n	80051d2 <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80051c0:	4b0f      	ldr	r3, [pc, #60]	; (8005200 <prvProcessTimerOrBlockTask+0x88>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <prvProcessTimerOrBlockTask+0x56>
 80051ca:	2301      	movs	r3, #1
 80051cc:	e000      	b.n	80051d0 <prvProcessTimerOrBlockTask+0x58>
 80051ce:	2300      	movs	r3, #0
 80051d0:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80051d2:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <prvProcessTimerOrBlockTask+0x8c>)
 80051d4:	6818      	ldr	r0, [r3, #0]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	0019      	movs	r1, r3
 80051e0:	f7fe fd70 	bl	8003cc4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80051e4:	f7fe ffd8 	bl	8004198 <xTaskResumeAll>
 80051e8:	1e03      	subs	r3, r0, #0
 80051ea:	d104      	bne.n	80051f6 <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 80051ec:	f000 fa28 	bl	8005640 <vPortYield>
    }
 80051f0:	e001      	b.n	80051f6 <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 80051f2:	f7fe ffd1 	bl	8004198 <xTaskResumeAll>
    }
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	46bd      	mov	sp, r7
 80051fa:	b004      	add	sp, #16
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	20000490 	.word	0x20000490
 8005204:	20000494 	.word	0x20000494

08005208 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005210:	4b0d      	ldr	r3, [pc, #52]	; (8005248 <prvGetNextExpireTime+0x40>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <prvGetNextExpireTime+0x16>
 800521a:	2201      	movs	r2, #1
 800521c:	e000      	b.n	8005220 <prvGetNextExpireTime+0x18>
 800521e:	2200      	movs	r2, #0
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d105      	bne.n	8005238 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800522c:	4b06      	ldr	r3, [pc, #24]	; (8005248 <prvGetNextExpireTime+0x40>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	e001      	b.n	800523c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800523c:	68fb      	ldr	r3, [r7, #12]
    }
 800523e:	0018      	movs	r0, r3
 8005240:	46bd      	mov	sp, r7
 8005242:	b004      	add	sp, #16
 8005244:	bd80      	pop	{r7, pc}
 8005246:	46c0      	nop			; (mov r8, r8)
 8005248:	2000048c 	.word	0x2000048c

0800524c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005254:	f7ff f888 	bl	8004368 <xTaskGetTickCount>
 8005258:	0003      	movs	r3, r0
 800525a:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 800525c:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <prvSampleTimeNow+0x3c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	429a      	cmp	r2, r3
 8005264:	d205      	bcs.n	8005272 <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8005266:	f000 f901 	bl	800546c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	e002      	b.n	8005278 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005278:	4b03      	ldr	r3, [pc, #12]	; (8005288 <prvSampleTimeNow+0x3c>)
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 800527e:	68fb      	ldr	r3, [r7, #12]
    }
 8005280:	0018      	movs	r0, r3
 8005282:	46bd      	mov	sp, r7
 8005284:	b004      	add	sp, #16
 8005286:	bd80      	pop	{r7, pc}
 8005288:	2000049c 	.word	0x2000049c

0800528c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800529a:	2300      	movs	r3, #0
 800529c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d812      	bhi.n	80052d8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	1ad2      	subs	r2, r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d302      	bcc.n	80052c6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80052c0:	2301      	movs	r3, #1
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	e01b      	b.n	80052fe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80052c6:	4b10      	ldr	r3, [pc, #64]	; (8005308 <prvInsertTimerInActiveList+0x7c>)
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	3304      	adds	r3, #4
 80052ce:	0019      	movs	r1, r3
 80052d0:	0010      	movs	r0, r2
 80052d2:	f7fe f8b0 	bl	8003436 <vListInsert>
 80052d6:	e012      	b.n	80052fe <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d206      	bcs.n	80052ee <prvInsertTimerInActiveList+0x62>
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d302      	bcc.n	80052ee <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80052e8:	2301      	movs	r3, #1
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	e007      	b.n	80052fe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052ee:	4b07      	ldr	r3, [pc, #28]	; (800530c <prvInsertTimerInActiveList+0x80>)
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3304      	adds	r3, #4
 80052f6:	0019      	movs	r1, r3
 80052f8:	0010      	movs	r0, r2
 80052fa:	f7fe f89c 	bl	8003436 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80052fe:	697b      	ldr	r3, [r7, #20]
    }
 8005300:	0018      	movs	r0, r3
 8005302:	46bd      	mov	sp, r7
 8005304:	b006      	add	sp, #24
 8005306:	bd80      	pop	{r7, pc}
 8005308:	20000490 	.word	0x20000490
 800530c:	2000048c 	.word	0x2000048c

08005310 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005316:	e095      	b.n	8005444 <prvProcessReceivedCommands+0x134>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005318:	1d3b      	adds	r3, r7, #4
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	da00      	bge.n	8005322 <prvProcessReceivedCommands+0x12>
 8005320:	e08f      	b.n	8005442 <prvProcessReceivedCommands+0x132>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005322:	1d3b      	adds	r3, r7, #4
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d004      	beq.n	800533a <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	3304      	adds	r3, #4
 8005334:	0018      	movs	r0, r3
 8005336:	f7fe f8b4 	bl	80034a2 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800533a:	003b      	movs	r3, r7
 800533c:	0018      	movs	r0, r3
 800533e:	f7ff ff85 	bl	800524c <prvSampleTimeNow>
 8005342:	0003      	movs	r3, r0
 8005344:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 8005346:	1d3b      	adds	r3, r7, #4
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2b09      	cmp	r3, #9
 800534c:	d900      	bls.n	8005350 <prvProcessReceivedCommands+0x40>
 800534e:	e079      	b.n	8005444 <prvProcessReceivedCommands+0x134>
 8005350:	009a      	lsls	r2, r3, #2
 8005352:	4b44      	ldr	r3, [pc, #272]	; (8005464 <prvProcessReceivedCommands+0x154>)
 8005354:	18d3      	adds	r3, r2, r3
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2228      	movs	r2, #40	; 0x28
 800535e:	5c9b      	ldrb	r3, [r3, r2]
 8005360:	2201      	movs	r2, #1
 8005362:	4313      	orrs	r3, r2
 8005364:	b2d9      	uxtb	r1, r3
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2228      	movs	r2, #40	; 0x28
 800536a:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800536c:	1d3b      	adds	r3, r7, #4
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	18d1      	adds	r1, r2, r3
 8005376:	1d3b      	adds	r3, r7, #4
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	6978      	ldr	r0, [r7, #20]
 800537e:	f7ff ff85 	bl	800528c <prvInsertTimerInActiveList>
 8005382:	1e03      	subs	r3, r0, #0
 8005384:	d05e      	beq.n	8005444 <prvProcessReceivedCommands+0x134>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	2228      	movs	r2, #40	; 0x28
 800538a:	5c9b      	ldrb	r3, [r3, r2]
 800538c:	001a      	movs	r2, r3
 800538e:	2304      	movs	r3, #4
 8005390:	4013      	ands	r3, r2
 8005392:	d00a      	beq.n	80053aa <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005394:	1d3b      	adds	r3, r7, #4
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	18d1      	adds	r1, r2, r3
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	0018      	movs	r0, r3
 80053a4:	f7ff fe80 	bl	80050a8 <prvReloadTimer>
 80053a8:	e008      	b.n	80053bc <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2228      	movs	r2, #40	; 0x28
 80053ae:	5c9b      	ldrb	r3, [r3, r2]
 80053b0:	2201      	movs	r2, #1
 80053b2:	4393      	bics	r3, r2
 80053b4:	b2d9      	uxtb	r1, r3
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2228      	movs	r2, #40	; 0x28
 80053ba:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	0010      	movs	r0, r2
 80053c4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80053c6:	e03d      	b.n	8005444 <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	2228      	movs	r2, #40	; 0x28
 80053cc:	5c9b      	ldrb	r3, [r3, r2]
 80053ce:	2201      	movs	r2, #1
 80053d0:	4393      	bics	r3, r2
 80053d2:	b2d9      	uxtb	r1, r3
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2228      	movs	r2, #40	; 0x28
 80053d8:	5499      	strb	r1, [r3, r2]
                        break;
 80053da:	e033      	b.n	8005444 <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2228      	movs	r2, #40	; 0x28
 80053e0:	5c9b      	ldrb	r3, [r3, r2]
 80053e2:	2201      	movs	r2, #1
 80053e4:	4313      	orrs	r3, r2
 80053e6:	b2d9      	uxtb	r1, r3
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2228      	movs	r2, #40	; 0x28
 80053ec:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80053ee:	1d3b      	adds	r3, r7, #4
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <prvProcessReceivedCommands+0xf2>
 80053fe:	b672      	cpsid	i
 8005400:	e7fe      	b.n	8005400 <prvProcessReceivedCommands+0xf0>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	699a      	ldr	r2, [r3, #24]
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	18d1      	adds	r1, r2, r3
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	6978      	ldr	r0, [r7, #20]
 8005410:	f7ff ff3c 	bl	800528c <prvInsertTimerInActiveList>
                        break;
 8005414:	e016      	b.n	8005444 <prvProcessReceivedCommands+0x134>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2228      	movs	r2, #40	; 0x28
 800541a:	5c9b      	ldrb	r3, [r3, r2]
 800541c:	001a      	movs	r2, r3
 800541e:	2302      	movs	r3, #2
 8005420:	4013      	ands	r3, r2
 8005422:	d104      	bne.n	800542e <prvProcessReceivedCommands+0x11e>
                            {
                                vPortFree( pxTimer );
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	0018      	movs	r0, r3
 8005428:	f000 fa5a 	bl	80058e0 <vPortFree>
 800542c:	e00a      	b.n	8005444 <prvProcessReceivedCommands+0x134>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2228      	movs	r2, #40	; 0x28
 8005432:	5c9b      	ldrb	r3, [r3, r2]
 8005434:	2201      	movs	r2, #1
 8005436:	4393      	bics	r3, r2
 8005438:	b2d9      	uxtb	r1, r3
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2228      	movs	r2, #40	; 0x28
 800543e:	5499      	strb	r1, [r3, r2]
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005440:	e000      	b.n	8005444 <prvProcessReceivedCommands+0x134>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005442:	46c0      	nop			; (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005444:	4b08      	ldr	r3, [pc, #32]	; (8005468 <prvProcessReceivedCommands+0x158>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	1d39      	adds	r1, r7, #4
 800544a:	2200      	movs	r2, #0
 800544c:	0018      	movs	r0, r3
 800544e:	f7fe fa22 	bl	8003896 <xQueueReceive>
 8005452:	1e03      	subs	r3, r0, #0
 8005454:	d000      	beq.n	8005458 <prvProcessReceivedCommands+0x148>
 8005456:	e75f      	b.n	8005318 <prvProcessReceivedCommands+0x8>
        }
    }
 8005458:	46c0      	nop			; (mov r8, r8)
 800545a:	46c0      	nop			; (mov r8, r8)
 800545c:	46bd      	mov	sp, r7
 800545e:	b006      	add	sp, #24
 8005460:	bd80      	pop	{r7, pc}
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	08006578 	.word	0x08006578
 8005468:	20000494 	.word	0x20000494

0800546c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005472:	e00b      	b.n	800548c <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005474:	4b0f      	ldr	r3, [pc, #60]	; (80054b4 <prvSwitchTimerLists+0x48>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800547e:	2301      	movs	r3, #1
 8005480:	425a      	negs	r2, r3
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	0011      	movs	r1, r2
 8005486:	0018      	movs	r0, r3
 8005488:	f7ff fe30 	bl	80050ec <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800548c:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <prvSwitchTimerLists+0x48>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1ee      	bne.n	8005474 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8005496:	4b07      	ldr	r3, [pc, #28]	; (80054b4 <prvSwitchTimerLists+0x48>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800549c:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <prvSwitchTimerLists+0x4c>)
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	4b04      	ldr	r3, [pc, #16]	; (80054b4 <prvSwitchTimerLists+0x48>)
 80054a2:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 80054a4:	4b04      	ldr	r3, [pc, #16]	; (80054b8 <prvSwitchTimerLists+0x4c>)
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	601a      	str	r2, [r3, #0]
    }
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	46bd      	mov	sp, r7
 80054ae:	b002      	add	sp, #8
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	2000048c 	.word	0x2000048c
 80054b8:	20000490 	.word	0x20000490

080054bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80054c0:	f000 f8ce 	bl	8005660 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80054c4:	4b14      	ldr	r3, [pc, #80]	; (8005518 <prvCheckForValidListAndQueue+0x5c>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d120      	bne.n	800550e <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 80054cc:	4b13      	ldr	r3, [pc, #76]	; (800551c <prvCheckForValidListAndQueue+0x60>)
 80054ce:	0018      	movs	r0, r3
 80054d0:	f7fd ff66 	bl	80033a0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80054d4:	4b12      	ldr	r3, [pc, #72]	; (8005520 <prvCheckForValidListAndQueue+0x64>)
 80054d6:	0018      	movs	r0, r3
 80054d8:	f7fd ff62 	bl	80033a0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80054dc:	4b11      	ldr	r3, [pc, #68]	; (8005524 <prvCheckForValidListAndQueue+0x68>)
 80054de:	4a0f      	ldr	r2, [pc, #60]	; (800551c <prvCheckForValidListAndQueue+0x60>)
 80054e0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80054e2:	4b11      	ldr	r3, [pc, #68]	; (8005528 <prvCheckForValidListAndQueue+0x6c>)
 80054e4:	4a0e      	ldr	r2, [pc, #56]	; (8005520 <prvCheckForValidListAndQueue+0x64>)
 80054e6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80054e8:	2200      	movs	r2, #0
 80054ea:	210c      	movs	r1, #12
 80054ec:	2005      	movs	r0, #5
 80054ee:	f7fe f889 	bl	8003604 <xQueueGenericCreate>
 80054f2:	0002      	movs	r2, r0
 80054f4:	4b08      	ldr	r3, [pc, #32]	; (8005518 <prvCheckForValidListAndQueue+0x5c>)
 80054f6:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80054f8:	4b07      	ldr	r3, [pc, #28]	; (8005518 <prvCheckForValidListAndQueue+0x5c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d006      	beq.n	800550e <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005500:	4b05      	ldr	r3, [pc, #20]	; (8005518 <prvCheckForValidListAndQueue+0x5c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a09      	ldr	r2, [pc, #36]	; (800552c <prvCheckForValidListAndQueue+0x70>)
 8005506:	0011      	movs	r1, r2
 8005508:	0018      	movs	r0, r3
 800550a:	f7fe fb97 	bl	8003c3c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800550e:	f000 f8b9 	bl	8005684 <vPortExitCritical>
    }
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	20000494 	.word	0x20000494
 800551c:	20000464 	.word	0x20000464
 8005520:	20000478 	.word	0x20000478
 8005524:	2000048c 	.word	0x2000048c
 8005528:	20000490 	.word	0x20000490
 800552c:	08006524 	.word	0x08006524

08005530 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3b04      	subs	r3, #4
 8005540:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2280      	movs	r2, #128	; 0x80
 8005546:	0452      	lsls	r2, r2, #17
 8005548:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3b04      	subs	r3, #4
 800554e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	3b04      	subs	r3, #4
 800555a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 800555c:	4a08      	ldr	r2, [pc, #32]	; (8005580 <pxPortInitialiseStack+0x50>)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	3b14      	subs	r3, #20
 8005566:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3b20      	subs	r3, #32
 8005572:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005574:	68fb      	ldr	r3, [r7, #12]
}
 8005576:	0018      	movs	r0, r3
 8005578:	46bd      	mov	sp, r7
 800557a:	b004      	add	sp, #16
 800557c:	bd80      	pop	{r7, pc}
 800557e:	46c0      	nop			; (mov r8, r8)
 8005580:	08005585 	.word	0x08005585

08005584 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800558a:	2300      	movs	r3, #0
 800558c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800558e:	4b08      	ldr	r3, [pc, #32]	; (80055b0 <prvTaskExitError+0x2c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3301      	adds	r3, #1
 8005594:	d001      	beq.n	800559a <prvTaskExitError+0x16>
 8005596:	b672      	cpsid	i
 8005598:	e7fe      	b.n	8005598 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 800559a:	b672      	cpsid	i

    while( ulDummy == 0 )
 800559c:	46c0      	nop			; (mov r8, r8)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0fc      	beq.n	800559e <prvTaskExitError+0x1a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80055a4:	46c0      	nop			; (mov r8, r8)
 80055a6:	46c0      	nop			; (mov r8, r8)
 80055a8:	46bd      	mov	sp, r7
 80055aa:	b002      	add	sp, #8
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	20000174 	.word	0x20000174

080055b4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 80055b8:	46c0      	nop			; (mov r8, r8)
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 80055c0:	4a0b      	ldr	r2, [pc, #44]	; (80055f0 <pxCurrentTCBConst2>)
 80055c2:	6813      	ldr	r3, [r2, #0]
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	3020      	adds	r0, #32
 80055c8:	f380 8809 	msr	PSP, r0
 80055cc:	2002      	movs	r0, #2
 80055ce:	f380 8814 	msr	CONTROL, r0
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80055d8:	46ae      	mov	lr, r5
 80055da:	bc08      	pop	{r3}
 80055dc:	bc04      	pop	{r2}
 80055de:	b662      	cpsie	i
 80055e0:	4718      	bx	r3
 80055e2:	46c0      	nop			; (mov r8, r8)
 80055e4:	46c0      	nop			; (mov r8, r8)
 80055e6:	46c0      	nop			; (mov r8, r8)
 80055e8:	46c0      	nop			; (mov r8, r8)
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	46c0      	nop			; (mov r8, r8)
 80055ee:	46c0      	nop			; (mov r8, r8)

080055f0 <pxCurrentTCBConst2>:
 80055f0:	20000360 	.word	0x20000360
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 80055f4:	46c0      	nop			; (mov r8, r8)
 80055f6:	46c0      	nop			; (mov r8, r8)

080055f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80055fc:	4b0e      	ldr	r3, [pc, #56]	; (8005638 <xPortStartScheduler+0x40>)
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	4b0d      	ldr	r3, [pc, #52]	; (8005638 <xPortStartScheduler+0x40>)
 8005602:	21ff      	movs	r1, #255	; 0xff
 8005604:	0409      	lsls	r1, r1, #16
 8005606:	430a      	orrs	r2, r1
 8005608:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800560a:	4b0b      	ldr	r3, [pc, #44]	; (8005638 <xPortStartScheduler+0x40>)
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	4b0a      	ldr	r3, [pc, #40]	; (8005638 <xPortStartScheduler+0x40>)
 8005610:	21ff      	movs	r1, #255	; 0xff
 8005612:	0609      	lsls	r1, r1, #24
 8005614:	430a      	orrs	r2, r1
 8005616:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005618:	f000 f898 	bl	800574c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800561c:	4b07      	ldr	r3, [pc, #28]	; (800563c <xPortStartScheduler+0x44>)
 800561e:	2200      	movs	r2, #0
 8005620:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8005622:	f7ff ffcd 	bl	80055c0 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005626:	f7fe ffb9 	bl	800459c <vTaskSwitchContext>
    prvTaskExitError();
 800562a:	f7ff ffab 	bl	8005584 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800562e:	2300      	movs	r3, #0
}
 8005630:	0018      	movs	r0, r3
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	e000ed20 	.word	0xe000ed20
 800563c:	20000174 	.word	0x20000174

08005640 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005644:	4b05      	ldr	r3, [pc, #20]	; (800565c <vPortYield+0x1c>)
 8005646:	2280      	movs	r2, #128	; 0x80
 8005648:	0552      	lsls	r2, r2, #21
 800564a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800564c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8005650:	f3bf 8f6f 	isb	sy
}
 8005654:	46c0      	nop			; (mov r8, r8)
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	46c0      	nop			; (mov r8, r8)
 800565c:	e000ed04 	.word	0xe000ed04

08005660 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005664:	b672      	cpsid	i
    uxCriticalNesting++;
 8005666:	4b06      	ldr	r3, [pc, #24]	; (8005680 <vPortEnterCritical+0x20>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	1c5a      	adds	r2, r3, #1
 800566c:	4b04      	ldr	r3, [pc, #16]	; (8005680 <vPortEnterCritical+0x20>)
 800566e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8005670:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8005674:	f3bf 8f6f 	isb	sy
}
 8005678:	46c0      	nop			; (mov r8, r8)
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	46c0      	nop			; (mov r8, r8)
 8005680:	20000174 	.word	0x20000174

08005684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005688:	4b09      	ldr	r3, [pc, #36]	; (80056b0 <vPortExitCritical+0x2c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <vPortExitCritical+0x10>
 8005690:	b672      	cpsid	i
 8005692:	e7fe      	b.n	8005692 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005694:	4b06      	ldr	r3, [pc, #24]	; (80056b0 <vPortExitCritical+0x2c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	1e5a      	subs	r2, r3, #1
 800569a:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <vPortExitCritical+0x2c>)
 800569c:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 800569e:	4b04      	ldr	r3, [pc, #16]	; (80056b0 <vPortExitCritical+0x2c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d100      	bne.n	80056a8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80056a6:	b662      	cpsie	i
    }
}
 80056a8:	46c0      	nop			; (mov r8, r8)
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	20000174 	.word	0x20000174

080056b4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 80056b4:	f3ef 8010 	mrs	r0, PRIMASK
 80056b8:	b672      	cpsid	i
 80056ba:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 80056bc:	46c0      	nop			; (mov r8, r8)
 80056be:	0018      	movs	r0, r3

080056c0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 80056c0:	f380 8810 	msr	PRIMASK, r0
 80056c4:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 80056c6:	46c0      	nop			; (mov r8, r8)
	...

080056d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80056d0:	f3ef 8009 	mrs	r0, PSP
 80056d4:	4b0e      	ldr	r3, [pc, #56]	; (8005710 <pxCurrentTCBConst>)
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	3820      	subs	r0, #32
 80056da:	6010      	str	r0, [r2, #0]
 80056dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80056de:	4644      	mov	r4, r8
 80056e0:	464d      	mov	r5, r9
 80056e2:	4656      	mov	r6, sl
 80056e4:	465f      	mov	r7, fp
 80056e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80056e8:	b508      	push	{r3, lr}
 80056ea:	b672      	cpsid	i
 80056ec:	f7fe ff56 	bl	800459c <vTaskSwitchContext>
 80056f0:	b662      	cpsie	i
 80056f2:	bc0c      	pop	{r2, r3}
 80056f4:	6811      	ldr	r1, [r2, #0]
 80056f6:	6808      	ldr	r0, [r1, #0]
 80056f8:	3010      	adds	r0, #16
 80056fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80056fc:	46a0      	mov	r8, r4
 80056fe:	46a9      	mov	r9, r5
 8005700:	46b2      	mov	sl, r6
 8005702:	46bb      	mov	fp, r7
 8005704:	f380 8809 	msr	PSP, r0
 8005708:	3820      	subs	r0, #32
 800570a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800570c:	4718      	bx	r3
 800570e:	46c0      	nop			; (mov r8, r8)

08005710 <pxCurrentTCBConst>:
 8005710:	20000360 	.word	0x20000360
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8005714:	46c0      	nop			; (mov r8, r8)
 8005716:	46c0      	nop			; (mov r8, r8)

08005718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800571e:	f7ff ffc9 	bl	80056b4 <ulSetInterruptMaskFromISR>
 8005722:	0003      	movs	r3, r0
 8005724:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005726:	f7fe fe2d 	bl	8004384 <xTaskIncrementTick>
 800572a:	1e03      	subs	r3, r0, #0
 800572c:	d003      	beq.n	8005736 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800572e:	4b06      	ldr	r3, [pc, #24]	; (8005748 <SysTick_Handler+0x30>)
 8005730:	2280      	movs	r2, #128	; 0x80
 8005732:	0552      	lsls	r2, r2, #21
 8005734:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	0018      	movs	r0, r3
 800573a:	f7ff ffc1 	bl	80056c0 <vClearInterruptMaskFromISR>
}
 800573e:	46c0      	nop			; (mov r8, r8)
 8005740:	46bd      	mov	sp, r7
 8005742:	b002      	add	sp, #8
 8005744:	bd80      	pop	{r7, pc}
 8005746:	46c0      	nop			; (mov r8, r8)
 8005748:	e000ed04 	.word	0xe000ed04

0800574c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005750:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <vPortSetupTimerInterrupt+0x34>)
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005756:	4b0b      	ldr	r3, [pc, #44]	; (8005784 <vPortSetupTimerInterrupt+0x38>)
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800575c:	4b0a      	ldr	r3, [pc, #40]	; (8005788 <vPortSetupTimerInterrupt+0x3c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	22fa      	movs	r2, #250	; 0xfa
 8005762:	0091      	lsls	r1, r2, #2
 8005764:	0018      	movs	r0, r3
 8005766:	f7fa fce1 	bl	800012c <__udivsi3>
 800576a:	0003      	movs	r3, r0
 800576c:	001a      	movs	r2, r3
 800576e:	4b07      	ldr	r3, [pc, #28]	; (800578c <vPortSetupTimerInterrupt+0x40>)
 8005770:	3a01      	subs	r2, #1
 8005772:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005774:	4b02      	ldr	r3, [pc, #8]	; (8005780 <vPortSetupTimerInterrupt+0x34>)
 8005776:	2207      	movs	r2, #7
 8005778:	601a      	str	r2, [r3, #0]
}
 800577a:	46c0      	nop			; (mov r8, r8)
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	e000e010 	.word	0xe000e010
 8005784:	e000e018 	.word	0xe000e018
 8005788:	20000164 	.word	0x20000164
 800578c:	e000e014 	.word	0xe000e014

08005790 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b088      	sub	sp, #32
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005798:	2300      	movs	r3, #0
 800579a:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800579c:	f7fe fcf0 	bl	8004180 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80057a0:	4b4a      	ldr	r3, [pc, #296]	; (80058cc <pvPortMalloc+0x13c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80057a8:	f000 f8e6 	bl	8005978 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d012      	beq.n	80057d8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80057b2:	2208      	movs	r2, #8
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2107      	movs	r1, #7
 80057b8:	400b      	ands	r3, r1
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	3308      	adds	r3, #8
 80057be:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	43db      	mvns	r3, r3
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d804      	bhi.n	80057d4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	18d3      	adds	r3, r2, r3
 80057d0:	607b      	str	r3, [r7, #4]
 80057d2:	e001      	b.n	80057d8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80057d4:	2300      	movs	r3, #0
 80057d6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	db68      	blt.n	80058b0 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d065      	beq.n	80058b0 <pvPortMalloc+0x120>
 80057e4:	4b3a      	ldr	r3, [pc, #232]	; (80058d0 <pvPortMalloc+0x140>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d860      	bhi.n	80058b0 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80057ee:	4b39      	ldr	r3, [pc, #228]	; (80058d4 <pvPortMalloc+0x144>)
 80057f0:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 80057f2:	4b38      	ldr	r3, [pc, #224]	; (80058d4 <pvPortMalloc+0x144>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057f8:	e004      	b.n	8005804 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	429a      	cmp	r2, r3
 800580c:	d903      	bls.n	8005816 <pvPortMalloc+0x86>
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1f1      	bne.n	80057fa <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005816:	4b2d      	ldr	r3, [pc, #180]	; (80058cc <pvPortMalloc+0x13c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69fa      	ldr	r2, [r7, #28]
 800581c:	429a      	cmp	r2, r3
 800581e:	d047      	beq.n	80058b0 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2208      	movs	r2, #8
 8005826:	189b      	adds	r3, r3, r2
 8005828:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	1ad2      	subs	r2, r2, r3
 800583a:	2308      	movs	r3, #8
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	429a      	cmp	r2, r3
 8005840:	d916      	bls.n	8005870 <pvPortMalloc+0xe0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	18d3      	adds	r3, r2, r3
 8005848:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2207      	movs	r2, #7
 800584e:	4013      	ands	r3, r2
 8005850:	d001      	beq.n	8005856 <pvPortMalloc+0xc6>
 8005852:	b672      	cpsid	i
 8005854:	e7fe      	b.n	8005854 <pvPortMalloc+0xc4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	1ad2      	subs	r2, r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	0018      	movs	r0, r3
 800586c:	f000 f8de 	bl	8005a2c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005870:	4b17      	ldr	r3, [pc, #92]	; (80058d0 <pvPortMalloc+0x140>)
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	1ad2      	subs	r2, r2, r3
 800587a:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <pvPortMalloc+0x140>)
 800587c:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800587e:	4b14      	ldr	r3, [pc, #80]	; (80058d0 <pvPortMalloc+0x140>)
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	4b15      	ldr	r3, [pc, #84]	; (80058d8 <pvPortMalloc+0x148>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	d203      	bcs.n	8005892 <pvPortMalloc+0x102>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800588a:	4b11      	ldr	r3, [pc, #68]	; (80058d0 <pvPortMalloc+0x140>)
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4b12      	ldr	r3, [pc, #72]	; (80058d8 <pvPortMalloc+0x148>)
 8005890:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2280      	movs	r2, #128	; 0x80
 8005898:	0612      	lsls	r2, r2, #24
 800589a:	431a      	orrs	r2, r3
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80058a6:	4b0d      	ldr	r3, [pc, #52]	; (80058dc <pvPortMalloc+0x14c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	4b0b      	ldr	r3, [pc, #44]	; (80058dc <pvPortMalloc+0x14c>)
 80058ae:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80058b0:	f7fe fc72 	bl	8004198 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2207      	movs	r2, #7
 80058b8:	4013      	ands	r3, r2
 80058ba:	d001      	beq.n	80058c0 <pvPortMalloc+0x130>
 80058bc:	b672      	cpsid	i
 80058be:	e7fe      	b.n	80058be <pvPortMalloc+0x12e>
    return pvReturn;
 80058c0:	697b      	ldr	r3, [r7, #20]
}
 80058c2:	0018      	movs	r0, r3
 80058c4:	46bd      	mov	sp, r7
 80058c6:	b008      	add	sp, #32
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	46c0      	nop			; (mov r8, r8)
 80058cc:	20001e0c 	.word	0x20001e0c
 80058d0:	20001e10 	.word	0x20001e10
 80058d4:	20001e04 	.word	0x20001e04
 80058d8:	20001e14 	.word	0x20001e14
 80058dc:	20001e18 	.word	0x20001e18

080058e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d039      	beq.n	8005966 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80058f2:	2308      	movs	r3, #8
 80058f4:	425b      	negs	r3, r3
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	18d3      	adds	r3, r2, r3
 80058fa:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	db01      	blt.n	800590c <vPortFree+0x2c>
 8005908:	b672      	cpsid	i
 800590a:	e7fe      	b.n	800590a <vPortFree+0x2a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <vPortFree+0x38>
 8005914:	b672      	cpsid	i
 8005916:	e7fe      	b.n	8005916 <vPortFree+0x36>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	0fdb      	lsrs	r3, r3, #31
 800591e:	1c1a      	adds	r2, r3, #0
 8005920:	2301      	movs	r3, #1
 8005922:	4013      	ands	r3, r2
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d01d      	beq.n	8005966 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d119      	bne.n	8005966 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	085a      	lsrs	r2, r3, #1
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800593e:	f7fe fc1f 	bl	8004180 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	4b0a      	ldr	r3, [pc, #40]	; (8005970 <vPortFree+0x90>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	18d2      	adds	r2, r2, r3
 800594c:	4b08      	ldr	r3, [pc, #32]	; (8005970 <vPortFree+0x90>)
 800594e:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	0018      	movs	r0, r3
 8005954:	f000 f86a 	bl	8005a2c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005958:	4b06      	ldr	r3, [pc, #24]	; (8005974 <vPortFree+0x94>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	4b05      	ldr	r3, [pc, #20]	; (8005974 <vPortFree+0x94>)
 8005960:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 8005962:	f7fe fc19 	bl	8004198 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	46bd      	mov	sp, r7
 800596a:	b004      	add	sp, #16
 800596c:	bd80      	pop	{r7, pc}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	20001e10 	.word	0x20001e10
 8005974:	20001e1c 	.word	0x20001e1c

08005978 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800597e:	4b25      	ldr	r3, [pc, #148]	; (8005a14 <prvHeapInit+0x9c>)
 8005980:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005982:	4b25      	ldr	r3, [pc, #148]	; (8005a18 <prvHeapInit+0xa0>)
 8005984:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2207      	movs	r2, #7
 800598a:	4013      	ands	r3, r2
 800598c:	d00c      	beq.n	80059a8 <prvHeapInit+0x30>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3307      	adds	r3, #7
 8005992:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2207      	movs	r2, #7
 8005998:	4393      	bics	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	1ad2      	subs	r2, r2, r3
 80059a2:	4b1d      	ldr	r3, [pc, #116]	; (8005a18 <prvHeapInit+0xa0>)
 80059a4:	18d3      	adds	r3, r2, r3
 80059a6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059ac:	4b1b      	ldr	r3, [pc, #108]	; (8005a1c <prvHeapInit+0xa4>)
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80059b2:	4b1a      	ldr	r3, [pc, #104]	; (8005a1c <prvHeapInit+0xa4>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	18d3      	adds	r3, r2, r3
 80059be:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80059c0:	2208      	movs	r2, #8
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	1a9b      	subs	r3, r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2207      	movs	r2, #7
 80059cc:	4393      	bics	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4b13      	ldr	r3, [pc, #76]	; (8005a20 <prvHeapInit+0xa8>)
 80059d4:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 80059d6:	4b12      	ldr	r3, [pc, #72]	; (8005a20 <prvHeapInit+0xa8>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2200      	movs	r2, #0
 80059dc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80059de:	4b10      	ldr	r3, [pc, #64]	; (8005a20 <prvHeapInit+0xa8>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	1ad2      	subs	r2, r2, r3
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059f4:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <prvHeapInit+0xa8>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	4b08      	ldr	r3, [pc, #32]	; (8005a24 <prvHeapInit+0xac>)
 8005a02:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	4b07      	ldr	r3, [pc, #28]	; (8005a28 <prvHeapInit+0xb0>)
 8005a0a:	601a      	str	r2, [r3, #0]
}
 8005a0c:	46c0      	nop			; (mov r8, r8)
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	b004      	add	sp, #16
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	00001964 	.word	0x00001964
 8005a18:	200004a0 	.word	0x200004a0
 8005a1c:	20001e04 	.word	0x20001e04
 8005a20:	20001e0c 	.word	0x20001e0c
 8005a24:	20001e14 	.word	0x20001e14
 8005a28:	20001e10 	.word	0x20001e10

08005a2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a34:	4b27      	ldr	r3, [pc, #156]	; (8005ad4 <prvInsertBlockIntoFreeList+0xa8>)
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	e002      	b.n	8005a40 <prvInsertBlockIntoFreeList+0x14>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d8f7      	bhi.n	8005a3a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	18d3      	adds	r3, r2, r3
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d108      	bne.n	8005a6e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	18d2      	adds	r2, r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	18d2      	adds	r2, r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d118      	bne.n	8005ab4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	4b14      	ldr	r3, [pc, #80]	; (8005ad8 <prvInsertBlockIntoFreeList+0xac>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d00d      	beq.n	8005aaa <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	18d2      	adds	r2, r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	e008      	b.n	8005abc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005aaa:	4b0b      	ldr	r3, [pc, #44]	; (8005ad8 <prvInsertBlockIntoFreeList+0xac>)
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	e003      	b.n	8005abc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d002      	beq.n	8005aca <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005aca:	46c0      	nop			; (mov r8, r8)
 8005acc:	46bd      	mov	sp, r7
 8005ace:	b004      	add	sp, #16
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	46c0      	nop			; (mov r8, r8)
 8005ad4:	20001e04 	.word	0x20001e04
 8005ad8:	20001e0c 	.word	0x20001e0c

08005adc <__errno>:
 8005adc:	4b01      	ldr	r3, [pc, #4]	; (8005ae4 <__errno+0x8>)
 8005ade:	6818      	ldr	r0, [r3, #0]
 8005ae0:	4770      	bx	lr
 8005ae2:	46c0      	nop			; (mov r8, r8)
 8005ae4:	20000178 	.word	0x20000178

08005ae8 <__libc_init_array>:
 8005ae8:	b570      	push	{r4, r5, r6, lr}
 8005aea:	2600      	movs	r6, #0
 8005aec:	4d0c      	ldr	r5, [pc, #48]	; (8005b20 <__libc_init_array+0x38>)
 8005aee:	4c0d      	ldr	r4, [pc, #52]	; (8005b24 <__libc_init_array+0x3c>)
 8005af0:	1b64      	subs	r4, r4, r5
 8005af2:	10a4      	asrs	r4, r4, #2
 8005af4:	42a6      	cmp	r6, r4
 8005af6:	d109      	bne.n	8005b0c <__libc_init_array+0x24>
 8005af8:	2600      	movs	r6, #0
 8005afa:	f000 fc93 	bl	8006424 <_init>
 8005afe:	4d0a      	ldr	r5, [pc, #40]	; (8005b28 <__libc_init_array+0x40>)
 8005b00:	4c0a      	ldr	r4, [pc, #40]	; (8005b2c <__libc_init_array+0x44>)
 8005b02:	1b64      	subs	r4, r4, r5
 8005b04:	10a4      	asrs	r4, r4, #2
 8005b06:	42a6      	cmp	r6, r4
 8005b08:	d105      	bne.n	8005b16 <__libc_init_array+0x2e>
 8005b0a:	bd70      	pop	{r4, r5, r6, pc}
 8005b0c:	00b3      	lsls	r3, r6, #2
 8005b0e:	58eb      	ldr	r3, [r5, r3]
 8005b10:	4798      	blx	r3
 8005b12:	3601      	adds	r6, #1
 8005b14:	e7ee      	b.n	8005af4 <__libc_init_array+0xc>
 8005b16:	00b3      	lsls	r3, r6, #2
 8005b18:	58eb      	ldr	r3, [r5, r3]
 8005b1a:	4798      	blx	r3
 8005b1c:	3601      	adds	r6, #1
 8005b1e:	e7f2      	b.n	8005b06 <__libc_init_array+0x1e>
 8005b20:	080065d4 	.word	0x080065d4
 8005b24:	080065d4 	.word	0x080065d4
 8005b28:	080065d4 	.word	0x080065d4
 8005b2c:	080065d8 	.word	0x080065d8

08005b30 <memcpy>:
 8005b30:	2300      	movs	r3, #0
 8005b32:	b510      	push	{r4, lr}
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d100      	bne.n	8005b3a <memcpy+0xa>
 8005b38:	bd10      	pop	{r4, pc}
 8005b3a:	5ccc      	ldrb	r4, [r1, r3]
 8005b3c:	54c4      	strb	r4, [r0, r3]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	e7f8      	b.n	8005b34 <memcpy+0x4>

08005b42 <memset>:
 8005b42:	0003      	movs	r3, r0
 8005b44:	1882      	adds	r2, r0, r2
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d100      	bne.n	8005b4c <memset+0xa>
 8005b4a:	4770      	bx	lr
 8005b4c:	7019      	strb	r1, [r3, #0]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	e7f9      	b.n	8005b46 <memset+0x4>
	...

08005b54 <siprintf>:
 8005b54:	b40e      	push	{r1, r2, r3}
 8005b56:	b500      	push	{lr}
 8005b58:	490b      	ldr	r1, [pc, #44]	; (8005b88 <siprintf+0x34>)
 8005b5a:	b09c      	sub	sp, #112	; 0x70
 8005b5c:	ab1d      	add	r3, sp, #116	; 0x74
 8005b5e:	9002      	str	r0, [sp, #8]
 8005b60:	9006      	str	r0, [sp, #24]
 8005b62:	9107      	str	r1, [sp, #28]
 8005b64:	9104      	str	r1, [sp, #16]
 8005b66:	4809      	ldr	r0, [pc, #36]	; (8005b8c <siprintf+0x38>)
 8005b68:	4909      	ldr	r1, [pc, #36]	; (8005b90 <siprintf+0x3c>)
 8005b6a:	cb04      	ldmia	r3!, {r2}
 8005b6c:	9105      	str	r1, [sp, #20]
 8005b6e:	6800      	ldr	r0, [r0, #0]
 8005b70:	a902      	add	r1, sp, #8
 8005b72:	9301      	str	r3, [sp, #4]
 8005b74:	f000 f878 	bl	8005c68 <_svfiprintf_r>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	9a02      	ldr	r2, [sp, #8]
 8005b7c:	7013      	strb	r3, [r2, #0]
 8005b7e:	b01c      	add	sp, #112	; 0x70
 8005b80:	bc08      	pop	{r3}
 8005b82:	b003      	add	sp, #12
 8005b84:	4718      	bx	r3
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	7fffffff 	.word	0x7fffffff
 8005b8c:	20000178 	.word	0x20000178
 8005b90:	ffff0208 	.word	0xffff0208

08005b94 <strcpy>:
 8005b94:	0003      	movs	r3, r0
 8005b96:	780a      	ldrb	r2, [r1, #0]
 8005b98:	3101      	adds	r1, #1
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	2a00      	cmp	r2, #0
 8005ba0:	d1f9      	bne.n	8005b96 <strcpy+0x2>
 8005ba2:	4770      	bx	lr

08005ba4 <__ssputs_r>:
 8005ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ba6:	688e      	ldr	r6, [r1, #8]
 8005ba8:	b085      	sub	sp, #20
 8005baa:	0007      	movs	r7, r0
 8005bac:	000c      	movs	r4, r1
 8005bae:	9203      	str	r2, [sp, #12]
 8005bb0:	9301      	str	r3, [sp, #4]
 8005bb2:	429e      	cmp	r6, r3
 8005bb4:	d83c      	bhi.n	8005c30 <__ssputs_r+0x8c>
 8005bb6:	2390      	movs	r3, #144	; 0x90
 8005bb8:	898a      	ldrh	r2, [r1, #12]
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	421a      	tst	r2, r3
 8005bbe:	d034      	beq.n	8005c2a <__ssputs_r+0x86>
 8005bc0:	6909      	ldr	r1, [r1, #16]
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	6960      	ldr	r0, [r4, #20]
 8005bc6:	1a5b      	subs	r3, r3, r1
 8005bc8:	9302      	str	r3, [sp, #8]
 8005bca:	2303      	movs	r3, #3
 8005bcc:	4343      	muls	r3, r0
 8005bce:	0fdd      	lsrs	r5, r3, #31
 8005bd0:	18ed      	adds	r5, r5, r3
 8005bd2:	9b01      	ldr	r3, [sp, #4]
 8005bd4:	9802      	ldr	r0, [sp, #8]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	181b      	adds	r3, r3, r0
 8005bda:	106d      	asrs	r5, r5, #1
 8005bdc:	42ab      	cmp	r3, r5
 8005bde:	d900      	bls.n	8005be2 <__ssputs_r+0x3e>
 8005be0:	001d      	movs	r5, r3
 8005be2:	0553      	lsls	r3, r2, #21
 8005be4:	d532      	bpl.n	8005c4c <__ssputs_r+0xa8>
 8005be6:	0029      	movs	r1, r5
 8005be8:	0038      	movs	r0, r7
 8005bea:	f000 fb49 	bl	8006280 <_malloc_r>
 8005bee:	1e06      	subs	r6, r0, #0
 8005bf0:	d109      	bne.n	8005c06 <__ssputs_r+0x62>
 8005bf2:	230c      	movs	r3, #12
 8005bf4:	603b      	str	r3, [r7, #0]
 8005bf6:	2340      	movs	r3, #64	; 0x40
 8005bf8:	2001      	movs	r0, #1
 8005bfa:	89a2      	ldrh	r2, [r4, #12]
 8005bfc:	4240      	negs	r0, r0
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	81a3      	strh	r3, [r4, #12]
 8005c02:	b005      	add	sp, #20
 8005c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c06:	9a02      	ldr	r2, [sp, #8]
 8005c08:	6921      	ldr	r1, [r4, #16]
 8005c0a:	f7ff ff91 	bl	8005b30 <memcpy>
 8005c0e:	89a3      	ldrh	r3, [r4, #12]
 8005c10:	4a14      	ldr	r2, [pc, #80]	; (8005c64 <__ssputs_r+0xc0>)
 8005c12:	401a      	ands	r2, r3
 8005c14:	2380      	movs	r3, #128	; 0x80
 8005c16:	4313      	orrs	r3, r2
 8005c18:	81a3      	strh	r3, [r4, #12]
 8005c1a:	9b02      	ldr	r3, [sp, #8]
 8005c1c:	6126      	str	r6, [r4, #16]
 8005c1e:	18f6      	adds	r6, r6, r3
 8005c20:	6026      	str	r6, [r4, #0]
 8005c22:	6165      	str	r5, [r4, #20]
 8005c24:	9e01      	ldr	r6, [sp, #4]
 8005c26:	1aed      	subs	r5, r5, r3
 8005c28:	60a5      	str	r5, [r4, #8]
 8005c2a:	9b01      	ldr	r3, [sp, #4]
 8005c2c:	429e      	cmp	r6, r3
 8005c2e:	d900      	bls.n	8005c32 <__ssputs_r+0x8e>
 8005c30:	9e01      	ldr	r6, [sp, #4]
 8005c32:	0032      	movs	r2, r6
 8005c34:	9903      	ldr	r1, [sp, #12]
 8005c36:	6820      	ldr	r0, [r4, #0]
 8005c38:	f000 faa3 	bl	8006182 <memmove>
 8005c3c:	68a3      	ldr	r3, [r4, #8]
 8005c3e:	2000      	movs	r0, #0
 8005c40:	1b9b      	subs	r3, r3, r6
 8005c42:	60a3      	str	r3, [r4, #8]
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	199e      	adds	r6, r3, r6
 8005c48:	6026      	str	r6, [r4, #0]
 8005c4a:	e7da      	b.n	8005c02 <__ssputs_r+0x5e>
 8005c4c:	002a      	movs	r2, r5
 8005c4e:	0038      	movs	r0, r7
 8005c50:	f000 fb8c 	bl	800636c <_realloc_r>
 8005c54:	1e06      	subs	r6, r0, #0
 8005c56:	d1e0      	bne.n	8005c1a <__ssputs_r+0x76>
 8005c58:	0038      	movs	r0, r7
 8005c5a:	6921      	ldr	r1, [r4, #16]
 8005c5c:	f000 faa4 	bl	80061a8 <_free_r>
 8005c60:	e7c7      	b.n	8005bf2 <__ssputs_r+0x4e>
 8005c62:	46c0      	nop			; (mov r8, r8)
 8005c64:	fffffb7f 	.word	0xfffffb7f

08005c68 <_svfiprintf_r>:
 8005c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c6a:	b0a1      	sub	sp, #132	; 0x84
 8005c6c:	9003      	str	r0, [sp, #12]
 8005c6e:	001d      	movs	r5, r3
 8005c70:	898b      	ldrh	r3, [r1, #12]
 8005c72:	000f      	movs	r7, r1
 8005c74:	0016      	movs	r6, r2
 8005c76:	061b      	lsls	r3, r3, #24
 8005c78:	d511      	bpl.n	8005c9e <_svfiprintf_r+0x36>
 8005c7a:	690b      	ldr	r3, [r1, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10e      	bne.n	8005c9e <_svfiprintf_r+0x36>
 8005c80:	2140      	movs	r1, #64	; 0x40
 8005c82:	f000 fafd 	bl	8006280 <_malloc_r>
 8005c86:	6038      	str	r0, [r7, #0]
 8005c88:	6138      	str	r0, [r7, #16]
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	d105      	bne.n	8005c9a <_svfiprintf_r+0x32>
 8005c8e:	230c      	movs	r3, #12
 8005c90:	9a03      	ldr	r2, [sp, #12]
 8005c92:	3801      	subs	r0, #1
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	b021      	add	sp, #132	; 0x84
 8005c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c9a:	2340      	movs	r3, #64	; 0x40
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	ac08      	add	r4, sp, #32
 8005ca2:	6163      	str	r3, [r4, #20]
 8005ca4:	3320      	adds	r3, #32
 8005ca6:	7663      	strb	r3, [r4, #25]
 8005ca8:	3310      	adds	r3, #16
 8005caa:	76a3      	strb	r3, [r4, #26]
 8005cac:	9507      	str	r5, [sp, #28]
 8005cae:	0035      	movs	r5, r6
 8005cb0:	782b      	ldrb	r3, [r5, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <_svfiprintf_r+0x52>
 8005cb6:	2b25      	cmp	r3, #37	; 0x25
 8005cb8:	d147      	bne.n	8005d4a <_svfiprintf_r+0xe2>
 8005cba:	1bab      	subs	r3, r5, r6
 8005cbc:	9305      	str	r3, [sp, #20]
 8005cbe:	42b5      	cmp	r5, r6
 8005cc0:	d00c      	beq.n	8005cdc <_svfiprintf_r+0x74>
 8005cc2:	0032      	movs	r2, r6
 8005cc4:	0039      	movs	r1, r7
 8005cc6:	9803      	ldr	r0, [sp, #12]
 8005cc8:	f7ff ff6c 	bl	8005ba4 <__ssputs_r>
 8005ccc:	1c43      	adds	r3, r0, #1
 8005cce:	d100      	bne.n	8005cd2 <_svfiprintf_r+0x6a>
 8005cd0:	e0ae      	b.n	8005e30 <_svfiprintf_r+0x1c8>
 8005cd2:	6962      	ldr	r2, [r4, #20]
 8005cd4:	9b05      	ldr	r3, [sp, #20]
 8005cd6:	4694      	mov	ip, r2
 8005cd8:	4463      	add	r3, ip
 8005cda:	6163      	str	r3, [r4, #20]
 8005cdc:	782b      	ldrb	r3, [r5, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d100      	bne.n	8005ce4 <_svfiprintf_r+0x7c>
 8005ce2:	e0a5      	b.n	8005e30 <_svfiprintf_r+0x1c8>
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	4252      	negs	r2, r2
 8005cea:	6062      	str	r2, [r4, #4]
 8005cec:	a904      	add	r1, sp, #16
 8005cee:	3254      	adds	r2, #84	; 0x54
 8005cf0:	1852      	adds	r2, r2, r1
 8005cf2:	1c6e      	adds	r6, r5, #1
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	60e3      	str	r3, [r4, #12]
 8005cf8:	60a3      	str	r3, [r4, #8]
 8005cfa:	7013      	strb	r3, [r2, #0]
 8005cfc:	65a3      	str	r3, [r4, #88]	; 0x58
 8005cfe:	2205      	movs	r2, #5
 8005d00:	7831      	ldrb	r1, [r6, #0]
 8005d02:	4854      	ldr	r0, [pc, #336]	; (8005e54 <_svfiprintf_r+0x1ec>)
 8005d04:	f000 fa32 	bl	800616c <memchr>
 8005d08:	1c75      	adds	r5, r6, #1
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	d11f      	bne.n	8005d4e <_svfiprintf_r+0xe6>
 8005d0e:	6822      	ldr	r2, [r4, #0]
 8005d10:	06d3      	lsls	r3, r2, #27
 8005d12:	d504      	bpl.n	8005d1e <_svfiprintf_r+0xb6>
 8005d14:	2353      	movs	r3, #83	; 0x53
 8005d16:	a904      	add	r1, sp, #16
 8005d18:	185b      	adds	r3, r3, r1
 8005d1a:	2120      	movs	r1, #32
 8005d1c:	7019      	strb	r1, [r3, #0]
 8005d1e:	0713      	lsls	r3, r2, #28
 8005d20:	d504      	bpl.n	8005d2c <_svfiprintf_r+0xc4>
 8005d22:	2353      	movs	r3, #83	; 0x53
 8005d24:	a904      	add	r1, sp, #16
 8005d26:	185b      	adds	r3, r3, r1
 8005d28:	212b      	movs	r1, #43	; 0x2b
 8005d2a:	7019      	strb	r1, [r3, #0]
 8005d2c:	7833      	ldrb	r3, [r6, #0]
 8005d2e:	2b2a      	cmp	r3, #42	; 0x2a
 8005d30:	d016      	beq.n	8005d60 <_svfiprintf_r+0xf8>
 8005d32:	0035      	movs	r5, r6
 8005d34:	2100      	movs	r1, #0
 8005d36:	200a      	movs	r0, #10
 8005d38:	68e3      	ldr	r3, [r4, #12]
 8005d3a:	782a      	ldrb	r2, [r5, #0]
 8005d3c:	1c6e      	adds	r6, r5, #1
 8005d3e:	3a30      	subs	r2, #48	; 0x30
 8005d40:	2a09      	cmp	r2, #9
 8005d42:	d94e      	bls.n	8005de2 <_svfiprintf_r+0x17a>
 8005d44:	2900      	cmp	r1, #0
 8005d46:	d111      	bne.n	8005d6c <_svfiprintf_r+0x104>
 8005d48:	e017      	b.n	8005d7a <_svfiprintf_r+0x112>
 8005d4a:	3501      	adds	r5, #1
 8005d4c:	e7b0      	b.n	8005cb0 <_svfiprintf_r+0x48>
 8005d4e:	4b41      	ldr	r3, [pc, #260]	; (8005e54 <_svfiprintf_r+0x1ec>)
 8005d50:	6822      	ldr	r2, [r4, #0]
 8005d52:	1ac0      	subs	r0, r0, r3
 8005d54:	2301      	movs	r3, #1
 8005d56:	4083      	lsls	r3, r0
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	002e      	movs	r6, r5
 8005d5c:	6023      	str	r3, [r4, #0]
 8005d5e:	e7ce      	b.n	8005cfe <_svfiprintf_r+0x96>
 8005d60:	9b07      	ldr	r3, [sp, #28]
 8005d62:	1d19      	adds	r1, r3, #4
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	9107      	str	r1, [sp, #28]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	db01      	blt.n	8005d70 <_svfiprintf_r+0x108>
 8005d6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d6e:	e004      	b.n	8005d7a <_svfiprintf_r+0x112>
 8005d70:	425b      	negs	r3, r3
 8005d72:	60e3      	str	r3, [r4, #12]
 8005d74:	2302      	movs	r3, #2
 8005d76:	4313      	orrs	r3, r2
 8005d78:	6023      	str	r3, [r4, #0]
 8005d7a:	782b      	ldrb	r3, [r5, #0]
 8005d7c:	2b2e      	cmp	r3, #46	; 0x2e
 8005d7e:	d10a      	bne.n	8005d96 <_svfiprintf_r+0x12e>
 8005d80:	786b      	ldrb	r3, [r5, #1]
 8005d82:	2b2a      	cmp	r3, #42	; 0x2a
 8005d84:	d135      	bne.n	8005df2 <_svfiprintf_r+0x18a>
 8005d86:	9b07      	ldr	r3, [sp, #28]
 8005d88:	3502      	adds	r5, #2
 8005d8a:	1d1a      	adds	r2, r3, #4
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	9207      	str	r2, [sp, #28]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	db2b      	blt.n	8005dec <_svfiprintf_r+0x184>
 8005d94:	9309      	str	r3, [sp, #36]	; 0x24
 8005d96:	4e30      	ldr	r6, [pc, #192]	; (8005e58 <_svfiprintf_r+0x1f0>)
 8005d98:	2203      	movs	r2, #3
 8005d9a:	0030      	movs	r0, r6
 8005d9c:	7829      	ldrb	r1, [r5, #0]
 8005d9e:	f000 f9e5 	bl	800616c <memchr>
 8005da2:	2800      	cmp	r0, #0
 8005da4:	d006      	beq.n	8005db4 <_svfiprintf_r+0x14c>
 8005da6:	2340      	movs	r3, #64	; 0x40
 8005da8:	1b80      	subs	r0, r0, r6
 8005daa:	4083      	lsls	r3, r0
 8005dac:	6822      	ldr	r2, [r4, #0]
 8005dae:	3501      	adds	r5, #1
 8005db0:	4313      	orrs	r3, r2
 8005db2:	6023      	str	r3, [r4, #0]
 8005db4:	7829      	ldrb	r1, [r5, #0]
 8005db6:	2206      	movs	r2, #6
 8005db8:	4828      	ldr	r0, [pc, #160]	; (8005e5c <_svfiprintf_r+0x1f4>)
 8005dba:	1c6e      	adds	r6, r5, #1
 8005dbc:	7621      	strb	r1, [r4, #24]
 8005dbe:	f000 f9d5 	bl	800616c <memchr>
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	d03c      	beq.n	8005e40 <_svfiprintf_r+0x1d8>
 8005dc6:	4b26      	ldr	r3, [pc, #152]	; (8005e60 <_svfiprintf_r+0x1f8>)
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d125      	bne.n	8005e18 <_svfiprintf_r+0x1b0>
 8005dcc:	2207      	movs	r2, #7
 8005dce:	9b07      	ldr	r3, [sp, #28]
 8005dd0:	3307      	adds	r3, #7
 8005dd2:	4393      	bics	r3, r2
 8005dd4:	3308      	adds	r3, #8
 8005dd6:	9307      	str	r3, [sp, #28]
 8005dd8:	6963      	ldr	r3, [r4, #20]
 8005dda:	9a04      	ldr	r2, [sp, #16]
 8005ddc:	189b      	adds	r3, r3, r2
 8005dde:	6163      	str	r3, [r4, #20]
 8005de0:	e765      	b.n	8005cae <_svfiprintf_r+0x46>
 8005de2:	4343      	muls	r3, r0
 8005de4:	0035      	movs	r5, r6
 8005de6:	2101      	movs	r1, #1
 8005de8:	189b      	adds	r3, r3, r2
 8005dea:	e7a6      	b.n	8005d3a <_svfiprintf_r+0xd2>
 8005dec:	2301      	movs	r3, #1
 8005dee:	425b      	negs	r3, r3
 8005df0:	e7d0      	b.n	8005d94 <_svfiprintf_r+0x12c>
 8005df2:	2300      	movs	r3, #0
 8005df4:	200a      	movs	r0, #10
 8005df6:	001a      	movs	r2, r3
 8005df8:	3501      	adds	r5, #1
 8005dfa:	6063      	str	r3, [r4, #4]
 8005dfc:	7829      	ldrb	r1, [r5, #0]
 8005dfe:	1c6e      	adds	r6, r5, #1
 8005e00:	3930      	subs	r1, #48	; 0x30
 8005e02:	2909      	cmp	r1, #9
 8005e04:	d903      	bls.n	8005e0e <_svfiprintf_r+0x1a6>
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d0c5      	beq.n	8005d96 <_svfiprintf_r+0x12e>
 8005e0a:	9209      	str	r2, [sp, #36]	; 0x24
 8005e0c:	e7c3      	b.n	8005d96 <_svfiprintf_r+0x12e>
 8005e0e:	4342      	muls	r2, r0
 8005e10:	0035      	movs	r5, r6
 8005e12:	2301      	movs	r3, #1
 8005e14:	1852      	adds	r2, r2, r1
 8005e16:	e7f1      	b.n	8005dfc <_svfiprintf_r+0x194>
 8005e18:	ab07      	add	r3, sp, #28
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	003a      	movs	r2, r7
 8005e1e:	0021      	movs	r1, r4
 8005e20:	4b10      	ldr	r3, [pc, #64]	; (8005e64 <_svfiprintf_r+0x1fc>)
 8005e22:	9803      	ldr	r0, [sp, #12]
 8005e24:	e000      	b.n	8005e28 <_svfiprintf_r+0x1c0>
 8005e26:	bf00      	nop
 8005e28:	9004      	str	r0, [sp, #16]
 8005e2a:	9b04      	ldr	r3, [sp, #16]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	d1d3      	bne.n	8005dd8 <_svfiprintf_r+0x170>
 8005e30:	89bb      	ldrh	r3, [r7, #12]
 8005e32:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005e34:	065b      	lsls	r3, r3, #25
 8005e36:	d400      	bmi.n	8005e3a <_svfiprintf_r+0x1d2>
 8005e38:	e72d      	b.n	8005c96 <_svfiprintf_r+0x2e>
 8005e3a:	2001      	movs	r0, #1
 8005e3c:	4240      	negs	r0, r0
 8005e3e:	e72a      	b.n	8005c96 <_svfiprintf_r+0x2e>
 8005e40:	ab07      	add	r3, sp, #28
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	003a      	movs	r2, r7
 8005e46:	0021      	movs	r1, r4
 8005e48:	4b06      	ldr	r3, [pc, #24]	; (8005e64 <_svfiprintf_r+0x1fc>)
 8005e4a:	9803      	ldr	r0, [sp, #12]
 8005e4c:	f000 f87c 	bl	8005f48 <_printf_i>
 8005e50:	e7ea      	b.n	8005e28 <_svfiprintf_r+0x1c0>
 8005e52:	46c0      	nop			; (mov r8, r8)
 8005e54:	080065a0 	.word	0x080065a0
 8005e58:	080065a6 	.word	0x080065a6
 8005e5c:	080065aa 	.word	0x080065aa
 8005e60:	00000000 	.word	0x00000000
 8005e64:	08005ba5 	.word	0x08005ba5

08005e68 <_printf_common>:
 8005e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e6a:	0015      	movs	r5, r2
 8005e6c:	9301      	str	r3, [sp, #4]
 8005e6e:	688a      	ldr	r2, [r1, #8]
 8005e70:	690b      	ldr	r3, [r1, #16]
 8005e72:	000c      	movs	r4, r1
 8005e74:	9000      	str	r0, [sp, #0]
 8005e76:	4293      	cmp	r3, r2
 8005e78:	da00      	bge.n	8005e7c <_printf_common+0x14>
 8005e7a:	0013      	movs	r3, r2
 8005e7c:	0022      	movs	r2, r4
 8005e7e:	602b      	str	r3, [r5, #0]
 8005e80:	3243      	adds	r2, #67	; 0x43
 8005e82:	7812      	ldrb	r2, [r2, #0]
 8005e84:	2a00      	cmp	r2, #0
 8005e86:	d001      	beq.n	8005e8c <_printf_common+0x24>
 8005e88:	3301      	adds	r3, #1
 8005e8a:	602b      	str	r3, [r5, #0]
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	069b      	lsls	r3, r3, #26
 8005e90:	d502      	bpl.n	8005e98 <_printf_common+0x30>
 8005e92:	682b      	ldr	r3, [r5, #0]
 8005e94:	3302      	adds	r3, #2
 8005e96:	602b      	str	r3, [r5, #0]
 8005e98:	6822      	ldr	r2, [r4, #0]
 8005e9a:	2306      	movs	r3, #6
 8005e9c:	0017      	movs	r7, r2
 8005e9e:	401f      	ands	r7, r3
 8005ea0:	421a      	tst	r2, r3
 8005ea2:	d027      	beq.n	8005ef4 <_printf_common+0x8c>
 8005ea4:	0023      	movs	r3, r4
 8005ea6:	3343      	adds	r3, #67	; 0x43
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	1e5a      	subs	r2, r3, #1
 8005eac:	4193      	sbcs	r3, r2
 8005eae:	6822      	ldr	r2, [r4, #0]
 8005eb0:	0692      	lsls	r2, r2, #26
 8005eb2:	d430      	bmi.n	8005f16 <_printf_common+0xae>
 8005eb4:	0022      	movs	r2, r4
 8005eb6:	9901      	ldr	r1, [sp, #4]
 8005eb8:	9800      	ldr	r0, [sp, #0]
 8005eba:	9e08      	ldr	r6, [sp, #32]
 8005ebc:	3243      	adds	r2, #67	; 0x43
 8005ebe:	47b0      	blx	r6
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	d025      	beq.n	8005f10 <_printf_common+0xa8>
 8005ec4:	2306      	movs	r3, #6
 8005ec6:	6820      	ldr	r0, [r4, #0]
 8005ec8:	682a      	ldr	r2, [r5, #0]
 8005eca:	68e1      	ldr	r1, [r4, #12]
 8005ecc:	2500      	movs	r5, #0
 8005ece:	4003      	ands	r3, r0
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	d103      	bne.n	8005edc <_printf_common+0x74>
 8005ed4:	1a8d      	subs	r5, r1, r2
 8005ed6:	43eb      	mvns	r3, r5
 8005ed8:	17db      	asrs	r3, r3, #31
 8005eda:	401d      	ands	r5, r3
 8005edc:	68a3      	ldr	r3, [r4, #8]
 8005ede:	6922      	ldr	r2, [r4, #16]
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	dd01      	ble.n	8005ee8 <_printf_common+0x80>
 8005ee4:	1a9b      	subs	r3, r3, r2
 8005ee6:	18ed      	adds	r5, r5, r3
 8005ee8:	2700      	movs	r7, #0
 8005eea:	42bd      	cmp	r5, r7
 8005eec:	d120      	bne.n	8005f30 <_printf_common+0xc8>
 8005eee:	2000      	movs	r0, #0
 8005ef0:	e010      	b.n	8005f14 <_printf_common+0xac>
 8005ef2:	3701      	adds	r7, #1
 8005ef4:	68e3      	ldr	r3, [r4, #12]
 8005ef6:	682a      	ldr	r2, [r5, #0]
 8005ef8:	1a9b      	subs	r3, r3, r2
 8005efa:	42bb      	cmp	r3, r7
 8005efc:	ddd2      	ble.n	8005ea4 <_printf_common+0x3c>
 8005efe:	0022      	movs	r2, r4
 8005f00:	2301      	movs	r3, #1
 8005f02:	9901      	ldr	r1, [sp, #4]
 8005f04:	9800      	ldr	r0, [sp, #0]
 8005f06:	9e08      	ldr	r6, [sp, #32]
 8005f08:	3219      	adds	r2, #25
 8005f0a:	47b0      	blx	r6
 8005f0c:	1c43      	adds	r3, r0, #1
 8005f0e:	d1f0      	bne.n	8005ef2 <_printf_common+0x8a>
 8005f10:	2001      	movs	r0, #1
 8005f12:	4240      	negs	r0, r0
 8005f14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f16:	2030      	movs	r0, #48	; 0x30
 8005f18:	18e1      	adds	r1, r4, r3
 8005f1a:	3143      	adds	r1, #67	; 0x43
 8005f1c:	7008      	strb	r0, [r1, #0]
 8005f1e:	0021      	movs	r1, r4
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	3145      	adds	r1, #69	; 0x45
 8005f24:	7809      	ldrb	r1, [r1, #0]
 8005f26:	18a2      	adds	r2, r4, r2
 8005f28:	3243      	adds	r2, #67	; 0x43
 8005f2a:	3302      	adds	r3, #2
 8005f2c:	7011      	strb	r1, [r2, #0]
 8005f2e:	e7c1      	b.n	8005eb4 <_printf_common+0x4c>
 8005f30:	0022      	movs	r2, r4
 8005f32:	2301      	movs	r3, #1
 8005f34:	9901      	ldr	r1, [sp, #4]
 8005f36:	9800      	ldr	r0, [sp, #0]
 8005f38:	9e08      	ldr	r6, [sp, #32]
 8005f3a:	321a      	adds	r2, #26
 8005f3c:	47b0      	blx	r6
 8005f3e:	1c43      	adds	r3, r0, #1
 8005f40:	d0e6      	beq.n	8005f10 <_printf_common+0xa8>
 8005f42:	3701      	adds	r7, #1
 8005f44:	e7d1      	b.n	8005eea <_printf_common+0x82>
	...

08005f48 <_printf_i>:
 8005f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f4a:	b08b      	sub	sp, #44	; 0x2c
 8005f4c:	9206      	str	r2, [sp, #24]
 8005f4e:	000a      	movs	r2, r1
 8005f50:	3243      	adds	r2, #67	; 0x43
 8005f52:	9307      	str	r3, [sp, #28]
 8005f54:	9005      	str	r0, [sp, #20]
 8005f56:	9204      	str	r2, [sp, #16]
 8005f58:	7e0a      	ldrb	r2, [r1, #24]
 8005f5a:	000c      	movs	r4, r1
 8005f5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f5e:	2a78      	cmp	r2, #120	; 0x78
 8005f60:	d807      	bhi.n	8005f72 <_printf_i+0x2a>
 8005f62:	2a62      	cmp	r2, #98	; 0x62
 8005f64:	d809      	bhi.n	8005f7a <_printf_i+0x32>
 8005f66:	2a00      	cmp	r2, #0
 8005f68:	d100      	bne.n	8005f6c <_printf_i+0x24>
 8005f6a:	e0c1      	b.n	80060f0 <_printf_i+0x1a8>
 8005f6c:	2a58      	cmp	r2, #88	; 0x58
 8005f6e:	d100      	bne.n	8005f72 <_printf_i+0x2a>
 8005f70:	e08c      	b.n	800608c <_printf_i+0x144>
 8005f72:	0026      	movs	r6, r4
 8005f74:	3642      	adds	r6, #66	; 0x42
 8005f76:	7032      	strb	r2, [r6, #0]
 8005f78:	e022      	b.n	8005fc0 <_printf_i+0x78>
 8005f7a:	0010      	movs	r0, r2
 8005f7c:	3863      	subs	r0, #99	; 0x63
 8005f7e:	2815      	cmp	r0, #21
 8005f80:	d8f7      	bhi.n	8005f72 <_printf_i+0x2a>
 8005f82:	f7fa f8c9 	bl	8000118 <__gnu_thumb1_case_shi>
 8005f86:	0016      	.short	0x0016
 8005f88:	fff6001f 	.word	0xfff6001f
 8005f8c:	fff6fff6 	.word	0xfff6fff6
 8005f90:	001ffff6 	.word	0x001ffff6
 8005f94:	fff6fff6 	.word	0xfff6fff6
 8005f98:	fff6fff6 	.word	0xfff6fff6
 8005f9c:	003600a8 	.word	0x003600a8
 8005fa0:	fff6009a 	.word	0xfff6009a
 8005fa4:	00b9fff6 	.word	0x00b9fff6
 8005fa8:	0036fff6 	.word	0x0036fff6
 8005fac:	fff6fff6 	.word	0xfff6fff6
 8005fb0:	009e      	.short	0x009e
 8005fb2:	0026      	movs	r6, r4
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	3642      	adds	r6, #66	; 0x42
 8005fb8:	1d11      	adds	r1, r2, #4
 8005fba:	6019      	str	r1, [r3, #0]
 8005fbc:	6813      	ldr	r3, [r2, #0]
 8005fbe:	7033      	strb	r3, [r6, #0]
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e0a7      	b.n	8006114 <_printf_i+0x1cc>
 8005fc4:	6808      	ldr	r0, [r1, #0]
 8005fc6:	6819      	ldr	r1, [r3, #0]
 8005fc8:	1d0a      	adds	r2, r1, #4
 8005fca:	0605      	lsls	r5, r0, #24
 8005fcc:	d50b      	bpl.n	8005fe6 <_printf_i+0x9e>
 8005fce:	680d      	ldr	r5, [r1, #0]
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	2d00      	cmp	r5, #0
 8005fd4:	da03      	bge.n	8005fde <_printf_i+0x96>
 8005fd6:	232d      	movs	r3, #45	; 0x2d
 8005fd8:	9a04      	ldr	r2, [sp, #16]
 8005fda:	426d      	negs	r5, r5
 8005fdc:	7013      	strb	r3, [r2, #0]
 8005fde:	4b61      	ldr	r3, [pc, #388]	; (8006164 <_printf_i+0x21c>)
 8005fe0:	270a      	movs	r7, #10
 8005fe2:	9303      	str	r3, [sp, #12]
 8005fe4:	e01b      	b.n	800601e <_printf_i+0xd6>
 8005fe6:	680d      	ldr	r5, [r1, #0]
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	0641      	lsls	r1, r0, #25
 8005fec:	d5f1      	bpl.n	8005fd2 <_printf_i+0x8a>
 8005fee:	b22d      	sxth	r5, r5
 8005ff0:	e7ef      	b.n	8005fd2 <_printf_i+0x8a>
 8005ff2:	680d      	ldr	r5, [r1, #0]
 8005ff4:	6819      	ldr	r1, [r3, #0]
 8005ff6:	1d08      	adds	r0, r1, #4
 8005ff8:	6018      	str	r0, [r3, #0]
 8005ffa:	062e      	lsls	r6, r5, #24
 8005ffc:	d501      	bpl.n	8006002 <_printf_i+0xba>
 8005ffe:	680d      	ldr	r5, [r1, #0]
 8006000:	e003      	b.n	800600a <_printf_i+0xc2>
 8006002:	066d      	lsls	r5, r5, #25
 8006004:	d5fb      	bpl.n	8005ffe <_printf_i+0xb6>
 8006006:	680d      	ldr	r5, [r1, #0]
 8006008:	b2ad      	uxth	r5, r5
 800600a:	4b56      	ldr	r3, [pc, #344]	; (8006164 <_printf_i+0x21c>)
 800600c:	2708      	movs	r7, #8
 800600e:	9303      	str	r3, [sp, #12]
 8006010:	2a6f      	cmp	r2, #111	; 0x6f
 8006012:	d000      	beq.n	8006016 <_printf_i+0xce>
 8006014:	3702      	adds	r7, #2
 8006016:	0023      	movs	r3, r4
 8006018:	2200      	movs	r2, #0
 800601a:	3343      	adds	r3, #67	; 0x43
 800601c:	701a      	strb	r2, [r3, #0]
 800601e:	6863      	ldr	r3, [r4, #4]
 8006020:	60a3      	str	r3, [r4, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	db03      	blt.n	800602e <_printf_i+0xe6>
 8006026:	2204      	movs	r2, #4
 8006028:	6821      	ldr	r1, [r4, #0]
 800602a:	4391      	bics	r1, r2
 800602c:	6021      	str	r1, [r4, #0]
 800602e:	2d00      	cmp	r5, #0
 8006030:	d102      	bne.n	8006038 <_printf_i+0xf0>
 8006032:	9e04      	ldr	r6, [sp, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00c      	beq.n	8006052 <_printf_i+0x10a>
 8006038:	9e04      	ldr	r6, [sp, #16]
 800603a:	0028      	movs	r0, r5
 800603c:	0039      	movs	r1, r7
 800603e:	f7fa f8fb 	bl	8000238 <__aeabi_uidivmod>
 8006042:	9b03      	ldr	r3, [sp, #12]
 8006044:	3e01      	subs	r6, #1
 8006046:	5c5b      	ldrb	r3, [r3, r1]
 8006048:	7033      	strb	r3, [r6, #0]
 800604a:	002b      	movs	r3, r5
 800604c:	0005      	movs	r5, r0
 800604e:	429f      	cmp	r7, r3
 8006050:	d9f3      	bls.n	800603a <_printf_i+0xf2>
 8006052:	2f08      	cmp	r7, #8
 8006054:	d109      	bne.n	800606a <_printf_i+0x122>
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	07db      	lsls	r3, r3, #31
 800605a:	d506      	bpl.n	800606a <_printf_i+0x122>
 800605c:	6863      	ldr	r3, [r4, #4]
 800605e:	6922      	ldr	r2, [r4, #16]
 8006060:	4293      	cmp	r3, r2
 8006062:	dc02      	bgt.n	800606a <_printf_i+0x122>
 8006064:	2330      	movs	r3, #48	; 0x30
 8006066:	3e01      	subs	r6, #1
 8006068:	7033      	strb	r3, [r6, #0]
 800606a:	9b04      	ldr	r3, [sp, #16]
 800606c:	1b9b      	subs	r3, r3, r6
 800606e:	6123      	str	r3, [r4, #16]
 8006070:	9b07      	ldr	r3, [sp, #28]
 8006072:	0021      	movs	r1, r4
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	9805      	ldr	r0, [sp, #20]
 8006078:	9b06      	ldr	r3, [sp, #24]
 800607a:	aa09      	add	r2, sp, #36	; 0x24
 800607c:	f7ff fef4 	bl	8005e68 <_printf_common>
 8006080:	1c43      	adds	r3, r0, #1
 8006082:	d14c      	bne.n	800611e <_printf_i+0x1d6>
 8006084:	2001      	movs	r0, #1
 8006086:	4240      	negs	r0, r0
 8006088:	b00b      	add	sp, #44	; 0x2c
 800608a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800608c:	3145      	adds	r1, #69	; 0x45
 800608e:	700a      	strb	r2, [r1, #0]
 8006090:	4a34      	ldr	r2, [pc, #208]	; (8006164 <_printf_i+0x21c>)
 8006092:	9203      	str	r2, [sp, #12]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	6821      	ldr	r1, [r4, #0]
 8006098:	ca20      	ldmia	r2!, {r5}
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	0608      	lsls	r0, r1, #24
 800609e:	d516      	bpl.n	80060ce <_printf_i+0x186>
 80060a0:	07cb      	lsls	r3, r1, #31
 80060a2:	d502      	bpl.n	80060aa <_printf_i+0x162>
 80060a4:	2320      	movs	r3, #32
 80060a6:	4319      	orrs	r1, r3
 80060a8:	6021      	str	r1, [r4, #0]
 80060aa:	2710      	movs	r7, #16
 80060ac:	2d00      	cmp	r5, #0
 80060ae:	d1b2      	bne.n	8006016 <_printf_i+0xce>
 80060b0:	2320      	movs	r3, #32
 80060b2:	6822      	ldr	r2, [r4, #0]
 80060b4:	439a      	bics	r2, r3
 80060b6:	6022      	str	r2, [r4, #0]
 80060b8:	e7ad      	b.n	8006016 <_printf_i+0xce>
 80060ba:	2220      	movs	r2, #32
 80060bc:	6809      	ldr	r1, [r1, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	6022      	str	r2, [r4, #0]
 80060c2:	0022      	movs	r2, r4
 80060c4:	2178      	movs	r1, #120	; 0x78
 80060c6:	3245      	adds	r2, #69	; 0x45
 80060c8:	7011      	strb	r1, [r2, #0]
 80060ca:	4a27      	ldr	r2, [pc, #156]	; (8006168 <_printf_i+0x220>)
 80060cc:	e7e1      	b.n	8006092 <_printf_i+0x14a>
 80060ce:	0648      	lsls	r0, r1, #25
 80060d0:	d5e6      	bpl.n	80060a0 <_printf_i+0x158>
 80060d2:	b2ad      	uxth	r5, r5
 80060d4:	e7e4      	b.n	80060a0 <_printf_i+0x158>
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	680d      	ldr	r5, [r1, #0]
 80060da:	1d10      	adds	r0, r2, #4
 80060dc:	6949      	ldr	r1, [r1, #20]
 80060de:	6018      	str	r0, [r3, #0]
 80060e0:	6813      	ldr	r3, [r2, #0]
 80060e2:	062e      	lsls	r6, r5, #24
 80060e4:	d501      	bpl.n	80060ea <_printf_i+0x1a2>
 80060e6:	6019      	str	r1, [r3, #0]
 80060e8:	e002      	b.n	80060f0 <_printf_i+0x1a8>
 80060ea:	066d      	lsls	r5, r5, #25
 80060ec:	d5fb      	bpl.n	80060e6 <_printf_i+0x19e>
 80060ee:	8019      	strh	r1, [r3, #0]
 80060f0:	2300      	movs	r3, #0
 80060f2:	9e04      	ldr	r6, [sp, #16]
 80060f4:	6123      	str	r3, [r4, #16]
 80060f6:	e7bb      	b.n	8006070 <_printf_i+0x128>
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	1d11      	adds	r1, r2, #4
 80060fc:	6019      	str	r1, [r3, #0]
 80060fe:	6816      	ldr	r6, [r2, #0]
 8006100:	2100      	movs	r1, #0
 8006102:	0030      	movs	r0, r6
 8006104:	6862      	ldr	r2, [r4, #4]
 8006106:	f000 f831 	bl	800616c <memchr>
 800610a:	2800      	cmp	r0, #0
 800610c:	d001      	beq.n	8006112 <_printf_i+0x1ca>
 800610e:	1b80      	subs	r0, r0, r6
 8006110:	6060      	str	r0, [r4, #4]
 8006112:	6863      	ldr	r3, [r4, #4]
 8006114:	6123      	str	r3, [r4, #16]
 8006116:	2300      	movs	r3, #0
 8006118:	9a04      	ldr	r2, [sp, #16]
 800611a:	7013      	strb	r3, [r2, #0]
 800611c:	e7a8      	b.n	8006070 <_printf_i+0x128>
 800611e:	6923      	ldr	r3, [r4, #16]
 8006120:	0032      	movs	r2, r6
 8006122:	9906      	ldr	r1, [sp, #24]
 8006124:	9805      	ldr	r0, [sp, #20]
 8006126:	9d07      	ldr	r5, [sp, #28]
 8006128:	47a8      	blx	r5
 800612a:	1c43      	adds	r3, r0, #1
 800612c:	d0aa      	beq.n	8006084 <_printf_i+0x13c>
 800612e:	6823      	ldr	r3, [r4, #0]
 8006130:	079b      	lsls	r3, r3, #30
 8006132:	d415      	bmi.n	8006160 <_printf_i+0x218>
 8006134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006136:	68e0      	ldr	r0, [r4, #12]
 8006138:	4298      	cmp	r0, r3
 800613a:	daa5      	bge.n	8006088 <_printf_i+0x140>
 800613c:	0018      	movs	r0, r3
 800613e:	e7a3      	b.n	8006088 <_printf_i+0x140>
 8006140:	0022      	movs	r2, r4
 8006142:	2301      	movs	r3, #1
 8006144:	9906      	ldr	r1, [sp, #24]
 8006146:	9805      	ldr	r0, [sp, #20]
 8006148:	9e07      	ldr	r6, [sp, #28]
 800614a:	3219      	adds	r2, #25
 800614c:	47b0      	blx	r6
 800614e:	1c43      	adds	r3, r0, #1
 8006150:	d098      	beq.n	8006084 <_printf_i+0x13c>
 8006152:	3501      	adds	r5, #1
 8006154:	68e3      	ldr	r3, [r4, #12]
 8006156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006158:	1a9b      	subs	r3, r3, r2
 800615a:	42ab      	cmp	r3, r5
 800615c:	dcf0      	bgt.n	8006140 <_printf_i+0x1f8>
 800615e:	e7e9      	b.n	8006134 <_printf_i+0x1ec>
 8006160:	2500      	movs	r5, #0
 8006162:	e7f7      	b.n	8006154 <_printf_i+0x20c>
 8006164:	080065b1 	.word	0x080065b1
 8006168:	080065c2 	.word	0x080065c2

0800616c <memchr>:
 800616c:	b2c9      	uxtb	r1, r1
 800616e:	1882      	adds	r2, r0, r2
 8006170:	4290      	cmp	r0, r2
 8006172:	d101      	bne.n	8006178 <memchr+0xc>
 8006174:	2000      	movs	r0, #0
 8006176:	4770      	bx	lr
 8006178:	7803      	ldrb	r3, [r0, #0]
 800617a:	428b      	cmp	r3, r1
 800617c:	d0fb      	beq.n	8006176 <memchr+0xa>
 800617e:	3001      	adds	r0, #1
 8006180:	e7f6      	b.n	8006170 <memchr+0x4>

08006182 <memmove>:
 8006182:	b510      	push	{r4, lr}
 8006184:	4288      	cmp	r0, r1
 8006186:	d902      	bls.n	800618e <memmove+0xc>
 8006188:	188b      	adds	r3, r1, r2
 800618a:	4298      	cmp	r0, r3
 800618c:	d303      	bcc.n	8006196 <memmove+0x14>
 800618e:	2300      	movs	r3, #0
 8006190:	e007      	b.n	80061a2 <memmove+0x20>
 8006192:	5c8b      	ldrb	r3, [r1, r2]
 8006194:	5483      	strb	r3, [r0, r2]
 8006196:	3a01      	subs	r2, #1
 8006198:	d2fb      	bcs.n	8006192 <memmove+0x10>
 800619a:	bd10      	pop	{r4, pc}
 800619c:	5ccc      	ldrb	r4, [r1, r3]
 800619e:	54c4      	strb	r4, [r0, r3]
 80061a0:	3301      	adds	r3, #1
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d1fa      	bne.n	800619c <memmove+0x1a>
 80061a6:	e7f8      	b.n	800619a <memmove+0x18>

080061a8 <_free_r>:
 80061a8:	b570      	push	{r4, r5, r6, lr}
 80061aa:	0005      	movs	r5, r0
 80061ac:	2900      	cmp	r1, #0
 80061ae:	d010      	beq.n	80061d2 <_free_r+0x2a>
 80061b0:	1f0c      	subs	r4, r1, #4
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	da00      	bge.n	80061ba <_free_r+0x12>
 80061b8:	18e4      	adds	r4, r4, r3
 80061ba:	0028      	movs	r0, r5
 80061bc:	f000 f918 	bl	80063f0 <__malloc_lock>
 80061c0:	4a1d      	ldr	r2, [pc, #116]	; (8006238 <_free_r+0x90>)
 80061c2:	6813      	ldr	r3, [r2, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d105      	bne.n	80061d4 <_free_r+0x2c>
 80061c8:	6063      	str	r3, [r4, #4]
 80061ca:	6014      	str	r4, [r2, #0]
 80061cc:	0028      	movs	r0, r5
 80061ce:	f000 f917 	bl	8006400 <__malloc_unlock>
 80061d2:	bd70      	pop	{r4, r5, r6, pc}
 80061d4:	42a3      	cmp	r3, r4
 80061d6:	d908      	bls.n	80061ea <_free_r+0x42>
 80061d8:	6821      	ldr	r1, [r4, #0]
 80061da:	1860      	adds	r0, r4, r1
 80061dc:	4283      	cmp	r3, r0
 80061de:	d1f3      	bne.n	80061c8 <_free_r+0x20>
 80061e0:	6818      	ldr	r0, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	1841      	adds	r1, r0, r1
 80061e6:	6021      	str	r1, [r4, #0]
 80061e8:	e7ee      	b.n	80061c8 <_free_r+0x20>
 80061ea:	001a      	movs	r2, r3
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <_free_r+0x4e>
 80061f2:	42a3      	cmp	r3, r4
 80061f4:	d9f9      	bls.n	80061ea <_free_r+0x42>
 80061f6:	6811      	ldr	r1, [r2, #0]
 80061f8:	1850      	adds	r0, r2, r1
 80061fa:	42a0      	cmp	r0, r4
 80061fc:	d10b      	bne.n	8006216 <_free_r+0x6e>
 80061fe:	6820      	ldr	r0, [r4, #0]
 8006200:	1809      	adds	r1, r1, r0
 8006202:	1850      	adds	r0, r2, r1
 8006204:	6011      	str	r1, [r2, #0]
 8006206:	4283      	cmp	r3, r0
 8006208:	d1e0      	bne.n	80061cc <_free_r+0x24>
 800620a:	6818      	ldr	r0, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	1841      	adds	r1, r0, r1
 8006210:	6011      	str	r1, [r2, #0]
 8006212:	6053      	str	r3, [r2, #4]
 8006214:	e7da      	b.n	80061cc <_free_r+0x24>
 8006216:	42a0      	cmp	r0, r4
 8006218:	d902      	bls.n	8006220 <_free_r+0x78>
 800621a:	230c      	movs	r3, #12
 800621c:	602b      	str	r3, [r5, #0]
 800621e:	e7d5      	b.n	80061cc <_free_r+0x24>
 8006220:	6821      	ldr	r1, [r4, #0]
 8006222:	1860      	adds	r0, r4, r1
 8006224:	4283      	cmp	r3, r0
 8006226:	d103      	bne.n	8006230 <_free_r+0x88>
 8006228:	6818      	ldr	r0, [r3, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	1841      	adds	r1, r0, r1
 800622e:	6021      	str	r1, [r4, #0]
 8006230:	6063      	str	r3, [r4, #4]
 8006232:	6054      	str	r4, [r2, #4]
 8006234:	e7ca      	b.n	80061cc <_free_r+0x24>
 8006236:	46c0      	nop			; (mov r8, r8)
 8006238:	20001e20 	.word	0x20001e20

0800623c <sbrk_aligned>:
 800623c:	b570      	push	{r4, r5, r6, lr}
 800623e:	4e0f      	ldr	r6, [pc, #60]	; (800627c <sbrk_aligned+0x40>)
 8006240:	000d      	movs	r5, r1
 8006242:	6831      	ldr	r1, [r6, #0]
 8006244:	0004      	movs	r4, r0
 8006246:	2900      	cmp	r1, #0
 8006248:	d102      	bne.n	8006250 <sbrk_aligned+0x14>
 800624a:	f000 f8bf 	bl	80063cc <_sbrk_r>
 800624e:	6030      	str	r0, [r6, #0]
 8006250:	0029      	movs	r1, r5
 8006252:	0020      	movs	r0, r4
 8006254:	f000 f8ba 	bl	80063cc <_sbrk_r>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d00a      	beq.n	8006272 <sbrk_aligned+0x36>
 800625c:	2303      	movs	r3, #3
 800625e:	1cc5      	adds	r5, r0, #3
 8006260:	439d      	bics	r5, r3
 8006262:	42a8      	cmp	r0, r5
 8006264:	d007      	beq.n	8006276 <sbrk_aligned+0x3a>
 8006266:	1a29      	subs	r1, r5, r0
 8006268:	0020      	movs	r0, r4
 800626a:	f000 f8af 	bl	80063cc <_sbrk_r>
 800626e:	1c43      	adds	r3, r0, #1
 8006270:	d101      	bne.n	8006276 <sbrk_aligned+0x3a>
 8006272:	2501      	movs	r5, #1
 8006274:	426d      	negs	r5, r5
 8006276:	0028      	movs	r0, r5
 8006278:	bd70      	pop	{r4, r5, r6, pc}
 800627a:	46c0      	nop			; (mov r8, r8)
 800627c:	20001e24 	.word	0x20001e24

08006280 <_malloc_r>:
 8006280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006282:	2203      	movs	r2, #3
 8006284:	1ccb      	adds	r3, r1, #3
 8006286:	4393      	bics	r3, r2
 8006288:	3308      	adds	r3, #8
 800628a:	0006      	movs	r6, r0
 800628c:	001f      	movs	r7, r3
 800628e:	2b0c      	cmp	r3, #12
 8006290:	d232      	bcs.n	80062f8 <_malloc_r+0x78>
 8006292:	270c      	movs	r7, #12
 8006294:	42b9      	cmp	r1, r7
 8006296:	d831      	bhi.n	80062fc <_malloc_r+0x7c>
 8006298:	0030      	movs	r0, r6
 800629a:	f000 f8a9 	bl	80063f0 <__malloc_lock>
 800629e:	4d32      	ldr	r5, [pc, #200]	; (8006368 <_malloc_r+0xe8>)
 80062a0:	682b      	ldr	r3, [r5, #0]
 80062a2:	001c      	movs	r4, r3
 80062a4:	2c00      	cmp	r4, #0
 80062a6:	d12e      	bne.n	8006306 <_malloc_r+0x86>
 80062a8:	0039      	movs	r1, r7
 80062aa:	0030      	movs	r0, r6
 80062ac:	f7ff ffc6 	bl	800623c <sbrk_aligned>
 80062b0:	0004      	movs	r4, r0
 80062b2:	1c43      	adds	r3, r0, #1
 80062b4:	d11e      	bne.n	80062f4 <_malloc_r+0x74>
 80062b6:	682c      	ldr	r4, [r5, #0]
 80062b8:	0025      	movs	r5, r4
 80062ba:	2d00      	cmp	r5, #0
 80062bc:	d14a      	bne.n	8006354 <_malloc_r+0xd4>
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	0029      	movs	r1, r5
 80062c2:	18e3      	adds	r3, r4, r3
 80062c4:	0030      	movs	r0, r6
 80062c6:	9301      	str	r3, [sp, #4]
 80062c8:	f000 f880 	bl	80063cc <_sbrk_r>
 80062cc:	9b01      	ldr	r3, [sp, #4]
 80062ce:	4283      	cmp	r3, r0
 80062d0:	d143      	bne.n	800635a <_malloc_r+0xda>
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	3703      	adds	r7, #3
 80062d6:	1aff      	subs	r7, r7, r3
 80062d8:	2303      	movs	r3, #3
 80062da:	439f      	bics	r7, r3
 80062dc:	3708      	adds	r7, #8
 80062de:	2f0c      	cmp	r7, #12
 80062e0:	d200      	bcs.n	80062e4 <_malloc_r+0x64>
 80062e2:	270c      	movs	r7, #12
 80062e4:	0039      	movs	r1, r7
 80062e6:	0030      	movs	r0, r6
 80062e8:	f7ff ffa8 	bl	800623c <sbrk_aligned>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d034      	beq.n	800635a <_malloc_r+0xda>
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	19df      	adds	r7, r3, r7
 80062f4:	6027      	str	r7, [r4, #0]
 80062f6:	e013      	b.n	8006320 <_malloc_r+0xa0>
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	dacb      	bge.n	8006294 <_malloc_r+0x14>
 80062fc:	230c      	movs	r3, #12
 80062fe:	2500      	movs	r5, #0
 8006300:	6033      	str	r3, [r6, #0]
 8006302:	0028      	movs	r0, r5
 8006304:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006306:	6822      	ldr	r2, [r4, #0]
 8006308:	1bd1      	subs	r1, r2, r7
 800630a:	d420      	bmi.n	800634e <_malloc_r+0xce>
 800630c:	290b      	cmp	r1, #11
 800630e:	d917      	bls.n	8006340 <_malloc_r+0xc0>
 8006310:	19e2      	adds	r2, r4, r7
 8006312:	6027      	str	r7, [r4, #0]
 8006314:	42a3      	cmp	r3, r4
 8006316:	d111      	bne.n	800633c <_malloc_r+0xbc>
 8006318:	602a      	str	r2, [r5, #0]
 800631a:	6863      	ldr	r3, [r4, #4]
 800631c:	6011      	str	r1, [r2, #0]
 800631e:	6053      	str	r3, [r2, #4]
 8006320:	0030      	movs	r0, r6
 8006322:	0025      	movs	r5, r4
 8006324:	f000 f86c 	bl	8006400 <__malloc_unlock>
 8006328:	2207      	movs	r2, #7
 800632a:	350b      	adds	r5, #11
 800632c:	1d23      	adds	r3, r4, #4
 800632e:	4395      	bics	r5, r2
 8006330:	1aea      	subs	r2, r5, r3
 8006332:	429d      	cmp	r5, r3
 8006334:	d0e5      	beq.n	8006302 <_malloc_r+0x82>
 8006336:	1b5b      	subs	r3, r3, r5
 8006338:	50a3      	str	r3, [r4, r2]
 800633a:	e7e2      	b.n	8006302 <_malloc_r+0x82>
 800633c:	605a      	str	r2, [r3, #4]
 800633e:	e7ec      	b.n	800631a <_malloc_r+0x9a>
 8006340:	6862      	ldr	r2, [r4, #4]
 8006342:	42a3      	cmp	r3, r4
 8006344:	d101      	bne.n	800634a <_malloc_r+0xca>
 8006346:	602a      	str	r2, [r5, #0]
 8006348:	e7ea      	b.n	8006320 <_malloc_r+0xa0>
 800634a:	605a      	str	r2, [r3, #4]
 800634c:	e7e8      	b.n	8006320 <_malloc_r+0xa0>
 800634e:	0023      	movs	r3, r4
 8006350:	6864      	ldr	r4, [r4, #4]
 8006352:	e7a7      	b.n	80062a4 <_malloc_r+0x24>
 8006354:	002c      	movs	r4, r5
 8006356:	686d      	ldr	r5, [r5, #4]
 8006358:	e7af      	b.n	80062ba <_malloc_r+0x3a>
 800635a:	230c      	movs	r3, #12
 800635c:	0030      	movs	r0, r6
 800635e:	6033      	str	r3, [r6, #0]
 8006360:	f000 f84e 	bl	8006400 <__malloc_unlock>
 8006364:	e7cd      	b.n	8006302 <_malloc_r+0x82>
 8006366:	46c0      	nop			; (mov r8, r8)
 8006368:	20001e20 	.word	0x20001e20

0800636c <_realloc_r>:
 800636c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800636e:	0007      	movs	r7, r0
 8006370:	000e      	movs	r6, r1
 8006372:	0014      	movs	r4, r2
 8006374:	2900      	cmp	r1, #0
 8006376:	d105      	bne.n	8006384 <_realloc_r+0x18>
 8006378:	0011      	movs	r1, r2
 800637a:	f7ff ff81 	bl	8006280 <_malloc_r>
 800637e:	0005      	movs	r5, r0
 8006380:	0028      	movs	r0, r5
 8006382:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006384:	2a00      	cmp	r2, #0
 8006386:	d103      	bne.n	8006390 <_realloc_r+0x24>
 8006388:	f7ff ff0e 	bl	80061a8 <_free_r>
 800638c:	0025      	movs	r5, r4
 800638e:	e7f7      	b.n	8006380 <_realloc_r+0x14>
 8006390:	f000 f83e 	bl	8006410 <_malloc_usable_size_r>
 8006394:	9001      	str	r0, [sp, #4]
 8006396:	4284      	cmp	r4, r0
 8006398:	d803      	bhi.n	80063a2 <_realloc_r+0x36>
 800639a:	0035      	movs	r5, r6
 800639c:	0843      	lsrs	r3, r0, #1
 800639e:	42a3      	cmp	r3, r4
 80063a0:	d3ee      	bcc.n	8006380 <_realloc_r+0x14>
 80063a2:	0021      	movs	r1, r4
 80063a4:	0038      	movs	r0, r7
 80063a6:	f7ff ff6b 	bl	8006280 <_malloc_r>
 80063aa:	1e05      	subs	r5, r0, #0
 80063ac:	d0e8      	beq.n	8006380 <_realloc_r+0x14>
 80063ae:	9b01      	ldr	r3, [sp, #4]
 80063b0:	0022      	movs	r2, r4
 80063b2:	429c      	cmp	r4, r3
 80063b4:	d900      	bls.n	80063b8 <_realloc_r+0x4c>
 80063b6:	001a      	movs	r2, r3
 80063b8:	0031      	movs	r1, r6
 80063ba:	0028      	movs	r0, r5
 80063bc:	f7ff fbb8 	bl	8005b30 <memcpy>
 80063c0:	0031      	movs	r1, r6
 80063c2:	0038      	movs	r0, r7
 80063c4:	f7ff fef0 	bl	80061a8 <_free_r>
 80063c8:	e7da      	b.n	8006380 <_realloc_r+0x14>
	...

080063cc <_sbrk_r>:
 80063cc:	2300      	movs	r3, #0
 80063ce:	b570      	push	{r4, r5, r6, lr}
 80063d0:	4d06      	ldr	r5, [pc, #24]	; (80063ec <_sbrk_r+0x20>)
 80063d2:	0004      	movs	r4, r0
 80063d4:	0008      	movs	r0, r1
 80063d6:	602b      	str	r3, [r5, #0]
 80063d8:	f7fa fb36 	bl	8000a48 <_sbrk>
 80063dc:	1c43      	adds	r3, r0, #1
 80063de:	d103      	bne.n	80063e8 <_sbrk_r+0x1c>
 80063e0:	682b      	ldr	r3, [r5, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d000      	beq.n	80063e8 <_sbrk_r+0x1c>
 80063e6:	6023      	str	r3, [r4, #0]
 80063e8:	bd70      	pop	{r4, r5, r6, pc}
 80063ea:	46c0      	nop			; (mov r8, r8)
 80063ec:	20001e28 	.word	0x20001e28

080063f0 <__malloc_lock>:
 80063f0:	b510      	push	{r4, lr}
 80063f2:	4802      	ldr	r0, [pc, #8]	; (80063fc <__malloc_lock+0xc>)
 80063f4:	f000 f814 	bl	8006420 <__retarget_lock_acquire_recursive>
 80063f8:	bd10      	pop	{r4, pc}
 80063fa:	46c0      	nop			; (mov r8, r8)
 80063fc:	20001e2c 	.word	0x20001e2c

08006400 <__malloc_unlock>:
 8006400:	b510      	push	{r4, lr}
 8006402:	4802      	ldr	r0, [pc, #8]	; (800640c <__malloc_unlock+0xc>)
 8006404:	f000 f80d 	bl	8006422 <__retarget_lock_release_recursive>
 8006408:	bd10      	pop	{r4, pc}
 800640a:	46c0      	nop			; (mov r8, r8)
 800640c:	20001e2c 	.word	0x20001e2c

08006410 <_malloc_usable_size_r>:
 8006410:	1f0b      	subs	r3, r1, #4
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	1f18      	subs	r0, r3, #4
 8006416:	2b00      	cmp	r3, #0
 8006418:	da01      	bge.n	800641e <_malloc_usable_size_r+0xe>
 800641a:	580b      	ldr	r3, [r1, r0]
 800641c:	18c0      	adds	r0, r0, r3
 800641e:	4770      	bx	lr

08006420 <__retarget_lock_acquire_recursive>:
 8006420:	4770      	bx	lr

08006422 <__retarget_lock_release_recursive>:
 8006422:	4770      	bx	lr

08006424 <_init>:
 8006424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006426:	46c0      	nop			; (mov r8, r8)
 8006428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800642a:	bc08      	pop	{r3}
 800642c:	469e      	mov	lr, r3
 800642e:	4770      	bx	lr

08006430 <_fini>:
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006436:	bc08      	pop	{r3}
 8006438:	469e      	mov	lr, r3
 800643a:	4770      	bx	lr
