
Blocking_Delay_API.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000490c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080049cc  080049cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aa0  08004aa0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004aa0  08004aa0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004aa0  08004aa0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aa0  08004aa0  00014aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004aa4  08004aa4  00014aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c28  20000078  08004b20  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ca0  08004b20  00021ca0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c629  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ab  00000000  00000000  0002c6c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  0002e778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a68  00000000  00000000  0002f2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8e9  00000000  00000000  0002fd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbc3  00000000  00000000  0004a619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000994a8  00000000  00000000  000581dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1684  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a80  00000000  00000000  000f16d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080049b4 	.word	0x080049b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	080049b4 	.word	0x080049b4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <Task1_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void Task1_Handler(void *params)
{
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 800023c:	250f      	movs	r5, #15
 800023e:	197c      	adds	r4, r7, r5
 8000240:	2390      	movs	r3, #144	; 0x90
 8000242:	05db      	lsls	r3, r3, #23
 8000244:	2120      	movs	r1, #32
 8000246:	0018      	movs	r0, r3
 8000248:	f000 fc94 	bl	8000b74 <HAL_GPIO_ReadPin>
 800024c:	0003      	movs	r3, r0
 800024e:	7023      	strb	r3, [r4, #0]
		sprintf((char*)myMessage,"Status of the led: %d\r\n",pinState);
 8000250:	197b      	adds	r3, r7, r5
 8000252:	781a      	ldrb	r2, [r3, #0]
 8000254:	4908      	ldr	r1, [pc, #32]	; (8000278 <Task1_Handler+0x44>)
 8000256:	4b09      	ldr	r3, [pc, #36]	; (800027c <Task1_Handler+0x48>)
 8000258:	0018      	movs	r0, r3
 800025a:	f003 ff4b 	bl	80040f4 <siprintf>

		HAL_UART_Transmit(&huart1, myMessage, sizeof(myMessage), 1000);
 800025e:	23fa      	movs	r3, #250	; 0xfa
 8000260:	009b      	lsls	r3, r3, #2
 8000262:	4906      	ldr	r1, [pc, #24]	; (800027c <Task1_Handler+0x48>)
 8000264:	4806      	ldr	r0, [pc, #24]	; (8000280 <Task1_Handler+0x4c>)
 8000266:	2264      	movs	r2, #100	; 0x64
 8000268:	f001 fb1e 	bl	80018a8 <HAL_UART_Transmit>

		vTaskDelay(pdMS_TO_TICKS(1000));
 800026c:	23fa      	movs	r3, #250	; 0xfa
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	0018      	movs	r0, r3
 8000272:	f002 fc29 	bl	8002ac8 <vTaskDelay>
	{
 8000276:	e7e1      	b.n	800023c <Task1_Handler+0x8>
 8000278:	080049cc 	.word	0x080049cc
 800027c:	2000009c 	.word	0x2000009c
 8000280:	20000100 	.word	0x20000100

08000284 <Task2_Handler>:


}

void Task2_Handler(void *params)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800028c:	2390      	movs	r3, #144	; 0x90
 800028e:	05db      	lsls	r3, r3, #23
 8000290:	2120      	movs	r1, #32
 8000292:	0018      	movs	r0, r3
 8000294:	f000 fca8 	bl	8000be8 <HAL_GPIO_TogglePin>

		vTaskDelay(pdMS_TO_TICKS(1000)); // 1000 ms de 1 kesme yapar
 8000298:	23fa      	movs	r3, #250	; 0xfa
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	0018      	movs	r0, r3
 800029e:	f002 fc13 	bl	8002ac8 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80002a2:	e7f3      	b.n	800028c <Task2_Handler+0x8>

080002a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002aa:	f000 f9e5 	bl	8000678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ae:	f000 f827 	bl	8000300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b2:	f000 f8a9 	bl	8000408 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002b6:	f000 f877 	bl	80003a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  xTaskCreate(Task1_Handler, "Task_1", 120, NULL, 2, &myTask1Handler);
 80002ba:	490b      	ldr	r1, [pc, #44]	; (80002e8 <main+0x44>)
 80002bc:	480b      	ldr	r0, [pc, #44]	; (80002ec <main+0x48>)
 80002be:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <main+0x4c>)
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2302      	movs	r3, #2
 80002c4:	9300      	str	r3, [sp, #0]
 80002c6:	2300      	movs	r3, #0
 80002c8:	2278      	movs	r2, #120	; 0x78
 80002ca:	f002 faa0 	bl	800280e <xTaskCreate>

  xTaskCreate(Task2_Handler, "Task_2", 120, NULL, 3, &myTask2Handler);
 80002ce:	4909      	ldr	r1, [pc, #36]	; (80002f4 <main+0x50>)
 80002d0:	4809      	ldr	r0, [pc, #36]	; (80002f8 <main+0x54>)
 80002d2:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <main+0x58>)
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2303      	movs	r3, #3
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	2300      	movs	r3, #0
 80002dc:	2278      	movs	r2, #120	; 0x78
 80002de:	f002 fa96 	bl	800280e <xTaskCreate>

  vTaskStartScheduler();
 80002e2:	f002 fc17 	bl	8002b14 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002e6:	e7fe      	b.n	80002e6 <main+0x42>
 80002e8:	080049e4 	.word	0x080049e4
 80002ec:	08000235 	.word	0x08000235
 80002f0:	20000094 	.word	0x20000094
 80002f4:	080049ec 	.word	0x080049ec
 80002f8:	08000285 	.word	0x08000285
 80002fc:	20000098 	.word	0x20000098

08000300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000300:	b590      	push	{r4, r7, lr}
 8000302:	b099      	sub	sp, #100	; 0x64
 8000304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000306:	242c      	movs	r4, #44	; 0x2c
 8000308:	193b      	adds	r3, r7, r4
 800030a:	0018      	movs	r0, r3
 800030c:	2334      	movs	r3, #52	; 0x34
 800030e:	001a      	movs	r2, r3
 8000310:	2100      	movs	r1, #0
 8000312:	f003 fee6 	bl	80040e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000316:	231c      	movs	r3, #28
 8000318:	18fb      	adds	r3, r7, r3
 800031a:	0018      	movs	r0, r3
 800031c:	2310      	movs	r3, #16
 800031e:	001a      	movs	r2, r3
 8000320:	2100      	movs	r1, #0
 8000322:	f003 fede 	bl	80040e2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000326:	003b      	movs	r3, r7
 8000328:	0018      	movs	r0, r3
 800032a:	231c      	movs	r3, #28
 800032c:	001a      	movs	r2, r3
 800032e:	2100      	movs	r1, #0
 8000330:	f003 fed7 	bl	80040e2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000334:	193b      	adds	r3, r7, r4
 8000336:	2220      	movs	r2, #32
 8000338:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800033a:	193b      	adds	r3, r7, r4
 800033c:	2201      	movs	r2, #1
 800033e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000340:	193b      	adds	r3, r7, r4
 8000342:	2200      	movs	r2, #0
 8000344:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000346:	193b      	adds	r3, r7, r4
 8000348:	0018      	movs	r0, r3
 800034a:	f000 fc69 	bl	8000c20 <HAL_RCC_OscConfig>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000352:	f000 f8af 	bl	80004b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000356:	211c      	movs	r1, #28
 8000358:	187b      	adds	r3, r7, r1
 800035a:	2207      	movs	r2, #7
 800035c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2203      	movs	r2, #3
 8000362:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036a:	187b      	adds	r3, r7, r1
 800036c:	2200      	movs	r2, #0
 800036e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000370:	187b      	adds	r3, r7, r1
 8000372:	2101      	movs	r1, #1
 8000374:	0018      	movs	r0, r3
 8000376:	f000 ffd9 	bl	800132c <HAL_RCC_ClockConfig>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800037e:	f000 f899 	bl	80004b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000382:	003b      	movs	r3, r7
 8000384:	2201      	movs	r2, #1
 8000386:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000388:	003b      	movs	r3, r7
 800038a:	2200      	movs	r2, #0
 800038c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800038e:	003b      	movs	r3, r7
 8000390:	0018      	movs	r0, r3
 8000392:	f001 f937 	bl	8001604 <HAL_RCCEx_PeriphCLKConfig>
 8000396:	1e03      	subs	r3, r0, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800039a:	f000 f88b 	bl	80004b4 <Error_Handler>
  }
}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	46bd      	mov	sp, r7
 80003a2:	b019      	add	sp, #100	; 0x64
 80003a4:	bd90      	pop	{r4, r7, pc}
	...

080003a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003ae:	4a15      	ldr	r2, [pc, #84]	; (8000404 <MX_USART1_UART_Init+0x5c>)
 80003b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003b4:	22e1      	movs	r2, #225	; 0xe1
 80003b6:	0252      	lsls	r2, r2, #9
 80003b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003ce:	220c      	movs	r2, #12
 80003d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ea:	4b05      	ldr	r3, [pc, #20]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003ec:	0018      	movs	r0, r3
 80003ee:	f001 fa07 	bl	8001800 <HAL_UART_Init>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003f6:	f000 f85d 	bl	80004b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000100 	.word	0x20000100
 8000404:	40013800 	.word	0x40013800

08000408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000408:	b590      	push	{r4, r7, lr}
 800040a:	b089      	sub	sp, #36	; 0x24
 800040c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040e:	240c      	movs	r4, #12
 8000410:	193b      	adds	r3, r7, r4
 8000412:	0018      	movs	r0, r3
 8000414:	2314      	movs	r3, #20
 8000416:	001a      	movs	r2, r3
 8000418:	2100      	movs	r1, #0
 800041a:	f003 fe62 	bl	80040e2 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041e:	4b24      	ldr	r3, [pc, #144]	; (80004b0 <MX_GPIO_Init+0xa8>)
 8000420:	695a      	ldr	r2, [r3, #20]
 8000422:	4b23      	ldr	r3, [pc, #140]	; (80004b0 <MX_GPIO_Init+0xa8>)
 8000424:	2180      	movs	r1, #128	; 0x80
 8000426:	0309      	lsls	r1, r1, #12
 8000428:	430a      	orrs	r2, r1
 800042a:	615a      	str	r2, [r3, #20]
 800042c:	4b20      	ldr	r3, [pc, #128]	; (80004b0 <MX_GPIO_Init+0xa8>)
 800042e:	695a      	ldr	r2, [r3, #20]
 8000430:	2380      	movs	r3, #128	; 0x80
 8000432:	031b      	lsls	r3, r3, #12
 8000434:	4013      	ands	r3, r2
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800043a:	4b1d      	ldr	r3, [pc, #116]	; (80004b0 <MX_GPIO_Init+0xa8>)
 800043c:	695a      	ldr	r2, [r3, #20]
 800043e:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <MX_GPIO_Init+0xa8>)
 8000440:	2180      	movs	r1, #128	; 0x80
 8000442:	03c9      	lsls	r1, r1, #15
 8000444:	430a      	orrs	r2, r1
 8000446:	615a      	str	r2, [r3, #20]
 8000448:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <MX_GPIO_Init+0xa8>)
 800044a:	695a      	ldr	r2, [r3, #20]
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	03db      	lsls	r3, r3, #15
 8000450:	4013      	ands	r3, r2
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000456:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <MX_GPIO_Init+0xa8>)
 8000458:	695a      	ldr	r2, [r3, #20]
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <MX_GPIO_Init+0xa8>)
 800045c:	2180      	movs	r1, #128	; 0x80
 800045e:	0289      	lsls	r1, r1, #10
 8000460:	430a      	orrs	r2, r1
 8000462:	615a      	str	r2, [r3, #20]
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <MX_GPIO_Init+0xa8>)
 8000466:	695a      	ldr	r2, [r3, #20]
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	029b      	lsls	r3, r3, #10
 800046c:	4013      	ands	r3, r2
 800046e:	603b      	str	r3, [r7, #0]
 8000470:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000472:	2390      	movs	r3, #144	; 0x90
 8000474:	05db      	lsls	r3, r3, #23
 8000476:	2200      	movs	r2, #0
 8000478:	2120      	movs	r1, #32
 800047a:	0018      	movs	r0, r3
 800047c:	f000 fb97 	bl	8000bae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000480:	0021      	movs	r1, r4
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2220      	movs	r2, #32
 8000486:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2201      	movs	r2, #1
 800048c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	187b      	adds	r3, r7, r1
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2200      	movs	r2, #0
 8000498:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800049a:	187a      	adds	r2, r7, r1
 800049c:	2390      	movs	r3, #144	; 0x90
 800049e:	05db      	lsls	r3, r3, #23
 80004a0:	0011      	movs	r1, r2
 80004a2:	0018      	movs	r0, r3
 80004a4:	f000 f9ee 	bl	8000884 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004a8:	46c0      	nop			; (mov r8, r8)
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b009      	add	sp, #36	; 0x24
 80004ae:	bd90      	pop	{r4, r7, pc}
 80004b0:	40021000 	.word	0x40021000

080004b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b8:	b672      	cpsid	i
}
 80004ba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004bc:	e7fe      	b.n	80004bc <Error_Handler+0x8>
	...

080004c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c6:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <HAL_MspInit+0x44>)
 80004c8:	699a      	ldr	r2, [r3, #24]
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <HAL_MspInit+0x44>)
 80004cc:	2101      	movs	r1, #1
 80004ce:	430a      	orrs	r2, r1
 80004d0:	619a      	str	r2, [r3, #24]
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <HAL_MspInit+0x44>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	2201      	movs	r2, #1
 80004d8:	4013      	ands	r3, r2
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004de:	4b09      	ldr	r3, [pc, #36]	; (8000504 <HAL_MspInit+0x44>)
 80004e0:	69da      	ldr	r2, [r3, #28]
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <HAL_MspInit+0x44>)
 80004e4:	2180      	movs	r1, #128	; 0x80
 80004e6:	0549      	lsls	r1, r1, #21
 80004e8:	430a      	orrs	r2, r1
 80004ea:	61da      	str	r2, [r3, #28]
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <HAL_MspInit+0x44>)
 80004ee:	69da      	ldr	r2, [r3, #28]
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	055b      	lsls	r3, r3, #21
 80004f4:	4013      	ands	r3, r2
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b002      	add	sp, #8
 8000500:	bd80      	pop	{r7, pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	40021000 	.word	0x40021000

08000508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b08b      	sub	sp, #44	; 0x2c
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000510:	2414      	movs	r4, #20
 8000512:	193b      	adds	r3, r7, r4
 8000514:	0018      	movs	r0, r3
 8000516:	2314      	movs	r3, #20
 8000518:	001a      	movs	r2, r3
 800051a:	2100      	movs	r1, #0
 800051c:	f003 fde1 	bl	80040e2 <memset>
  if(huart->Instance==USART1)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a1d      	ldr	r2, [pc, #116]	; (800059c <HAL_UART_MspInit+0x94>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d133      	bne.n	8000592 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800052a:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <HAL_UART_MspInit+0x98>)
 800052c:	699a      	ldr	r2, [r3, #24]
 800052e:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <HAL_UART_MspInit+0x98>)
 8000530:	2180      	movs	r1, #128	; 0x80
 8000532:	01c9      	lsls	r1, r1, #7
 8000534:	430a      	orrs	r2, r1
 8000536:	619a      	str	r2, [r3, #24]
 8000538:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <HAL_UART_MspInit+0x98>)
 800053a:	699a      	ldr	r2, [r3, #24]
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	01db      	lsls	r3, r3, #7
 8000540:	4013      	ands	r3, r2
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <HAL_UART_MspInit+0x98>)
 8000548:	695a      	ldr	r2, [r3, #20]
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <HAL_UART_MspInit+0x98>)
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	0289      	lsls	r1, r1, #10
 8000550:	430a      	orrs	r2, r1
 8000552:	615a      	str	r2, [r3, #20]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_UART_MspInit+0x98>)
 8000556:	695a      	ldr	r2, [r3, #20]
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	029b      	lsls	r3, r3, #10
 800055c:	4013      	ands	r3, r2
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000562:	193b      	adds	r3, r7, r4
 8000564:	22c0      	movs	r2, #192	; 0xc0
 8000566:	00d2      	lsls	r2, r2, #3
 8000568:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056a:	0021      	movs	r1, r4
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2202      	movs	r2, #2
 8000570:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2203      	movs	r2, #3
 800057c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2201      	movs	r2, #1
 8000582:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	187a      	adds	r2, r7, r1
 8000586:	2390      	movs	r3, #144	; 0x90
 8000588:	05db      	lsls	r3, r3, #23
 800058a:	0011      	movs	r1, r2
 800058c:	0018      	movs	r0, r3
 800058e:	f000 f979 	bl	8000884 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	b00b      	add	sp, #44	; 0x2c
 8000598:	bd90      	pop	{r4, r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	40013800 	.word	0x40013800
 80005a0:	40021000 	.word	0x40021000

080005a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <HardFault_Handler+0x4>
	...

080005ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005b4:	4a14      	ldr	r2, [pc, #80]	; (8000608 <_sbrk+0x5c>)
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <_sbrk+0x60>)
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <_sbrk+0x64>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d102      	bne.n	80005ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <_sbrk+0x64>)
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <_sbrk+0x68>)
 80005cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <_sbrk+0x64>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	18d3      	adds	r3, r2, r3
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d207      	bcs.n	80005ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005dc:	f003 fd4e 	bl	800407c <__errno>
 80005e0:	0003      	movs	r3, r0
 80005e2:	220c      	movs	r2, #12
 80005e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005e6:	2301      	movs	r3, #1
 80005e8:	425b      	negs	r3, r3
 80005ea:	e009      	b.n	8000600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <_sbrk+0x64>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005f2:	4b07      	ldr	r3, [pc, #28]	; (8000610 <_sbrk+0x64>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	18d2      	adds	r2, r2, r3
 80005fa:	4b05      	ldr	r3, [pc, #20]	; (8000610 <_sbrk+0x64>)
 80005fc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80005fe:	68fb      	ldr	r3, [r7, #12]
}
 8000600:	0018      	movs	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	b006      	add	sp, #24
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20004000 	.word	0x20004000
 800060c:	00000400 	.word	0x00000400
 8000610:	20000188 	.word	0x20000188
 8000614:	20001ca0 	.word	0x20001ca0

08000618 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800061c:	46c0      	nop			; (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000624:	480d      	ldr	r0, [pc, #52]	; (800065c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000626:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000628:	f7ff fff6 	bl	8000618 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <LoopForever+0x6>)
  ldr r1, =_edata
 800062e:	490d      	ldr	r1, [pc, #52]	; (8000664 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000630:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <LoopForever+0xe>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000634:	e002      	b.n	800063c <LoopCopyDataInit>

08000636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063a:	3304      	adds	r3, #4

0800063c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800063c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000640:	d3f9      	bcc.n	8000636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000642:	4a0a      	ldr	r2, [pc, #40]	; (800066c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000644:	4c0a      	ldr	r4, [pc, #40]	; (8000670 <LoopForever+0x16>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000648:	e001      	b.n	800064e <LoopFillZerobss>

0800064a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800064c:	3204      	adds	r2, #4

0800064e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000650:	d3fb      	bcc.n	800064a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000652:	f003 fd19 	bl	8004088 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000656:	f7ff fe25 	bl	80002a4 <main>

0800065a <LoopForever>:

LoopForever:
    b LoopForever
 800065a:	e7fe      	b.n	800065a <LoopForever>
  ldr   r0, =_estack
 800065c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000664:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000668:	08004aa8 	.word	0x08004aa8
  ldr r2, =_sbss
 800066c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000670:	20001ca0 	.word	0x20001ca0

08000674 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000674:	e7fe      	b.n	8000674 <ADC1_COMP_IRQHandler>
	...

08000678 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <HAL_Init+0x24>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_Init+0x24>)
 8000682:	2110      	movs	r1, #16
 8000684:	430a      	orrs	r2, r1
 8000686:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000688:	2000      	movs	r0, #0
 800068a:	f000 f809 	bl	80006a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800068e:	f7ff ff17 	bl	80004c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000692:	2300      	movs	r3, #0
}
 8000694:	0018      	movs	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	40022000 	.word	0x40022000

080006a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <HAL_InitTick+0x5c>)
 80006aa:	681c      	ldr	r4, [r3, #0]
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <HAL_InitTick+0x60>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	0019      	movs	r1, r3
 80006b2:	23fa      	movs	r3, #250	; 0xfa
 80006b4:	0098      	lsls	r0, r3, #2
 80006b6:	f7ff fd31 	bl	800011c <__udivsi3>
 80006ba:	0003      	movs	r3, r0
 80006bc:	0019      	movs	r1, r3
 80006be:	0020      	movs	r0, r4
 80006c0:	f7ff fd2c 	bl	800011c <__udivsi3>
 80006c4:	0003      	movs	r3, r0
 80006c6:	0018      	movs	r0, r3
 80006c8:	f000 f8cf 	bl	800086a <HAL_SYSTICK_Config>
 80006cc:	1e03      	subs	r3, r0, #0
 80006ce:	d001      	beq.n	80006d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006d0:	2301      	movs	r3, #1
 80006d2:	e00f      	b.n	80006f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	d80b      	bhi.n	80006f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	2301      	movs	r3, #1
 80006de:	425b      	negs	r3, r3
 80006e0:	2200      	movs	r2, #0
 80006e2:	0018      	movs	r0, r3
 80006e4:	f000 f8ac 	bl	8000840 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <HAL_InitTick+0x64>)
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80006ee:	2300      	movs	r3, #0
 80006f0:	e000      	b.n	80006f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b003      	add	sp, #12
 80006fa:	bd90      	pop	{r4, r7, pc}
 80006fc:	20000000 	.word	0x20000000
 8000700:	20000008 	.word	0x20000008
 8000704:	20000004 	.word	0x20000004

08000708 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  return uwTick;
 800070c:	4b02      	ldr	r3, [pc, #8]	; (8000718 <HAL_GetTick+0x10>)
 800070e:	681b      	ldr	r3, [r3, #0]
}
 8000710:	0018      	movs	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	2000018c 	.word	0x2000018c

0800071c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	0002      	movs	r2, r0
 8000724:	6039      	str	r1, [r7, #0]
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800072a:	1dfb      	adds	r3, r7, #7
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b7f      	cmp	r3, #127	; 0x7f
 8000730:	d828      	bhi.n	8000784 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000732:	4a2f      	ldr	r2, [pc, #188]	; (80007f0 <__NVIC_SetPriority+0xd4>)
 8000734:	1dfb      	adds	r3, r7, #7
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b25b      	sxtb	r3, r3
 800073a:	089b      	lsrs	r3, r3, #2
 800073c:	33c0      	adds	r3, #192	; 0xc0
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	589b      	ldr	r3, [r3, r2]
 8000742:	1dfa      	adds	r2, r7, #7
 8000744:	7812      	ldrb	r2, [r2, #0]
 8000746:	0011      	movs	r1, r2
 8000748:	2203      	movs	r2, #3
 800074a:	400a      	ands	r2, r1
 800074c:	00d2      	lsls	r2, r2, #3
 800074e:	21ff      	movs	r1, #255	; 0xff
 8000750:	4091      	lsls	r1, r2
 8000752:	000a      	movs	r2, r1
 8000754:	43d2      	mvns	r2, r2
 8000756:	401a      	ands	r2, r3
 8000758:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	019b      	lsls	r3, r3, #6
 800075e:	22ff      	movs	r2, #255	; 0xff
 8000760:	401a      	ands	r2, r3
 8000762:	1dfb      	adds	r3, r7, #7
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	0018      	movs	r0, r3
 8000768:	2303      	movs	r3, #3
 800076a:	4003      	ands	r3, r0
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000770:	481f      	ldr	r0, [pc, #124]	; (80007f0 <__NVIC_SetPriority+0xd4>)
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	b25b      	sxtb	r3, r3
 8000778:	089b      	lsrs	r3, r3, #2
 800077a:	430a      	orrs	r2, r1
 800077c:	33c0      	adds	r3, #192	; 0xc0
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000782:	e031      	b.n	80007e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000784:	4a1b      	ldr	r2, [pc, #108]	; (80007f4 <__NVIC_SetPriority+0xd8>)
 8000786:	1dfb      	adds	r3, r7, #7
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	0019      	movs	r1, r3
 800078c:	230f      	movs	r3, #15
 800078e:	400b      	ands	r3, r1
 8000790:	3b08      	subs	r3, #8
 8000792:	089b      	lsrs	r3, r3, #2
 8000794:	3306      	adds	r3, #6
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	18d3      	adds	r3, r2, r3
 800079a:	3304      	adds	r3, #4
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	1dfa      	adds	r2, r7, #7
 80007a0:	7812      	ldrb	r2, [r2, #0]
 80007a2:	0011      	movs	r1, r2
 80007a4:	2203      	movs	r2, #3
 80007a6:	400a      	ands	r2, r1
 80007a8:	00d2      	lsls	r2, r2, #3
 80007aa:	21ff      	movs	r1, #255	; 0xff
 80007ac:	4091      	lsls	r1, r2
 80007ae:	000a      	movs	r2, r1
 80007b0:	43d2      	mvns	r2, r2
 80007b2:	401a      	ands	r2, r3
 80007b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	019b      	lsls	r3, r3, #6
 80007ba:	22ff      	movs	r2, #255	; 0xff
 80007bc:	401a      	ands	r2, r3
 80007be:	1dfb      	adds	r3, r7, #7
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	0018      	movs	r0, r3
 80007c4:	2303      	movs	r3, #3
 80007c6:	4003      	ands	r3, r0
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007cc:	4809      	ldr	r0, [pc, #36]	; (80007f4 <__NVIC_SetPriority+0xd8>)
 80007ce:	1dfb      	adds	r3, r7, #7
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	001c      	movs	r4, r3
 80007d4:	230f      	movs	r3, #15
 80007d6:	4023      	ands	r3, r4
 80007d8:	3b08      	subs	r3, #8
 80007da:	089b      	lsrs	r3, r3, #2
 80007dc:	430a      	orrs	r2, r1
 80007de:	3306      	adds	r3, #6
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	18c3      	adds	r3, r0, r3
 80007e4:	3304      	adds	r3, #4
 80007e6:	601a      	str	r2, [r3, #0]
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b003      	add	sp, #12
 80007ee:	bd90      	pop	{r4, r7, pc}
 80007f0:	e000e100 	.word	0xe000e100
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	1e5a      	subs	r2, r3, #1
 8000804:	2380      	movs	r3, #128	; 0x80
 8000806:	045b      	lsls	r3, r3, #17
 8000808:	429a      	cmp	r2, r3
 800080a:	d301      	bcc.n	8000810 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800080c:	2301      	movs	r3, #1
 800080e:	e010      	b.n	8000832 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <SysTick_Config+0x44>)
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	3a01      	subs	r2, #1
 8000816:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000818:	2301      	movs	r3, #1
 800081a:	425b      	negs	r3, r3
 800081c:	2103      	movs	r1, #3
 800081e:	0018      	movs	r0, r3
 8000820:	f7ff ff7c 	bl	800071c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <SysTick_Config+0x44>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800082a:	4b04      	ldr	r3, [pc, #16]	; (800083c <SysTick_Config+0x44>)
 800082c:	2207      	movs	r2, #7
 800082e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000830:	2300      	movs	r3, #0
}
 8000832:	0018      	movs	r0, r3
 8000834:	46bd      	mov	sp, r7
 8000836:	b002      	add	sp, #8
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	e000e010 	.word	0xe000e010

08000840 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	60b9      	str	r1, [r7, #8]
 8000848:	607a      	str	r2, [r7, #4]
 800084a:	210f      	movs	r1, #15
 800084c:	187b      	adds	r3, r7, r1
 800084e:	1c02      	adds	r2, r0, #0
 8000850:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000852:	68ba      	ldr	r2, [r7, #8]
 8000854:	187b      	adds	r3, r7, r1
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b25b      	sxtb	r3, r3
 800085a:	0011      	movs	r1, r2
 800085c:	0018      	movs	r0, r3
 800085e:	f7ff ff5d 	bl	800071c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b004      	add	sp, #16
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff ffbf 	bl	80007f8 <SysTick_Config>
 800087a:	0003      	movs	r3, r0
}
 800087c:	0018      	movs	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	b002      	add	sp, #8
 8000882:	bd80      	pop	{r7, pc}

08000884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000892:	e155      	b.n	8000b40 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2101      	movs	r1, #1
 800089a:	697a      	ldr	r2, [r7, #20]
 800089c:	4091      	lsls	r1, r2
 800089e:	000a      	movs	r2, r1
 80008a0:	4013      	ands	r3, r2
 80008a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d100      	bne.n	80008ac <HAL_GPIO_Init+0x28>
 80008aa:	e146      	b.n	8000b3a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	2203      	movs	r2, #3
 80008b2:	4013      	ands	r3, r2
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d005      	beq.n	80008c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2203      	movs	r2, #3
 80008be:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	d130      	bne.n	8000926 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	2203      	movs	r2, #3
 80008d0:	409a      	lsls	r2, r3
 80008d2:	0013      	movs	r3, r2
 80008d4:	43da      	mvns	r2, r3
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	4013      	ands	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	68da      	ldr	r2, [r3, #12]
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	409a      	lsls	r2, r3
 80008e6:	0013      	movs	r3, r2
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008fa:	2201      	movs	r2, #1
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	409a      	lsls	r2, r3
 8000900:	0013      	movs	r3, r2
 8000902:	43da      	mvns	r2, r3
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	4013      	ands	r3, r2
 8000908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	091b      	lsrs	r3, r3, #4
 8000910:	2201      	movs	r2, #1
 8000912:	401a      	ands	r2, r3
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	409a      	lsls	r2, r3
 8000918:	0013      	movs	r3, r2
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	4313      	orrs	r3, r2
 800091e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	2203      	movs	r2, #3
 800092c:	4013      	ands	r3, r2
 800092e:	2b03      	cmp	r3, #3
 8000930:	d017      	beq.n	8000962 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	2203      	movs	r2, #3
 800093e:	409a      	lsls	r2, r3
 8000940:	0013      	movs	r3, r2
 8000942:	43da      	mvns	r2, r3
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	4013      	ands	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	689a      	ldr	r2, [r3, #8]
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	409a      	lsls	r2, r3
 8000954:	0013      	movs	r3, r2
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4313      	orrs	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	2203      	movs	r2, #3
 8000968:	4013      	ands	r3, r2
 800096a:	2b02      	cmp	r3, #2
 800096c:	d123      	bne.n	80009b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	08da      	lsrs	r2, r3, #3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3208      	adds	r2, #8
 8000976:	0092      	lsls	r2, r2, #2
 8000978:	58d3      	ldr	r3, [r2, r3]
 800097a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	2207      	movs	r2, #7
 8000980:	4013      	ands	r3, r2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	220f      	movs	r2, #15
 8000986:	409a      	lsls	r2, r3
 8000988:	0013      	movs	r3, r2
 800098a:	43da      	mvns	r2, r3
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	4013      	ands	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	691a      	ldr	r2, [r3, #16]
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	2107      	movs	r1, #7
 800099a:	400b      	ands	r3, r1
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	409a      	lsls	r2, r3
 80009a0:	0013      	movs	r3, r2
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	08da      	lsrs	r2, r3, #3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3208      	adds	r2, #8
 80009b0:	0092      	lsls	r2, r2, #2
 80009b2:	6939      	ldr	r1, [r7, #16]
 80009b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	2203      	movs	r2, #3
 80009c2:	409a      	lsls	r2, r3
 80009c4:	0013      	movs	r3, r2
 80009c6:	43da      	mvns	r2, r3
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	2203      	movs	r2, #3
 80009d4:	401a      	ands	r2, r3
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	409a      	lsls	r2, r3
 80009dc:	0013      	movs	r3, r2
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685a      	ldr	r2, [r3, #4]
 80009ee:	23c0      	movs	r3, #192	; 0xc0
 80009f0:	029b      	lsls	r3, r3, #10
 80009f2:	4013      	ands	r3, r2
 80009f4:	d100      	bne.n	80009f8 <HAL_GPIO_Init+0x174>
 80009f6:	e0a0      	b.n	8000b3a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f8:	4b57      	ldr	r3, [pc, #348]	; (8000b58 <HAL_GPIO_Init+0x2d4>)
 80009fa:	699a      	ldr	r2, [r3, #24]
 80009fc:	4b56      	ldr	r3, [pc, #344]	; (8000b58 <HAL_GPIO_Init+0x2d4>)
 80009fe:	2101      	movs	r1, #1
 8000a00:	430a      	orrs	r2, r1
 8000a02:	619a      	str	r2, [r3, #24]
 8000a04:	4b54      	ldr	r3, [pc, #336]	; (8000b58 <HAL_GPIO_Init+0x2d4>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a10:	4a52      	ldr	r2, [pc, #328]	; (8000b5c <HAL_GPIO_Init+0x2d8>)
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	089b      	lsrs	r3, r3, #2
 8000a16:	3302      	adds	r3, #2
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	589b      	ldr	r3, [r3, r2]
 8000a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	2203      	movs	r2, #3
 8000a22:	4013      	ands	r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	220f      	movs	r2, #15
 8000a28:	409a      	lsls	r2, r3
 8000a2a:	0013      	movs	r3, r2
 8000a2c:	43da      	mvns	r2, r3
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	4013      	ands	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	2390      	movs	r3, #144	; 0x90
 8000a38:	05db      	lsls	r3, r3, #23
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d019      	beq.n	8000a72 <HAL_GPIO_Init+0x1ee>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a47      	ldr	r2, [pc, #284]	; (8000b60 <HAL_GPIO_Init+0x2dc>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d013      	beq.n	8000a6e <HAL_GPIO_Init+0x1ea>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a46      	ldr	r2, [pc, #280]	; (8000b64 <HAL_GPIO_Init+0x2e0>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d00d      	beq.n	8000a6a <HAL_GPIO_Init+0x1e6>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a45      	ldr	r2, [pc, #276]	; (8000b68 <HAL_GPIO_Init+0x2e4>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d007      	beq.n	8000a66 <HAL_GPIO_Init+0x1e2>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a44      	ldr	r2, [pc, #272]	; (8000b6c <HAL_GPIO_Init+0x2e8>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d101      	bne.n	8000a62 <HAL_GPIO_Init+0x1de>
 8000a5e:	2304      	movs	r3, #4
 8000a60:	e008      	b.n	8000a74 <HAL_GPIO_Init+0x1f0>
 8000a62:	2305      	movs	r3, #5
 8000a64:	e006      	b.n	8000a74 <HAL_GPIO_Init+0x1f0>
 8000a66:	2303      	movs	r3, #3
 8000a68:	e004      	b.n	8000a74 <HAL_GPIO_Init+0x1f0>
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	e002      	b.n	8000a74 <HAL_GPIO_Init+0x1f0>
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e000      	b.n	8000a74 <HAL_GPIO_Init+0x1f0>
 8000a72:	2300      	movs	r3, #0
 8000a74:	697a      	ldr	r2, [r7, #20]
 8000a76:	2103      	movs	r1, #3
 8000a78:	400a      	ands	r2, r1
 8000a7a:	0092      	lsls	r2, r2, #2
 8000a7c:	4093      	lsls	r3, r2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a84:	4935      	ldr	r1, [pc, #212]	; (8000b5c <HAL_GPIO_Init+0x2d8>)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	089b      	lsrs	r3, r3, #2
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a92:	4b37      	ldr	r3, [pc, #220]	; (8000b70 <HAL_GPIO_Init+0x2ec>)
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	43da      	mvns	r2, r3
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	035b      	lsls	r3, r3, #13
 8000aaa:	4013      	ands	r3, r2
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ab6:	4b2e      	ldr	r3, [pc, #184]	; (8000b70 <HAL_GPIO_Init+0x2ec>)
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000abc:	4b2c      	ldr	r3, [pc, #176]	; (8000b70 <HAL_GPIO_Init+0x2ec>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	43da      	mvns	r2, r3
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685a      	ldr	r2, [r3, #4]
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	039b      	lsls	r3, r3, #14
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	d003      	beq.n	8000ae0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ae0:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <HAL_GPIO_Init+0x2ec>)
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000ae6:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <HAL_GPIO_Init+0x2ec>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	43da      	mvns	r2, r3
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	4013      	ands	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685a      	ldr	r2, [r3, #4]
 8000afa:	2380      	movs	r3, #128	; 0x80
 8000afc:	029b      	lsls	r3, r3, #10
 8000afe:	4013      	ands	r3, r2
 8000b00:	d003      	beq.n	8000b0a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b0a:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <HAL_GPIO_Init+0x2ec>)
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <HAL_GPIO_Init+0x2ec>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	43da      	mvns	r2, r3
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685a      	ldr	r2, [r3, #4]
 8000b24:	2380      	movs	r3, #128	; 0x80
 8000b26:	025b      	lsls	r3, r3, #9
 8000b28:	4013      	ands	r3, r2
 8000b2a:	d003      	beq.n	8000b34 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b34:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_GPIO_Init+0x2ec>)
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	40da      	lsrs	r2, r3
 8000b48:	1e13      	subs	r3, r2, #0
 8000b4a:	d000      	beq.n	8000b4e <HAL_GPIO_Init+0x2ca>
 8000b4c:	e6a2      	b.n	8000894 <HAL_GPIO_Init+0x10>
  } 
}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b006      	add	sp, #24
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40010000 	.word	0x40010000
 8000b60:	48000400 	.word	0x48000400
 8000b64:	48000800 	.word	0x48000800
 8000b68:	48000c00 	.word	0x48000c00
 8000b6c:	48001000 	.word	0x48001000
 8000b70:	40010400 	.word	0x40010400

08000b74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	000a      	movs	r2, r1
 8000b7e:	1cbb      	adds	r3, r7, #2
 8000b80:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	691b      	ldr	r3, [r3, #16]
 8000b86:	1cba      	adds	r2, r7, #2
 8000b88:	8812      	ldrh	r2, [r2, #0]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	d004      	beq.n	8000b98 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000b8e:	230f      	movs	r3, #15
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	e003      	b.n	8000ba0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b98:	230f      	movs	r3, #15
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	18fb      	adds	r3, r7, r3
 8000ba4:	781b      	ldrb	r3, [r3, #0]
  }
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b004      	add	sp, #16
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	0008      	movs	r0, r1
 8000bb8:	0011      	movs	r1, r2
 8000bba:	1cbb      	adds	r3, r7, #2
 8000bbc:	1c02      	adds	r2, r0, #0
 8000bbe:	801a      	strh	r2, [r3, #0]
 8000bc0:	1c7b      	adds	r3, r7, #1
 8000bc2:	1c0a      	adds	r2, r1, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bc6:	1c7b      	adds	r3, r7, #1
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d004      	beq.n	8000bd8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bce:	1cbb      	adds	r3, r7, #2
 8000bd0:	881a      	ldrh	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bd6:	e003      	b.n	8000be0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bd8:	1cbb      	adds	r3, r7, #2
 8000bda:	881a      	ldrh	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b002      	add	sp, #8
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	000a      	movs	r2, r1
 8000bf2:	1cbb      	adds	r3, r7, #2
 8000bf4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bfc:	1cbb      	adds	r3, r7, #2
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	4013      	ands	r3, r2
 8000c04:	041a      	lsls	r2, r3, #16
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	1cb9      	adds	r1, r7, #2
 8000c0c:	8809      	ldrh	r1, [r1, #0]
 8000c0e:	400b      	ands	r3, r1
 8000c10:	431a      	orrs	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	619a      	str	r2, [r3, #24]
}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b004      	add	sp, #16
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d102      	bne.n	8000c34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	f000 fb76 	bl	8001320 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	d100      	bne.n	8000c40 <HAL_RCC_OscConfig+0x20>
 8000c3e:	e08e      	b.n	8000d5e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c40:	4bc5      	ldr	r3, [pc, #788]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	220c      	movs	r2, #12
 8000c46:	4013      	ands	r3, r2
 8000c48:	2b04      	cmp	r3, #4
 8000c4a:	d00e      	beq.n	8000c6a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c4c:	4bc2      	ldr	r3, [pc, #776]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	220c      	movs	r2, #12
 8000c52:	4013      	ands	r3, r2
 8000c54:	2b08      	cmp	r3, #8
 8000c56:	d117      	bne.n	8000c88 <HAL_RCC_OscConfig+0x68>
 8000c58:	4bbf      	ldr	r3, [pc, #764]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	23c0      	movs	r3, #192	; 0xc0
 8000c5e:	025b      	lsls	r3, r3, #9
 8000c60:	401a      	ands	r2, r3
 8000c62:	2380      	movs	r3, #128	; 0x80
 8000c64:	025b      	lsls	r3, r3, #9
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d10e      	bne.n	8000c88 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c6a:	4bbb      	ldr	r3, [pc, #748]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	029b      	lsls	r3, r3, #10
 8000c72:	4013      	ands	r3, r2
 8000c74:	d100      	bne.n	8000c78 <HAL_RCC_OscConfig+0x58>
 8000c76:	e071      	b.n	8000d5c <HAL_RCC_OscConfig+0x13c>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d000      	beq.n	8000c82 <HAL_RCC_OscConfig+0x62>
 8000c80:	e06c      	b.n	8000d5c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	f000 fb4c 	bl	8001320 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d107      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x80>
 8000c90:	4bb1      	ldr	r3, [pc, #708]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4bb0      	ldr	r3, [pc, #704]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000c96:	2180      	movs	r1, #128	; 0x80
 8000c98:	0249      	lsls	r1, r1, #9
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	e02f      	b.n	8000d00 <HAL_RCC_OscConfig+0xe0>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d10c      	bne.n	8000cc2 <HAL_RCC_OscConfig+0xa2>
 8000ca8:	4bab      	ldr	r3, [pc, #684]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4baa      	ldr	r3, [pc, #680]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000cae:	49ab      	ldr	r1, [pc, #684]	; (8000f5c <HAL_RCC_OscConfig+0x33c>)
 8000cb0:	400a      	ands	r2, r1
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	4ba8      	ldr	r3, [pc, #672]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4ba7      	ldr	r3, [pc, #668]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000cba:	49a9      	ldr	r1, [pc, #676]	; (8000f60 <HAL_RCC_OscConfig+0x340>)
 8000cbc:	400a      	ands	r2, r1
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	e01e      	b.n	8000d00 <HAL_RCC_OscConfig+0xe0>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b05      	cmp	r3, #5
 8000cc8:	d10e      	bne.n	8000ce8 <HAL_RCC_OscConfig+0xc8>
 8000cca:	4ba3      	ldr	r3, [pc, #652]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	4ba2      	ldr	r3, [pc, #648]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000cd0:	2180      	movs	r1, #128	; 0x80
 8000cd2:	02c9      	lsls	r1, r1, #11
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	4b9f      	ldr	r3, [pc, #636]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b9e      	ldr	r3, [pc, #632]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000cde:	2180      	movs	r1, #128	; 0x80
 8000ce0:	0249      	lsls	r1, r1, #9
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	e00b      	b.n	8000d00 <HAL_RCC_OscConfig+0xe0>
 8000ce8:	4b9b      	ldr	r3, [pc, #620]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b9a      	ldr	r3, [pc, #616]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000cee:	499b      	ldr	r1, [pc, #620]	; (8000f5c <HAL_RCC_OscConfig+0x33c>)
 8000cf0:	400a      	ands	r2, r1
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	4b98      	ldr	r3, [pc, #608]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b97      	ldr	r3, [pc, #604]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000cfa:	4999      	ldr	r1, [pc, #612]	; (8000f60 <HAL_RCC_OscConfig+0x340>)
 8000cfc:	400a      	ands	r2, r1
 8000cfe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d014      	beq.n	8000d32 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d08:	f7ff fcfe 	bl	8000708 <HAL_GetTick>
 8000d0c:	0003      	movs	r3, r0
 8000d0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d10:	e008      	b.n	8000d24 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d12:	f7ff fcf9 	bl	8000708 <HAL_GetTick>
 8000d16:	0002      	movs	r2, r0
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	2b64      	cmp	r3, #100	; 0x64
 8000d1e:	d901      	bls.n	8000d24 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000d20:	2303      	movs	r3, #3
 8000d22:	e2fd      	b.n	8001320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d24:	4b8c      	ldr	r3, [pc, #560]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	029b      	lsls	r3, r3, #10
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	d0f0      	beq.n	8000d12 <HAL_RCC_OscConfig+0xf2>
 8000d30:	e015      	b.n	8000d5e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d32:	f7ff fce9 	bl	8000708 <HAL_GetTick>
 8000d36:	0003      	movs	r3, r0
 8000d38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d3a:	e008      	b.n	8000d4e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d3c:	f7ff fce4 	bl	8000708 <HAL_GetTick>
 8000d40:	0002      	movs	r2, r0
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b64      	cmp	r3, #100	; 0x64
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e2e8      	b.n	8001320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4e:	4b82      	ldr	r3, [pc, #520]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	029b      	lsls	r3, r3, #10
 8000d56:	4013      	ands	r3, r2
 8000d58:	d1f0      	bne.n	8000d3c <HAL_RCC_OscConfig+0x11c>
 8000d5a:	e000      	b.n	8000d5e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2202      	movs	r2, #2
 8000d64:	4013      	ands	r3, r2
 8000d66:	d100      	bne.n	8000d6a <HAL_RCC_OscConfig+0x14a>
 8000d68:	e06c      	b.n	8000e44 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d6a:	4b7b      	ldr	r3, [pc, #492]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	220c      	movs	r2, #12
 8000d70:	4013      	ands	r3, r2
 8000d72:	d00e      	beq.n	8000d92 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d74:	4b78      	ldr	r3, [pc, #480]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	220c      	movs	r2, #12
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	2b08      	cmp	r3, #8
 8000d7e:	d11f      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x1a0>
 8000d80:	4b75      	ldr	r3, [pc, #468]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	23c0      	movs	r3, #192	; 0xc0
 8000d86:	025b      	lsls	r3, r3, #9
 8000d88:	401a      	ands	r2, r3
 8000d8a:	2380      	movs	r3, #128	; 0x80
 8000d8c:	021b      	lsls	r3, r3, #8
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d116      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d92:	4b71      	ldr	r3, [pc, #452]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2202      	movs	r2, #2
 8000d98:	4013      	ands	r3, r2
 8000d9a:	d005      	beq.n	8000da8 <HAL_RCC_OscConfig+0x188>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d001      	beq.n	8000da8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e2bb      	b.n	8001320 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da8:	4b6b      	ldr	r3, [pc, #428]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	22f8      	movs	r2, #248	; 0xf8
 8000dae:	4393      	bics	r3, r2
 8000db0:	0019      	movs	r1, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	00da      	lsls	r2, r3, #3
 8000db8:	4b67      	ldr	r3, [pc, #412]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dbe:	e041      	b.n	8000e44 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d024      	beq.n	8000e12 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dc8:	4b63      	ldr	r3, [pc, #396]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b62      	ldr	r3, [pc, #392]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000dce:	2101      	movs	r1, #1
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd4:	f7ff fc98 	bl	8000708 <HAL_GetTick>
 8000dd8:	0003      	movs	r3, r0
 8000dda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ddc:	e008      	b.n	8000df0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dde:	f7ff fc93 	bl	8000708 <HAL_GetTick>
 8000de2:	0002      	movs	r2, r0
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d901      	bls.n	8000df0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000dec:	2303      	movs	r3, #3
 8000dee:	e297      	b.n	8001320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df0:	4b59      	ldr	r3, [pc, #356]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2202      	movs	r2, #2
 8000df6:	4013      	ands	r3, r2
 8000df8:	d0f1      	beq.n	8000dde <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dfa:	4b57      	ldr	r3, [pc, #348]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	22f8      	movs	r2, #248	; 0xf8
 8000e00:	4393      	bics	r3, r2
 8000e02:	0019      	movs	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	00da      	lsls	r2, r3, #3
 8000e0a:	4b53      	ldr	r3, [pc, #332]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	e018      	b.n	8000e44 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e12:	4b51      	ldr	r3, [pc, #324]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	4b50      	ldr	r3, [pc, #320]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000e18:	2101      	movs	r1, #1
 8000e1a:	438a      	bics	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1e:	f7ff fc73 	bl	8000708 <HAL_GetTick>
 8000e22:	0003      	movs	r3, r0
 8000e24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e26:	e008      	b.n	8000e3a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e28:	f7ff fc6e 	bl	8000708 <HAL_GetTick>
 8000e2c:	0002      	movs	r2, r0
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d901      	bls.n	8000e3a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e272      	b.n	8001320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e3a:	4b47      	ldr	r3, [pc, #284]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2202      	movs	r2, #2
 8000e40:	4013      	ands	r3, r2
 8000e42:	d1f1      	bne.n	8000e28 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2208      	movs	r2, #8
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d036      	beq.n	8000ebc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d019      	beq.n	8000e8a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e56:	4b40      	ldr	r3, [pc, #256]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e5a:	4b3f      	ldr	r3, [pc, #252]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e62:	f7ff fc51 	bl	8000708 <HAL_GetTick>
 8000e66:	0003      	movs	r3, r0
 8000e68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e6a:	e008      	b.n	8000e7e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e6c:	f7ff fc4c 	bl	8000708 <HAL_GetTick>
 8000e70:	0002      	movs	r2, r0
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d901      	bls.n	8000e7e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e250      	b.n	8001320 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e7e:	4b36      	ldr	r3, [pc, #216]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e82:	2202      	movs	r2, #2
 8000e84:	4013      	ands	r3, r2
 8000e86:	d0f1      	beq.n	8000e6c <HAL_RCC_OscConfig+0x24c>
 8000e88:	e018      	b.n	8000ebc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e8a:	4b33      	ldr	r3, [pc, #204]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e8e:	4b32      	ldr	r3, [pc, #200]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000e90:	2101      	movs	r1, #1
 8000e92:	438a      	bics	r2, r1
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e96:	f7ff fc37 	bl	8000708 <HAL_GetTick>
 8000e9a:	0003      	movs	r3, r0
 8000e9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ea0:	f7ff fc32 	bl	8000708 <HAL_GetTick>
 8000ea4:	0002      	movs	r2, r0
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e236      	b.n	8001320 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb2:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	4013      	ands	r3, r2
 8000eba:	d1f1      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2204      	movs	r2, #4
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d100      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x2a8>
 8000ec6:	e0b5      	b.n	8001034 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ec8:	201f      	movs	r0, #31
 8000eca:	183b      	adds	r3, r7, r0
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ed0:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000ed2:	69da      	ldr	r2, [r3, #28]
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	055b      	lsls	r3, r3, #21
 8000ed8:	4013      	ands	r3, r2
 8000eda:	d110      	bne.n	8000efe <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000edc:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000ede:	69da      	ldr	r2, [r3, #28]
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000ee2:	2180      	movs	r1, #128	; 0x80
 8000ee4:	0549      	lsls	r1, r1, #21
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	61da      	str	r2, [r3, #28]
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000eec:	69da      	ldr	r2, [r3, #28]
 8000eee:	2380      	movs	r3, #128	; 0x80
 8000ef0:	055b      	lsls	r3, r3, #21
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ef8:	183b      	adds	r3, r7, r0
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <HAL_RCC_OscConfig+0x344>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4013      	ands	r3, r2
 8000f08:	d11a      	bne.n	8000f40 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <HAL_RCC_OscConfig+0x344>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <HAL_RCC_OscConfig+0x344>)
 8000f10:	2180      	movs	r1, #128	; 0x80
 8000f12:	0049      	lsls	r1, r1, #1
 8000f14:	430a      	orrs	r2, r1
 8000f16:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f18:	f7ff fbf6 	bl	8000708 <HAL_GetTick>
 8000f1c:	0003      	movs	r3, r0
 8000f1e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f20:	e008      	b.n	8000f34 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f22:	f7ff fbf1 	bl	8000708 <HAL_GetTick>
 8000f26:	0002      	movs	r2, r0
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b64      	cmp	r3, #100	; 0x64
 8000f2e:	d901      	bls.n	8000f34 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e1f5      	b.n	8001320 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <HAL_RCC_OscConfig+0x344>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d0f0      	beq.n	8000f22 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d10f      	bne.n	8000f68 <HAL_RCC_OscConfig+0x348>
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000f4a:	6a1a      	ldr	r2, [r3, #32]
 8000f4c:	4b02      	ldr	r3, [pc, #8]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000f4e:	2101      	movs	r1, #1
 8000f50:	430a      	orrs	r2, r1
 8000f52:	621a      	str	r2, [r3, #32]
 8000f54:	e036      	b.n	8000fc4 <HAL_RCC_OscConfig+0x3a4>
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	fffeffff 	.word	0xfffeffff
 8000f60:	fffbffff 	.word	0xfffbffff
 8000f64:	40007000 	.word	0x40007000
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10c      	bne.n	8000f8a <HAL_RCC_OscConfig+0x36a>
 8000f70:	4bca      	ldr	r3, [pc, #808]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8000f72:	6a1a      	ldr	r2, [r3, #32]
 8000f74:	4bc9      	ldr	r3, [pc, #804]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8000f76:	2101      	movs	r1, #1
 8000f78:	438a      	bics	r2, r1
 8000f7a:	621a      	str	r2, [r3, #32]
 8000f7c:	4bc7      	ldr	r3, [pc, #796]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8000f7e:	6a1a      	ldr	r2, [r3, #32]
 8000f80:	4bc6      	ldr	r3, [pc, #792]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8000f82:	2104      	movs	r1, #4
 8000f84:	438a      	bics	r2, r1
 8000f86:	621a      	str	r2, [r3, #32]
 8000f88:	e01c      	b.n	8000fc4 <HAL_RCC_OscConfig+0x3a4>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2b05      	cmp	r3, #5
 8000f90:	d10c      	bne.n	8000fac <HAL_RCC_OscConfig+0x38c>
 8000f92:	4bc2      	ldr	r3, [pc, #776]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8000f94:	6a1a      	ldr	r2, [r3, #32]
 8000f96:	4bc1      	ldr	r3, [pc, #772]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8000f98:	2104      	movs	r1, #4
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	621a      	str	r2, [r3, #32]
 8000f9e:	4bbf      	ldr	r3, [pc, #764]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8000fa0:	6a1a      	ldr	r2, [r3, #32]
 8000fa2:	4bbe      	ldr	r3, [pc, #760]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	621a      	str	r2, [r3, #32]
 8000faa:	e00b      	b.n	8000fc4 <HAL_RCC_OscConfig+0x3a4>
 8000fac:	4bbb      	ldr	r3, [pc, #748]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8000fae:	6a1a      	ldr	r2, [r3, #32]
 8000fb0:	4bba      	ldr	r3, [pc, #744]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	438a      	bics	r2, r1
 8000fb6:	621a      	str	r2, [r3, #32]
 8000fb8:	4bb8      	ldr	r3, [pc, #736]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8000fba:	6a1a      	ldr	r2, [r3, #32]
 8000fbc:	4bb7      	ldr	r3, [pc, #732]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	438a      	bics	r2, r1
 8000fc2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d014      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fcc:	f7ff fb9c 	bl	8000708 <HAL_GetTick>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd4:	e009      	b.n	8000fea <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fd6:	f7ff fb97 	bl	8000708 <HAL_GetTick>
 8000fda:	0002      	movs	r2, r0
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	4aaf      	ldr	r2, [pc, #700]	; (80012a0 <HAL_RCC_OscConfig+0x680>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e19a      	b.n	8001320 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fea:	4bac      	ldr	r3, [pc, #688]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8000fec:	6a1b      	ldr	r3, [r3, #32]
 8000fee:	2202      	movs	r2, #2
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	d0f0      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x3b6>
 8000ff4:	e013      	b.n	800101e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff6:	f7ff fb87 	bl	8000708 <HAL_GetTick>
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ffe:	e009      	b.n	8001014 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001000:	f7ff fb82 	bl	8000708 <HAL_GetTick>
 8001004:	0002      	movs	r2, r0
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	4aa5      	ldr	r2, [pc, #660]	; (80012a0 <HAL_RCC_OscConfig+0x680>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d901      	bls.n	8001014 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	e185      	b.n	8001320 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001014:	4ba1      	ldr	r3, [pc, #644]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	2202      	movs	r2, #2
 800101a:	4013      	ands	r3, r2
 800101c:	d1f0      	bne.n	8001000 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800101e:	231f      	movs	r3, #31
 8001020:	18fb      	adds	r3, r7, r3
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d105      	bne.n	8001034 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001028:	4b9c      	ldr	r3, [pc, #624]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 800102a:	69da      	ldr	r2, [r3, #28]
 800102c:	4b9b      	ldr	r3, [pc, #620]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 800102e:	499d      	ldr	r1, [pc, #628]	; (80012a4 <HAL_RCC_OscConfig+0x684>)
 8001030:	400a      	ands	r2, r1
 8001032:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2210      	movs	r2, #16
 800103a:	4013      	ands	r3, r2
 800103c:	d063      	beq.n	8001106 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d12a      	bne.n	800109c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001046:	4b95      	ldr	r3, [pc, #596]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8001048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800104a:	4b94      	ldr	r3, [pc, #592]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 800104c:	2104      	movs	r1, #4
 800104e:	430a      	orrs	r2, r1
 8001050:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001052:	4b92      	ldr	r3, [pc, #584]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8001054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001056:	4b91      	ldr	r3, [pc, #580]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8001058:	2101      	movs	r1, #1
 800105a:	430a      	orrs	r2, r1
 800105c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105e:	f7ff fb53 	bl	8000708 <HAL_GetTick>
 8001062:	0003      	movs	r3, r0
 8001064:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001066:	e008      	b.n	800107a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001068:	f7ff fb4e 	bl	8000708 <HAL_GetTick>
 800106c:	0002      	movs	r2, r0
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d901      	bls.n	800107a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e152      	b.n	8001320 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800107a:	4b88      	ldr	r3, [pc, #544]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 800107c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800107e:	2202      	movs	r2, #2
 8001080:	4013      	ands	r3, r2
 8001082:	d0f1      	beq.n	8001068 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001084:	4b85      	ldr	r3, [pc, #532]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8001086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001088:	22f8      	movs	r2, #248	; 0xf8
 800108a:	4393      	bics	r3, r2
 800108c:	0019      	movs	r1, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	00da      	lsls	r2, r3, #3
 8001094:	4b81      	ldr	r3, [pc, #516]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8001096:	430a      	orrs	r2, r1
 8001098:	635a      	str	r2, [r3, #52]	; 0x34
 800109a:	e034      	b.n	8001106 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	3305      	adds	r3, #5
 80010a2:	d111      	bne.n	80010c8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80010a4:	4b7d      	ldr	r3, [pc, #500]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 80010a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010a8:	4b7c      	ldr	r3, [pc, #496]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 80010aa:	2104      	movs	r1, #4
 80010ac:	438a      	bics	r2, r1
 80010ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010b0:	4b7a      	ldr	r3, [pc, #488]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 80010b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b4:	22f8      	movs	r2, #248	; 0xf8
 80010b6:	4393      	bics	r3, r2
 80010b8:	0019      	movs	r1, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	00da      	lsls	r2, r3, #3
 80010c0:	4b76      	ldr	r3, [pc, #472]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 80010c2:	430a      	orrs	r2, r1
 80010c4:	635a      	str	r2, [r3, #52]	; 0x34
 80010c6:	e01e      	b.n	8001106 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010c8:	4b74      	ldr	r3, [pc, #464]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 80010ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010cc:	4b73      	ldr	r3, [pc, #460]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 80010ce:	2104      	movs	r1, #4
 80010d0:	430a      	orrs	r2, r1
 80010d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80010d4:	4b71      	ldr	r3, [pc, #452]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 80010d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d8:	4b70      	ldr	r3, [pc, #448]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 80010da:	2101      	movs	r1, #1
 80010dc:	438a      	bics	r2, r1
 80010de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e0:	f7ff fb12 	bl	8000708 <HAL_GetTick>
 80010e4:	0003      	movs	r3, r0
 80010e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010ea:	f7ff fb0d 	bl	8000708 <HAL_GetTick>
 80010ee:	0002      	movs	r2, r0
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e111      	b.n	8001320 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010fc:	4b67      	ldr	r3, [pc, #412]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 80010fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001100:	2202      	movs	r2, #2
 8001102:	4013      	ands	r3, r2
 8001104:	d1f1      	bne.n	80010ea <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2220      	movs	r2, #32
 800110c:	4013      	ands	r3, r2
 800110e:	d05c      	beq.n	80011ca <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001110:	4b62      	ldr	r3, [pc, #392]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	220c      	movs	r2, #12
 8001116:	4013      	ands	r3, r2
 8001118:	2b0c      	cmp	r3, #12
 800111a:	d00e      	beq.n	800113a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800111c:	4b5f      	ldr	r3, [pc, #380]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	220c      	movs	r2, #12
 8001122:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001124:	2b08      	cmp	r3, #8
 8001126:	d114      	bne.n	8001152 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001128:	4b5c      	ldr	r3, [pc, #368]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	23c0      	movs	r3, #192	; 0xc0
 800112e:	025b      	lsls	r3, r3, #9
 8001130:	401a      	ands	r2, r3
 8001132:	23c0      	movs	r3, #192	; 0xc0
 8001134:	025b      	lsls	r3, r3, #9
 8001136:	429a      	cmp	r2, r3
 8001138:	d10b      	bne.n	8001152 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800113a:	4b58      	ldr	r3, [pc, #352]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 800113c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	029b      	lsls	r3, r3, #10
 8001142:	4013      	ands	r3, r2
 8001144:	d040      	beq.n	80011c8 <HAL_RCC_OscConfig+0x5a8>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d03c      	beq.n	80011c8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e0e6      	b.n	8001320 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d01b      	beq.n	8001192 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800115a:	4b50      	ldr	r3, [pc, #320]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 800115c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800115e:	4b4f      	ldr	r3, [pc, #316]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8001160:	2180      	movs	r1, #128	; 0x80
 8001162:	0249      	lsls	r1, r1, #9
 8001164:	430a      	orrs	r2, r1
 8001166:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff face 	bl	8000708 <HAL_GetTick>
 800116c:	0003      	movs	r3, r0
 800116e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001172:	f7ff fac9 	bl	8000708 <HAL_GetTick>
 8001176:	0002      	movs	r2, r0
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e0cd      	b.n	8001320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001184:	4b45      	ldr	r3, [pc, #276]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8001186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	029b      	lsls	r3, r3, #10
 800118c:	4013      	ands	r3, r2
 800118e:	d0f0      	beq.n	8001172 <HAL_RCC_OscConfig+0x552>
 8001190:	e01b      	b.n	80011ca <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001192:	4b42      	ldr	r3, [pc, #264]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8001194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001196:	4b41      	ldr	r3, [pc, #260]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8001198:	4943      	ldr	r1, [pc, #268]	; (80012a8 <HAL_RCC_OscConfig+0x688>)
 800119a:	400a      	ands	r2, r1
 800119c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119e:	f7ff fab3 	bl	8000708 <HAL_GetTick>
 80011a2:	0003      	movs	r3, r0
 80011a4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011a8:	f7ff faae 	bl	8000708 <HAL_GetTick>
 80011ac:	0002      	movs	r2, r0
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e0b2      	b.n	8001320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80011ba:	4b38      	ldr	r3, [pc, #224]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 80011bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	029b      	lsls	r3, r3, #10
 80011c2:	4013      	ands	r3, r2
 80011c4:	d1f0      	bne.n	80011a8 <HAL_RCC_OscConfig+0x588>
 80011c6:	e000      	b.n	80011ca <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80011c8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d100      	bne.n	80011d4 <HAL_RCC_OscConfig+0x5b4>
 80011d2:	e0a4      	b.n	800131e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011d4:	4b31      	ldr	r3, [pc, #196]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	220c      	movs	r2, #12
 80011da:	4013      	ands	r3, r2
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d100      	bne.n	80011e2 <HAL_RCC_OscConfig+0x5c2>
 80011e0:	e078      	b.n	80012d4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d14c      	bne.n	8001284 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ea:	4b2c      	ldr	r3, [pc, #176]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4b2b      	ldr	r3, [pc, #172]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 80011f0:	492e      	ldr	r1, [pc, #184]	; (80012ac <HAL_RCC_OscConfig+0x68c>)
 80011f2:	400a      	ands	r2, r1
 80011f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f6:	f7ff fa87 	bl	8000708 <HAL_GetTick>
 80011fa:	0003      	movs	r3, r0
 80011fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001200:	f7ff fa82 	bl	8000708 <HAL_GetTick>
 8001204:	0002      	movs	r2, r0
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e086      	b.n	8001320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001212:	4b22      	ldr	r3, [pc, #136]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	049b      	lsls	r3, r3, #18
 800121a:	4013      	ands	r3, r2
 800121c:	d1f0      	bne.n	8001200 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800121e:	4b1f      	ldr	r3, [pc, #124]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8001220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001222:	220f      	movs	r2, #15
 8001224:	4393      	bics	r3, r2
 8001226:	0019      	movs	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 800122e:	430a      	orrs	r2, r1
 8001230:	62da      	str	r2, [r3, #44]	; 0x2c
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4a1e      	ldr	r2, [pc, #120]	; (80012b0 <HAL_RCC_OscConfig+0x690>)
 8001238:	4013      	ands	r3, r2
 800123a:	0019      	movs	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001244:	431a      	orrs	r2, r3
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8001248:	430a      	orrs	r2, r1
 800124a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8001252:	2180      	movs	r1, #128	; 0x80
 8001254:	0449      	lsls	r1, r1, #17
 8001256:	430a      	orrs	r2, r1
 8001258:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125a:	f7ff fa55 	bl	8000708 <HAL_GetTick>
 800125e:	0003      	movs	r3, r0
 8001260:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001264:	f7ff fa50 	bl	8000708 <HAL_GetTick>
 8001268:	0002      	movs	r2, r0
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e054      	b.n	8001320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	049b      	lsls	r3, r3, #18
 800127e:	4013      	ands	r3, r2
 8001280:	d0f0      	beq.n	8001264 <HAL_RCC_OscConfig+0x644>
 8001282:	e04c      	b.n	800131e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 800128a:	4908      	ldr	r1, [pc, #32]	; (80012ac <HAL_RCC_OscConfig+0x68c>)
 800128c:	400a      	ands	r2, r1
 800128e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001290:	f7ff fa3a 	bl	8000708 <HAL_GetTick>
 8001294:	0003      	movs	r3, r0
 8001296:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001298:	e015      	b.n	80012c6 <HAL_RCC_OscConfig+0x6a6>
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	40021000 	.word	0x40021000
 80012a0:	00001388 	.word	0x00001388
 80012a4:	efffffff 	.word	0xefffffff
 80012a8:	fffeffff 	.word	0xfffeffff
 80012ac:	feffffff 	.word	0xfeffffff
 80012b0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b4:	f7ff fa28 	bl	8000708 <HAL_GetTick>
 80012b8:	0002      	movs	r2, r0
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e02c      	b.n	8001320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <HAL_RCC_OscConfig+0x708>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	049b      	lsls	r3, r3, #18
 80012ce:	4013      	ands	r3, r2
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x694>
 80012d2:	e024      	b.n	800131e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d101      	bne.n	80012e0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e01f      	b.n	8001320 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <HAL_RCC_OscConfig+0x708>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <HAL_RCC_OscConfig+0x708>)
 80012e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ea:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	23c0      	movs	r3, #192	; 0xc0
 80012f0:	025b      	lsls	r3, r3, #9
 80012f2:	401a      	ands	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d10e      	bne.n	800131a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	220f      	movs	r2, #15
 8001300:	401a      	ands	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001306:	429a      	cmp	r2, r3
 8001308:	d107      	bne.n	800131a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	23f0      	movs	r3, #240	; 0xf0
 800130e:	039b      	lsls	r3, r3, #14
 8001310:	401a      	ands	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001316:	429a      	cmp	r2, r3
 8001318:	d001      	beq.n	800131e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	0018      	movs	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	b008      	add	sp, #32
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40021000 	.word	0x40021000

0800132c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e0bf      	b.n	80014c0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001340:	4b61      	ldr	r3, [pc, #388]	; (80014c8 <HAL_RCC_ClockConfig+0x19c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2201      	movs	r2, #1
 8001346:	4013      	ands	r3, r2
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	429a      	cmp	r2, r3
 800134c:	d911      	bls.n	8001372 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134e:	4b5e      	ldr	r3, [pc, #376]	; (80014c8 <HAL_RCC_ClockConfig+0x19c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2201      	movs	r2, #1
 8001354:	4393      	bics	r3, r2
 8001356:	0019      	movs	r1, r3
 8001358:	4b5b      	ldr	r3, [pc, #364]	; (80014c8 <HAL_RCC_ClockConfig+0x19c>)
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	430a      	orrs	r2, r1
 800135e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001360:	4b59      	ldr	r3, [pc, #356]	; (80014c8 <HAL_RCC_ClockConfig+0x19c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2201      	movs	r2, #1
 8001366:	4013      	ands	r3, r2
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d001      	beq.n	8001372 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e0a6      	b.n	80014c0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2202      	movs	r2, #2
 8001378:	4013      	ands	r3, r2
 800137a:	d015      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2204      	movs	r2, #4
 8001382:	4013      	ands	r3, r2
 8001384:	d006      	beq.n	8001394 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001386:	4b51      	ldr	r3, [pc, #324]	; (80014cc <HAL_RCC_ClockConfig+0x1a0>)
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	4b50      	ldr	r3, [pc, #320]	; (80014cc <HAL_RCC_ClockConfig+0x1a0>)
 800138c:	21e0      	movs	r1, #224	; 0xe0
 800138e:	00c9      	lsls	r1, r1, #3
 8001390:	430a      	orrs	r2, r1
 8001392:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001394:	4b4d      	ldr	r3, [pc, #308]	; (80014cc <HAL_RCC_ClockConfig+0x1a0>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	22f0      	movs	r2, #240	; 0xf0
 800139a:	4393      	bics	r3, r2
 800139c:	0019      	movs	r1, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	4b4a      	ldr	r3, [pc, #296]	; (80014cc <HAL_RCC_ClockConfig+0x1a0>)
 80013a4:	430a      	orrs	r2, r1
 80013a6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2201      	movs	r2, #1
 80013ae:	4013      	ands	r3, r2
 80013b0:	d04c      	beq.n	800144c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d107      	bne.n	80013ca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ba:	4b44      	ldr	r3, [pc, #272]	; (80014cc <HAL_RCC_ClockConfig+0x1a0>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	2380      	movs	r3, #128	; 0x80
 80013c0:	029b      	lsls	r3, r3, #10
 80013c2:	4013      	ands	r3, r2
 80013c4:	d120      	bne.n	8001408 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e07a      	b.n	80014c0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d107      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d2:	4b3e      	ldr	r3, [pc, #248]	; (80014cc <HAL_RCC_ClockConfig+0x1a0>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	049b      	lsls	r3, r3, #18
 80013da:	4013      	ands	r3, r2
 80013dc:	d114      	bne.n	8001408 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e06e      	b.n	80014c0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d107      	bne.n	80013fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80013ea:	4b38      	ldr	r3, [pc, #224]	; (80014cc <HAL_RCC_ClockConfig+0x1a0>)
 80013ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	029b      	lsls	r3, r3, #10
 80013f2:	4013      	ands	r3, r2
 80013f4:	d108      	bne.n	8001408 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e062      	b.n	80014c0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fa:	4b34      	ldr	r3, [pc, #208]	; (80014cc <HAL_RCC_ClockConfig+0x1a0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2202      	movs	r2, #2
 8001400:	4013      	ands	r3, r2
 8001402:	d101      	bne.n	8001408 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e05b      	b.n	80014c0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001408:	4b30      	ldr	r3, [pc, #192]	; (80014cc <HAL_RCC_ClockConfig+0x1a0>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2203      	movs	r2, #3
 800140e:	4393      	bics	r3, r2
 8001410:	0019      	movs	r1, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <HAL_RCC_ClockConfig+0x1a0>)
 8001418:	430a      	orrs	r2, r1
 800141a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800141c:	f7ff f974 	bl	8000708 <HAL_GetTick>
 8001420:	0003      	movs	r3, r0
 8001422:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001424:	e009      	b.n	800143a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001426:	f7ff f96f 	bl	8000708 <HAL_GetTick>
 800142a:	0002      	movs	r2, r0
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	4a27      	ldr	r2, [pc, #156]	; (80014d0 <HAL_RCC_ClockConfig+0x1a4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d901      	bls.n	800143a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e042      	b.n	80014c0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800143a:	4b24      	ldr	r3, [pc, #144]	; (80014cc <HAL_RCC_ClockConfig+0x1a0>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	220c      	movs	r2, #12
 8001440:	401a      	ands	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	429a      	cmp	r2, r3
 800144a:	d1ec      	bne.n	8001426 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <HAL_RCC_ClockConfig+0x19c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2201      	movs	r2, #1
 8001452:	4013      	ands	r3, r2
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	429a      	cmp	r2, r3
 8001458:	d211      	bcs.n	800147e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145a:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <HAL_RCC_ClockConfig+0x19c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2201      	movs	r2, #1
 8001460:	4393      	bics	r3, r2
 8001462:	0019      	movs	r1, r3
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_RCC_ClockConfig+0x19c>)
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	430a      	orrs	r2, r1
 800146a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <HAL_RCC_ClockConfig+0x19c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2201      	movs	r2, #1
 8001472:	4013      	ands	r3, r2
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	d001      	beq.n	800147e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e020      	b.n	80014c0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2204      	movs	r2, #4
 8001484:	4013      	ands	r3, r2
 8001486:	d009      	beq.n	800149c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <HAL_RCC_ClockConfig+0x1a0>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	4a11      	ldr	r2, [pc, #68]	; (80014d4 <HAL_RCC_ClockConfig+0x1a8>)
 800148e:	4013      	ands	r3, r2
 8001490:	0019      	movs	r1, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <HAL_RCC_ClockConfig+0x1a0>)
 8001498:	430a      	orrs	r2, r1
 800149a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800149c:	f000 f820 	bl	80014e0 <HAL_RCC_GetSysClockFreq>
 80014a0:	0001      	movs	r1, r0
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_RCC_ClockConfig+0x1a0>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	091b      	lsrs	r3, r3, #4
 80014a8:	220f      	movs	r2, #15
 80014aa:	4013      	ands	r3, r2
 80014ac:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <HAL_RCC_ClockConfig+0x1ac>)
 80014ae:	5cd3      	ldrb	r3, [r2, r3]
 80014b0:	000a      	movs	r2, r1
 80014b2:	40da      	lsrs	r2, r3
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_RCC_ClockConfig+0x1b0>)
 80014b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80014b8:	2000      	movs	r0, #0
 80014ba:	f7ff f8f1 	bl	80006a0 <HAL_InitTick>
  
  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	0018      	movs	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b004      	add	sp, #16
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40022000 	.word	0x40022000
 80014cc:	40021000 	.word	0x40021000
 80014d0:	00001388 	.word	0x00001388
 80014d4:	fffff8ff 	.word	0xfffff8ff
 80014d8:	08004a0c 	.word	0x08004a0c
 80014dc:	20000000 	.word	0x20000000

080014e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80014fa:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	220c      	movs	r2, #12
 8001504:	4013      	ands	r3, r2
 8001506:	2b0c      	cmp	r3, #12
 8001508:	d046      	beq.n	8001598 <HAL_RCC_GetSysClockFreq+0xb8>
 800150a:	d848      	bhi.n	800159e <HAL_RCC_GetSysClockFreq+0xbe>
 800150c:	2b04      	cmp	r3, #4
 800150e:	d002      	beq.n	8001516 <HAL_RCC_GetSysClockFreq+0x36>
 8001510:	2b08      	cmp	r3, #8
 8001512:	d003      	beq.n	800151c <HAL_RCC_GetSysClockFreq+0x3c>
 8001514:	e043      	b.n	800159e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001516:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001518:	613b      	str	r3, [r7, #16]
      break;
 800151a:	e043      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	0c9b      	lsrs	r3, r3, #18
 8001520:	220f      	movs	r2, #15
 8001522:	4013      	ands	r3, r2
 8001524:	4a24      	ldr	r2, [pc, #144]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001526:	5cd3      	ldrb	r3, [r2, r3]
 8001528:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	220f      	movs	r2, #15
 8001530:	4013      	ands	r3, r2
 8001532:	4a22      	ldr	r2, [pc, #136]	; (80015bc <HAL_RCC_GetSysClockFreq+0xdc>)
 8001534:	5cd3      	ldrb	r3, [r2, r3]
 8001536:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	23c0      	movs	r3, #192	; 0xc0
 800153c:	025b      	lsls	r3, r3, #9
 800153e:	401a      	ands	r2, r3
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	025b      	lsls	r3, r3, #9
 8001544:	429a      	cmp	r2, r3
 8001546:	d109      	bne.n	800155c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001548:	68b9      	ldr	r1, [r7, #8]
 800154a:	481a      	ldr	r0, [pc, #104]	; (80015b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800154c:	f7fe fde6 	bl	800011c <__udivsi3>
 8001550:	0003      	movs	r3, r0
 8001552:	001a      	movs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4353      	muls	r3, r2
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	e01a      	b.n	8001592 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	23c0      	movs	r3, #192	; 0xc0
 8001560:	025b      	lsls	r3, r3, #9
 8001562:	401a      	ands	r2, r3
 8001564:	23c0      	movs	r3, #192	; 0xc0
 8001566:	025b      	lsls	r3, r3, #9
 8001568:	429a      	cmp	r2, r3
 800156a:	d109      	bne.n	8001580 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	4814      	ldr	r0, [pc, #80]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001570:	f7fe fdd4 	bl	800011c <__udivsi3>
 8001574:	0003      	movs	r3, r0
 8001576:	001a      	movs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4353      	muls	r3, r2
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	e008      	b.n	8001592 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	480c      	ldr	r0, [pc, #48]	; (80015b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001584:	f7fe fdca 	bl	800011c <__udivsi3>
 8001588:	0003      	movs	r3, r0
 800158a:	001a      	movs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4353      	muls	r3, r2
 8001590:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	613b      	str	r3, [r7, #16]
      break;
 8001596:	e005      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xe0>)
 800159a:	613b      	str	r3, [r7, #16]
      break;
 800159c:	e002      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80015a0:	613b      	str	r3, [r7, #16]
      break;
 80015a2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015a4:	693b      	ldr	r3, [r7, #16]
}
 80015a6:	0018      	movs	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b006      	add	sp, #24
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	40021000 	.word	0x40021000
 80015b4:	007a1200 	.word	0x007a1200
 80015b8:	08004a24 	.word	0x08004a24
 80015bc:	08004a34 	.word	0x08004a34
 80015c0:	02dc6c00 	.word	0x02dc6c00

080015c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015c8:	4b02      	ldr	r3, [pc, #8]	; (80015d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80015ca:	681b      	ldr	r3, [r3, #0]
}
 80015cc:	0018      	movs	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	20000000 	.word	0x20000000

080015d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80015dc:	f7ff fff2 	bl	80015c4 <HAL_RCC_GetHCLKFreq>
 80015e0:	0001      	movs	r1, r0
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	0a1b      	lsrs	r3, r3, #8
 80015e8:	2207      	movs	r2, #7
 80015ea:	4013      	ands	r3, r2
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <HAL_RCC_GetPCLK1Freq+0x28>)
 80015ee:	5cd3      	ldrb	r3, [r2, r3]
 80015f0:	40d9      	lsrs	r1, r3
 80015f2:	000b      	movs	r3, r1
}    
 80015f4:	0018      	movs	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	40021000 	.word	0x40021000
 8001600:	08004a1c 	.word	0x08004a1c

08001604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	025b      	lsls	r3, r3, #9
 800161c:	4013      	ands	r3, r2
 800161e:	d100      	bne.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001620:	e08e      	b.n	8001740 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001622:	2017      	movs	r0, #23
 8001624:	183b      	adds	r3, r7, r0
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800162a:	4b6e      	ldr	r3, [pc, #440]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800162c:	69da      	ldr	r2, [r3, #28]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	055b      	lsls	r3, r3, #21
 8001632:	4013      	ands	r3, r2
 8001634:	d110      	bne.n	8001658 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	4b6b      	ldr	r3, [pc, #428]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001638:	69da      	ldr	r2, [r3, #28]
 800163a:	4b6a      	ldr	r3, [pc, #424]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800163c:	2180      	movs	r1, #128	; 0x80
 800163e:	0549      	lsls	r1, r1, #21
 8001640:	430a      	orrs	r2, r1
 8001642:	61da      	str	r2, [r3, #28]
 8001644:	4b67      	ldr	r3, [pc, #412]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001646:	69da      	ldr	r2, [r3, #28]
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	055b      	lsls	r3, r3, #21
 800164c:	4013      	ands	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001652:	183b      	adds	r3, r7, r0
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001658:	4b63      	ldr	r3, [pc, #396]	; (80017e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4013      	ands	r3, r2
 8001662:	d11a      	bne.n	800169a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001664:	4b60      	ldr	r3, [pc, #384]	; (80017e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b5f      	ldr	r3, [pc, #380]	; (80017e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800166a:	2180      	movs	r1, #128	; 0x80
 800166c:	0049      	lsls	r1, r1, #1
 800166e:	430a      	orrs	r2, r1
 8001670:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001672:	f7ff f849 	bl	8000708 <HAL_GetTick>
 8001676:	0003      	movs	r3, r0
 8001678:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167a:	e008      	b.n	800168e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167c:	f7ff f844 	bl	8000708 <HAL_GetTick>
 8001680:	0002      	movs	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	; 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e0a6      	b.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168e:	4b56      	ldr	r3, [pc, #344]	; (80017e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4013      	ands	r3, r2
 8001698:	d0f0      	beq.n	800167c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800169a:	4b52      	ldr	r3, [pc, #328]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800169c:	6a1a      	ldr	r2, [r3, #32]
 800169e:	23c0      	movs	r3, #192	; 0xc0
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4013      	ands	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d034      	beq.n	8001716 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	23c0      	movs	r3, #192	; 0xc0
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4013      	ands	r3, r2
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d02c      	beq.n	8001716 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016bc:	4b49      	ldr	r3, [pc, #292]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	4a4a      	ldr	r2, [pc, #296]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016c6:	4b47      	ldr	r3, [pc, #284]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016c8:	6a1a      	ldr	r2, [r3, #32]
 80016ca:	4b46      	ldr	r3, [pc, #280]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016cc:	2180      	movs	r1, #128	; 0x80
 80016ce:	0249      	lsls	r1, r1, #9
 80016d0:	430a      	orrs	r2, r1
 80016d2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016d4:	4b43      	ldr	r3, [pc, #268]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016d6:	6a1a      	ldr	r2, [r3, #32]
 80016d8:	4b42      	ldr	r3, [pc, #264]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016da:	4945      	ldr	r1, [pc, #276]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80016dc:	400a      	ands	r2, r1
 80016de:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80016e0:	4b40      	ldr	r3, [pc, #256]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2201      	movs	r2, #1
 80016ea:	4013      	ands	r3, r2
 80016ec:	d013      	beq.n	8001716 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff f80b 	bl	8000708 <HAL_GetTick>
 80016f2:	0003      	movs	r3, r0
 80016f4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f6:	e009      	b.n	800170c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f8:	f7ff f806 	bl	8000708 <HAL_GetTick>
 80016fc:	0002      	movs	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	4a3c      	ldr	r2, [pc, #240]	; (80017f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d901      	bls.n	800170c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e067      	b.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170c:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	2202      	movs	r2, #2
 8001712:	4013      	ands	r3, r2
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001716:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4a34      	ldr	r2, [pc, #208]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800171c:	4013      	ands	r3, r2
 800171e:	0019      	movs	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	4b2f      	ldr	r3, [pc, #188]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001726:	430a      	orrs	r2, r1
 8001728:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800172a:	2317      	movs	r3, #23
 800172c:	18fb      	adds	r3, r7, r3
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d105      	bne.n	8001740 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001734:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001736:	69da      	ldr	r2, [r3, #28]
 8001738:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800173a:	492f      	ldr	r1, [pc, #188]	; (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800173c:	400a      	ands	r2, r1
 800173e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2201      	movs	r2, #1
 8001746:	4013      	ands	r3, r2
 8001748:	d009      	beq.n	800175e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800174a:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	2203      	movs	r2, #3
 8001750:	4393      	bics	r3, r2
 8001752:	0019      	movs	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800175a:	430a      	orrs	r2, r1
 800175c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2202      	movs	r2, #2
 8001764:	4013      	ands	r3, r2
 8001766:	d009      	beq.n	800177c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001768:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	4a23      	ldr	r2, [pc, #140]	; (80017fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800176e:	4013      	ands	r3, r2
 8001770:	0019      	movs	r1, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001778:	430a      	orrs	r2, r1
 800177a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2220      	movs	r2, #32
 8001782:	4013      	ands	r3, r2
 8001784:	d009      	beq.n	800179a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	2210      	movs	r2, #16
 800178c:	4393      	bics	r3, r2
 800178e:	0019      	movs	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691a      	ldr	r2, [r3, #16]
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001796:	430a      	orrs	r2, r1
 8001798:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	029b      	lsls	r3, r3, #10
 80017a2:	4013      	ands	r3, r2
 80017a4:	d009      	beq.n	80017ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	2280      	movs	r2, #128	; 0x80
 80017ac:	4393      	bics	r3, r2
 80017ae:	0019      	movs	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699a      	ldr	r2, [r3, #24]
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017b6:	430a      	orrs	r2, r1
 80017b8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	4013      	ands	r3, r2
 80017c4:	d009      	beq.n	80017da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	2240      	movs	r2, #64	; 0x40
 80017cc:	4393      	bics	r3, r2
 80017ce:	0019      	movs	r1, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	695a      	ldr	r2, [r3, #20]
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017d6:	430a      	orrs	r2, r1
 80017d8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	0018      	movs	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	b006      	add	sp, #24
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40007000 	.word	0x40007000
 80017ec:	fffffcff 	.word	0xfffffcff
 80017f0:	fffeffff 	.word	0xfffeffff
 80017f4:	00001388 	.word	0x00001388
 80017f8:	efffffff 	.word	0xefffffff
 80017fc:	fffcffff 	.word	0xfffcffff

08001800 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e044      	b.n	800189c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001816:	2b00      	cmp	r3, #0
 8001818:	d107      	bne.n	800182a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2278      	movs	r2, #120	; 0x78
 800181e:	2100      	movs	r1, #0
 8001820:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	0018      	movs	r0, r3
 8001826:	f7fe fe6f 	bl	8000508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2224      	movs	r2, #36	; 0x24
 800182e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2101      	movs	r1, #1
 800183c:	438a      	bics	r2, r1
 800183e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	0018      	movs	r0, r3
 800184c:	f000 fa54 	bl	8001cf8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	0018      	movs	r0, r3
 8001854:	f000 f8c8 	bl	80019e8 <UART_SetConfig>
 8001858:	0003      	movs	r3, r0
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e01c      	b.n	800189c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	490d      	ldr	r1, [pc, #52]	; (80018a4 <HAL_UART_Init+0xa4>)
 800186e:	400a      	ands	r2, r1
 8001870:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	212a      	movs	r1, #42	; 0x2a
 800187e:	438a      	bics	r2, r1
 8001880:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2101      	movs	r1, #1
 800188e:	430a      	orrs	r2, r1
 8001890:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	0018      	movs	r0, r3
 8001896:	f000 fae3 	bl	8001e60 <UART_CheckIdleState>
 800189a:	0003      	movs	r3, r0
}
 800189c:	0018      	movs	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	b002      	add	sp, #8
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	ffffb7ff 	.word	0xffffb7ff

080018a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	1dbb      	adds	r3, r7, #6
 80018b6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80018bc:	2b20      	cmp	r3, #32
 80018be:	d000      	beq.n	80018c2 <HAL_UART_Transmit+0x1a>
 80018c0:	e08d      	b.n	80019de <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_UART_Transmit+0x28>
 80018c8:	1dbb      	adds	r3, r7, #6
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e085      	b.n	80019e0 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	015b      	lsls	r3, r3, #5
 80018dc:	429a      	cmp	r2, r3
 80018de:	d109      	bne.n	80018f4 <HAL_UART_Transmit+0x4c>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d105      	bne.n	80018f4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2201      	movs	r2, #1
 80018ec:	4013      	ands	r3, r2
 80018ee:	d001      	beq.n	80018f4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e075      	b.n	80019e0 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2284      	movs	r2, #132	; 0x84
 80018f8:	2100      	movs	r1, #0
 80018fa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2221      	movs	r2, #33	; 0x21
 8001900:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001902:	f7fe ff01 	bl	8000708 <HAL_GetTick>
 8001906:	0003      	movs	r3, r0
 8001908:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1dba      	adds	r2, r7, #6
 800190e:	2150      	movs	r1, #80	; 0x50
 8001910:	8812      	ldrh	r2, [r2, #0]
 8001912:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1dba      	adds	r2, r7, #6
 8001918:	2152      	movs	r1, #82	; 0x52
 800191a:	8812      	ldrh	r2, [r2, #0]
 800191c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	015b      	lsls	r3, r3, #5
 8001926:	429a      	cmp	r2, r3
 8001928:	d108      	bne.n	800193c <HAL_UART_Transmit+0x94>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d104      	bne.n	800193c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	e003      	b.n	8001944 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001940:	2300      	movs	r3, #0
 8001942:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001944:	e030      	b.n	80019a8 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	0013      	movs	r3, r2
 8001950:	2200      	movs	r2, #0
 8001952:	2180      	movs	r1, #128	; 0x80
 8001954:	f000 fb2c 	bl	8001fb0 <UART_WaitOnFlagUntilTimeout>
 8001958:	1e03      	subs	r3, r0, #0
 800195a:	d004      	beq.n	8001966 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2220      	movs	r2, #32
 8001960:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e03c      	b.n	80019e0 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10b      	bne.n	8001984 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	881a      	ldrh	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	05d2      	lsls	r2, r2, #23
 8001976:	0dd2      	lsrs	r2, r2, #23
 8001978:	b292      	uxth	r2, r2
 800197a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	3302      	adds	r3, #2
 8001980:	61bb      	str	r3, [r7, #24]
 8001982:	e008      	b.n	8001996 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	781a      	ldrb	r2, [r3, #0]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	b292      	uxth	r2, r2
 800198e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	3301      	adds	r3, #1
 8001994:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2252      	movs	r2, #82	; 0x52
 800199a:	5a9b      	ldrh	r3, [r3, r2]
 800199c:	b29b      	uxth	r3, r3
 800199e:	3b01      	subs	r3, #1
 80019a0:	b299      	uxth	r1, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2252      	movs	r2, #82	; 0x52
 80019a6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2252      	movs	r2, #82	; 0x52
 80019ac:	5a9b      	ldrh	r3, [r3, r2]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1c8      	bne.n	8001946 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	0013      	movs	r3, r2
 80019be:	2200      	movs	r2, #0
 80019c0:	2140      	movs	r1, #64	; 0x40
 80019c2:	f000 faf5 	bl	8001fb0 <UART_WaitOnFlagUntilTimeout>
 80019c6:	1e03      	subs	r3, r0, #0
 80019c8:	d004      	beq.n	80019d4 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2220      	movs	r2, #32
 80019ce:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e005      	b.n	80019e0 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2220      	movs	r2, #32
 80019d8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	e000      	b.n	80019e0 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80019de:	2302      	movs	r3, #2
  }
}
 80019e0:	0018      	movs	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b008      	add	sp, #32
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80019f0:	231e      	movs	r3, #30
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4aaf      	ldr	r2, [pc, #700]	; (8001cd4 <UART_SetConfig+0x2ec>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	4aaa      	ldr	r2, [pc, #680]	; (8001cd8 <UART_SetConfig+0x2f0>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	0019      	movs	r1, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	4aa1      	ldr	r2, [pc, #644]	; (8001cdc <UART_SetConfig+0x2f4>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	0019      	movs	r1, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a9d      	ldr	r2, [pc, #628]	; (8001ce0 <UART_SetConfig+0x2f8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d127      	bne.n	8001abe <UART_SetConfig+0xd6>
 8001a6e:	4b9d      	ldr	r3, [pc, #628]	; (8001ce4 <UART_SetConfig+0x2fc>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	2203      	movs	r2, #3
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d00d      	beq.n	8001a96 <UART_SetConfig+0xae>
 8001a7a:	d81b      	bhi.n	8001ab4 <UART_SetConfig+0xcc>
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d014      	beq.n	8001aaa <UART_SetConfig+0xc2>
 8001a80:	d818      	bhi.n	8001ab4 <UART_SetConfig+0xcc>
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <UART_SetConfig+0xa4>
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d00a      	beq.n	8001aa0 <UART_SetConfig+0xb8>
 8001a8a:	e013      	b.n	8001ab4 <UART_SetConfig+0xcc>
 8001a8c:	231f      	movs	r3, #31
 8001a8e:	18fb      	adds	r3, r7, r3
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
 8001a94:	e065      	b.n	8001b62 <UART_SetConfig+0x17a>
 8001a96:	231f      	movs	r3, #31
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	701a      	strb	r2, [r3, #0]
 8001a9e:	e060      	b.n	8001b62 <UART_SetConfig+0x17a>
 8001aa0:	231f      	movs	r3, #31
 8001aa2:	18fb      	adds	r3, r7, r3
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	701a      	strb	r2, [r3, #0]
 8001aa8:	e05b      	b.n	8001b62 <UART_SetConfig+0x17a>
 8001aaa:	231f      	movs	r3, #31
 8001aac:	18fb      	adds	r3, r7, r3
 8001aae:	2208      	movs	r2, #8
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	e056      	b.n	8001b62 <UART_SetConfig+0x17a>
 8001ab4:	231f      	movs	r3, #31
 8001ab6:	18fb      	adds	r3, r7, r3
 8001ab8:	2210      	movs	r2, #16
 8001aba:	701a      	strb	r2, [r3, #0]
 8001abc:	e051      	b.n	8001b62 <UART_SetConfig+0x17a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a89      	ldr	r2, [pc, #548]	; (8001ce8 <UART_SetConfig+0x300>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d134      	bne.n	8001b32 <UART_SetConfig+0x14a>
 8001ac8:	4b86      	ldr	r3, [pc, #536]	; (8001ce4 <UART_SetConfig+0x2fc>)
 8001aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001acc:	23c0      	movs	r3, #192	; 0xc0
 8001ace:	029b      	lsls	r3, r3, #10
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	22c0      	movs	r2, #192	; 0xc0
 8001ad4:	0292      	lsls	r2, r2, #10
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d017      	beq.n	8001b0a <UART_SetConfig+0x122>
 8001ada:	22c0      	movs	r2, #192	; 0xc0
 8001adc:	0292      	lsls	r2, r2, #10
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d822      	bhi.n	8001b28 <UART_SetConfig+0x140>
 8001ae2:	2280      	movs	r2, #128	; 0x80
 8001ae4:	0292      	lsls	r2, r2, #10
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d019      	beq.n	8001b1e <UART_SetConfig+0x136>
 8001aea:	2280      	movs	r2, #128	; 0x80
 8001aec:	0292      	lsls	r2, r2, #10
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d81a      	bhi.n	8001b28 <UART_SetConfig+0x140>
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d004      	beq.n	8001b00 <UART_SetConfig+0x118>
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	0252      	lsls	r2, r2, #9
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d00a      	beq.n	8001b14 <UART_SetConfig+0x12c>
 8001afe:	e013      	b.n	8001b28 <UART_SetConfig+0x140>
 8001b00:	231f      	movs	r3, #31
 8001b02:	18fb      	adds	r3, r7, r3
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
 8001b08:	e02b      	b.n	8001b62 <UART_SetConfig+0x17a>
 8001b0a:	231f      	movs	r3, #31
 8001b0c:	18fb      	adds	r3, r7, r3
 8001b0e:	2202      	movs	r2, #2
 8001b10:	701a      	strb	r2, [r3, #0]
 8001b12:	e026      	b.n	8001b62 <UART_SetConfig+0x17a>
 8001b14:	231f      	movs	r3, #31
 8001b16:	18fb      	adds	r3, r7, r3
 8001b18:	2204      	movs	r2, #4
 8001b1a:	701a      	strb	r2, [r3, #0]
 8001b1c:	e021      	b.n	8001b62 <UART_SetConfig+0x17a>
 8001b1e:	231f      	movs	r3, #31
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	2208      	movs	r2, #8
 8001b24:	701a      	strb	r2, [r3, #0]
 8001b26:	e01c      	b.n	8001b62 <UART_SetConfig+0x17a>
 8001b28:	231f      	movs	r3, #31
 8001b2a:	18fb      	adds	r3, r7, r3
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	701a      	strb	r2, [r3, #0]
 8001b30:	e017      	b.n	8001b62 <UART_SetConfig+0x17a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a6d      	ldr	r2, [pc, #436]	; (8001cec <UART_SetConfig+0x304>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d104      	bne.n	8001b46 <UART_SetConfig+0x15e>
 8001b3c:	231f      	movs	r3, #31
 8001b3e:	18fb      	adds	r3, r7, r3
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
 8001b44:	e00d      	b.n	8001b62 <UART_SetConfig+0x17a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a69      	ldr	r2, [pc, #420]	; (8001cf0 <UART_SetConfig+0x308>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d104      	bne.n	8001b5a <UART_SetConfig+0x172>
 8001b50:	231f      	movs	r3, #31
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	e003      	b.n	8001b62 <UART_SetConfig+0x17a>
 8001b5a:	231f      	movs	r3, #31
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	2210      	movs	r2, #16
 8001b60:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69da      	ldr	r2, [r3, #28]
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d15c      	bne.n	8001c28 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8001b6e:	231f      	movs	r3, #31
 8001b70:	18fb      	adds	r3, r7, r3
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d015      	beq.n	8001ba4 <UART_SetConfig+0x1bc>
 8001b78:	dc18      	bgt.n	8001bac <UART_SetConfig+0x1c4>
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d00d      	beq.n	8001b9a <UART_SetConfig+0x1b2>
 8001b7e:	dc15      	bgt.n	8001bac <UART_SetConfig+0x1c4>
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <UART_SetConfig+0x1a2>
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d005      	beq.n	8001b94 <UART_SetConfig+0x1ac>
 8001b88:	e010      	b.n	8001bac <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001b8a:	f7ff fd25 	bl	80015d8 <HAL_RCC_GetPCLK1Freq>
 8001b8e:	0003      	movs	r3, r0
 8001b90:	61bb      	str	r3, [r7, #24]
        break;
 8001b92:	e012      	b.n	8001bba <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001b94:	4b57      	ldr	r3, [pc, #348]	; (8001cf4 <UART_SetConfig+0x30c>)
 8001b96:	61bb      	str	r3, [r7, #24]
        break;
 8001b98:	e00f      	b.n	8001bba <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001b9a:	f7ff fca1 	bl	80014e0 <HAL_RCC_GetSysClockFreq>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	61bb      	str	r3, [r7, #24]
        break;
 8001ba2:	e00a      	b.n	8001bba <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	021b      	lsls	r3, r3, #8
 8001ba8:	61bb      	str	r3, [r7, #24]
        break;
 8001baa:	e006      	b.n	8001bba <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001bb0:	231e      	movs	r3, #30
 8001bb2:	18fb      	adds	r3, r7, r3
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]
        break;
 8001bb8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d100      	bne.n	8001bc2 <UART_SetConfig+0x1da>
 8001bc0:	e07a      	b.n	8001cb8 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	005a      	lsls	r2, r3, #1
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	085b      	lsrs	r3, r3, #1
 8001bcc:	18d2      	adds	r2, r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	0010      	movs	r0, r2
 8001bd6:	f7fe faa1 	bl	800011c <__udivsi3>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	2b0f      	cmp	r3, #15
 8001be2:	d91c      	bls.n	8001c1e <UART_SetConfig+0x236>
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	025b      	lsls	r3, r3, #9
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d217      	bcs.n	8001c1e <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	200e      	movs	r0, #14
 8001bf4:	183b      	adds	r3, r7, r0
 8001bf6:	210f      	movs	r1, #15
 8001bf8:	438a      	bics	r2, r1
 8001bfa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	085b      	lsrs	r3, r3, #1
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	2207      	movs	r2, #7
 8001c04:	4013      	ands	r3, r2
 8001c06:	b299      	uxth	r1, r3
 8001c08:	183b      	adds	r3, r7, r0
 8001c0a:	183a      	adds	r2, r7, r0
 8001c0c:	8812      	ldrh	r2, [r2, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	183a      	adds	r2, r7, r0
 8001c18:	8812      	ldrh	r2, [r2, #0]
 8001c1a:	60da      	str	r2, [r3, #12]
 8001c1c:	e04c      	b.n	8001cb8 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8001c1e:	231e      	movs	r3, #30
 8001c20:	18fb      	adds	r3, r7, r3
 8001c22:	2201      	movs	r2, #1
 8001c24:	701a      	strb	r2, [r3, #0]
 8001c26:	e047      	b.n	8001cb8 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001c28:	231f      	movs	r3, #31
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d015      	beq.n	8001c5e <UART_SetConfig+0x276>
 8001c32:	dc18      	bgt.n	8001c66 <UART_SetConfig+0x27e>
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d00d      	beq.n	8001c54 <UART_SetConfig+0x26c>
 8001c38:	dc15      	bgt.n	8001c66 <UART_SetConfig+0x27e>
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <UART_SetConfig+0x25c>
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d005      	beq.n	8001c4e <UART_SetConfig+0x266>
 8001c42:	e010      	b.n	8001c66 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001c44:	f7ff fcc8 	bl	80015d8 <HAL_RCC_GetPCLK1Freq>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	61bb      	str	r3, [r7, #24]
        break;
 8001c4c:	e012      	b.n	8001c74 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001c4e:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <UART_SetConfig+0x30c>)
 8001c50:	61bb      	str	r3, [r7, #24]
        break;
 8001c52:	e00f      	b.n	8001c74 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001c54:	f7ff fc44 	bl	80014e0 <HAL_RCC_GetSysClockFreq>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	61bb      	str	r3, [r7, #24]
        break;
 8001c5c:	e00a      	b.n	8001c74 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	61bb      	str	r3, [r7, #24]
        break;
 8001c64:	e006      	b.n	8001c74 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001c6a:	231e      	movs	r3, #30
 8001c6c:	18fb      	adds	r3, r7, r3
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
        break;
 8001c72:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d01e      	beq.n	8001cb8 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	085a      	lsrs	r2, r3, #1
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	18d2      	adds	r2, r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	0019      	movs	r1, r3
 8001c8a:	0010      	movs	r0, r2
 8001c8c:	f7fe fa46 	bl	800011c <__udivsi3>
 8001c90:	0003      	movs	r3, r0
 8001c92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	2b0f      	cmp	r3, #15
 8001c98:	d90a      	bls.n	8001cb0 <UART_SetConfig+0x2c8>
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	025b      	lsls	r3, r3, #9
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d205      	bcs.n	8001cb0 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	e003      	b.n	8001cb8 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8001cb0:	231e      	movs	r3, #30
 8001cb2:	18fb      	adds	r3, r7, r3
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8001cc4:	231e      	movs	r3, #30
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	781b      	ldrb	r3, [r3, #0]
}
 8001cca:	0018      	movs	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b008      	add	sp, #32
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	efff69f3 	.word	0xefff69f3
 8001cd8:	ffffcfff 	.word	0xffffcfff
 8001cdc:	fffff4ff 	.word	0xfffff4ff
 8001ce0:	40013800 	.word	0x40013800
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40004400 	.word	0x40004400
 8001cec:	40004800 	.word	0x40004800
 8001cf0:	40004c00 	.word	0x40004c00
 8001cf4:	007a1200 	.word	0x007a1200

08001cf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	2208      	movs	r2, #8
 8001d06:	4013      	ands	r3, r2
 8001d08:	d00b      	beq.n	8001d22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4a4a      	ldr	r2, [pc, #296]	; (8001e3c <UART_AdvFeatureConfig+0x144>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	0019      	movs	r1, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	2201      	movs	r2, #1
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d00b      	beq.n	8001d44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4a43      	ldr	r2, [pc, #268]	; (8001e40 <UART_AdvFeatureConfig+0x148>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	0019      	movs	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	2202      	movs	r2, #2
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d00b      	beq.n	8001d66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	4a3b      	ldr	r2, [pc, #236]	; (8001e44 <UART_AdvFeatureConfig+0x14c>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	0019      	movs	r1, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d00b      	beq.n	8001d88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	4a34      	ldr	r2, [pc, #208]	; (8001e48 <UART_AdvFeatureConfig+0x150>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	2210      	movs	r2, #16
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d00b      	beq.n	8001daa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4a2c      	ldr	r2, [pc, #176]	; (8001e4c <UART_AdvFeatureConfig+0x154>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	2220      	movs	r2, #32
 8001db0:	4013      	ands	r3, r2
 8001db2:	d00b      	beq.n	8001dcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	4a25      	ldr	r2, [pc, #148]	; (8001e50 <UART_AdvFeatureConfig+0x158>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	2240      	movs	r2, #64	; 0x40
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d01d      	beq.n	8001e12 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4a1d      	ldr	r2, [pc, #116]	; (8001e54 <UART_AdvFeatureConfig+0x15c>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	0019      	movs	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	035b      	lsls	r3, r3, #13
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d10b      	bne.n	8001e12 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	4a15      	ldr	r2, [pc, #84]	; (8001e58 <UART_AdvFeatureConfig+0x160>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	0019      	movs	r1, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d00b      	beq.n	8001e34 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	4a0e      	ldr	r2, [pc, #56]	; (8001e5c <UART_AdvFeatureConfig+0x164>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	0019      	movs	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	605a      	str	r2, [r3, #4]
  }
}
 8001e34:	46c0      	nop			; (mov r8, r8)
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b002      	add	sp, #8
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	ffff7fff 	.word	0xffff7fff
 8001e40:	fffdffff 	.word	0xfffdffff
 8001e44:	fffeffff 	.word	0xfffeffff
 8001e48:	fffbffff 	.word	0xfffbffff
 8001e4c:	ffffefff 	.word	0xffffefff
 8001e50:	ffffdfff 	.word	0xffffdfff
 8001e54:	ffefffff 	.word	0xffefffff
 8001e58:	ff9fffff 	.word	0xff9fffff
 8001e5c:	fff7ffff 	.word	0xfff7ffff

08001e60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b092      	sub	sp, #72	; 0x48
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2284      	movs	r2, #132	; 0x84
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001e70:	f7fe fc4a 	bl	8000708 <HAL_GetTick>
 8001e74:	0003      	movs	r3, r0
 8001e76:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2208      	movs	r2, #8
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d12c      	bne.n	8001ee0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	0391      	lsls	r1, r2, #14
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	4a46      	ldr	r2, [pc, #280]	; (8001fa8 <UART_CheckIdleState+0x148>)
 8001e90:	9200      	str	r2, [sp, #0]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f000 f88c 	bl	8001fb0 <UART_WaitOnFlagUntilTimeout>
 8001e98:	1e03      	subs	r3, r0, #0
 8001e9a:	d021      	beq.n	8001ee0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001ea4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eac:	f383 8810 	msr	PRIMASK, r3
}
 8001eb0:	46c0      	nop			; (mov r8, r8)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2180      	movs	r1, #128	; 0x80
 8001ebe:	438a      	bics	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec8:	f383 8810 	msr	PRIMASK, r3
}
 8001ecc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2278      	movs	r2, #120	; 0x78
 8001ed8:	2100      	movs	r1, #0
 8001eda:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e05f      	b.n	8001fa0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2204      	movs	r2, #4
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d146      	bne.n	8001f7c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ef0:	2280      	movs	r2, #128	; 0x80
 8001ef2:	03d1      	lsls	r1, r2, #15
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	4a2c      	ldr	r2, [pc, #176]	; (8001fa8 <UART_CheckIdleState+0x148>)
 8001ef8:	9200      	str	r2, [sp, #0]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f000 f858 	bl	8001fb0 <UART_WaitOnFlagUntilTimeout>
 8001f00:	1e03      	subs	r3, r0, #0
 8001f02:	d03b      	beq.n	8001f7c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f04:	f3ef 8310 	mrs	r3, PRIMASK
 8001f08:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f0e:	2301      	movs	r3, #1
 8001f10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	f383 8810 	msr	PRIMASK, r3
}
 8001f18:	46c0      	nop			; (mov r8, r8)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4921      	ldr	r1, [pc, #132]	; (8001fac <UART_CheckIdleState+0x14c>)
 8001f26:	400a      	ands	r2, r1
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f383 8810 	msr	PRIMASK, r3
}
 8001f34:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f36:	f3ef 8310 	mrs	r3, PRIMASK
 8001f3a:	61bb      	str	r3, [r7, #24]
  return(result);
 8001f3c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30
 8001f40:	2301      	movs	r3, #1
 8001f42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f383 8810 	msr	PRIMASK, r3
}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2101      	movs	r1, #1
 8001f58:	438a      	bics	r2, r1
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	f383 8810 	msr	PRIMASK, r3
}
 8001f66:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2280      	movs	r2, #128	; 0x80
 8001f6c:	2120      	movs	r1, #32
 8001f6e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2278      	movs	r2, #120	; 0x78
 8001f74:	2100      	movs	r1, #0
 8001f76:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e011      	b.n	8001fa0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2280      	movs	r2, #128	; 0x80
 8001f86:	2120      	movs	r1, #32
 8001f88:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2278      	movs	r2, #120	; 0x78
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b010      	add	sp, #64	; 0x40
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	01ffffff 	.word	0x01ffffff
 8001fac:	fffffedf 	.word	0xfffffedf

08001fb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	1dfb      	adds	r3, r7, #7
 8001fbe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fc0:	e051      	b.n	8002066 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	d04e      	beq.n	8002066 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc8:	f7fe fb9e 	bl	8000708 <HAL_GetTick>
 8001fcc:	0002      	movs	r2, r0
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d302      	bcc.n	8001fde <UART_WaitOnFlagUntilTimeout+0x2e>
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e051      	b.n	8002086 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2204      	movs	r2, #4
 8001fea:	4013      	ands	r3, r2
 8001fec:	d03b      	beq.n	8002066 <UART_WaitOnFlagUntilTimeout+0xb6>
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	2b80      	cmp	r3, #128	; 0x80
 8001ff2:	d038      	beq.n	8002066 <UART_WaitOnFlagUntilTimeout+0xb6>
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2b40      	cmp	r3, #64	; 0x40
 8001ff8:	d035      	beq.n	8002066 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	2208      	movs	r2, #8
 8002002:	4013      	ands	r3, r2
 8002004:	2b08      	cmp	r3, #8
 8002006:	d111      	bne.n	800202c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2208      	movs	r2, #8
 800200e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	0018      	movs	r0, r3
 8002014:	f000 f83c 	bl	8002090 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2284      	movs	r2, #132	; 0x84
 800201c:	2108      	movs	r1, #8
 800201e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2278      	movs	r2, #120	; 0x78
 8002024:	2100      	movs	r1, #0
 8002026:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e02c      	b.n	8002086 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	69da      	ldr	r2, [r3, #28]
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	401a      	ands	r2, r3
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	429a      	cmp	r2, r3
 800203e:	d112      	bne.n	8002066 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2280      	movs	r2, #128	; 0x80
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	0018      	movs	r0, r3
 800204e:	f000 f81f 	bl	8002090 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2284      	movs	r2, #132	; 0x84
 8002056:	2120      	movs	r1, #32
 8002058:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2278      	movs	r2, #120	; 0x78
 800205e:	2100      	movs	r1, #0
 8002060:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e00f      	b.n	8002086 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	4013      	ands	r3, r2
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	425a      	negs	r2, r3
 8002076:	4153      	adcs	r3, r2
 8002078:	b2db      	uxtb	r3, r3
 800207a:	001a      	movs	r2, r3
 800207c:	1dfb      	adds	r3, r7, #7
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d09e      	beq.n	8001fc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	0018      	movs	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	b004      	add	sp, #16
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08e      	sub	sp, #56	; 0x38
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002098:	f3ef 8310 	mrs	r3, PRIMASK
 800209c:	617b      	str	r3, [r7, #20]
  return(result);
 800209e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020a0:	637b      	str	r3, [r7, #52]	; 0x34
 80020a2:	2301      	movs	r3, #1
 80020a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	f383 8810 	msr	PRIMASK, r3
}
 80020ac:	46c0      	nop			; (mov r8, r8)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4926      	ldr	r1, [pc, #152]	; (8002154 <UART_EndRxTransfer+0xc4>)
 80020ba:	400a      	ands	r2, r1
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f383 8810 	msr	PRIMASK, r3
}
 80020c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020ca:	f3ef 8310 	mrs	r3, PRIMASK
 80020ce:	623b      	str	r3, [r7, #32]
  return(result);
 80020d0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020d2:	633b      	str	r3, [r7, #48]	; 0x30
 80020d4:	2301      	movs	r3, #1
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	f383 8810 	msr	PRIMASK, r3
}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2101      	movs	r1, #1
 80020ec:	438a      	bics	r2, r1
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f6:	f383 8810 	msr	PRIMASK, r3
}
 80020fa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002100:	2b01      	cmp	r3, #1
 8002102:	d118      	bne.n	8002136 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002104:	f3ef 8310 	mrs	r3, PRIMASK
 8002108:	60bb      	str	r3, [r7, #8]
  return(result);
 800210a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800210e:	2301      	movs	r3, #1
 8002110:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f383 8810 	msr	PRIMASK, r3
}
 8002118:	46c0      	nop			; (mov r8, r8)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2110      	movs	r1, #16
 8002126:	438a      	bics	r2, r1
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	f383 8810 	msr	PRIMASK, r3
}
 8002134:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2280      	movs	r2, #128	; 0x80
 800213a:	2120      	movs	r1, #32
 800213c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	669a      	str	r2, [r3, #104]	; 0x68
}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	46bd      	mov	sp, r7
 800214e:	b00e      	add	sp, #56	; 0x38
 8002150:	bd80      	pop	{r7, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	fffffedf 	.word	0xfffffedf

08002158 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3308      	adds	r3, #8
 8002164:	001a      	movs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	4252      	negs	r2, r2
 8002170:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3308      	adds	r3, #8
 8002176:	001a      	movs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3308      	adds	r3, #8
 8002180:	001a      	movs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800218c:	46c0      	nop			; (mov r8, r8)
 800218e:	46bd      	mov	sp, r7
 8002190:	b002      	add	sp, #8
 8002192:	bd80      	pop	{r7, pc}

08002194 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	46bd      	mov	sp, r7
 80021a6:	b002      	add	sp, #8
 80021a8:	bd80      	pop	{r7, pc}

080021aa <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	3301      	adds	r3, #1
 80021be:	d103      	bne.n	80021c8 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	e00c      	b.n	80021e2 <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3308      	adds	r3, #8
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	e002      	b.n	80021d6 <vListInsert+0x2c>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d2f6      	bcs.n	80021d0 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	601a      	str	r2, [r3, #0]
}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	46bd      	mov	sp, r7
 8002212:	b004      	add	sp, #16
 8002214:	bd80      	pop	{r7, pc}

08002216 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b084      	sub	sp, #16
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6892      	ldr	r2, [r2, #8]
 800222c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6852      	ldr	r2, [r2, #4]
 8002236:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	429a      	cmp	r2, r3
 8002240:	d103      	bne.n	800224a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	1e5a      	subs	r2, r3, #1
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
}
 800225e:	0018      	movs	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	b004      	add	sp, #16
 8002264:	bd80      	pop	{r7, pc}

08002266 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002266:	b5b0      	push	{r4, r5, r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002270:	2301      	movs	r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <xQueueGenericReset+0x1c>
 800227e:	b672      	cpsid	i
 8002280:	e7fe      	b.n	8002280 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d100      	bne.n	800228a <xQueueGenericReset+0x24>
 8002288:	e06a      	b.n	8002360 <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800228e:	2b00      	cmp	r3, #0
 8002290:	d066      	beq.n	8002360 <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229a:	2400      	movs	r4, #0
 800229c:	0c15      	lsrs	r5, r2, #16
 800229e:	0c19      	lsrs	r1, r3, #16
 80022a0:	b2a8      	uxth	r0, r5
 80022a2:	2800      	cmp	r0, #0
 80022a4:	d104      	bne.n	80022b0 <xQueueGenericReset+0x4a>
 80022a6:	b288      	uxth	r0, r1
 80022a8:	2800      	cmp	r0, #0
 80022aa:	d013      	beq.n	80022d4 <xQueueGenericReset+0x6e>
 80022ac:	1c10      	adds	r0, r2, #0
 80022ae:	e004      	b.n	80022ba <xQueueGenericReset+0x54>
 80022b0:	b289      	uxth	r1, r1
 80022b2:	2900      	cmp	r1, #0
 80022b4:	d10d      	bne.n	80022d2 <xQueueGenericReset+0x6c>
 80022b6:	1c29      	adds	r1, r5, #0
 80022b8:	1c18      	adds	r0, r3, #0
 80022ba:	b292      	uxth	r2, r2
 80022bc:	b29b      	uxth	r3, r3
 80022be:	435a      	muls	r2, r3
 80022c0:	b283      	uxth	r3, r0
 80022c2:	b289      	uxth	r1, r1
 80022c4:	434b      	muls	r3, r1
 80022c6:	0c12      	lsrs	r2, r2, #16
 80022c8:	189b      	adds	r3, r3, r2
 80022ca:	141b      	asrs	r3, r3, #16
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d000      	beq.n	80022d4 <xQueueGenericReset+0x6e>
 80022d2:	2401      	movs	r4, #1
 80022d4:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 80022d6:	d143      	bne.n	8002360 <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 80022d8:	f001 fc92 	bl	8003c00 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	434b      	muls	r3, r1
 80022ea:	18d2      	adds	r2, r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2200      	movs	r2, #0
 80022f4:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002306:	1e59      	subs	r1, r3, #1
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	434b      	muls	r3, r1
 800230e:	18d2      	adds	r2, r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2244      	movs	r2, #68	; 0x44
 8002318:	21ff      	movs	r1, #255	; 0xff
 800231a:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2245      	movs	r2, #69	; 0x45
 8002320:	21ff      	movs	r1, #255	; 0xff
 8002322:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10d      	bne.n	8002346 <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d013      	beq.n	800235a <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	3310      	adds	r3, #16
 8002336:	0018      	movs	r0, r3
 8002338:	f000 fee8 	bl	800310c <xTaskRemoveFromEventList>
 800233c:	1e03      	subs	r3, r0, #0
 800233e:	d00c      	beq.n	800235a <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002340:	f001 fc4e 	bl	8003be0 <vPortYield>
 8002344:	e009      	b.n	800235a <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	3310      	adds	r3, #16
 800234a:	0018      	movs	r0, r3
 800234c:	f7ff ff04 	bl	8002158 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	3324      	adds	r3, #36	; 0x24
 8002354:	0018      	movs	r0, r3
 8002356:	f7ff feff 	bl	8002158 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800235a:	f001 fc63 	bl	8003c24 <vPortExitCritical>
 800235e:	e001      	b.n	8002364 <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <xQueueGenericReset+0x108>
 800236a:	b672      	cpsid	i
 800236c:	e7fe      	b.n	800236c <xQueueGenericReset+0x106>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800236e:	68fb      	ldr	r3, [r7, #12]
}
 8002370:	0018      	movs	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	b004      	add	sp, #16
 8002376:	bdb0      	pop	{r4, r5, r7, pc}

08002378 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800237a:	b08b      	sub	sp, #44	; 0x2c
 800237c:	af02      	add	r7, sp, #8
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	1dfb      	adds	r3, r7, #7
 8002384:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8002386:	2300      	movs	r3, #0
 8002388:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d047      	beq.n	8002420 <xQueueGenericCreate+0xa8>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002390:	2000      	movs	r0, #0
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	0c19      	lsrs	r1, r3, #16
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	1c1e      	adds	r6, r3, #0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	0c1b      	lsrs	r3, r3, #16
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	1c15      	adds	r5, r2, #0
 80023a2:	b28a      	uxth	r2, r1
 80023a4:	2a00      	cmp	r2, #0
 80023a6:	d105      	bne.n	80023b4 <xQueueGenericCreate+0x3c>
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	2a00      	cmp	r2, #0
 80023ac:	d013      	beq.n	80023d6 <xQueueGenericCreate+0x5e>
 80023ae:	1c19      	adds	r1, r3, #0
 80023b0:	1c34      	adds	r4, r6, #0
 80023b2:	e003      	b.n	80023bc <xQueueGenericCreate+0x44>
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10c      	bne.n	80023d4 <xQueueGenericCreate+0x5c>
 80023ba:	1c2c      	adds	r4, r5, #0
 80023bc:	b2b3      	uxth	r3, r6
 80023be:	b2aa      	uxth	r2, r5
 80023c0:	435a      	muls	r2, r3
 80023c2:	b2a3      	uxth	r3, r4
 80023c4:	b289      	uxth	r1, r1
 80023c6:	434b      	muls	r3, r1
 80023c8:	0c12      	lsrs	r2, r2, #16
 80023ca:	189b      	adds	r3, r3, r2
 80023cc:	141b      	asrs	r3, r3, #16
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d000      	beq.n	80023d6 <xQueueGenericCreate+0x5e>
 80023d4:	2001      	movs	r0, #1
 80023d6:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80023d8:	d122      	bne.n	8002420 <xQueueGenericCreate+0xa8>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80023e0:	3351      	adds	r3, #81	; 0x51
 80023e2:	d81d      	bhi.n	8002420 <xQueueGenericCreate+0xa8>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	4353      	muls	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	3350      	adds	r3, #80	; 0x50
 80023f0:	0018      	movs	r0, r3
 80023f2:	f001 fc9d 	bl	8003d30 <pvPortMalloc>
 80023f6:	0003      	movs	r3, r0
 80023f8:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d014      	beq.n	800242a <xQueueGenericCreate+0xb2>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	3350      	adds	r3, #80	; 0x50
 8002408:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800240a:	1dfb      	adds	r3, r7, #7
 800240c:	781c      	ldrb	r4, [r3, #0]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	0023      	movs	r3, r4
 800241a:	f000 f80b 	bl	8002434 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800241e:	e004      	b.n	800242a <xQueueGenericCreate+0xb2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <xQueueGenericCreate+0xb2>
 8002426:	b672      	cpsid	i
 8002428:	e7fe      	b.n	8002428 <xQueueGenericCreate+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800242a:	69fb      	ldr	r3, [r7, #28]
    }
 800242c:	0018      	movs	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	b009      	add	sp, #36	; 0x24
 8002432:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002434 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	001a      	movs	r2, r3
 8002442:	1cfb      	adds	r3, r7, #3
 8002444:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d103      	bne.n	8002454 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	e002      	b.n	800245a <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	2101      	movs	r1, #1
 800246a:	0018      	movs	r0, r3
 800246c:	f7ff fefb 	bl	8002266 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	1cfa      	adds	r2, r7, #3
 8002474:	214c      	movs	r1, #76	; 0x4c
 8002476:	7812      	ldrb	r2, [r2, #0]
 8002478:	545a      	strb	r2, [r3, r1]
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	46bd      	mov	sp, r7
 800247e:	b004      	add	sp, #16
 8002480:	bd80      	pop	{r7, pc}

08002482 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b08a      	sub	sp, #40	; 0x28
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800248e:	2300      	movs	r3, #0
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <xQueueReceive+0x1e>
 800249c:	b672      	cpsid	i
 800249e:	e7fe      	b.n	800249e <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d103      	bne.n	80024ae <xQueueReceive+0x2c>
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <xQueueReceive+0x30>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <xQueueReceive+0x32>
 80024b2:	2300      	movs	r3, #0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <xQueueReceive+0x3a>
 80024b8:	b672      	cpsid	i
 80024ba:	e7fe      	b.n	80024ba <xQueueReceive+0x38>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024bc:	f001 f810 	bl	80034e0 <xTaskGetSchedulerState>
 80024c0:	1e03      	subs	r3, r0, #0
 80024c2:	d102      	bne.n	80024ca <xQueueReceive+0x48>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <xQueueReceive+0x4c>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <xQueueReceive+0x4e>
 80024ce:	2300      	movs	r3, #0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <xQueueReceive+0x56>
 80024d4:	b672      	cpsid	i
 80024d6:	e7fe      	b.n	80024d6 <xQueueReceive+0x54>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024d8:	f001 fb92 	bl	8003c00 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e0:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d01a      	beq.n	800251e <xQueueReceive+0x9c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	0011      	movs	r1, r2
 80024ee:	0018      	movs	r0, r3
 80024f0:	f000 f87c 	bl	80025ec <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	1e5a      	subs	r2, r3, #1
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <xQueueReceive+0x94>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	3310      	adds	r3, #16
 8002508:	0018      	movs	r0, r3
 800250a:	f000 fdff 	bl	800310c <xTaskRemoveFromEventList>
 800250e:	1e03      	subs	r3, r0, #0
 8002510:	d001      	beq.n	8002516 <xQueueReceive+0x94>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002512:	f001 fb65 	bl	8003be0 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002516:	f001 fb85 	bl	8003c24 <vPortExitCritical>
                return pdPASS;
 800251a:	2301      	movs	r3, #1
 800251c:	e062      	b.n	80025e4 <xQueueReceive+0x162>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d103      	bne.n	800252c <xQueueReceive+0xaa>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002524:	f001 fb7e 	bl	8003c24 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002528:	2300      	movs	r3, #0
 800252a:	e05b      	b.n	80025e4 <xQueueReceive+0x162>
                }
                else if( xEntryTimeSet == pdFALSE )
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <xQueueReceive+0xbe>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002532:	2314      	movs	r3, #20
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	0018      	movs	r0, r3
 8002538:	f000 feb2 	bl	80032a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800253c:	2301      	movs	r3, #1
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002540:	f001 fb70 	bl	8003c24 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002544:	f000 fb26 	bl	8002b94 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002548:	f001 fb5a 	bl	8003c00 <vPortEnterCritical>
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	2244      	movs	r2, #68	; 0x44
 8002550:	5c9b      	ldrb	r3, [r3, r2]
 8002552:	b25b      	sxtb	r3, r3
 8002554:	3301      	adds	r3, #1
 8002556:	d103      	bne.n	8002560 <xQueueReceive+0xde>
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	2244      	movs	r2, #68	; 0x44
 800255c:	2100      	movs	r1, #0
 800255e:	5499      	strb	r1, [r3, r2]
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	2245      	movs	r2, #69	; 0x45
 8002564:	5c9b      	ldrb	r3, [r3, r2]
 8002566:	b25b      	sxtb	r3, r3
 8002568:	3301      	adds	r3, #1
 800256a:	d103      	bne.n	8002574 <xQueueReceive+0xf2>
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	2245      	movs	r2, #69	; 0x45
 8002570:	2100      	movs	r1, #0
 8002572:	5499      	strb	r1, [r3, r2]
 8002574:	f001 fb56 	bl	8003c24 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002578:	1d3a      	adds	r2, r7, #4
 800257a:	2314      	movs	r3, #20
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	0011      	movs	r1, r2
 8002580:	0018      	movs	r0, r3
 8002582:	f000 fea1 	bl	80032c8 <xTaskCheckForTimeOut>
 8002586:	1e03      	subs	r3, r0, #0
 8002588:	d11e      	bne.n	80025c8 <xQueueReceive+0x146>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	0018      	movs	r0, r3
 800258e:	f000 f8b1 	bl	80026f4 <prvIsQueueEmpty>
 8002592:	1e03      	subs	r3, r0, #0
 8002594:	d011      	beq.n	80025ba <xQueueReceive+0x138>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	3324      	adds	r3, #36	; 0x24
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	0011      	movs	r1, r2
 800259e:	0018      	movs	r0, r3
 80025a0:	f000 fd58 	bl	8003054 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	0018      	movs	r0, r3
 80025a8:	f000 f846 	bl	8002638 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80025ac:	f000 fafe 	bl	8002bac <xTaskResumeAll>
 80025b0:	1e03      	subs	r3, r0, #0
 80025b2:	d191      	bne.n	80024d8 <xQueueReceive+0x56>
                {
                    portYIELD_WITHIN_API();
 80025b4:	f001 fb14 	bl	8003be0 <vPortYield>
 80025b8:	e78e      	b.n	80024d8 <xQueueReceive+0x56>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	0018      	movs	r0, r3
 80025be:	f000 f83b 	bl	8002638 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025c2:	f000 faf3 	bl	8002bac <xTaskResumeAll>
 80025c6:	e787      	b.n	80024d8 <xQueueReceive+0x56>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	0018      	movs	r0, r3
 80025cc:	f000 f834 	bl	8002638 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025d0:	f000 faec 	bl	8002bac <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	0018      	movs	r0, r3
 80025d8:	f000 f88c 	bl	80026f4 <prvIsQueueEmpty>
 80025dc:	1e03      	subs	r3, r0, #0
 80025de:	d100      	bne.n	80025e2 <xQueueReceive+0x160>
 80025e0:	e77a      	b.n	80024d8 <xQueueReceive+0x56>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80025e2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b00a      	add	sp, #40	; 0x28
 80025ea:	bd80      	pop	{r7, pc}

080025ec <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d018      	beq.n	8002630 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	18d2      	adds	r2, r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	429a      	cmp	r2, r3
 8002616:	d303      	bcc.n	8002620 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68d9      	ldr	r1, [r3, #12]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	0018      	movs	r0, r3
 800262c:	f001 fd50 	bl	80040d0 <memcpy>
    }
}
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b002      	add	sp, #8
 8002636:	bd80      	pop	{r7, pc}

08002638 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002640:	f001 fade 	bl	8003c00 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002644:	230f      	movs	r3, #15
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	2145      	movs	r1, #69	; 0x45
 800264c:	5c52      	ldrb	r2, [r2, r1]
 800264e:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002650:	e013      	b.n	800267a <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	2b00      	cmp	r3, #0
 8002658:	d016      	beq.n	8002688 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3324      	adds	r3, #36	; 0x24
 800265e:	0018      	movs	r0, r3
 8002660:	f000 fd54 	bl	800310c <xTaskRemoveFromEventList>
 8002664:	1e03      	subs	r3, r0, #0
 8002666:	d001      	beq.n	800266c <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002668:	f000 fe82 	bl	8003370 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800266c:	210f      	movs	r1, #15
 800266e:	187b      	adds	r3, r7, r1
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	3b01      	subs	r3, #1
 8002674:	b2da      	uxtb	r2, r3
 8002676:	187b      	adds	r3, r7, r1
 8002678:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800267a:	230f      	movs	r3, #15
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	b25b      	sxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	dce5      	bgt.n	8002652 <prvUnlockQueue+0x1a>
 8002686:	e000      	b.n	800268a <prvUnlockQueue+0x52>
                    break;
 8002688:	46c0      	nop			; (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2245      	movs	r2, #69	; 0x45
 800268e:	21ff      	movs	r1, #255	; 0xff
 8002690:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8002692:	f001 fac7 	bl	8003c24 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002696:	f001 fab3 	bl	8003c00 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800269a:	230e      	movs	r3, #14
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	2144      	movs	r1, #68	; 0x44
 80026a2:	5c52      	ldrb	r2, [r2, r1]
 80026a4:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026a6:	e013      	b.n	80026d0 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d016      	beq.n	80026de <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3310      	adds	r3, #16
 80026b4:	0018      	movs	r0, r3
 80026b6:	f000 fd29 	bl	800310c <xTaskRemoveFromEventList>
 80026ba:	1e03      	subs	r3, r0, #0
 80026bc:	d001      	beq.n	80026c2 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 80026be:	f000 fe57 	bl	8003370 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80026c2:	210e      	movs	r1, #14
 80026c4:	187b      	adds	r3, r7, r1
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	187b      	adds	r3, r7, r1
 80026ce:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026d0:	230e      	movs	r3, #14
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	b25b      	sxtb	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	dce5      	bgt.n	80026a8 <prvUnlockQueue+0x70>
 80026dc:	e000      	b.n	80026e0 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 80026de:	46c0      	nop			; (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2244      	movs	r2, #68	; 0x44
 80026e4:	21ff      	movs	r1, #255	; 0xff
 80026e6:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 80026e8:	f001 fa9c 	bl	8003c24 <vPortExitCritical>
}
 80026ec:	46c0      	nop			; (mov r8, r8)
 80026ee:	46bd      	mov	sp, r7
 80026f0:	b004      	add	sp, #16
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80026fc:	f001 fa80 	bl	8003c00 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002704:	2b00      	cmp	r3, #0
 8002706:	d102      	bne.n	800270e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002708:	2301      	movs	r3, #1
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	e001      	b.n	8002712 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002712:	f001 fa87 	bl	8003c24 <vPortExitCritical>

    return xReturn;
 8002716:	68fb      	ldr	r3, [r7, #12]
}
 8002718:	0018      	movs	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	b004      	add	sp, #16
 800271e:	bd80      	pop	{r7, pc}

08002720 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <vQueueAddToRegistry+0x18>
 8002734:	b672      	cpsid	i
 8002736:	e7fe      	b.n	8002736 <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d025      	beq.n	800278a <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	e01f      	b.n	8002784 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002744:	4a17      	ldr	r2, [pc, #92]	; (80027a4 <vQueueAddToRegistry+0x84>)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	18d3      	adds	r3, r2, r3
 800274c:	3304      	adds	r3, #4
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	429a      	cmp	r2, r3
 8002754:	d105      	bne.n	8002762 <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	00da      	lsls	r2, r3, #3
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <vQueueAddToRegistry+0x84>)
 800275c:	18d3      	adds	r3, r2, r3
 800275e:	60bb      	str	r3, [r7, #8]
                    break;
 8002760:	e013      	b.n	800278a <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <vQueueAddToRegistry+0x5e>
 8002768:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <vQueueAddToRegistry+0x84>)
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	00d2      	lsls	r2, r2, #3
 800276e:	58d3      	ldr	r3, [r2, r3]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d104      	bne.n	800277e <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	00da      	lsls	r2, r3, #3
 8002778:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <vQueueAddToRegistry+0x84>)
 800277a:	18d3      	adds	r3, r2, r3
 800277c:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	3301      	adds	r3, #1
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b07      	cmp	r3, #7
 8002788:	d9dc      	bls.n	8002744 <vQueueAddToRegistry+0x24>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d005      	beq.n	800279c <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800279c:	46c0      	nop			; (mov r8, r8)
 800279e:	46bd      	mov	sp, r7
 80027a0:	b004      	add	sp, #16
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000190 	.word	0x20000190

080027a8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80027b8:	f001 fa22 	bl	8003c00 <vPortEnterCritical>
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2244      	movs	r2, #68	; 0x44
 80027c0:	5c9b      	ldrb	r3, [r3, r2]
 80027c2:	b25b      	sxtb	r3, r3
 80027c4:	3301      	adds	r3, #1
 80027c6:	d103      	bne.n	80027d0 <vQueueWaitForMessageRestricted+0x28>
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2244      	movs	r2, #68	; 0x44
 80027cc:	2100      	movs	r1, #0
 80027ce:	5499      	strb	r1, [r3, r2]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2245      	movs	r2, #69	; 0x45
 80027d4:	5c9b      	ldrb	r3, [r3, r2]
 80027d6:	b25b      	sxtb	r3, r3
 80027d8:	3301      	adds	r3, #1
 80027da:	d103      	bne.n	80027e4 <vQueueWaitForMessageRestricted+0x3c>
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2245      	movs	r2, #69	; 0x45
 80027e0:	2100      	movs	r1, #0
 80027e2:	5499      	strb	r1, [r3, r2]
 80027e4:	f001 fa1e 	bl	8003c24 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d106      	bne.n	80027fe <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	3324      	adds	r3, #36	; 0x24
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	0018      	movs	r0, r3
 80027fa:	f000 fc49 	bl	8003090 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	0018      	movs	r0, r3
 8002802:	f7ff ff19 	bl	8002638 <prvUnlockQueue>
    }
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	46bd      	mov	sp, r7
 800280a:	b006      	add	sp, #24
 800280c:	bd80      	pop	{r7, pc}

0800280e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800280e:	b590      	push	{r4, r7, lr}
 8002810:	b08d      	sub	sp, #52	; 0x34
 8002812:	af04      	add	r7, sp, #16
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	603b      	str	r3, [r7, #0]
 800281a:	1dbb      	adds	r3, r7, #6
 800281c:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800281e:	1dbb      	adds	r3, r7, #6
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	0018      	movs	r0, r3
 8002826:	f001 fa83 	bl	8003d30 <pvPortMalloc>
 800282a:	0003      	movs	r3, r0
 800282c:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d016      	beq.n	8002862 <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002834:	2054      	movs	r0, #84	; 0x54
 8002836:	f001 fa7b 	bl	8003d30 <pvPortMalloc>
 800283a:	0003      	movs	r3, r0
 800283c:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d009      	beq.n	8002858 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	2254      	movs	r2, #84	; 0x54
 8002848:	2100      	movs	r1, #0
 800284a:	0018      	movs	r0, r3
 800284c:	f001 fc49 	bl	80040e2 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	631a      	str	r2, [r3, #48]	; 0x30
 8002856:	e006      	b.n	8002866 <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	0018      	movs	r0, r3
 800285c:	f001 fb10 	bl	8003e80 <vPortFree>
 8002860:	e001      	b.n	8002866 <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d016      	beq.n	800289a <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800286c:	1dbb      	adds	r3, r7, #6
 800286e:	881a      	ldrh	r2, [r3, #0]
 8002870:	683c      	ldr	r4, [r7, #0]
 8002872:	68b9      	ldr	r1, [r7, #8]
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	2300      	movs	r3, #0
 8002878:	9303      	str	r3, [sp, #12]
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	9302      	str	r3, [sp, #8]
 800287e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002880:	9301      	str	r3, [sp, #4]
 8002882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	0023      	movs	r3, r4
 8002888:	f000 f810 	bl	80028ac <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	0018      	movs	r0, r3
 8002890:	f000 f88c 	bl	80029ac <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002894:	2301      	movs	r3, #1
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	e002      	b.n	80028a0 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800289a:	2301      	movs	r3, #1
 800289c:	425b      	negs	r3, r3
 800289e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80028a0:	69bb      	ldr	r3, [r7, #24]
    }
 80028a2:	0018      	movs	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	b009      	add	sp, #36	; 0x24
 80028a8:	bd90      	pop	{r4, r7, pc}
	...

080028ac <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80028ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	001a      	movs	r2, r3
 80028c4:	21a5      	movs	r1, #165	; 0xa5
 80028c6:	f001 fc0c 	bl	80040e2 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80028ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4935      	ldr	r1, [pc, #212]	; (80029a8 <prvInitialiseNewTask+0xfc>)
 80028d2:	468c      	mov	ip, r1
 80028d4:	4463      	add	r3, ip
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	18d3      	adds	r3, r2, r3
 80028da:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	2207      	movs	r2, #7
 80028e0:	4393      	bics	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	2207      	movs	r2, #7
 80028e8:	4013      	ands	r3, r2
 80028ea:	d001      	beq.n	80028f0 <prvInitialiseNewTask+0x44>
 80028ec:	b672      	cpsid	i
 80028ee:	e7fe      	b.n	80028ee <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d01f      	beq.n	8002936 <prvInitialiseNewTask+0x8a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	e013      	b.n	8002924 <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	18d3      	adds	r3, r2, r3
 8002902:	7818      	ldrb	r0, [r3, #0]
 8002904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002906:	2134      	movs	r1, #52	; 0x34
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	18d3      	adds	r3, r2, r3
 800290c:	185b      	adds	r3, r3, r1
 800290e:	1c02      	adds	r2, r0, #0
 8002910:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	18d3      	adds	r3, r2, r3
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d006      	beq.n	800292c <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	3301      	adds	r3, #1
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	2b04      	cmp	r3, #4
 8002928:	d9e8      	bls.n	80028fc <prvInitialiseNewTask+0x50>
 800292a:	e000      	b.n	800292e <prvInitialiseNewTask+0x82>
            {
                break;
 800292c:	46c0      	nop			; (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800292e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002930:	2238      	movs	r2, #56	; 0x38
 8002932:	2100      	movs	r1, #0
 8002934:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	2b04      	cmp	r3, #4
 800293a:	d901      	bls.n	8002940 <prvInitialiseNewTask+0x94>
 800293c:	b672      	cpsid	i
 800293e:	e7fe      	b.n	800293e <prvInitialiseNewTask+0x92>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	2b04      	cmp	r3, #4
 8002944:	d901      	bls.n	800294a <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002946:	2304      	movs	r3, #4
 8002948:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	6a3a      	ldr	r2, [r7, #32]
 800294e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002952:	6a3a      	ldr	r2, [r7, #32]
 8002954:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002958:	3304      	adds	r3, #4
 800295a:	0018      	movs	r0, r3
 800295c:	f7ff fc1a 	bl	8002194 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	3318      	adds	r3, #24
 8002964:	0018      	movs	r0, r3
 8002966:	f7ff fc15 	bl	8002194 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800296a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800296e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	2205      	movs	r2, #5
 8002974:	1ad2      	subs	r2, r2, r3
 8002976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002978:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800297e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	68f9      	ldr	r1, [r7, #12]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	0018      	movs	r0, r3
 8002988:	f001 f8a2 	bl	8003ad0 <pxPortInitialiseStack>
 800298c:	0002      	movs	r2, r0
 800298e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002990:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <prvInitialiseNewTask+0xf2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800299c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	46bd      	mov	sp, r7
 80029a2:	b006      	add	sp, #24
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	3fffffff 	.word	0x3fffffff

080029ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80029b4:	f001 f924 	bl	8003c00 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80029b8:	4b3d      	ldr	r3, [pc, #244]	; (8002ab0 <prvAddNewTaskToReadyList+0x104>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	4b3c      	ldr	r3, [pc, #240]	; (8002ab0 <prvAddNewTaskToReadyList+0x104>)
 80029c0:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 80029c2:	4b3c      	ldr	r3, [pc, #240]	; (8002ab4 <prvAddNewTaskToReadyList+0x108>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80029ca:	4b3a      	ldr	r3, [pc, #232]	; (8002ab4 <prvAddNewTaskToReadyList+0x108>)
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029d0:	4b37      	ldr	r3, [pc, #220]	; (8002ab0 <prvAddNewTaskToReadyList+0x104>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d110      	bne.n	80029fa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80029d8:	f000 fce4 	bl	80033a4 <prvInitialiseTaskLists>
 80029dc:	e00d      	b.n	80029fa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80029de:	4b36      	ldr	r3, [pc, #216]	; (8002ab8 <prvAddNewTaskToReadyList+0x10c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029e6:	4b33      	ldr	r3, [pc, #204]	; (8002ab4 <prvAddNewTaskToReadyList+0x108>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d802      	bhi.n	80029fa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80029f4:	4b2f      	ldr	r3, [pc, #188]	; (8002ab4 <prvAddNewTaskToReadyList+0x108>)
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80029fa:	4b30      	ldr	r3, [pc, #192]	; (8002abc <prvAddNewTaskToReadyList+0x110>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	4b2e      	ldr	r3, [pc, #184]	; (8002abc <prvAddNewTaskToReadyList+0x110>)
 8002a02:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a04:	4b2d      	ldr	r3, [pc, #180]	; (8002abc <prvAddNewTaskToReadyList+0x110>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a10:	4b2b      	ldr	r3, [pc, #172]	; (8002ac0 <prvAddNewTaskToReadyList+0x114>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d903      	bls.n	8002a20 <prvAddNewTaskToReadyList+0x74>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1c:	4b28      	ldr	r3, [pc, #160]	; (8002ac0 <prvAddNewTaskToReadyList+0x114>)
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a24:	4927      	ldr	r1, [pc, #156]	; (8002ac4 <prvAddNewTaskToReadyList+0x118>)
 8002a26:	0013      	movs	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	189b      	adds	r3, r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	18cb      	adds	r3, r1, r3
 8002a30:	3304      	adds	r3, #4
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	60da      	str	r2, [r3, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	3204      	adds	r2, #4
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	1d1a      	adds	r2, r3, #4
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	609a      	str	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5a:	0013      	movs	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	189b      	adds	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <prvAddNewTaskToReadyList+0x118>)
 8002a64:	189a      	adds	r2, r3, r2
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	615a      	str	r2, [r3, #20]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6e:	4915      	ldr	r1, [pc, #84]	; (8002ac4 <prvAddNewTaskToReadyList+0x118>)
 8002a70:	0013      	movs	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	189b      	adds	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	585b      	ldr	r3, [r3, r1]
 8002a7a:	1c58      	adds	r0, r3, #1
 8002a7c:	4911      	ldr	r1, [pc, #68]	; (8002ac4 <prvAddNewTaskToReadyList+0x118>)
 8002a7e:	0013      	movs	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	189b      	adds	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002a88:	f001 f8cc 	bl	8003c24 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <prvAddNewTaskToReadyList+0x10c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a94:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <prvAddNewTaskToReadyList+0x108>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d201      	bcs.n	8002aa6 <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002aa2:	f001 f89d 	bl	8003be0 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b004      	add	sp, #16
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	200002a8 	.word	0x200002a8
 8002ab4:	200001d0 	.word	0x200001d0
 8002ab8:	200002b4 	.word	0x200002b4
 8002abc:	200002c4 	.word	0x200002c4
 8002ac0:	200002b0 	.word	0x200002b0
 8002ac4:	200001d4 	.word	0x200001d4

08002ac8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d010      	beq.n	8002afc <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002ada:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <vTaskDelay+0x48>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <vTaskDelay+0x1e>
 8002ae2:	b672      	cpsid	i
 8002ae4:	e7fe      	b.n	8002ae4 <vTaskDelay+0x1c>
            vTaskSuspendAll();
 8002ae6:	f000 f855 	bl	8002b94 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2100      	movs	r1, #0
 8002aee:	0018      	movs	r0, r3
 8002af0:	f000 fd12 	bl	8003518 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002af4:	f000 f85a 	bl	8002bac <xTaskResumeAll>
 8002af8:	0003      	movs	r3, r0
 8002afa:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 8002b02:	f001 f86d 	bl	8003be0 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b004      	add	sp, #16
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	200002d0 	.word	0x200002d0

08002b14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002b1a:	4917      	ldr	r1, [pc, #92]	; (8002b78 <vTaskStartScheduler+0x64>)
 8002b1c:	4817      	ldr	r0, [pc, #92]	; (8002b7c <vTaskStartScheduler+0x68>)
 8002b1e:	4b18      	ldr	r3, [pc, #96]	; (8002b80 <vTaskStartScheduler+0x6c>)
 8002b20:	9301      	str	r3, [sp, #4]
 8002b22:	2300      	movs	r3, #0
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	2300      	movs	r3, #0
 8002b28:	223c      	movs	r2, #60	; 0x3c
 8002b2a:	f7ff fe70 	bl	800280e <xTaskCreate>
 8002b2e:	0003      	movs	r3, r0
 8002b30:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d103      	bne.n	8002b40 <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 8002b38:	f000 fd5c 	bl	80035f4 <xTimerCreateTimerTask>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d10d      	bne.n	8002b62 <vTaskStartScheduler+0x4e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8002b46:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <vTaskStartScheduler+0x70>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	4252      	negs	r2, r2
 8002b4e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002b50:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <vTaskStartScheduler+0x74>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b56:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <vTaskStartScheduler+0x78>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002b5c:	f001 f81c 	bl	8003b98 <xPortStartScheduler>
 8002b60:	e004      	b.n	8002b6c <vTaskStartScheduler+0x58>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3301      	adds	r3, #1
 8002b66:	d101      	bne.n	8002b6c <vTaskStartScheduler+0x58>
 8002b68:	b672      	cpsid	i
 8002b6a:	e7fe      	b.n	8002b6a <vTaskStartScheduler+0x56>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002b6c:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <vTaskStartScheduler+0x7c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
}
 8002b70:	46c0      	nop			; (mov r8, r8)
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b002      	add	sp, #8
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	080049f4 	.word	0x080049f4
 8002b7c:	08003385 	.word	0x08003385
 8002b80:	200002cc 	.word	0x200002cc
 8002b84:	200002c8 	.word	0x200002c8
 8002b88:	200002b4 	.word	0x200002b4
 8002b8c:	200002ac 	.word	0x200002ac
 8002b90:	2000000c 	.word	0x2000000c

08002b94 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002b98:	4b03      	ldr	r3, [pc, #12]	; (8002ba8 <vTaskSuspendAll+0x14>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	4b02      	ldr	r3, [pc, #8]	; (8002ba8 <vTaskSuspendAll+0x14>)
 8002ba0:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	200002d0 	.word	0x200002d0

08002bac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002bba:	4b68      	ldr	r3, [pc, #416]	; (8002d5c <xTaskResumeAll+0x1b0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <xTaskResumeAll+0x1a>
 8002bc2:	b672      	cpsid	i
 8002bc4:	e7fe      	b.n	8002bc4 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002bc6:	f001 f81b 	bl	8003c00 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002bca:	4b64      	ldr	r3, [pc, #400]	; (8002d5c <xTaskResumeAll+0x1b0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	1e5a      	subs	r2, r3, #1
 8002bd0:	4b62      	ldr	r3, [pc, #392]	; (8002d5c <xTaskResumeAll+0x1b0>)
 8002bd2:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bd4:	4b61      	ldr	r3, [pc, #388]	; (8002d5c <xTaskResumeAll+0x1b0>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d000      	beq.n	8002bde <xTaskResumeAll+0x32>
 8002bdc:	e0b7      	b.n	8002d4e <xTaskResumeAll+0x1a2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002bde:	4b60      	ldr	r3, [pc, #384]	; (8002d60 <xTaskResumeAll+0x1b4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d100      	bne.n	8002be8 <xTaskResumeAll+0x3c>
 8002be6:	e0b2      	b.n	8002d4e <xTaskResumeAll+0x1a2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002be8:	e089      	b.n	8002cfe <xTaskResumeAll+0x152>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bea:	4b5e      	ldr	r3, [pc, #376]	; (8002d64 <xTaskResumeAll+0x1b8>)
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	6a12      	ldr	r2, [r2, #32]
 8002c00:	609a      	str	r2, [r3, #8]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	69d2      	ldr	r2, [r2, #28]
 8002c0a:	605a      	str	r2, [r3, #4]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	3318      	adds	r3, #24
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d103      	bne.n	8002c20 <xTaskResumeAll+0x74>
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	6a1a      	ldr	r2, [r3, #32]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	605a      	str	r2, [r3, #4]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2200      	movs	r2, #0
 8002c24:	629a      	str	r2, [r3, #40]	; 0x28
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	1e5a      	subs	r2, r3, #1
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	607b      	str	r3, [r7, #4]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	68d2      	ldr	r2, [r2, #12]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	6892      	ldr	r2, [r2, #8]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	3304      	adds	r3, #4
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d103      	bne.n	8002c5e <xTaskResumeAll+0xb2>
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2200      	movs	r2, #0
 8002c62:	615a      	str	r2, [r3, #20]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	1e5a      	subs	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c72:	4b3d      	ldr	r3, [pc, #244]	; (8002d68 <xTaskResumeAll+0x1bc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d903      	bls.n	8002c82 <xTaskResumeAll+0xd6>
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7e:	4b3a      	ldr	r3, [pc, #232]	; (8002d68 <xTaskResumeAll+0x1bc>)
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c86:	4939      	ldr	r1, [pc, #228]	; (8002d6c <xTaskResumeAll+0x1c0>)
 8002c88:	0013      	movs	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	189b      	adds	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	18cb      	adds	r3, r1, r3
 8002c92:	3304      	adds	r3, #4
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	609a      	str	r2, [r3, #8]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	60da      	str	r2, [r3, #12]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	3204      	adds	r2, #4
 8002cae:	605a      	str	r2, [r3, #4]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	1d1a      	adds	r2, r3, #4
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cbc:	0013      	movs	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	189b      	adds	r3, r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4a29      	ldr	r2, [pc, #164]	; (8002d6c <xTaskResumeAll+0x1c0>)
 8002cc6:	189a      	adds	r2, r3, r2
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	615a      	str	r2, [r3, #20]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd0:	4926      	ldr	r1, [pc, #152]	; (8002d6c <xTaskResumeAll+0x1c0>)
 8002cd2:	0013      	movs	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	189b      	adds	r3, r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	585b      	ldr	r3, [r3, r1]
 8002cdc:	1c58      	adds	r0, r3, #1
 8002cde:	4923      	ldr	r1, [pc, #140]	; (8002d6c <xTaskResumeAll+0x1c0>)
 8002ce0:	0013      	movs	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	189b      	adds	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cee:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <xTaskResumeAll+0x1c4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d302      	bcc.n	8002cfe <xTaskResumeAll+0x152>
                    {
                        xYieldPending = pdTRUE;
 8002cf8:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <xTaskResumeAll+0x1c8>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cfe:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <xTaskResumeAll+0x1b8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d000      	beq.n	8002d08 <xTaskResumeAll+0x15c>
 8002d06:	e770      	b.n	8002bea <xTaskResumeAll+0x3e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <xTaskResumeAll+0x166>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002d0e:	f000 fbcd 	bl	80034ac <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002d12:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <xTaskResumeAll+0x1cc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00f      	beq.n	8002d3e <xTaskResumeAll+0x192>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002d1e:	f000 f83b 	bl	8002d98 <xTaskIncrementTick>
 8002d22:	1e03      	subs	r3, r0, #0
 8002d24:	d002      	beq.n	8002d2c <xTaskResumeAll+0x180>
                            {
                                xYieldPending = pdTRUE;
 8002d26:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <xTaskResumeAll+0x1c8>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f2      	bne.n	8002d1e <xTaskResumeAll+0x172>

                        xPendedTicks = 0;
 8002d38:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <xTaskResumeAll+0x1cc>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002d3e:	4b0d      	ldr	r3, [pc, #52]	; (8002d74 <xTaskResumeAll+0x1c8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <xTaskResumeAll+0x1a2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002d46:	2301      	movs	r3, #1
 8002d48:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002d4a:	f000 ff49 	bl	8003be0 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002d4e:	f000 ff69 	bl	8003c24 <vPortExitCritical>

    return xAlreadyYielded;
 8002d52:	693b      	ldr	r3, [r7, #16]
}
 8002d54:	0018      	movs	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b006      	add	sp, #24
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	200002d0 	.word	0x200002d0
 8002d60:	200002a8 	.word	0x200002a8
 8002d64:	20000268 	.word	0x20000268
 8002d68:	200002b0 	.word	0x200002b0
 8002d6c:	200001d4 	.word	0x200001d4
 8002d70:	200001d0 	.word	0x200001d0
 8002d74:	200002bc 	.word	0x200002bc
 8002d78:	200002b8 	.word	0x200002b8

08002d7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002d82:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <xTaskGetTickCount+0x18>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002d88:	687b      	ldr	r3, [r7, #4]
}
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b002      	add	sp, #8
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	200002ac 	.word	0x200002ac

08002d98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b088      	sub	sp, #32
 8002d9c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002da2:	4b78      	ldr	r3, [pc, #480]	; (8002f84 <xTaskIncrementTick+0x1ec>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d000      	beq.n	8002dac <xTaskIncrementTick+0x14>
 8002daa:	e0e0      	b.n	8002f6e <xTaskIncrementTick+0x1d6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002dac:	4b76      	ldr	r3, [pc, #472]	; (8002f88 <xTaskIncrementTick+0x1f0>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	3301      	adds	r3, #1
 8002db2:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002db4:	4b74      	ldr	r3, [pc, #464]	; (8002f88 <xTaskIncrementTick+0x1f0>)
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d117      	bne.n	8002df0 <xTaskIncrementTick+0x58>
        {
            taskSWITCH_DELAYED_LISTS();
 8002dc0:	4b72      	ldr	r3, [pc, #456]	; (8002f8c <xTaskIncrementTick+0x1f4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <xTaskIncrementTick+0x36>
 8002dca:	b672      	cpsid	i
 8002dcc:	e7fe      	b.n	8002dcc <xTaskIncrementTick+0x34>
 8002dce:	4b6f      	ldr	r3, [pc, #444]	; (8002f8c <xTaskIncrementTick+0x1f4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	4b6e      	ldr	r3, [pc, #440]	; (8002f90 <xTaskIncrementTick+0x1f8>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4b6c      	ldr	r3, [pc, #432]	; (8002f8c <xTaskIncrementTick+0x1f4>)
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	4b6c      	ldr	r3, [pc, #432]	; (8002f90 <xTaskIncrementTick+0x1f8>)
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	4b6c      	ldr	r3, [pc, #432]	; (8002f94 <xTaskIncrementTick+0x1fc>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	4b6a      	ldr	r3, [pc, #424]	; (8002f94 <xTaskIncrementTick+0x1fc>)
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	f000 fb5e 	bl	80034ac <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002df0:	4b69      	ldr	r3, [pc, #420]	; (8002f98 <xTaskIncrementTick+0x200>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d200      	bcs.n	8002dfc <xTaskIncrementTick+0x64>
 8002dfa:	e0a4      	b.n	8002f46 <xTaskIncrementTick+0x1ae>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dfc:	4b63      	ldr	r3, [pc, #396]	; (8002f8c <xTaskIncrementTick+0x1f4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d104      	bne.n	8002e10 <xTaskIncrementTick+0x78>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e06:	4b64      	ldr	r3, [pc, #400]	; (8002f98 <xTaskIncrementTick+0x200>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	4252      	negs	r2, r2
 8002e0c:	601a      	str	r2, [r3, #0]
                    break;
 8002e0e:	e09a      	b.n	8002f46 <xTaskIncrementTick+0x1ae>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e10:	4b5e      	ldr	r3, [pc, #376]	; (8002f8c <xTaskIncrementTick+0x1f4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d203      	bcs.n	8002e30 <xTaskIncrementTick+0x98>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002e28:	4b5b      	ldr	r3, [pc, #364]	; (8002f98 <xTaskIncrementTick+0x200>)
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002e2e:	e08a      	b.n	8002f46 <xTaskIncrementTick+0x1ae>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	68d2      	ldr	r2, [r2, #12]
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	6892      	ldr	r2, [r2, #8]
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	3304      	adds	r3, #4
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d103      	bne.n	8002e5e <xTaskIncrementTick+0xc6>
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	2200      	movs	r2, #0
 8002e62:	615a      	str	r2, [r3, #20]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	1e5a      	subs	r2, r3, #1
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d01e      	beq.n	8002eb4 <xTaskIncrementTick+0x11c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	607b      	str	r3, [r7, #4]
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	6a12      	ldr	r2, [r2, #32]
 8002e84:	609a      	str	r2, [r3, #8]
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	69d2      	ldr	r2, [r2, #28]
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	3318      	adds	r3, #24
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d103      	bne.n	8002ea4 <xTaskIncrementTick+0x10c>
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	6a1a      	ldr	r2, [r3, #32]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	605a      	str	r2, [r3, #4]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	629a      	str	r2, [r3, #40]	; 0x28
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	1e5a      	subs	r2, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb8:	4b38      	ldr	r3, [pc, #224]	; (8002f9c <xTaskIncrementTick+0x204>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d903      	bls.n	8002ec8 <xTaskIncrementTick+0x130>
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec4:	4b35      	ldr	r3, [pc, #212]	; (8002f9c <xTaskIncrementTick+0x204>)
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ecc:	4934      	ldr	r1, [pc, #208]	; (8002fa0 <xTaskIncrementTick+0x208>)
 8002ece:	0013      	movs	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	189b      	adds	r3, r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	18cb      	adds	r3, r1, r3
 8002ed8:	3304      	adds	r3, #4
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	603b      	str	r3, [r7, #0]
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	60da      	str	r2, [r3, #12]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	3204      	adds	r2, #4
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1d1a      	adds	r2, r3, #4
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f02:	0013      	movs	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	189b      	adds	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4a25      	ldr	r2, [pc, #148]	; (8002fa0 <xTaskIncrementTick+0x208>)
 8002f0c:	189a      	adds	r2, r3, r2
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	615a      	str	r2, [r3, #20]
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f16:	4922      	ldr	r1, [pc, #136]	; (8002fa0 <xTaskIncrementTick+0x208>)
 8002f18:	0013      	movs	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	189b      	adds	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	585b      	ldr	r3, [r3, r1]
 8002f22:	1c58      	adds	r0, r3, #1
 8002f24:	491e      	ldr	r1, [pc, #120]	; (8002fa0 <xTaskIncrementTick+0x208>)
 8002f26:	0013      	movs	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	189b      	adds	r3, r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f34:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <xTaskIncrementTick+0x20c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d800      	bhi.n	8002f40 <xTaskIncrementTick+0x1a8>
 8002f3e:	e75d      	b.n	8002dfc <xTaskIncrementTick+0x64>
                        {
                            xSwitchRequired = pdTRUE;
 8002f40:	2301      	movs	r3, #1
 8002f42:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f44:	e75a      	b.n	8002dfc <xTaskIncrementTick+0x64>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f46:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <xTaskIncrementTick+0x20c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4c:	4914      	ldr	r1, [pc, #80]	; (8002fa0 <xTaskIncrementTick+0x208>)
 8002f4e:	0013      	movs	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	189b      	adds	r3, r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	585b      	ldr	r3, [r3, r1]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d901      	bls.n	8002f60 <xTaskIncrementTick+0x1c8>
            {
                xSwitchRequired = pdTRUE;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002f60:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <xTaskIncrementTick+0x210>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d007      	beq.n	8002f78 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	61fb      	str	r3, [r7, #28]
 8002f6c:	e004      	b.n	8002f78 <xTaskIncrementTick+0x1e0>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002f6e:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <xTaskIncrementTick+0x214>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <xTaskIncrementTick+0x214>)
 8002f76:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002f78:	69fb      	ldr	r3, [r7, #28]
}
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b008      	add	sp, #32
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	200002d0 	.word	0x200002d0
 8002f88:	200002ac 	.word	0x200002ac
 8002f8c:	20000260 	.word	0x20000260
 8002f90:	20000264 	.word	0x20000264
 8002f94:	200002c0 	.word	0x200002c0
 8002f98:	200002c8 	.word	0x200002c8
 8002f9c:	200002b0 	.word	0x200002b0
 8002fa0:	200001d4 	.word	0x200001d4
 8002fa4:	200001d0 	.word	0x200001d0
 8002fa8:	200002bc 	.word	0x200002bc
 8002fac:	200002b8 	.word	0x200002b8

08002fb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002fb6:	4b22      	ldr	r3, [pc, #136]	; (8003040 <vTaskSwitchContext+0x90>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002fbe:	4b21      	ldr	r3, [pc, #132]	; (8003044 <vTaskSwitchContext+0x94>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002fc4:	e037      	b.n	8003036 <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 8002fc6:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <vTaskSwitchContext+0x94>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fcc:	4b1e      	ldr	r3, [pc, #120]	; (8003048 <vTaskSwitchContext+0x98>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	607b      	str	r3, [r7, #4]
 8002fd2:	e007      	b.n	8002fe4 <vTaskSwitchContext+0x34>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <vTaskSwitchContext+0x2e>
 8002fda:	b672      	cpsid	i
 8002fdc:	e7fe      	b.n	8002fdc <vTaskSwitchContext+0x2c>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	607b      	str	r3, [r7, #4]
 8002fe4:	4919      	ldr	r1, [pc, #100]	; (800304c <vTaskSwitchContext+0x9c>)
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	0013      	movs	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	189b      	adds	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	585b      	ldr	r3, [r3, r1]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0ee      	beq.n	8002fd4 <vTaskSwitchContext+0x24>
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	0013      	movs	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	189b      	adds	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4a12      	ldr	r2, [pc, #72]	; (800304c <vTaskSwitchContext+0x9c>)
 8003002:	189b      	adds	r3, r3, r2
 8003004:	603b      	str	r3, [r7, #0]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	605a      	str	r2, [r3, #4]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	3308      	adds	r3, #8
 8003018:	429a      	cmp	r2, r3
 800301a:	d104      	bne.n	8003026 <vTaskSwitchContext+0x76>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	4b08      	ldr	r3, [pc, #32]	; (8003050 <vTaskSwitchContext+0xa0>)
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <vTaskSwitchContext+0x98>)
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	601a      	str	r2, [r3, #0]
}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	46bd      	mov	sp, r7
 800303a:	b002      	add	sp, #8
 800303c:	bd80      	pop	{r7, pc}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	200002d0 	.word	0x200002d0
 8003044:	200002bc 	.word	0x200002bc
 8003048:	200002b0 	.word	0x200002b0
 800304c:	200001d4 	.word	0x200001d4
 8003050:	200001d0 	.word	0x200001d0

08003054 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <vTaskPlaceOnEventList+0x14>
 8003064:	b672      	cpsid	i
 8003066:	e7fe      	b.n	8003066 <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003068:	4b08      	ldr	r3, [pc, #32]	; (800308c <vTaskPlaceOnEventList+0x38>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3318      	adds	r3, #24
 800306e:	001a      	movs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	0011      	movs	r1, r2
 8003074:	0018      	movs	r0, r3
 8003076:	f7ff f898 	bl	80021aa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2101      	movs	r1, #1
 800307e:	0018      	movs	r0, r3
 8003080:	f000 fa4a 	bl	8003518 <prvAddCurrentTaskToDelayedList>
}
 8003084:	46c0      	nop			; (mov r8, r8)
 8003086:	46bd      	mov	sp, r7
 8003088:	b002      	add	sp, #8
 800308a:	bd80      	pop	{r7, pc}
 800308c:	200001d0 	.word	0x200001d0

08003090 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <vTaskPlaceOnEventListRestricted+0x16>
 80030a2:	b672      	cpsid	i
 80030a4:	e7fe      	b.n	80030a4 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	4b16      	ldr	r3, [pc, #88]	; (8003108 <vTaskPlaceOnEventListRestricted+0x78>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	61da      	str	r2, [r3, #28]
 80030b4:	4b14      	ldr	r3, [pc, #80]	; (8003108 <vTaskPlaceOnEventListRestricted+0x78>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	6892      	ldr	r2, [r2, #8]
 80030bc:	621a      	str	r2, [r3, #32]
 80030be:	4b12      	ldr	r3, [pc, #72]	; (8003108 <vTaskPlaceOnEventListRestricted+0x78>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	3218      	adds	r2, #24
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <vTaskPlaceOnEventListRestricted+0x78>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	3318      	adds	r3, #24
 80030d0:	001a      	movs	r2, r3
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	609a      	str	r2, [r3, #8]
 80030d6:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <vTaskPlaceOnEventListRestricted+0x78>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	629a      	str	r2, [r3, #40]	; 0x28
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <vTaskPlaceOnEventListRestricted+0x64>
        {
            xTicksToWait = portMAX_DELAY;
 80030ee:	2301      	movs	r3, #1
 80030f0:	425b      	negs	r3, r3
 80030f2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	0011      	movs	r1, r2
 80030fa:	0018      	movs	r0, r3
 80030fc:	f000 fa0c 	bl	8003518 <prvAddCurrentTaskToDelayedList>
    }
 8003100:	46c0      	nop			; (mov r8, r8)
 8003102:	46bd      	mov	sp, r7
 8003104:	b006      	add	sp, #24
 8003106:	bd80      	pop	{r7, pc}
 8003108:	200001d0 	.word	0x200001d0

0800310c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <xTaskRemoveFromEventList+0x1a>
 8003122:	b672      	cpsid	i
 8003124:	e7fe      	b.n	8003124 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	6a12      	ldr	r2, [r2, #32]
 8003134:	609a      	str	r2, [r3, #8]
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	69d2      	ldr	r2, [r2, #28]
 800313e:	605a      	str	r2, [r3, #4]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	3318      	adds	r3, #24
 8003148:	429a      	cmp	r2, r3
 800314a:	d103      	bne.n	8003154 <xTaskRemoveFromEventList+0x48>
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	6a1a      	ldr	r2, [r3, #32]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	605a      	str	r2, [r3, #4]
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	2200      	movs	r2, #0
 8003158:	629a      	str	r2, [r3, #40]	; 0x28
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	1e5a      	subs	r2, r3, #1
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003164:	4b48      	ldr	r3, [pc, #288]	; (8003288 <xTaskRemoveFromEventList+0x17c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d15d      	bne.n	8003228 <xTaskRemoveFromEventList+0x11c>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	68d2      	ldr	r2, [r2, #12]
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	6892      	ldr	r2, [r2, #8]
 8003184:	605a      	str	r2, [r3, #4]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	3304      	adds	r3, #4
 800318e:	429a      	cmp	r2, r3
 8003190:	d103      	bne.n	800319a <xTaskRemoveFromEventList+0x8e>
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	2200      	movs	r2, #0
 800319e:	615a      	str	r2, [r3, #20]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	1e5a      	subs	r2, r3, #1
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ae:	4b37      	ldr	r3, [pc, #220]	; (800328c <xTaskRemoveFromEventList+0x180>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d903      	bls.n	80031be <xTaskRemoveFromEventList+0xb2>
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ba:	4b34      	ldr	r3, [pc, #208]	; (800328c <xTaskRemoveFromEventList+0x180>)
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c2:	4933      	ldr	r1, [pc, #204]	; (8003290 <xTaskRemoveFromEventList+0x184>)
 80031c4:	0013      	movs	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	189b      	adds	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	18cb      	adds	r3, r1, r3
 80031ce:	3304      	adds	r3, #4
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60bb      	str	r3, [r7, #8]
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	609a      	str	r2, [r3, #8]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	60da      	str	r2, [r3, #12]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	3204      	adds	r2, #4
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	1d1a      	adds	r2, r3, #4
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f8:	0013      	movs	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	189b      	adds	r3, r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4a23      	ldr	r2, [pc, #140]	; (8003290 <xTaskRemoveFromEventList+0x184>)
 8003202:	189a      	adds	r2, r3, r2
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	615a      	str	r2, [r3, #20]
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320c:	4920      	ldr	r1, [pc, #128]	; (8003290 <xTaskRemoveFromEventList+0x184>)
 800320e:	0013      	movs	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	189b      	adds	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	585b      	ldr	r3, [r3, r1]
 8003218:	1c58      	adds	r0, r3, #1
 800321a:	491d      	ldr	r1, [pc, #116]	; (8003290 <xTaskRemoveFromEventList+0x184>)
 800321c:	0013      	movs	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	189b      	adds	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	5058      	str	r0, [r3, r1]
 8003226:	e01b      	b.n	8003260 <xTaskRemoveFromEventList+0x154>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003228:	4b1a      	ldr	r3, [pc, #104]	; (8003294 <xTaskRemoveFromEventList+0x188>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	61da      	str	r2, [r3, #28]
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	621a      	str	r2, [r3, #32]
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	3218      	adds	r2, #24
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	3318      	adds	r3, #24
 800324a:	001a      	movs	r2, r3
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	4a10      	ldr	r2, [pc, #64]	; (8003294 <xTaskRemoveFromEventList+0x188>)
 8003254:	629a      	str	r2, [r3, #40]	; 0x28
 8003256:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <xTaskRemoveFromEventList+0x188>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <xTaskRemoveFromEventList+0x188>)
 800325e:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <xTaskRemoveFromEventList+0x18c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	429a      	cmp	r2, r3
 800326c:	d905      	bls.n	800327a <xTaskRemoveFromEventList+0x16e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800326e:	2301      	movs	r3, #1
 8003270:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003272:	4b0a      	ldr	r3, [pc, #40]	; (800329c <xTaskRemoveFromEventList+0x190>)
 8003274:	2201      	movs	r2, #1
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	e001      	b.n	800327e <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        xReturn = pdFALSE;
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800327e:	69fb      	ldr	r3, [r7, #28]
}
 8003280:	0018      	movs	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	b008      	add	sp, #32
 8003286:	bd80      	pop	{r7, pc}
 8003288:	200002d0 	.word	0x200002d0
 800328c:	200002b0 	.word	0x200002b0
 8003290:	200001d4 	.word	0x200001d4
 8003294:	20000268 	.word	0x20000268
 8003298:	200001d0 	.word	0x200001d0
 800329c:	200002bc 	.word	0x200002bc

080032a0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80032a8:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <vTaskInternalSetTimeOutState+0x20>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80032b0:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <vTaskInternalSetTimeOutState+0x24>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	605a      	str	r2, [r3, #4]
}
 80032b8:	46c0      	nop			; (mov r8, r8)
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b002      	add	sp, #8
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	200002c0 	.word	0x200002c0
 80032c4:	200002ac 	.word	0x200002ac

080032c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <xTaskCheckForTimeOut+0x14>
 80032d8:	b672      	cpsid	i
 80032da:	e7fe      	b.n	80032da <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <xTaskCheckForTimeOut+0x1e>
 80032e2:	b672      	cpsid	i
 80032e4:	e7fe      	b.n	80032e4 <xTaskCheckForTimeOut+0x1c>

    taskENTER_CRITICAL();
 80032e6:	f000 fc8b 	bl	8003c00 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80032ea:	4b1f      	ldr	r3, [pc, #124]	; (8003368 <xTaskCheckForTimeOut+0xa0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	3301      	adds	r3, #1
 8003300:	d102      	bne.n	8003308 <xTaskCheckForTimeOut+0x40>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	e027      	b.n	8003358 <xTaskCheckForTimeOut+0x90>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	4b17      	ldr	r3, [pc, #92]	; (800336c <xTaskCheckForTimeOut+0xa4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d00a      	beq.n	800332a <xTaskCheckForTimeOut+0x62>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	429a      	cmp	r2, r3
 800331c:	d305      	bcc.n	800332a <xTaskCheckForTimeOut+0x62>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800331e:	2301      	movs	r3, #1
 8003320:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	e016      	b.n	8003358 <xTaskCheckForTimeOut+0x90>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	429a      	cmp	r2, r3
 8003332:	d20c      	bcs.n	800334e <xTaskCheckForTimeOut+0x86>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	1ad2      	subs	r2, r2, r3
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	0018      	movs	r0, r3
 8003344:	f7ff ffac 	bl	80032a0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	e004      	b.n	8003358 <xTaskCheckForTimeOut+0x90>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003354:	2301      	movs	r3, #1
 8003356:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8003358:	f000 fc64 	bl	8003c24 <vPortExitCritical>

    return xReturn;
 800335c:	697b      	ldr	r3, [r7, #20]
}
 800335e:	0018      	movs	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	b006      	add	sp, #24
 8003364:	bd80      	pop	{r7, pc}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	200002ac 	.word	0x200002ac
 800336c:	200002c0 	.word	0x200002c0

08003370 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003374:	4b02      	ldr	r3, [pc, #8]	; (8003380 <vTaskMissedYield+0x10>)
 8003376:	2201      	movs	r2, #1
 8003378:	601a      	str	r2, [r3, #0]
}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	200002bc 	.word	0x200002bc

08003384 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800338c:	f000 f84e 	bl	800342c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003390:	4b03      	ldr	r3, [pc, #12]	; (80033a0 <prvIdleTask+0x1c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d9f9      	bls.n	800338c <prvIdleTask+0x8>
            {
                taskYIELD();
 8003398:	f000 fc22 	bl	8003be0 <vPortYield>
        prvCheckTasksWaitingTermination();
 800339c:	e7f6      	b.n	800338c <prvIdleTask+0x8>
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	200001d4 	.word	0x200001d4

080033a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033aa:	2300      	movs	r3, #0
 80033ac:	607b      	str	r3, [r7, #4]
 80033ae:	e00c      	b.n	80033ca <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	0013      	movs	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	189b      	adds	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4a14      	ldr	r2, [pc, #80]	; (800340c <prvInitialiseTaskLists+0x68>)
 80033bc:	189b      	adds	r3, r3, r2
 80033be:	0018      	movs	r0, r3
 80033c0:	f7fe feca 	bl	8002158 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3301      	adds	r3, #1
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d9ef      	bls.n	80033b0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80033d0:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <prvInitialiseTaskLists+0x6c>)
 80033d2:	0018      	movs	r0, r3
 80033d4:	f7fe fec0 	bl	8002158 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80033d8:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <prvInitialiseTaskLists+0x70>)
 80033da:	0018      	movs	r0, r3
 80033dc:	f7fe febc 	bl	8002158 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80033e0:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <prvInitialiseTaskLists+0x74>)
 80033e2:	0018      	movs	r0, r3
 80033e4:	f7fe feb8 	bl	8002158 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <prvInitialiseTaskLists+0x78>)
 80033ea:	0018      	movs	r0, r3
 80033ec:	f7fe feb4 	bl	8002158 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80033f0:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <prvInitialiseTaskLists+0x7c>)
 80033f2:	0018      	movs	r0, r3
 80033f4:	f7fe feb0 	bl	8002158 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80033f8:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <prvInitialiseTaskLists+0x80>)
 80033fa:	4a05      	ldr	r2, [pc, #20]	; (8003410 <prvInitialiseTaskLists+0x6c>)
 80033fc:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80033fe:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <prvInitialiseTaskLists+0x84>)
 8003400:	4a04      	ldr	r2, [pc, #16]	; (8003414 <prvInitialiseTaskLists+0x70>)
 8003402:	601a      	str	r2, [r3, #0]
}
 8003404:	46c0      	nop			; (mov r8, r8)
 8003406:	46bd      	mov	sp, r7
 8003408:	b002      	add	sp, #8
 800340a:	bd80      	pop	{r7, pc}
 800340c:	200001d4 	.word	0x200001d4
 8003410:	20000238 	.word	0x20000238
 8003414:	2000024c 	.word	0x2000024c
 8003418:	20000268 	.word	0x20000268
 800341c:	2000027c 	.word	0x2000027c
 8003420:	20000294 	.word	0x20000294
 8003424:	20000260 	.word	0x20000260
 8003428:	20000264 	.word	0x20000264

0800342c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003432:	e01a      	b.n	800346a <prvCheckTasksWaitingTermination+0x3e>
        {
            taskENTER_CRITICAL();
 8003434:	f000 fbe4 	bl	8003c00 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003438:	4b10      	ldr	r3, [pc, #64]	; (800347c <prvCheckTasksWaitingTermination+0x50>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3304      	adds	r3, #4
 8003444:	0018      	movs	r0, r3
 8003446:	f7fe fee6 	bl	8002216 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800344a:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <prvCheckTasksWaitingTermination+0x54>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	1e5a      	subs	r2, r3, #1
 8003450:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <prvCheckTasksWaitingTermination+0x54>)
 8003452:	601a      	str	r2, [r3, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <prvCheckTasksWaitingTermination+0x58>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	1e5a      	subs	r2, r3, #1
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <prvCheckTasksWaitingTermination+0x58>)
 800345c:	601a      	str	r2, [r3, #0]
            }
            taskEXIT_CRITICAL();
 800345e:	f000 fbe1 	bl	8003c24 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	0018      	movs	r0, r3
 8003466:	f000 f80f 	bl	8003488 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800346a:	4b06      	ldr	r3, [pc, #24]	; (8003484 <prvCheckTasksWaitingTermination+0x58>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1e0      	bne.n	8003434 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	b002      	add	sp, #8
 800347a:	bd80      	pop	{r7, pc}
 800347c:	2000027c 	.word	0x2000027c
 8003480:	200002a8 	.word	0x200002a8
 8003484:	20000290 	.word	0x20000290

08003488 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	0018      	movs	r0, r3
 8003496:	f000 fcf3 	bl	8003e80 <vPortFree>
            vPortFree( pxTCB );
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	0018      	movs	r0, r3
 800349e:	f000 fcef 	bl	8003e80 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	46bd      	mov	sp, r7
 80034a6:	b002      	add	sp, #8
 80034a8:	bd80      	pop	{r7, pc}
	...

080034ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034b0:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <prvResetNextTaskUnblockTime+0x2c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d104      	bne.n	80034c4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80034ba:	4b08      	ldr	r3, [pc, #32]	; (80034dc <prvResetNextTaskUnblockTime+0x30>)
 80034bc:	2201      	movs	r2, #1
 80034be:	4252      	negs	r2, r2
 80034c0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80034c2:	e005      	b.n	80034d0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80034c4:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <prvResetNextTaskUnblockTime+0x2c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b03      	ldr	r3, [pc, #12]	; (80034dc <prvResetNextTaskUnblockTime+0x30>)
 80034ce:	601a      	str	r2, [r3, #0]
}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	20000260 	.word	0x20000260
 80034dc:	200002c8 	.word	0x200002c8

080034e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80034e6:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <xTaskGetSchedulerState+0x30>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d102      	bne.n	80034f4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80034ee:	2301      	movs	r3, #1
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	e008      	b.n	8003506 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034f4:	4b07      	ldr	r3, [pc, #28]	; (8003514 <xTaskGetSchedulerState+0x34>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d102      	bne.n	8003502 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80034fc:	2302      	movs	r3, #2
 80034fe:	607b      	str	r3, [r7, #4]
 8003500:	e001      	b.n	8003506 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003502:	2300      	movs	r3, #0
 8003504:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003506:	687b      	ldr	r3, [r7, #4]
    }
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	b002      	add	sp, #8
 800350e:	bd80      	pop	{r7, pc}
 8003510:	200002b4 	.word	0x200002b4
 8003514:	200002d0 	.word	0x200002d0

08003518 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003522:	4b2e      	ldr	r3, [pc, #184]	; (80035dc <prvAddCurrentTaskToDelayedList+0xc4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003528:	4b2d      	ldr	r3, [pc, #180]	; (80035e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3304      	adds	r3, #4
 800352e:	0018      	movs	r0, r3
 8003530:	f7fe fe71 	bl	8002216 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3301      	adds	r3, #1
 8003538:	d124      	bne.n	8003584 <prvAddCurrentTaskToDelayedList+0x6c>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d021      	beq.n	8003584 <prvAddCurrentTaskToDelayedList+0x6c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003540:	4b28      	ldr	r3, [pc, #160]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	609a      	str	r2, [r3, #8]
 800354e:	4b24      	ldr	r3, [pc, #144]	; (80035e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	6892      	ldr	r2, [r2, #8]
 8003556:	60da      	str	r2, [r3, #12]
 8003558:	4b21      	ldr	r3, [pc, #132]	; (80035e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	3204      	adds	r2, #4
 8003562:	605a      	str	r2, [r3, #4]
 8003564:	4b1e      	ldr	r3, [pc, #120]	; (80035e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	1d1a      	adds	r2, r3, #4
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	609a      	str	r2, [r3, #8]
 800356e:	4b1c      	ldr	r3, [pc, #112]	; (80035e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a1c      	ldr	r2, [pc, #112]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003574:	615a      	str	r2, [r3, #20]
 8003576:	4b1b      	ldr	r3, [pc, #108]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	4b19      	ldr	r3, [pc, #100]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xcc>)
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	46c0      	nop			; (mov r8, r8)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003582:	e026      	b.n	80035d2 <prvAddCurrentTaskToDelayedList+0xba>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	18d3      	adds	r3, r2, r3
 800358a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800358c:	4b14      	ldr	r3, [pc, #80]	; (80035e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	429a      	cmp	r2, r3
 800359a:	d209      	bcs.n	80035b0 <prvAddCurrentTaskToDelayedList+0x98>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800359c:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <prvAddCurrentTaskToDelayedList+0xd0>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4b0f      	ldr	r3, [pc, #60]	; (80035e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	3304      	adds	r3, #4
 80035a6:	0019      	movs	r1, r3
 80035a8:	0010      	movs	r0, r2
 80035aa:	f7fe fdfe 	bl	80021aa <vListInsert>
}
 80035ae:	e010      	b.n	80035d2 <prvAddCurrentTaskToDelayedList+0xba>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035b0:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <prvAddCurrentTaskToDelayedList+0xd4>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	3304      	adds	r3, #4
 80035ba:	0019      	movs	r1, r3
 80035bc:	0010      	movs	r0, r2
 80035be:	f7fe fdf4 	bl	80021aa <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80035c2:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d202      	bcs.n	80035d2 <prvAddCurrentTaskToDelayedList+0xba>
                    xNextTaskUnblockTime = xTimeToWake;
 80035cc:	4b08      	ldr	r3, [pc, #32]	; (80035f0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	601a      	str	r2, [r3, #0]
}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b006      	add	sp, #24
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	200002ac 	.word	0x200002ac
 80035e0:	200001d0 	.word	0x200001d0
 80035e4:	20000294 	.word	0x20000294
 80035e8:	20000264 	.word	0x20000264
 80035ec:	20000260 	.word	0x20000260
 80035f0:	200002c8 	.word	0x200002c8

080035f4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80035fe:	f000 fa2d 	bl	8003a5c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003602:	4b0d      	ldr	r3, [pc, #52]	; (8003638 <xTimerCreateTimerTask+0x44>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00b      	beq.n	8003622 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800360a:	490c      	ldr	r1, [pc, #48]	; (800363c <xTimerCreateTimerTask+0x48>)
 800360c:	480c      	ldr	r0, [pc, #48]	; (8003640 <xTimerCreateTimerTask+0x4c>)
 800360e:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <xTimerCreateTimerTask+0x50>)
 8003610:	9301      	str	r3, [sp, #4]
 8003612:	2302      	movs	r3, #2
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	2300      	movs	r3, #0
 8003618:	2250      	movs	r2, #80	; 0x50
 800361a:	f7ff f8f8 	bl	800280e <xTaskCreate>
 800361e:	0003      	movs	r3, r0
 8003620:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <xTimerCreateTimerTask+0x38>
 8003628:	b672      	cpsid	i
 800362a:	e7fe      	b.n	800362a <xTimerCreateTimerTask+0x36>
        return xReturn;
 800362c:	687b      	ldr	r3, [r7, #4]
    }
 800362e:	0018      	movs	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	b002      	add	sp, #8
 8003634:	bd80      	pop	{r7, pc}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	20000304 	.word	0x20000304
 800363c:	080049fc 	.word	0x080049fc
 8003640:	080036f1 	.word	0x080036f1
 8003644:	20000308 	.word	0x20000308

08003648 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003654:	e009      	b.n	800366a <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	18d3      	adds	r3, r2, r3
 800365e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	0010      	movs	r0, r2
 8003668:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	699a      	ldr	r2, [r3, #24]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	18d1      	adds	r1, r2, r3
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f8d8 	bl	800382c <prvInsertTimerInActiveList>
 800367c:	1e03      	subs	r3, r0, #0
 800367e:	d1ea      	bne.n	8003656 <prvReloadTimer+0xe>
        }
    }
 8003680:	46c0      	nop			; (mov r8, r8)
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	46bd      	mov	sp, r7
 8003686:	b004      	add	sp, #16
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003696:	4b15      	ldr	r3, [pc, #84]	; (80036ec <prvProcessExpiredTimer+0x60>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3304      	adds	r3, #4
 80036a4:	0018      	movs	r0, r3
 80036a6:	f7fe fdb6 	bl	8002216 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2228      	movs	r2, #40	; 0x28
 80036ae:	5c9b      	ldrb	r3, [r3, r2]
 80036b0:	001a      	movs	r2, r3
 80036b2:	2304      	movs	r3, #4
 80036b4:	4013      	ands	r3, r2
 80036b6:	d006      	beq.n	80036c6 <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	0018      	movs	r0, r3
 80036c0:	f7ff ffc2 	bl	8003648 <prvReloadTimer>
 80036c4:	e008      	b.n	80036d8 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2228      	movs	r2, #40	; 0x28
 80036ca:	5c9b      	ldrb	r3, [r3, r2]
 80036cc:	2201      	movs	r2, #1
 80036ce:	4393      	bics	r3, r2
 80036d0:	b2d9      	uxtb	r1, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2228      	movs	r2, #40	; 0x28
 80036d6:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	0010      	movs	r0, r2
 80036e0:	4798      	blx	r3
    }
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b004      	add	sp, #16
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	200002fc 	.word	0x200002fc

080036f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036f8:	2308      	movs	r3, #8
 80036fa:	18fb      	adds	r3, r7, r3
 80036fc:	0018      	movs	r0, r3
 80036fe:	f000 f853 	bl	80037a8 <prvGetNextExpireTime>
 8003702:	0003      	movs	r3, r0
 8003704:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	0011      	movs	r1, r2
 800370c:	0018      	movs	r0, r3
 800370e:	f000 f803 	bl	8003718 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003712:	f000 f8cd 	bl	80038b0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003716:	e7ef      	b.n	80036f8 <prvTimerTask+0x8>

08003718 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003722:	f7ff fa37 	bl	8002b94 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003726:	2308      	movs	r3, #8
 8003728:	18fb      	adds	r3, r7, r3
 800372a:	0018      	movs	r0, r3
 800372c:	f000 f85e 	bl	80037ec <prvSampleTimeNow>
 8003730:	0003      	movs	r3, r0
 8003732:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d12b      	bne.n	8003792 <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10c      	bne.n	800375a <prvProcessTimerOrBlockTask+0x42>
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	429a      	cmp	r2, r3
 8003746:	d808      	bhi.n	800375a <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8003748:	f7ff fa30 	bl	8002bac <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	0011      	movs	r1, r2
 8003752:	0018      	movs	r0, r3
 8003754:	f7ff ff9a 	bl	800368c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003758:	e01d      	b.n	8003796 <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003760:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <prvProcessTimerOrBlockTask+0x88>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <prvProcessTimerOrBlockTask+0x56>
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <prvProcessTimerOrBlockTask+0x58>
 800376e:	2300      	movs	r3, #0
 8003770:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003772:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <prvProcessTimerOrBlockTask+0x8c>)
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	0019      	movs	r1, r3
 8003780:	f7ff f812 	bl	80027a8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003784:	f7ff fa12 	bl	8002bac <xTaskResumeAll>
 8003788:	1e03      	subs	r3, r0, #0
 800378a:	d104      	bne.n	8003796 <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 800378c:	f000 fa28 	bl	8003be0 <vPortYield>
    }
 8003790:	e001      	b.n	8003796 <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8003792:	f7ff fa0b 	bl	8002bac <xTaskResumeAll>
    }
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	46bd      	mov	sp, r7
 800379a:	b004      	add	sp, #16
 800379c:	bd80      	pop	{r7, pc}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	20000300 	.word	0x20000300
 80037a4:	20000304 	.word	0x20000304

080037a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80037b0:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <prvGetNextExpireTime+0x40>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <prvGetNextExpireTime+0x16>
 80037ba:	2201      	movs	r2, #1
 80037bc:	e000      	b.n	80037c0 <prvGetNextExpireTime+0x18>
 80037be:	2200      	movs	r2, #0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d105      	bne.n	80037d8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <prvGetNextExpireTime+0x40>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	e001      	b.n	80037dc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80037dc:	68fb      	ldr	r3, [r7, #12]
    }
 80037de:	0018      	movs	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	b004      	add	sp, #16
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	200002fc 	.word	0x200002fc

080037ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80037f4:	f7ff fac2 	bl	8002d7c <xTaskGetTickCount>
 80037f8:	0003      	movs	r3, r0
 80037fa:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 80037fc:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <prvSampleTimeNow+0x3c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	429a      	cmp	r2, r3
 8003804:	d205      	bcs.n	8003812 <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8003806:	f000 f901 	bl	8003a0c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	e002      	b.n	8003818 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003818:	4b03      	ldr	r3, [pc, #12]	; (8003828 <prvSampleTimeNow+0x3c>)
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 800381e:	68fb      	ldr	r3, [r7, #12]
    }
 8003820:	0018      	movs	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	b004      	add	sp, #16
 8003826:	bd80      	pop	{r7, pc}
 8003828:	2000030c 	.word	0x2000030c

0800382c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	429a      	cmp	r2, r3
 8003850:	d812      	bhi.n	8003878 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	1ad2      	subs	r2, r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	429a      	cmp	r2, r3
 800385e:	d302      	bcc.n	8003866 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003860:	2301      	movs	r3, #1
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	e01b      	b.n	800389e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003866:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <prvInsertTimerInActiveList+0x7c>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	3304      	adds	r3, #4
 800386e:	0019      	movs	r1, r3
 8003870:	0010      	movs	r0, r2
 8003872:	f7fe fc9a 	bl	80021aa <vListInsert>
 8003876:	e012      	b.n	800389e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d206      	bcs.n	800388e <prvInsertTimerInActiveList+0x62>
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d302      	bcc.n	800388e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003888:	2301      	movs	r3, #1
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	e007      	b.n	800389e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800388e:	4b07      	ldr	r3, [pc, #28]	; (80038ac <prvInsertTimerInActiveList+0x80>)
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	3304      	adds	r3, #4
 8003896:	0019      	movs	r1, r3
 8003898:	0010      	movs	r0, r2
 800389a:	f7fe fc86 	bl	80021aa <vListInsert>
            }
        }

        return xProcessTimerNow;
 800389e:	697b      	ldr	r3, [r7, #20]
    }
 80038a0:	0018      	movs	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b006      	add	sp, #24
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	20000300 	.word	0x20000300
 80038ac:	200002fc 	.word	0x200002fc

080038b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038b6:	e095      	b.n	80039e4 <prvProcessReceivedCommands+0x134>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80038b8:	1d3b      	adds	r3, r7, #4
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	da00      	bge.n	80038c2 <prvProcessReceivedCommands+0x12>
 80038c0:	e08f      	b.n	80039e2 <prvProcessReceivedCommands+0x132>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80038c2:	1d3b      	adds	r3, r7, #4
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d004      	beq.n	80038da <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	3304      	adds	r3, #4
 80038d4:	0018      	movs	r0, r3
 80038d6:	f7fe fc9e 	bl	8002216 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038da:	003b      	movs	r3, r7
 80038dc:	0018      	movs	r0, r3
 80038de:	f7ff ff85 	bl	80037ec <prvSampleTimeNow>
 80038e2:	0003      	movs	r3, r0
 80038e4:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 80038e6:	1d3b      	adds	r3, r7, #4
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b09      	cmp	r3, #9
 80038ec:	d900      	bls.n	80038f0 <prvProcessReceivedCommands+0x40>
 80038ee:	e079      	b.n	80039e4 <prvProcessReceivedCommands+0x134>
 80038f0:	009a      	lsls	r2, r3, #2
 80038f2:	4b44      	ldr	r3, [pc, #272]	; (8003a04 <prvProcessReceivedCommands+0x154>)
 80038f4:	18d3      	adds	r3, r2, r3
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2228      	movs	r2, #40	; 0x28
 80038fe:	5c9b      	ldrb	r3, [r3, r2]
 8003900:	2201      	movs	r2, #1
 8003902:	4313      	orrs	r3, r2
 8003904:	b2d9      	uxtb	r1, r3
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2228      	movs	r2, #40	; 0x28
 800390a:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800390c:	1d3b      	adds	r3, r7, #4
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	18d1      	adds	r1, r2, r3
 8003916:	1d3b      	adds	r3, r7, #4
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	6978      	ldr	r0, [r7, #20]
 800391e:	f7ff ff85 	bl	800382c <prvInsertTimerInActiveList>
 8003922:	1e03      	subs	r3, r0, #0
 8003924:	d05e      	beq.n	80039e4 <prvProcessReceivedCommands+0x134>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2228      	movs	r2, #40	; 0x28
 800392a:	5c9b      	ldrb	r3, [r3, r2]
 800392c:	001a      	movs	r2, r3
 800392e:	2304      	movs	r3, #4
 8003930:	4013      	ands	r3, r2
 8003932:	d00a      	beq.n	800394a <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003934:	1d3b      	adds	r3, r7, #4
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	18d1      	adds	r1, r2, r3
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	0018      	movs	r0, r3
 8003944:	f7ff fe80 	bl	8003648 <prvReloadTimer>
 8003948:	e008      	b.n	800395c <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2228      	movs	r2, #40	; 0x28
 800394e:	5c9b      	ldrb	r3, [r3, r2]
 8003950:	2201      	movs	r2, #1
 8003952:	4393      	bics	r3, r2
 8003954:	b2d9      	uxtb	r1, r3
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2228      	movs	r2, #40	; 0x28
 800395a:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	0010      	movs	r0, r2
 8003964:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003966:	e03d      	b.n	80039e4 <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2228      	movs	r2, #40	; 0x28
 800396c:	5c9b      	ldrb	r3, [r3, r2]
 800396e:	2201      	movs	r2, #1
 8003970:	4393      	bics	r3, r2
 8003972:	b2d9      	uxtb	r1, r3
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2228      	movs	r2, #40	; 0x28
 8003978:	5499      	strb	r1, [r3, r2]
                        break;
 800397a:	e033      	b.n	80039e4 <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2228      	movs	r2, #40	; 0x28
 8003980:	5c9b      	ldrb	r3, [r3, r2]
 8003982:	2201      	movs	r2, #1
 8003984:	4313      	orrs	r3, r2
 8003986:	b2d9      	uxtb	r1, r3
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2228      	movs	r2, #40	; 0x28
 800398c:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800398e:	1d3b      	adds	r3, r7, #4
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <prvProcessReceivedCommands+0xf2>
 800399e:	b672      	cpsid	i
 80039a0:	e7fe      	b.n	80039a0 <prvProcessReceivedCommands+0xf0>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	18d1      	adds	r1, r2, r3
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	6978      	ldr	r0, [r7, #20]
 80039b0:	f7ff ff3c 	bl	800382c <prvInsertTimerInActiveList>
                        break;
 80039b4:	e016      	b.n	80039e4 <prvProcessReceivedCommands+0x134>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2228      	movs	r2, #40	; 0x28
 80039ba:	5c9b      	ldrb	r3, [r3, r2]
 80039bc:	001a      	movs	r2, r3
 80039be:	2302      	movs	r3, #2
 80039c0:	4013      	ands	r3, r2
 80039c2:	d104      	bne.n	80039ce <prvProcessReceivedCommands+0x11e>
                            {
                                vPortFree( pxTimer );
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	0018      	movs	r0, r3
 80039c8:	f000 fa5a 	bl	8003e80 <vPortFree>
 80039cc:	e00a      	b.n	80039e4 <prvProcessReceivedCommands+0x134>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2228      	movs	r2, #40	; 0x28
 80039d2:	5c9b      	ldrb	r3, [r3, r2]
 80039d4:	2201      	movs	r2, #1
 80039d6:	4393      	bics	r3, r2
 80039d8:	b2d9      	uxtb	r1, r3
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2228      	movs	r2, #40	; 0x28
 80039de:	5499      	strb	r1, [r3, r2]
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80039e0:	e000      	b.n	80039e4 <prvProcessReceivedCommands+0x134>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80039e2:	46c0      	nop			; (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039e4:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <prvProcessReceivedCommands+0x158>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	1d39      	adds	r1, r7, #4
 80039ea:	2200      	movs	r2, #0
 80039ec:	0018      	movs	r0, r3
 80039ee:	f7fe fd48 	bl	8002482 <xQueueReceive>
 80039f2:	1e03      	subs	r3, r0, #0
 80039f4:	d000      	beq.n	80039f8 <prvProcessReceivedCommands+0x148>
 80039f6:	e75f      	b.n	80038b8 <prvProcessReceivedCommands+0x8>
        }
    }
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b006      	add	sp, #24
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	08004a44 	.word	0x08004a44
 8003a08:	20000304 	.word	0x20000304

08003a0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a12:	e00b      	b.n	8003a2c <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a14:	4b0f      	ldr	r3, [pc, #60]	; (8003a54 <prvSwitchTimerLists+0x48>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003a1e:	2301      	movs	r3, #1
 8003a20:	425a      	negs	r2, r3
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	0011      	movs	r1, r2
 8003a26:	0018      	movs	r0, r3
 8003a28:	f7ff fe30 	bl	800368c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a2c:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <prvSwitchTimerLists+0x48>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1ee      	bne.n	8003a14 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003a36:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <prvSwitchTimerLists+0x48>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003a3c:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <prvSwitchTimerLists+0x4c>)
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4b04      	ldr	r3, [pc, #16]	; (8003a54 <prvSwitchTimerLists+0x48>)
 8003a42:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8003a44:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <prvSwitchTimerLists+0x4c>)
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	601a      	str	r2, [r3, #0]
    }
 8003a4a:	46c0      	nop			; (mov r8, r8)
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	b002      	add	sp, #8
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	200002fc 	.word	0x200002fc
 8003a58:	20000300 	.word	0x20000300

08003a5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003a60:	f000 f8ce 	bl	8003c00 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003a64:	4b14      	ldr	r3, [pc, #80]	; (8003ab8 <prvCheckForValidListAndQueue+0x5c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d120      	bne.n	8003aae <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8003a6c:	4b13      	ldr	r3, [pc, #76]	; (8003abc <prvCheckForValidListAndQueue+0x60>)
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f7fe fb72 	bl	8002158 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003a74:	4b12      	ldr	r3, [pc, #72]	; (8003ac0 <prvCheckForValidListAndQueue+0x64>)
 8003a76:	0018      	movs	r0, r3
 8003a78:	f7fe fb6e 	bl	8002158 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <prvCheckForValidListAndQueue+0x68>)
 8003a7e:	4a0f      	ldr	r2, [pc, #60]	; (8003abc <prvCheckForValidListAndQueue+0x60>)
 8003a80:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003a82:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <prvCheckForValidListAndQueue+0x6c>)
 8003a84:	4a0e      	ldr	r2, [pc, #56]	; (8003ac0 <prvCheckForValidListAndQueue+0x64>)
 8003a86:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003a88:	2200      	movs	r2, #0
 8003a8a:	210c      	movs	r1, #12
 8003a8c:	2005      	movs	r0, #5
 8003a8e:	f7fe fc73 	bl	8002378 <xQueueGenericCreate>
 8003a92:	0002      	movs	r2, r0
 8003a94:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <prvCheckForValidListAndQueue+0x5c>)
 8003a96:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003a98:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <prvCheckForValidListAndQueue+0x5c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d006      	beq.n	8003aae <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <prvCheckForValidListAndQueue+0x5c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a09      	ldr	r2, [pc, #36]	; (8003acc <prvCheckForValidListAndQueue+0x70>)
 8003aa6:	0011      	movs	r1, r2
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f7fe fe39 	bl	8002720 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003aae:	f000 f8b9 	bl	8003c24 <vPortExitCritical>
    }
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20000304 	.word	0x20000304
 8003abc:	200002d4 	.word	0x200002d4
 8003ac0:	200002e8 	.word	0x200002e8
 8003ac4:	200002fc 	.word	0x200002fc
 8003ac8:	20000300 	.word	0x20000300
 8003acc:	08004a04 	.word	0x08004a04

08003ad0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	3b04      	subs	r3, #4
 8003ae0:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2280      	movs	r2, #128	; 0x80
 8003ae6:	0452      	lsls	r2, r2, #17
 8003ae8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	3b04      	subs	r3, #4
 8003aee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	3b04      	subs	r3, #4
 8003afa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8003afc:	4a08      	ldr	r2, [pc, #32]	; (8003b20 <pxPortInitialiseStack+0x50>)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	3b14      	subs	r3, #20
 8003b06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	3b20      	subs	r3, #32
 8003b12:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003b14:	68fb      	ldr	r3, [r7, #12]
}
 8003b16:	0018      	movs	r0, r3
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	b004      	add	sp, #16
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	08003b25 	.word	0x08003b25

08003b24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003b2e:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <prvTaskExitError+0x2c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3301      	adds	r3, #1
 8003b34:	d001      	beq.n	8003b3a <prvTaskExitError+0x16>
 8003b36:	b672      	cpsid	i
 8003b38:	e7fe      	b.n	8003b38 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8003b3a:	b672      	cpsid	i

    while( ulDummy == 0 )
 8003b3c:	46c0      	nop			; (mov r8, r8)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0fc      	beq.n	8003b3e <prvTaskExitError+0x1a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003b44:	46c0      	nop			; (mov r8, r8)
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b002      	add	sp, #8
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	20000010 	.word	0x20000010

08003b54 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8003b58:	46c0      	nop			; (mov r8, r8)
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8003b60:	4a0b      	ldr	r2, [pc, #44]	; (8003b90 <pxCurrentTCBConst2>)
 8003b62:	6813      	ldr	r3, [r2, #0]
 8003b64:	6818      	ldr	r0, [r3, #0]
 8003b66:	3020      	adds	r0, #32
 8003b68:	f380 8809 	msr	PSP, r0
 8003b6c:	2002      	movs	r0, #2
 8003b6e:	f380 8814 	msr	CONTROL, r0
 8003b72:	f3bf 8f6f 	isb	sy
 8003b76:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003b78:	46ae      	mov	lr, r5
 8003b7a:	bc08      	pop	{r3}
 8003b7c:	bc04      	pop	{r2}
 8003b7e:	b662      	cpsie	i
 8003b80:	4718      	bx	r3
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	46c0      	nop			; (mov r8, r8)
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	46c0      	nop			; (mov r8, r8)
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	46c0      	nop			; (mov r8, r8)
 8003b8e:	46c0      	nop			; (mov r8, r8)

08003b90 <pxCurrentTCBConst2>:
 8003b90:	200001d0 	.word	0x200001d0
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8003b94:	46c0      	nop			; (mov r8, r8)
 8003b96:	46c0      	nop			; (mov r8, r8)

08003b98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003b9c:	4b0e      	ldr	r3, [pc, #56]	; (8003bd8 <xPortStartScheduler+0x40>)
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	4b0d      	ldr	r3, [pc, #52]	; (8003bd8 <xPortStartScheduler+0x40>)
 8003ba2:	21ff      	movs	r1, #255	; 0xff
 8003ba4:	0409      	lsls	r1, r1, #16
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003baa:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <xPortStartScheduler+0x40>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <xPortStartScheduler+0x40>)
 8003bb0:	21ff      	movs	r1, #255	; 0xff
 8003bb2:	0609      	lsls	r1, r1, #24
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003bb8:	f000 f898 	bl	8003cec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003bbc:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <xPortStartScheduler+0x44>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8003bc2:	f7ff ffcd 	bl	8003b60 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003bc6:	f7ff f9f3 	bl	8002fb0 <vTaskSwitchContext>
    prvTaskExitError();
 8003bca:	f7ff ffab 	bl	8003b24 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	e000ed20 	.word	0xe000ed20
 8003bdc:	20000010 	.word	0x20000010

08003be0 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003be4:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <vPortYield+0x1c>)
 8003be6:	2280      	movs	r2, #128	; 0x80
 8003be8:	0552      	lsls	r2, r2, #21
 8003bea:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8003bec:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8003bf0:	f3bf 8f6f 	isb	sy
}
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	e000ed04 	.word	0xe000ed04

08003c00 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003c04:	b672      	cpsid	i
    uxCriticalNesting++;
 8003c06:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <vPortEnterCritical+0x20>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <vPortEnterCritical+0x20>)
 8003c0e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8003c10:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8003c14:	f3bf 8f6f 	isb	sy
}
 8003c18:	46c0      	nop			; (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	20000010 	.word	0x20000010

08003c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003c28:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <vPortExitCritical+0x2c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <vPortExitCritical+0x10>
 8003c30:	b672      	cpsid	i
 8003c32:	e7fe      	b.n	8003c32 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <vPortExitCritical+0x2c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	1e5a      	subs	r2, r3, #1
 8003c3a:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <vPortExitCritical+0x2c>)
 8003c3c:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8003c3e:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <vPortExitCritical+0x2c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d100      	bne.n	8003c48 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8003c46:	b662      	cpsie	i
    }
}
 8003c48:	46c0      	nop			; (mov r8, r8)
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	20000010 	.word	0x20000010

08003c54 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8003c54:	f3ef 8010 	mrs	r0, PRIMASK
 8003c58:	b672      	cpsid	i
 8003c5a:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8003c5c:	46c0      	nop			; (mov r8, r8)
 8003c5e:	0018      	movs	r0, r3

08003c60 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8003c60:	f380 8810 	msr	PRIMASK, r0
 8003c64:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8003c66:	46c0      	nop			; (mov r8, r8)
	...

08003c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003c70:	f3ef 8009 	mrs	r0, PSP
 8003c74:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <pxCurrentTCBConst>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	3820      	subs	r0, #32
 8003c7a:	6010      	str	r0, [r2, #0]
 8003c7c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003c7e:	4644      	mov	r4, r8
 8003c80:	464d      	mov	r5, r9
 8003c82:	4656      	mov	r6, sl
 8003c84:	465f      	mov	r7, fp
 8003c86:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003c88:	b508      	push	{r3, lr}
 8003c8a:	b672      	cpsid	i
 8003c8c:	f7ff f990 	bl	8002fb0 <vTaskSwitchContext>
 8003c90:	b662      	cpsie	i
 8003c92:	bc0c      	pop	{r2, r3}
 8003c94:	6811      	ldr	r1, [r2, #0]
 8003c96:	6808      	ldr	r0, [r1, #0]
 8003c98:	3010      	adds	r0, #16
 8003c9a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003c9c:	46a0      	mov	r8, r4
 8003c9e:	46a9      	mov	r9, r5
 8003ca0:	46b2      	mov	sl, r6
 8003ca2:	46bb      	mov	fp, r7
 8003ca4:	f380 8809 	msr	PSP, r0
 8003ca8:	3820      	subs	r0, #32
 8003caa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003cac:	4718      	bx	r3
 8003cae:	46c0      	nop			; (mov r8, r8)

08003cb0 <pxCurrentTCBConst>:
 8003cb0:	200001d0 	.word	0x200001d0
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8003cb4:	46c0      	nop			; (mov r8, r8)
 8003cb6:	46c0      	nop			; (mov r8, r8)

08003cb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8003cbe:	f7ff ffc9 	bl	8003c54 <ulSetInterruptMaskFromISR>
 8003cc2:	0003      	movs	r3, r0
 8003cc4:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003cc6:	f7ff f867 	bl	8002d98 <xTaskIncrementTick>
 8003cca:	1e03      	subs	r3, r0, #0
 8003ccc:	d003      	beq.n	8003cd6 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <SysTick_Handler+0x30>)
 8003cd0:	2280      	movs	r2, #128	; 0x80
 8003cd2:	0552      	lsls	r2, r2, #21
 8003cd4:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f7ff ffc1 	bl	8003c60 <vClearInterruptMaskFromISR>
}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	b002      	add	sp, #8
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	e000ed04 	.word	0xe000ed04

08003cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <vPortSetupTimerInterrupt+0x34>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <vPortSetupTimerInterrupt+0x38>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003cfc:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <vPortSetupTimerInterrupt+0x3c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	22fa      	movs	r2, #250	; 0xfa
 8003d02:	0091      	lsls	r1, r2, #2
 8003d04:	0018      	movs	r0, r3
 8003d06:	f7fc fa09 	bl	800011c <__udivsi3>
 8003d0a:	0003      	movs	r3, r0
 8003d0c:	001a      	movs	r2, r3
 8003d0e:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <vPortSetupTimerInterrupt+0x40>)
 8003d10:	3a01      	subs	r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003d14:	4b02      	ldr	r3, [pc, #8]	; (8003d20 <vPortSetupTimerInterrupt+0x34>)
 8003d16:	2207      	movs	r2, #7
 8003d18:	601a      	str	r2, [r3, #0]
}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	e000e010 	.word	0xe000e010
 8003d24:	e000e018 	.word	0xe000e018
 8003d28:	20000000 	.word	0x20000000
 8003d2c:	e000e014 	.word	0xe000e014

08003d30 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003d3c:	f7fe ff2a 	bl	8002b94 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003d40:	4b4a      	ldr	r3, [pc, #296]	; (8003e6c <pvPortMalloc+0x13c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003d48:	f000 f8e6 	bl	8003f18 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d012      	beq.n	8003d78 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003d52:	2208      	movs	r2, #8
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2107      	movs	r1, #7
 8003d58:	400b      	ands	r3, r1
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	43db      	mvns	r3, r3
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d804      	bhi.n	8003d74 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	18d3      	adds	r3, r2, r3
 8003d70:	607b      	str	r3, [r7, #4]
 8003d72:	e001      	b.n	8003d78 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	db68      	blt.n	8003e50 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d065      	beq.n	8003e50 <pvPortMalloc+0x120>
 8003d84:	4b3a      	ldr	r3, [pc, #232]	; (8003e70 <pvPortMalloc+0x140>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d860      	bhi.n	8003e50 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003d8e:	4b39      	ldr	r3, [pc, #228]	; (8003e74 <pvPortMalloc+0x144>)
 8003d90:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8003d92:	4b38      	ldr	r3, [pc, #224]	; (8003e74 <pvPortMalloc+0x144>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d98:	e004      	b.n	8003da4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d903      	bls.n	8003db6 <pvPortMalloc+0x86>
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f1      	bne.n	8003d9a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003db6:	4b2d      	ldr	r3, [pc, #180]	; (8003e6c <pvPortMalloc+0x13c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69fa      	ldr	r2, [r7, #28]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d047      	beq.n	8003e50 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	189b      	adds	r3, r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	1ad2      	subs	r2, r2, r3
 8003dda:	2308      	movs	r3, #8
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d916      	bls.n	8003e10 <pvPortMalloc+0xe0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003de2:	69fa      	ldr	r2, [r7, #28]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	18d3      	adds	r3, r2, r3
 8003de8:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2207      	movs	r2, #7
 8003dee:	4013      	ands	r3, r2
 8003df0:	d001      	beq.n	8003df6 <pvPortMalloc+0xc6>
 8003df2:	b672      	cpsid	i
 8003df4:	e7fe      	b.n	8003df4 <pvPortMalloc+0xc4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	1ad2      	subs	r2, r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f000 f8de 	bl	8003fcc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003e10:	4b17      	ldr	r3, [pc, #92]	; (8003e70 <pvPortMalloc+0x140>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	1ad2      	subs	r2, r2, r3
 8003e1a:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <pvPortMalloc+0x140>)
 8003e1c:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003e1e:	4b14      	ldr	r3, [pc, #80]	; (8003e70 <pvPortMalloc+0x140>)
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <pvPortMalloc+0x148>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d203      	bcs.n	8003e32 <pvPortMalloc+0x102>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003e2a:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <pvPortMalloc+0x140>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	4b12      	ldr	r3, [pc, #72]	; (8003e78 <pvPortMalloc+0x148>)
 8003e30:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2280      	movs	r2, #128	; 0x80
 8003e38:	0612      	lsls	r2, r2, #24
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003e46:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <pvPortMalloc+0x14c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <pvPortMalloc+0x14c>)
 8003e4e:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003e50:	f7fe feac 	bl	8002bac <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2207      	movs	r2, #7
 8003e58:	4013      	ands	r3, r2
 8003e5a:	d001      	beq.n	8003e60 <pvPortMalloc+0x130>
 8003e5c:	b672      	cpsid	i
 8003e5e:	e7fe      	b.n	8003e5e <pvPortMalloc+0x12e>
    return pvReturn;
 8003e60:	697b      	ldr	r3, [r7, #20]
}
 8003e62:	0018      	movs	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b008      	add	sp, #32
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	20001c7c 	.word	0x20001c7c
 8003e70:	20001c80 	.word	0x20001c80
 8003e74:	20001c74 	.word	0x20001c74
 8003e78:	20001c84 	.word	0x20001c84
 8003e7c:	20001c88 	.word	0x20001c88

08003e80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d039      	beq.n	8003f06 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003e92:	2308      	movs	r3, #8
 8003e94:	425b      	negs	r3, r3
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	18d3      	adds	r3, r2, r3
 8003e9a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	db01      	blt.n	8003eac <vPortFree+0x2c>
 8003ea8:	b672      	cpsid	i
 8003eaa:	e7fe      	b.n	8003eaa <vPortFree+0x2a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <vPortFree+0x38>
 8003eb4:	b672      	cpsid	i
 8003eb6:	e7fe      	b.n	8003eb6 <vPortFree+0x36>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	0fdb      	lsrs	r3, r3, #31
 8003ebe:	1c1a      	adds	r2, r3, #0
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d01d      	beq.n	8003f06 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d119      	bne.n	8003f06 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	085a      	lsrs	r2, r3, #1
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003ede:	f7fe fe59 	bl	8002b94 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <vPortFree+0x90>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	18d2      	adds	r2, r2, r3
 8003eec:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <vPortFree+0x90>)
 8003eee:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f000 f86a 	bl	8003fcc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003ef8:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <vPortFree+0x94>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <vPortFree+0x94>)
 8003f00:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 8003f02:	f7fe fe53 	bl	8002bac <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b004      	add	sp, #16
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	20001c80 	.word	0x20001c80
 8003f14:	20001c8c 	.word	0x20001c8c

08003f18 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f1e:	4b25      	ldr	r3, [pc, #148]	; (8003fb4 <prvHeapInit+0x9c>)
 8003f20:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003f22:	4b25      	ldr	r3, [pc, #148]	; (8003fb8 <prvHeapInit+0xa0>)
 8003f24:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2207      	movs	r2, #7
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d00c      	beq.n	8003f48 <prvHeapInit+0x30>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3307      	adds	r3, #7
 8003f32:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2207      	movs	r2, #7
 8003f38:	4393      	bics	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1ad2      	subs	r2, r2, r3
 8003f42:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <prvHeapInit+0xa0>)
 8003f44:	18d3      	adds	r3, r2, r3
 8003f46:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f4c:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <prvHeapInit+0xa4>)
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003f52:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <prvHeapInit+0xa4>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	18d3      	adds	r3, r2, r3
 8003f5e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003f60:	2208      	movs	r2, #8
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1a9b      	subs	r3, r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2207      	movs	r2, #7
 8003f6c:	4393      	bics	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4b13      	ldr	r3, [pc, #76]	; (8003fc0 <prvHeapInit+0xa8>)
 8003f74:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 8003f76:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <prvHeapInit+0xa8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003f7e:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <prvHeapInit+0xa8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	1ad2      	subs	r2, r2, r3
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f94:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <prvHeapInit+0xa8>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <prvHeapInit+0xac>)
 8003fa2:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <prvHeapInit+0xb0>)
 8003faa:	601a      	str	r2, [r3, #0]
}
 8003fac:	46c0      	nop			; (mov r8, r8)
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b004      	add	sp, #16
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	00001964 	.word	0x00001964
 8003fb8:	20000310 	.word	0x20000310
 8003fbc:	20001c74 	.word	0x20001c74
 8003fc0:	20001c7c 	.word	0x20001c7c
 8003fc4:	20001c84 	.word	0x20001c84
 8003fc8:	20001c80 	.word	0x20001c80

08003fcc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003fd4:	4b27      	ldr	r3, [pc, #156]	; (8004074 <prvInsertBlockIntoFreeList+0xa8>)
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	e002      	b.n	8003fe0 <prvInsertBlockIntoFreeList+0x14>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d8f7      	bhi.n	8003fda <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	18d3      	adds	r3, r2, r3
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d108      	bne.n	800400e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	18d2      	adds	r2, r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	18d2      	adds	r2, r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d118      	bne.n	8004054 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	4b14      	ldr	r3, [pc, #80]	; (8004078 <prvInsertBlockIntoFreeList+0xac>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d00d      	beq.n	800404a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	18d2      	adds	r2, r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	e008      	b.n	800405c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800404a:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <prvInsertBlockIntoFreeList+0xac>)
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	e003      	b.n	800405c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	429a      	cmp	r2, r3
 8004062:	d002      	beq.n	800406a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	46bd      	mov	sp, r7
 800406e:	b004      	add	sp, #16
 8004070:	bd80      	pop	{r7, pc}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	20001c74 	.word	0x20001c74
 8004078:	20001c7c 	.word	0x20001c7c

0800407c <__errno>:
 800407c:	4b01      	ldr	r3, [pc, #4]	; (8004084 <__errno+0x8>)
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	4770      	bx	lr
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	20000014 	.word	0x20000014

08004088 <__libc_init_array>:
 8004088:	b570      	push	{r4, r5, r6, lr}
 800408a:	2600      	movs	r6, #0
 800408c:	4d0c      	ldr	r5, [pc, #48]	; (80040c0 <__libc_init_array+0x38>)
 800408e:	4c0d      	ldr	r4, [pc, #52]	; (80040c4 <__libc_init_array+0x3c>)
 8004090:	1b64      	subs	r4, r4, r5
 8004092:	10a4      	asrs	r4, r4, #2
 8004094:	42a6      	cmp	r6, r4
 8004096:	d109      	bne.n	80040ac <__libc_init_array+0x24>
 8004098:	2600      	movs	r6, #0
 800409a:	f000 fc8b 	bl	80049b4 <_init>
 800409e:	4d0a      	ldr	r5, [pc, #40]	; (80040c8 <__libc_init_array+0x40>)
 80040a0:	4c0a      	ldr	r4, [pc, #40]	; (80040cc <__libc_init_array+0x44>)
 80040a2:	1b64      	subs	r4, r4, r5
 80040a4:	10a4      	asrs	r4, r4, #2
 80040a6:	42a6      	cmp	r6, r4
 80040a8:	d105      	bne.n	80040b6 <__libc_init_array+0x2e>
 80040aa:	bd70      	pop	{r4, r5, r6, pc}
 80040ac:	00b3      	lsls	r3, r6, #2
 80040ae:	58eb      	ldr	r3, [r5, r3]
 80040b0:	4798      	blx	r3
 80040b2:	3601      	adds	r6, #1
 80040b4:	e7ee      	b.n	8004094 <__libc_init_array+0xc>
 80040b6:	00b3      	lsls	r3, r6, #2
 80040b8:	58eb      	ldr	r3, [r5, r3]
 80040ba:	4798      	blx	r3
 80040bc:	3601      	adds	r6, #1
 80040be:	e7f2      	b.n	80040a6 <__libc_init_array+0x1e>
 80040c0:	08004aa0 	.word	0x08004aa0
 80040c4:	08004aa0 	.word	0x08004aa0
 80040c8:	08004aa0 	.word	0x08004aa0
 80040cc:	08004aa4 	.word	0x08004aa4

080040d0 <memcpy>:
 80040d0:	2300      	movs	r3, #0
 80040d2:	b510      	push	{r4, lr}
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d100      	bne.n	80040da <memcpy+0xa>
 80040d8:	bd10      	pop	{r4, pc}
 80040da:	5ccc      	ldrb	r4, [r1, r3]
 80040dc:	54c4      	strb	r4, [r0, r3]
 80040de:	3301      	adds	r3, #1
 80040e0:	e7f8      	b.n	80040d4 <memcpy+0x4>

080040e2 <memset>:
 80040e2:	0003      	movs	r3, r0
 80040e4:	1882      	adds	r2, r0, r2
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d100      	bne.n	80040ec <memset+0xa>
 80040ea:	4770      	bx	lr
 80040ec:	7019      	strb	r1, [r3, #0]
 80040ee:	3301      	adds	r3, #1
 80040f0:	e7f9      	b.n	80040e6 <memset+0x4>
	...

080040f4 <siprintf>:
 80040f4:	b40e      	push	{r1, r2, r3}
 80040f6:	b500      	push	{lr}
 80040f8:	490b      	ldr	r1, [pc, #44]	; (8004128 <siprintf+0x34>)
 80040fa:	b09c      	sub	sp, #112	; 0x70
 80040fc:	ab1d      	add	r3, sp, #116	; 0x74
 80040fe:	9002      	str	r0, [sp, #8]
 8004100:	9006      	str	r0, [sp, #24]
 8004102:	9107      	str	r1, [sp, #28]
 8004104:	9104      	str	r1, [sp, #16]
 8004106:	4809      	ldr	r0, [pc, #36]	; (800412c <siprintf+0x38>)
 8004108:	4909      	ldr	r1, [pc, #36]	; (8004130 <siprintf+0x3c>)
 800410a:	cb04      	ldmia	r3!, {r2}
 800410c:	9105      	str	r1, [sp, #20]
 800410e:	6800      	ldr	r0, [r0, #0]
 8004110:	a902      	add	r1, sp, #8
 8004112:	9301      	str	r3, [sp, #4]
 8004114:	f000 f870 	bl	80041f8 <_svfiprintf_r>
 8004118:	2300      	movs	r3, #0
 800411a:	9a02      	ldr	r2, [sp, #8]
 800411c:	7013      	strb	r3, [r2, #0]
 800411e:	b01c      	add	sp, #112	; 0x70
 8004120:	bc08      	pop	{r3}
 8004122:	b003      	add	sp, #12
 8004124:	4718      	bx	r3
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	7fffffff 	.word	0x7fffffff
 800412c:	20000014 	.word	0x20000014
 8004130:	ffff0208 	.word	0xffff0208

08004134 <__ssputs_r>:
 8004134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004136:	688e      	ldr	r6, [r1, #8]
 8004138:	b085      	sub	sp, #20
 800413a:	0007      	movs	r7, r0
 800413c:	000c      	movs	r4, r1
 800413e:	9203      	str	r2, [sp, #12]
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	429e      	cmp	r6, r3
 8004144:	d83c      	bhi.n	80041c0 <__ssputs_r+0x8c>
 8004146:	2390      	movs	r3, #144	; 0x90
 8004148:	898a      	ldrh	r2, [r1, #12]
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	421a      	tst	r2, r3
 800414e:	d034      	beq.n	80041ba <__ssputs_r+0x86>
 8004150:	6909      	ldr	r1, [r1, #16]
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	6960      	ldr	r0, [r4, #20]
 8004156:	1a5b      	subs	r3, r3, r1
 8004158:	9302      	str	r3, [sp, #8]
 800415a:	2303      	movs	r3, #3
 800415c:	4343      	muls	r3, r0
 800415e:	0fdd      	lsrs	r5, r3, #31
 8004160:	18ed      	adds	r5, r5, r3
 8004162:	9b01      	ldr	r3, [sp, #4]
 8004164:	9802      	ldr	r0, [sp, #8]
 8004166:	3301      	adds	r3, #1
 8004168:	181b      	adds	r3, r3, r0
 800416a:	106d      	asrs	r5, r5, #1
 800416c:	42ab      	cmp	r3, r5
 800416e:	d900      	bls.n	8004172 <__ssputs_r+0x3e>
 8004170:	001d      	movs	r5, r3
 8004172:	0553      	lsls	r3, r2, #21
 8004174:	d532      	bpl.n	80041dc <__ssputs_r+0xa8>
 8004176:	0029      	movs	r1, r5
 8004178:	0038      	movs	r0, r7
 800417a:	f000 fb49 	bl	8004810 <_malloc_r>
 800417e:	1e06      	subs	r6, r0, #0
 8004180:	d109      	bne.n	8004196 <__ssputs_r+0x62>
 8004182:	230c      	movs	r3, #12
 8004184:	603b      	str	r3, [r7, #0]
 8004186:	2340      	movs	r3, #64	; 0x40
 8004188:	2001      	movs	r0, #1
 800418a:	89a2      	ldrh	r2, [r4, #12]
 800418c:	4240      	negs	r0, r0
 800418e:	4313      	orrs	r3, r2
 8004190:	81a3      	strh	r3, [r4, #12]
 8004192:	b005      	add	sp, #20
 8004194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004196:	9a02      	ldr	r2, [sp, #8]
 8004198:	6921      	ldr	r1, [r4, #16]
 800419a:	f7ff ff99 	bl	80040d0 <memcpy>
 800419e:	89a3      	ldrh	r3, [r4, #12]
 80041a0:	4a14      	ldr	r2, [pc, #80]	; (80041f4 <__ssputs_r+0xc0>)
 80041a2:	401a      	ands	r2, r3
 80041a4:	2380      	movs	r3, #128	; 0x80
 80041a6:	4313      	orrs	r3, r2
 80041a8:	81a3      	strh	r3, [r4, #12]
 80041aa:	9b02      	ldr	r3, [sp, #8]
 80041ac:	6126      	str	r6, [r4, #16]
 80041ae:	18f6      	adds	r6, r6, r3
 80041b0:	6026      	str	r6, [r4, #0]
 80041b2:	6165      	str	r5, [r4, #20]
 80041b4:	9e01      	ldr	r6, [sp, #4]
 80041b6:	1aed      	subs	r5, r5, r3
 80041b8:	60a5      	str	r5, [r4, #8]
 80041ba:	9b01      	ldr	r3, [sp, #4]
 80041bc:	429e      	cmp	r6, r3
 80041be:	d900      	bls.n	80041c2 <__ssputs_r+0x8e>
 80041c0:	9e01      	ldr	r6, [sp, #4]
 80041c2:	0032      	movs	r2, r6
 80041c4:	9903      	ldr	r1, [sp, #12]
 80041c6:	6820      	ldr	r0, [r4, #0]
 80041c8:	f000 faa3 	bl	8004712 <memmove>
 80041cc:	68a3      	ldr	r3, [r4, #8]
 80041ce:	2000      	movs	r0, #0
 80041d0:	1b9b      	subs	r3, r3, r6
 80041d2:	60a3      	str	r3, [r4, #8]
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	199e      	adds	r6, r3, r6
 80041d8:	6026      	str	r6, [r4, #0]
 80041da:	e7da      	b.n	8004192 <__ssputs_r+0x5e>
 80041dc:	002a      	movs	r2, r5
 80041de:	0038      	movs	r0, r7
 80041e0:	f000 fb8c 	bl	80048fc <_realloc_r>
 80041e4:	1e06      	subs	r6, r0, #0
 80041e6:	d1e0      	bne.n	80041aa <__ssputs_r+0x76>
 80041e8:	0038      	movs	r0, r7
 80041ea:	6921      	ldr	r1, [r4, #16]
 80041ec:	f000 faa4 	bl	8004738 <_free_r>
 80041f0:	e7c7      	b.n	8004182 <__ssputs_r+0x4e>
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	fffffb7f 	.word	0xfffffb7f

080041f8 <_svfiprintf_r>:
 80041f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041fa:	b0a1      	sub	sp, #132	; 0x84
 80041fc:	9003      	str	r0, [sp, #12]
 80041fe:	001d      	movs	r5, r3
 8004200:	898b      	ldrh	r3, [r1, #12]
 8004202:	000f      	movs	r7, r1
 8004204:	0016      	movs	r6, r2
 8004206:	061b      	lsls	r3, r3, #24
 8004208:	d511      	bpl.n	800422e <_svfiprintf_r+0x36>
 800420a:	690b      	ldr	r3, [r1, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10e      	bne.n	800422e <_svfiprintf_r+0x36>
 8004210:	2140      	movs	r1, #64	; 0x40
 8004212:	f000 fafd 	bl	8004810 <_malloc_r>
 8004216:	6038      	str	r0, [r7, #0]
 8004218:	6138      	str	r0, [r7, #16]
 800421a:	2800      	cmp	r0, #0
 800421c:	d105      	bne.n	800422a <_svfiprintf_r+0x32>
 800421e:	230c      	movs	r3, #12
 8004220:	9a03      	ldr	r2, [sp, #12]
 8004222:	3801      	subs	r0, #1
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	b021      	add	sp, #132	; 0x84
 8004228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800422a:	2340      	movs	r3, #64	; 0x40
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	2300      	movs	r3, #0
 8004230:	ac08      	add	r4, sp, #32
 8004232:	6163      	str	r3, [r4, #20]
 8004234:	3320      	adds	r3, #32
 8004236:	7663      	strb	r3, [r4, #25]
 8004238:	3310      	adds	r3, #16
 800423a:	76a3      	strb	r3, [r4, #26]
 800423c:	9507      	str	r5, [sp, #28]
 800423e:	0035      	movs	r5, r6
 8004240:	782b      	ldrb	r3, [r5, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <_svfiprintf_r+0x52>
 8004246:	2b25      	cmp	r3, #37	; 0x25
 8004248:	d147      	bne.n	80042da <_svfiprintf_r+0xe2>
 800424a:	1bab      	subs	r3, r5, r6
 800424c:	9305      	str	r3, [sp, #20]
 800424e:	42b5      	cmp	r5, r6
 8004250:	d00c      	beq.n	800426c <_svfiprintf_r+0x74>
 8004252:	0032      	movs	r2, r6
 8004254:	0039      	movs	r1, r7
 8004256:	9803      	ldr	r0, [sp, #12]
 8004258:	f7ff ff6c 	bl	8004134 <__ssputs_r>
 800425c:	1c43      	adds	r3, r0, #1
 800425e:	d100      	bne.n	8004262 <_svfiprintf_r+0x6a>
 8004260:	e0ae      	b.n	80043c0 <_svfiprintf_r+0x1c8>
 8004262:	6962      	ldr	r2, [r4, #20]
 8004264:	9b05      	ldr	r3, [sp, #20]
 8004266:	4694      	mov	ip, r2
 8004268:	4463      	add	r3, ip
 800426a:	6163      	str	r3, [r4, #20]
 800426c:	782b      	ldrb	r3, [r5, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d100      	bne.n	8004274 <_svfiprintf_r+0x7c>
 8004272:	e0a5      	b.n	80043c0 <_svfiprintf_r+0x1c8>
 8004274:	2201      	movs	r2, #1
 8004276:	2300      	movs	r3, #0
 8004278:	4252      	negs	r2, r2
 800427a:	6062      	str	r2, [r4, #4]
 800427c:	a904      	add	r1, sp, #16
 800427e:	3254      	adds	r2, #84	; 0x54
 8004280:	1852      	adds	r2, r2, r1
 8004282:	1c6e      	adds	r6, r5, #1
 8004284:	6023      	str	r3, [r4, #0]
 8004286:	60e3      	str	r3, [r4, #12]
 8004288:	60a3      	str	r3, [r4, #8]
 800428a:	7013      	strb	r3, [r2, #0]
 800428c:	65a3      	str	r3, [r4, #88]	; 0x58
 800428e:	2205      	movs	r2, #5
 8004290:	7831      	ldrb	r1, [r6, #0]
 8004292:	4854      	ldr	r0, [pc, #336]	; (80043e4 <_svfiprintf_r+0x1ec>)
 8004294:	f000 fa32 	bl	80046fc <memchr>
 8004298:	1c75      	adds	r5, r6, #1
 800429a:	2800      	cmp	r0, #0
 800429c:	d11f      	bne.n	80042de <_svfiprintf_r+0xe6>
 800429e:	6822      	ldr	r2, [r4, #0]
 80042a0:	06d3      	lsls	r3, r2, #27
 80042a2:	d504      	bpl.n	80042ae <_svfiprintf_r+0xb6>
 80042a4:	2353      	movs	r3, #83	; 0x53
 80042a6:	a904      	add	r1, sp, #16
 80042a8:	185b      	adds	r3, r3, r1
 80042aa:	2120      	movs	r1, #32
 80042ac:	7019      	strb	r1, [r3, #0]
 80042ae:	0713      	lsls	r3, r2, #28
 80042b0:	d504      	bpl.n	80042bc <_svfiprintf_r+0xc4>
 80042b2:	2353      	movs	r3, #83	; 0x53
 80042b4:	a904      	add	r1, sp, #16
 80042b6:	185b      	adds	r3, r3, r1
 80042b8:	212b      	movs	r1, #43	; 0x2b
 80042ba:	7019      	strb	r1, [r3, #0]
 80042bc:	7833      	ldrb	r3, [r6, #0]
 80042be:	2b2a      	cmp	r3, #42	; 0x2a
 80042c0:	d016      	beq.n	80042f0 <_svfiprintf_r+0xf8>
 80042c2:	0035      	movs	r5, r6
 80042c4:	2100      	movs	r1, #0
 80042c6:	200a      	movs	r0, #10
 80042c8:	68e3      	ldr	r3, [r4, #12]
 80042ca:	782a      	ldrb	r2, [r5, #0]
 80042cc:	1c6e      	adds	r6, r5, #1
 80042ce:	3a30      	subs	r2, #48	; 0x30
 80042d0:	2a09      	cmp	r2, #9
 80042d2:	d94e      	bls.n	8004372 <_svfiprintf_r+0x17a>
 80042d4:	2900      	cmp	r1, #0
 80042d6:	d111      	bne.n	80042fc <_svfiprintf_r+0x104>
 80042d8:	e017      	b.n	800430a <_svfiprintf_r+0x112>
 80042da:	3501      	adds	r5, #1
 80042dc:	e7b0      	b.n	8004240 <_svfiprintf_r+0x48>
 80042de:	4b41      	ldr	r3, [pc, #260]	; (80043e4 <_svfiprintf_r+0x1ec>)
 80042e0:	6822      	ldr	r2, [r4, #0]
 80042e2:	1ac0      	subs	r0, r0, r3
 80042e4:	2301      	movs	r3, #1
 80042e6:	4083      	lsls	r3, r0
 80042e8:	4313      	orrs	r3, r2
 80042ea:	002e      	movs	r6, r5
 80042ec:	6023      	str	r3, [r4, #0]
 80042ee:	e7ce      	b.n	800428e <_svfiprintf_r+0x96>
 80042f0:	9b07      	ldr	r3, [sp, #28]
 80042f2:	1d19      	adds	r1, r3, #4
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	9107      	str	r1, [sp, #28]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	db01      	blt.n	8004300 <_svfiprintf_r+0x108>
 80042fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80042fe:	e004      	b.n	800430a <_svfiprintf_r+0x112>
 8004300:	425b      	negs	r3, r3
 8004302:	60e3      	str	r3, [r4, #12]
 8004304:	2302      	movs	r3, #2
 8004306:	4313      	orrs	r3, r2
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	782b      	ldrb	r3, [r5, #0]
 800430c:	2b2e      	cmp	r3, #46	; 0x2e
 800430e:	d10a      	bne.n	8004326 <_svfiprintf_r+0x12e>
 8004310:	786b      	ldrb	r3, [r5, #1]
 8004312:	2b2a      	cmp	r3, #42	; 0x2a
 8004314:	d135      	bne.n	8004382 <_svfiprintf_r+0x18a>
 8004316:	9b07      	ldr	r3, [sp, #28]
 8004318:	3502      	adds	r5, #2
 800431a:	1d1a      	adds	r2, r3, #4
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	9207      	str	r2, [sp, #28]
 8004320:	2b00      	cmp	r3, #0
 8004322:	db2b      	blt.n	800437c <_svfiprintf_r+0x184>
 8004324:	9309      	str	r3, [sp, #36]	; 0x24
 8004326:	4e30      	ldr	r6, [pc, #192]	; (80043e8 <_svfiprintf_r+0x1f0>)
 8004328:	2203      	movs	r2, #3
 800432a:	0030      	movs	r0, r6
 800432c:	7829      	ldrb	r1, [r5, #0]
 800432e:	f000 f9e5 	bl	80046fc <memchr>
 8004332:	2800      	cmp	r0, #0
 8004334:	d006      	beq.n	8004344 <_svfiprintf_r+0x14c>
 8004336:	2340      	movs	r3, #64	; 0x40
 8004338:	1b80      	subs	r0, r0, r6
 800433a:	4083      	lsls	r3, r0
 800433c:	6822      	ldr	r2, [r4, #0]
 800433e:	3501      	adds	r5, #1
 8004340:	4313      	orrs	r3, r2
 8004342:	6023      	str	r3, [r4, #0]
 8004344:	7829      	ldrb	r1, [r5, #0]
 8004346:	2206      	movs	r2, #6
 8004348:	4828      	ldr	r0, [pc, #160]	; (80043ec <_svfiprintf_r+0x1f4>)
 800434a:	1c6e      	adds	r6, r5, #1
 800434c:	7621      	strb	r1, [r4, #24]
 800434e:	f000 f9d5 	bl	80046fc <memchr>
 8004352:	2800      	cmp	r0, #0
 8004354:	d03c      	beq.n	80043d0 <_svfiprintf_r+0x1d8>
 8004356:	4b26      	ldr	r3, [pc, #152]	; (80043f0 <_svfiprintf_r+0x1f8>)
 8004358:	2b00      	cmp	r3, #0
 800435a:	d125      	bne.n	80043a8 <_svfiprintf_r+0x1b0>
 800435c:	2207      	movs	r2, #7
 800435e:	9b07      	ldr	r3, [sp, #28]
 8004360:	3307      	adds	r3, #7
 8004362:	4393      	bics	r3, r2
 8004364:	3308      	adds	r3, #8
 8004366:	9307      	str	r3, [sp, #28]
 8004368:	6963      	ldr	r3, [r4, #20]
 800436a:	9a04      	ldr	r2, [sp, #16]
 800436c:	189b      	adds	r3, r3, r2
 800436e:	6163      	str	r3, [r4, #20]
 8004370:	e765      	b.n	800423e <_svfiprintf_r+0x46>
 8004372:	4343      	muls	r3, r0
 8004374:	0035      	movs	r5, r6
 8004376:	2101      	movs	r1, #1
 8004378:	189b      	adds	r3, r3, r2
 800437a:	e7a6      	b.n	80042ca <_svfiprintf_r+0xd2>
 800437c:	2301      	movs	r3, #1
 800437e:	425b      	negs	r3, r3
 8004380:	e7d0      	b.n	8004324 <_svfiprintf_r+0x12c>
 8004382:	2300      	movs	r3, #0
 8004384:	200a      	movs	r0, #10
 8004386:	001a      	movs	r2, r3
 8004388:	3501      	adds	r5, #1
 800438a:	6063      	str	r3, [r4, #4]
 800438c:	7829      	ldrb	r1, [r5, #0]
 800438e:	1c6e      	adds	r6, r5, #1
 8004390:	3930      	subs	r1, #48	; 0x30
 8004392:	2909      	cmp	r1, #9
 8004394:	d903      	bls.n	800439e <_svfiprintf_r+0x1a6>
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0c5      	beq.n	8004326 <_svfiprintf_r+0x12e>
 800439a:	9209      	str	r2, [sp, #36]	; 0x24
 800439c:	e7c3      	b.n	8004326 <_svfiprintf_r+0x12e>
 800439e:	4342      	muls	r2, r0
 80043a0:	0035      	movs	r5, r6
 80043a2:	2301      	movs	r3, #1
 80043a4:	1852      	adds	r2, r2, r1
 80043a6:	e7f1      	b.n	800438c <_svfiprintf_r+0x194>
 80043a8:	ab07      	add	r3, sp, #28
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	003a      	movs	r2, r7
 80043ae:	0021      	movs	r1, r4
 80043b0:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <_svfiprintf_r+0x1fc>)
 80043b2:	9803      	ldr	r0, [sp, #12]
 80043b4:	e000      	b.n	80043b8 <_svfiprintf_r+0x1c0>
 80043b6:	bf00      	nop
 80043b8:	9004      	str	r0, [sp, #16]
 80043ba:	9b04      	ldr	r3, [sp, #16]
 80043bc:	3301      	adds	r3, #1
 80043be:	d1d3      	bne.n	8004368 <_svfiprintf_r+0x170>
 80043c0:	89bb      	ldrh	r3, [r7, #12]
 80043c2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80043c4:	065b      	lsls	r3, r3, #25
 80043c6:	d400      	bmi.n	80043ca <_svfiprintf_r+0x1d2>
 80043c8:	e72d      	b.n	8004226 <_svfiprintf_r+0x2e>
 80043ca:	2001      	movs	r0, #1
 80043cc:	4240      	negs	r0, r0
 80043ce:	e72a      	b.n	8004226 <_svfiprintf_r+0x2e>
 80043d0:	ab07      	add	r3, sp, #28
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	003a      	movs	r2, r7
 80043d6:	0021      	movs	r1, r4
 80043d8:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <_svfiprintf_r+0x1fc>)
 80043da:	9803      	ldr	r0, [sp, #12]
 80043dc:	f000 f87c 	bl	80044d8 <_printf_i>
 80043e0:	e7ea      	b.n	80043b8 <_svfiprintf_r+0x1c0>
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	08004a6c 	.word	0x08004a6c
 80043e8:	08004a72 	.word	0x08004a72
 80043ec:	08004a76 	.word	0x08004a76
 80043f0:	00000000 	.word	0x00000000
 80043f4:	08004135 	.word	0x08004135

080043f8 <_printf_common>:
 80043f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043fa:	0015      	movs	r5, r2
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	688a      	ldr	r2, [r1, #8]
 8004400:	690b      	ldr	r3, [r1, #16]
 8004402:	000c      	movs	r4, r1
 8004404:	9000      	str	r0, [sp, #0]
 8004406:	4293      	cmp	r3, r2
 8004408:	da00      	bge.n	800440c <_printf_common+0x14>
 800440a:	0013      	movs	r3, r2
 800440c:	0022      	movs	r2, r4
 800440e:	602b      	str	r3, [r5, #0]
 8004410:	3243      	adds	r2, #67	; 0x43
 8004412:	7812      	ldrb	r2, [r2, #0]
 8004414:	2a00      	cmp	r2, #0
 8004416:	d001      	beq.n	800441c <_printf_common+0x24>
 8004418:	3301      	adds	r3, #1
 800441a:	602b      	str	r3, [r5, #0]
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	069b      	lsls	r3, r3, #26
 8004420:	d502      	bpl.n	8004428 <_printf_common+0x30>
 8004422:	682b      	ldr	r3, [r5, #0]
 8004424:	3302      	adds	r3, #2
 8004426:	602b      	str	r3, [r5, #0]
 8004428:	6822      	ldr	r2, [r4, #0]
 800442a:	2306      	movs	r3, #6
 800442c:	0017      	movs	r7, r2
 800442e:	401f      	ands	r7, r3
 8004430:	421a      	tst	r2, r3
 8004432:	d027      	beq.n	8004484 <_printf_common+0x8c>
 8004434:	0023      	movs	r3, r4
 8004436:	3343      	adds	r3, #67	; 0x43
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	1e5a      	subs	r2, r3, #1
 800443c:	4193      	sbcs	r3, r2
 800443e:	6822      	ldr	r2, [r4, #0]
 8004440:	0692      	lsls	r2, r2, #26
 8004442:	d430      	bmi.n	80044a6 <_printf_common+0xae>
 8004444:	0022      	movs	r2, r4
 8004446:	9901      	ldr	r1, [sp, #4]
 8004448:	9800      	ldr	r0, [sp, #0]
 800444a:	9e08      	ldr	r6, [sp, #32]
 800444c:	3243      	adds	r2, #67	; 0x43
 800444e:	47b0      	blx	r6
 8004450:	1c43      	adds	r3, r0, #1
 8004452:	d025      	beq.n	80044a0 <_printf_common+0xa8>
 8004454:	2306      	movs	r3, #6
 8004456:	6820      	ldr	r0, [r4, #0]
 8004458:	682a      	ldr	r2, [r5, #0]
 800445a:	68e1      	ldr	r1, [r4, #12]
 800445c:	2500      	movs	r5, #0
 800445e:	4003      	ands	r3, r0
 8004460:	2b04      	cmp	r3, #4
 8004462:	d103      	bne.n	800446c <_printf_common+0x74>
 8004464:	1a8d      	subs	r5, r1, r2
 8004466:	43eb      	mvns	r3, r5
 8004468:	17db      	asrs	r3, r3, #31
 800446a:	401d      	ands	r5, r3
 800446c:	68a3      	ldr	r3, [r4, #8]
 800446e:	6922      	ldr	r2, [r4, #16]
 8004470:	4293      	cmp	r3, r2
 8004472:	dd01      	ble.n	8004478 <_printf_common+0x80>
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	18ed      	adds	r5, r5, r3
 8004478:	2700      	movs	r7, #0
 800447a:	42bd      	cmp	r5, r7
 800447c:	d120      	bne.n	80044c0 <_printf_common+0xc8>
 800447e:	2000      	movs	r0, #0
 8004480:	e010      	b.n	80044a4 <_printf_common+0xac>
 8004482:	3701      	adds	r7, #1
 8004484:	68e3      	ldr	r3, [r4, #12]
 8004486:	682a      	ldr	r2, [r5, #0]
 8004488:	1a9b      	subs	r3, r3, r2
 800448a:	42bb      	cmp	r3, r7
 800448c:	ddd2      	ble.n	8004434 <_printf_common+0x3c>
 800448e:	0022      	movs	r2, r4
 8004490:	2301      	movs	r3, #1
 8004492:	9901      	ldr	r1, [sp, #4]
 8004494:	9800      	ldr	r0, [sp, #0]
 8004496:	9e08      	ldr	r6, [sp, #32]
 8004498:	3219      	adds	r2, #25
 800449a:	47b0      	blx	r6
 800449c:	1c43      	adds	r3, r0, #1
 800449e:	d1f0      	bne.n	8004482 <_printf_common+0x8a>
 80044a0:	2001      	movs	r0, #1
 80044a2:	4240      	negs	r0, r0
 80044a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80044a6:	2030      	movs	r0, #48	; 0x30
 80044a8:	18e1      	adds	r1, r4, r3
 80044aa:	3143      	adds	r1, #67	; 0x43
 80044ac:	7008      	strb	r0, [r1, #0]
 80044ae:	0021      	movs	r1, r4
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	3145      	adds	r1, #69	; 0x45
 80044b4:	7809      	ldrb	r1, [r1, #0]
 80044b6:	18a2      	adds	r2, r4, r2
 80044b8:	3243      	adds	r2, #67	; 0x43
 80044ba:	3302      	adds	r3, #2
 80044bc:	7011      	strb	r1, [r2, #0]
 80044be:	e7c1      	b.n	8004444 <_printf_common+0x4c>
 80044c0:	0022      	movs	r2, r4
 80044c2:	2301      	movs	r3, #1
 80044c4:	9901      	ldr	r1, [sp, #4]
 80044c6:	9800      	ldr	r0, [sp, #0]
 80044c8:	9e08      	ldr	r6, [sp, #32]
 80044ca:	321a      	adds	r2, #26
 80044cc:	47b0      	blx	r6
 80044ce:	1c43      	adds	r3, r0, #1
 80044d0:	d0e6      	beq.n	80044a0 <_printf_common+0xa8>
 80044d2:	3701      	adds	r7, #1
 80044d4:	e7d1      	b.n	800447a <_printf_common+0x82>
	...

080044d8 <_printf_i>:
 80044d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044da:	b08b      	sub	sp, #44	; 0x2c
 80044dc:	9206      	str	r2, [sp, #24]
 80044de:	000a      	movs	r2, r1
 80044e0:	3243      	adds	r2, #67	; 0x43
 80044e2:	9307      	str	r3, [sp, #28]
 80044e4:	9005      	str	r0, [sp, #20]
 80044e6:	9204      	str	r2, [sp, #16]
 80044e8:	7e0a      	ldrb	r2, [r1, #24]
 80044ea:	000c      	movs	r4, r1
 80044ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80044ee:	2a78      	cmp	r2, #120	; 0x78
 80044f0:	d807      	bhi.n	8004502 <_printf_i+0x2a>
 80044f2:	2a62      	cmp	r2, #98	; 0x62
 80044f4:	d809      	bhi.n	800450a <_printf_i+0x32>
 80044f6:	2a00      	cmp	r2, #0
 80044f8:	d100      	bne.n	80044fc <_printf_i+0x24>
 80044fa:	e0c1      	b.n	8004680 <_printf_i+0x1a8>
 80044fc:	2a58      	cmp	r2, #88	; 0x58
 80044fe:	d100      	bne.n	8004502 <_printf_i+0x2a>
 8004500:	e08c      	b.n	800461c <_printf_i+0x144>
 8004502:	0026      	movs	r6, r4
 8004504:	3642      	adds	r6, #66	; 0x42
 8004506:	7032      	strb	r2, [r6, #0]
 8004508:	e022      	b.n	8004550 <_printf_i+0x78>
 800450a:	0010      	movs	r0, r2
 800450c:	3863      	subs	r0, #99	; 0x63
 800450e:	2815      	cmp	r0, #21
 8004510:	d8f7      	bhi.n	8004502 <_printf_i+0x2a>
 8004512:	f7fb fdf9 	bl	8000108 <__gnu_thumb1_case_shi>
 8004516:	0016      	.short	0x0016
 8004518:	fff6001f 	.word	0xfff6001f
 800451c:	fff6fff6 	.word	0xfff6fff6
 8004520:	001ffff6 	.word	0x001ffff6
 8004524:	fff6fff6 	.word	0xfff6fff6
 8004528:	fff6fff6 	.word	0xfff6fff6
 800452c:	003600a8 	.word	0x003600a8
 8004530:	fff6009a 	.word	0xfff6009a
 8004534:	00b9fff6 	.word	0x00b9fff6
 8004538:	0036fff6 	.word	0x0036fff6
 800453c:	fff6fff6 	.word	0xfff6fff6
 8004540:	009e      	.short	0x009e
 8004542:	0026      	movs	r6, r4
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	3642      	adds	r6, #66	; 0x42
 8004548:	1d11      	adds	r1, r2, #4
 800454a:	6019      	str	r1, [r3, #0]
 800454c:	6813      	ldr	r3, [r2, #0]
 800454e:	7033      	strb	r3, [r6, #0]
 8004550:	2301      	movs	r3, #1
 8004552:	e0a7      	b.n	80046a4 <_printf_i+0x1cc>
 8004554:	6808      	ldr	r0, [r1, #0]
 8004556:	6819      	ldr	r1, [r3, #0]
 8004558:	1d0a      	adds	r2, r1, #4
 800455a:	0605      	lsls	r5, r0, #24
 800455c:	d50b      	bpl.n	8004576 <_printf_i+0x9e>
 800455e:	680d      	ldr	r5, [r1, #0]
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	2d00      	cmp	r5, #0
 8004564:	da03      	bge.n	800456e <_printf_i+0x96>
 8004566:	232d      	movs	r3, #45	; 0x2d
 8004568:	9a04      	ldr	r2, [sp, #16]
 800456a:	426d      	negs	r5, r5
 800456c:	7013      	strb	r3, [r2, #0]
 800456e:	4b61      	ldr	r3, [pc, #388]	; (80046f4 <_printf_i+0x21c>)
 8004570:	270a      	movs	r7, #10
 8004572:	9303      	str	r3, [sp, #12]
 8004574:	e01b      	b.n	80045ae <_printf_i+0xd6>
 8004576:	680d      	ldr	r5, [r1, #0]
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	0641      	lsls	r1, r0, #25
 800457c:	d5f1      	bpl.n	8004562 <_printf_i+0x8a>
 800457e:	b22d      	sxth	r5, r5
 8004580:	e7ef      	b.n	8004562 <_printf_i+0x8a>
 8004582:	680d      	ldr	r5, [r1, #0]
 8004584:	6819      	ldr	r1, [r3, #0]
 8004586:	1d08      	adds	r0, r1, #4
 8004588:	6018      	str	r0, [r3, #0]
 800458a:	062e      	lsls	r6, r5, #24
 800458c:	d501      	bpl.n	8004592 <_printf_i+0xba>
 800458e:	680d      	ldr	r5, [r1, #0]
 8004590:	e003      	b.n	800459a <_printf_i+0xc2>
 8004592:	066d      	lsls	r5, r5, #25
 8004594:	d5fb      	bpl.n	800458e <_printf_i+0xb6>
 8004596:	680d      	ldr	r5, [r1, #0]
 8004598:	b2ad      	uxth	r5, r5
 800459a:	4b56      	ldr	r3, [pc, #344]	; (80046f4 <_printf_i+0x21c>)
 800459c:	2708      	movs	r7, #8
 800459e:	9303      	str	r3, [sp, #12]
 80045a0:	2a6f      	cmp	r2, #111	; 0x6f
 80045a2:	d000      	beq.n	80045a6 <_printf_i+0xce>
 80045a4:	3702      	adds	r7, #2
 80045a6:	0023      	movs	r3, r4
 80045a8:	2200      	movs	r2, #0
 80045aa:	3343      	adds	r3, #67	; 0x43
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	6863      	ldr	r3, [r4, #4]
 80045b0:	60a3      	str	r3, [r4, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	db03      	blt.n	80045be <_printf_i+0xe6>
 80045b6:	2204      	movs	r2, #4
 80045b8:	6821      	ldr	r1, [r4, #0]
 80045ba:	4391      	bics	r1, r2
 80045bc:	6021      	str	r1, [r4, #0]
 80045be:	2d00      	cmp	r5, #0
 80045c0:	d102      	bne.n	80045c8 <_printf_i+0xf0>
 80045c2:	9e04      	ldr	r6, [sp, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00c      	beq.n	80045e2 <_printf_i+0x10a>
 80045c8:	9e04      	ldr	r6, [sp, #16]
 80045ca:	0028      	movs	r0, r5
 80045cc:	0039      	movs	r1, r7
 80045ce:	f7fb fe2b 	bl	8000228 <__aeabi_uidivmod>
 80045d2:	9b03      	ldr	r3, [sp, #12]
 80045d4:	3e01      	subs	r6, #1
 80045d6:	5c5b      	ldrb	r3, [r3, r1]
 80045d8:	7033      	strb	r3, [r6, #0]
 80045da:	002b      	movs	r3, r5
 80045dc:	0005      	movs	r5, r0
 80045de:	429f      	cmp	r7, r3
 80045e0:	d9f3      	bls.n	80045ca <_printf_i+0xf2>
 80045e2:	2f08      	cmp	r7, #8
 80045e4:	d109      	bne.n	80045fa <_printf_i+0x122>
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	07db      	lsls	r3, r3, #31
 80045ea:	d506      	bpl.n	80045fa <_printf_i+0x122>
 80045ec:	6863      	ldr	r3, [r4, #4]
 80045ee:	6922      	ldr	r2, [r4, #16]
 80045f0:	4293      	cmp	r3, r2
 80045f2:	dc02      	bgt.n	80045fa <_printf_i+0x122>
 80045f4:	2330      	movs	r3, #48	; 0x30
 80045f6:	3e01      	subs	r6, #1
 80045f8:	7033      	strb	r3, [r6, #0]
 80045fa:	9b04      	ldr	r3, [sp, #16]
 80045fc:	1b9b      	subs	r3, r3, r6
 80045fe:	6123      	str	r3, [r4, #16]
 8004600:	9b07      	ldr	r3, [sp, #28]
 8004602:	0021      	movs	r1, r4
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	9805      	ldr	r0, [sp, #20]
 8004608:	9b06      	ldr	r3, [sp, #24]
 800460a:	aa09      	add	r2, sp, #36	; 0x24
 800460c:	f7ff fef4 	bl	80043f8 <_printf_common>
 8004610:	1c43      	adds	r3, r0, #1
 8004612:	d14c      	bne.n	80046ae <_printf_i+0x1d6>
 8004614:	2001      	movs	r0, #1
 8004616:	4240      	negs	r0, r0
 8004618:	b00b      	add	sp, #44	; 0x2c
 800461a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800461c:	3145      	adds	r1, #69	; 0x45
 800461e:	700a      	strb	r2, [r1, #0]
 8004620:	4a34      	ldr	r2, [pc, #208]	; (80046f4 <_printf_i+0x21c>)
 8004622:	9203      	str	r2, [sp, #12]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	6821      	ldr	r1, [r4, #0]
 8004628:	ca20      	ldmia	r2!, {r5}
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	0608      	lsls	r0, r1, #24
 800462e:	d516      	bpl.n	800465e <_printf_i+0x186>
 8004630:	07cb      	lsls	r3, r1, #31
 8004632:	d502      	bpl.n	800463a <_printf_i+0x162>
 8004634:	2320      	movs	r3, #32
 8004636:	4319      	orrs	r1, r3
 8004638:	6021      	str	r1, [r4, #0]
 800463a:	2710      	movs	r7, #16
 800463c:	2d00      	cmp	r5, #0
 800463e:	d1b2      	bne.n	80045a6 <_printf_i+0xce>
 8004640:	2320      	movs	r3, #32
 8004642:	6822      	ldr	r2, [r4, #0]
 8004644:	439a      	bics	r2, r3
 8004646:	6022      	str	r2, [r4, #0]
 8004648:	e7ad      	b.n	80045a6 <_printf_i+0xce>
 800464a:	2220      	movs	r2, #32
 800464c:	6809      	ldr	r1, [r1, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	6022      	str	r2, [r4, #0]
 8004652:	0022      	movs	r2, r4
 8004654:	2178      	movs	r1, #120	; 0x78
 8004656:	3245      	adds	r2, #69	; 0x45
 8004658:	7011      	strb	r1, [r2, #0]
 800465a:	4a27      	ldr	r2, [pc, #156]	; (80046f8 <_printf_i+0x220>)
 800465c:	e7e1      	b.n	8004622 <_printf_i+0x14a>
 800465e:	0648      	lsls	r0, r1, #25
 8004660:	d5e6      	bpl.n	8004630 <_printf_i+0x158>
 8004662:	b2ad      	uxth	r5, r5
 8004664:	e7e4      	b.n	8004630 <_printf_i+0x158>
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	680d      	ldr	r5, [r1, #0]
 800466a:	1d10      	adds	r0, r2, #4
 800466c:	6949      	ldr	r1, [r1, #20]
 800466e:	6018      	str	r0, [r3, #0]
 8004670:	6813      	ldr	r3, [r2, #0]
 8004672:	062e      	lsls	r6, r5, #24
 8004674:	d501      	bpl.n	800467a <_printf_i+0x1a2>
 8004676:	6019      	str	r1, [r3, #0]
 8004678:	e002      	b.n	8004680 <_printf_i+0x1a8>
 800467a:	066d      	lsls	r5, r5, #25
 800467c:	d5fb      	bpl.n	8004676 <_printf_i+0x19e>
 800467e:	8019      	strh	r1, [r3, #0]
 8004680:	2300      	movs	r3, #0
 8004682:	9e04      	ldr	r6, [sp, #16]
 8004684:	6123      	str	r3, [r4, #16]
 8004686:	e7bb      	b.n	8004600 <_printf_i+0x128>
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	1d11      	adds	r1, r2, #4
 800468c:	6019      	str	r1, [r3, #0]
 800468e:	6816      	ldr	r6, [r2, #0]
 8004690:	2100      	movs	r1, #0
 8004692:	0030      	movs	r0, r6
 8004694:	6862      	ldr	r2, [r4, #4]
 8004696:	f000 f831 	bl	80046fc <memchr>
 800469a:	2800      	cmp	r0, #0
 800469c:	d001      	beq.n	80046a2 <_printf_i+0x1ca>
 800469e:	1b80      	subs	r0, r0, r6
 80046a0:	6060      	str	r0, [r4, #4]
 80046a2:	6863      	ldr	r3, [r4, #4]
 80046a4:	6123      	str	r3, [r4, #16]
 80046a6:	2300      	movs	r3, #0
 80046a8:	9a04      	ldr	r2, [sp, #16]
 80046aa:	7013      	strb	r3, [r2, #0]
 80046ac:	e7a8      	b.n	8004600 <_printf_i+0x128>
 80046ae:	6923      	ldr	r3, [r4, #16]
 80046b0:	0032      	movs	r2, r6
 80046b2:	9906      	ldr	r1, [sp, #24]
 80046b4:	9805      	ldr	r0, [sp, #20]
 80046b6:	9d07      	ldr	r5, [sp, #28]
 80046b8:	47a8      	blx	r5
 80046ba:	1c43      	adds	r3, r0, #1
 80046bc:	d0aa      	beq.n	8004614 <_printf_i+0x13c>
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	079b      	lsls	r3, r3, #30
 80046c2:	d415      	bmi.n	80046f0 <_printf_i+0x218>
 80046c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046c6:	68e0      	ldr	r0, [r4, #12]
 80046c8:	4298      	cmp	r0, r3
 80046ca:	daa5      	bge.n	8004618 <_printf_i+0x140>
 80046cc:	0018      	movs	r0, r3
 80046ce:	e7a3      	b.n	8004618 <_printf_i+0x140>
 80046d0:	0022      	movs	r2, r4
 80046d2:	2301      	movs	r3, #1
 80046d4:	9906      	ldr	r1, [sp, #24]
 80046d6:	9805      	ldr	r0, [sp, #20]
 80046d8:	9e07      	ldr	r6, [sp, #28]
 80046da:	3219      	adds	r2, #25
 80046dc:	47b0      	blx	r6
 80046de:	1c43      	adds	r3, r0, #1
 80046e0:	d098      	beq.n	8004614 <_printf_i+0x13c>
 80046e2:	3501      	adds	r5, #1
 80046e4:	68e3      	ldr	r3, [r4, #12]
 80046e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046e8:	1a9b      	subs	r3, r3, r2
 80046ea:	42ab      	cmp	r3, r5
 80046ec:	dcf0      	bgt.n	80046d0 <_printf_i+0x1f8>
 80046ee:	e7e9      	b.n	80046c4 <_printf_i+0x1ec>
 80046f0:	2500      	movs	r5, #0
 80046f2:	e7f7      	b.n	80046e4 <_printf_i+0x20c>
 80046f4:	08004a7d 	.word	0x08004a7d
 80046f8:	08004a8e 	.word	0x08004a8e

080046fc <memchr>:
 80046fc:	b2c9      	uxtb	r1, r1
 80046fe:	1882      	adds	r2, r0, r2
 8004700:	4290      	cmp	r0, r2
 8004702:	d101      	bne.n	8004708 <memchr+0xc>
 8004704:	2000      	movs	r0, #0
 8004706:	4770      	bx	lr
 8004708:	7803      	ldrb	r3, [r0, #0]
 800470a:	428b      	cmp	r3, r1
 800470c:	d0fb      	beq.n	8004706 <memchr+0xa>
 800470e:	3001      	adds	r0, #1
 8004710:	e7f6      	b.n	8004700 <memchr+0x4>

08004712 <memmove>:
 8004712:	b510      	push	{r4, lr}
 8004714:	4288      	cmp	r0, r1
 8004716:	d902      	bls.n	800471e <memmove+0xc>
 8004718:	188b      	adds	r3, r1, r2
 800471a:	4298      	cmp	r0, r3
 800471c:	d303      	bcc.n	8004726 <memmove+0x14>
 800471e:	2300      	movs	r3, #0
 8004720:	e007      	b.n	8004732 <memmove+0x20>
 8004722:	5c8b      	ldrb	r3, [r1, r2]
 8004724:	5483      	strb	r3, [r0, r2]
 8004726:	3a01      	subs	r2, #1
 8004728:	d2fb      	bcs.n	8004722 <memmove+0x10>
 800472a:	bd10      	pop	{r4, pc}
 800472c:	5ccc      	ldrb	r4, [r1, r3]
 800472e:	54c4      	strb	r4, [r0, r3]
 8004730:	3301      	adds	r3, #1
 8004732:	429a      	cmp	r2, r3
 8004734:	d1fa      	bne.n	800472c <memmove+0x1a>
 8004736:	e7f8      	b.n	800472a <memmove+0x18>

08004738 <_free_r>:
 8004738:	b570      	push	{r4, r5, r6, lr}
 800473a:	0005      	movs	r5, r0
 800473c:	2900      	cmp	r1, #0
 800473e:	d010      	beq.n	8004762 <_free_r+0x2a>
 8004740:	1f0c      	subs	r4, r1, #4
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	da00      	bge.n	800474a <_free_r+0x12>
 8004748:	18e4      	adds	r4, r4, r3
 800474a:	0028      	movs	r0, r5
 800474c:	f000 f918 	bl	8004980 <__malloc_lock>
 8004750:	4a1d      	ldr	r2, [pc, #116]	; (80047c8 <_free_r+0x90>)
 8004752:	6813      	ldr	r3, [r2, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d105      	bne.n	8004764 <_free_r+0x2c>
 8004758:	6063      	str	r3, [r4, #4]
 800475a:	6014      	str	r4, [r2, #0]
 800475c:	0028      	movs	r0, r5
 800475e:	f000 f917 	bl	8004990 <__malloc_unlock>
 8004762:	bd70      	pop	{r4, r5, r6, pc}
 8004764:	42a3      	cmp	r3, r4
 8004766:	d908      	bls.n	800477a <_free_r+0x42>
 8004768:	6821      	ldr	r1, [r4, #0]
 800476a:	1860      	adds	r0, r4, r1
 800476c:	4283      	cmp	r3, r0
 800476e:	d1f3      	bne.n	8004758 <_free_r+0x20>
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	1841      	adds	r1, r0, r1
 8004776:	6021      	str	r1, [r4, #0]
 8004778:	e7ee      	b.n	8004758 <_free_r+0x20>
 800477a:	001a      	movs	r2, r3
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <_free_r+0x4e>
 8004782:	42a3      	cmp	r3, r4
 8004784:	d9f9      	bls.n	800477a <_free_r+0x42>
 8004786:	6811      	ldr	r1, [r2, #0]
 8004788:	1850      	adds	r0, r2, r1
 800478a:	42a0      	cmp	r0, r4
 800478c:	d10b      	bne.n	80047a6 <_free_r+0x6e>
 800478e:	6820      	ldr	r0, [r4, #0]
 8004790:	1809      	adds	r1, r1, r0
 8004792:	1850      	adds	r0, r2, r1
 8004794:	6011      	str	r1, [r2, #0]
 8004796:	4283      	cmp	r3, r0
 8004798:	d1e0      	bne.n	800475c <_free_r+0x24>
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	1841      	adds	r1, r0, r1
 80047a0:	6011      	str	r1, [r2, #0]
 80047a2:	6053      	str	r3, [r2, #4]
 80047a4:	e7da      	b.n	800475c <_free_r+0x24>
 80047a6:	42a0      	cmp	r0, r4
 80047a8:	d902      	bls.n	80047b0 <_free_r+0x78>
 80047aa:	230c      	movs	r3, #12
 80047ac:	602b      	str	r3, [r5, #0]
 80047ae:	e7d5      	b.n	800475c <_free_r+0x24>
 80047b0:	6821      	ldr	r1, [r4, #0]
 80047b2:	1860      	adds	r0, r4, r1
 80047b4:	4283      	cmp	r3, r0
 80047b6:	d103      	bne.n	80047c0 <_free_r+0x88>
 80047b8:	6818      	ldr	r0, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	1841      	adds	r1, r0, r1
 80047be:	6021      	str	r1, [r4, #0]
 80047c0:	6063      	str	r3, [r4, #4]
 80047c2:	6054      	str	r4, [r2, #4]
 80047c4:	e7ca      	b.n	800475c <_free_r+0x24>
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	20001c90 	.word	0x20001c90

080047cc <sbrk_aligned>:
 80047cc:	b570      	push	{r4, r5, r6, lr}
 80047ce:	4e0f      	ldr	r6, [pc, #60]	; (800480c <sbrk_aligned+0x40>)
 80047d0:	000d      	movs	r5, r1
 80047d2:	6831      	ldr	r1, [r6, #0]
 80047d4:	0004      	movs	r4, r0
 80047d6:	2900      	cmp	r1, #0
 80047d8:	d102      	bne.n	80047e0 <sbrk_aligned+0x14>
 80047da:	f000 f8bf 	bl	800495c <_sbrk_r>
 80047de:	6030      	str	r0, [r6, #0]
 80047e0:	0029      	movs	r1, r5
 80047e2:	0020      	movs	r0, r4
 80047e4:	f000 f8ba 	bl	800495c <_sbrk_r>
 80047e8:	1c43      	adds	r3, r0, #1
 80047ea:	d00a      	beq.n	8004802 <sbrk_aligned+0x36>
 80047ec:	2303      	movs	r3, #3
 80047ee:	1cc5      	adds	r5, r0, #3
 80047f0:	439d      	bics	r5, r3
 80047f2:	42a8      	cmp	r0, r5
 80047f4:	d007      	beq.n	8004806 <sbrk_aligned+0x3a>
 80047f6:	1a29      	subs	r1, r5, r0
 80047f8:	0020      	movs	r0, r4
 80047fa:	f000 f8af 	bl	800495c <_sbrk_r>
 80047fe:	1c43      	adds	r3, r0, #1
 8004800:	d101      	bne.n	8004806 <sbrk_aligned+0x3a>
 8004802:	2501      	movs	r5, #1
 8004804:	426d      	negs	r5, r5
 8004806:	0028      	movs	r0, r5
 8004808:	bd70      	pop	{r4, r5, r6, pc}
 800480a:	46c0      	nop			; (mov r8, r8)
 800480c:	20001c94 	.word	0x20001c94

08004810 <_malloc_r>:
 8004810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004812:	2203      	movs	r2, #3
 8004814:	1ccb      	adds	r3, r1, #3
 8004816:	4393      	bics	r3, r2
 8004818:	3308      	adds	r3, #8
 800481a:	0006      	movs	r6, r0
 800481c:	001f      	movs	r7, r3
 800481e:	2b0c      	cmp	r3, #12
 8004820:	d232      	bcs.n	8004888 <_malloc_r+0x78>
 8004822:	270c      	movs	r7, #12
 8004824:	42b9      	cmp	r1, r7
 8004826:	d831      	bhi.n	800488c <_malloc_r+0x7c>
 8004828:	0030      	movs	r0, r6
 800482a:	f000 f8a9 	bl	8004980 <__malloc_lock>
 800482e:	4d32      	ldr	r5, [pc, #200]	; (80048f8 <_malloc_r+0xe8>)
 8004830:	682b      	ldr	r3, [r5, #0]
 8004832:	001c      	movs	r4, r3
 8004834:	2c00      	cmp	r4, #0
 8004836:	d12e      	bne.n	8004896 <_malloc_r+0x86>
 8004838:	0039      	movs	r1, r7
 800483a:	0030      	movs	r0, r6
 800483c:	f7ff ffc6 	bl	80047cc <sbrk_aligned>
 8004840:	0004      	movs	r4, r0
 8004842:	1c43      	adds	r3, r0, #1
 8004844:	d11e      	bne.n	8004884 <_malloc_r+0x74>
 8004846:	682c      	ldr	r4, [r5, #0]
 8004848:	0025      	movs	r5, r4
 800484a:	2d00      	cmp	r5, #0
 800484c:	d14a      	bne.n	80048e4 <_malloc_r+0xd4>
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	0029      	movs	r1, r5
 8004852:	18e3      	adds	r3, r4, r3
 8004854:	0030      	movs	r0, r6
 8004856:	9301      	str	r3, [sp, #4]
 8004858:	f000 f880 	bl	800495c <_sbrk_r>
 800485c:	9b01      	ldr	r3, [sp, #4]
 800485e:	4283      	cmp	r3, r0
 8004860:	d143      	bne.n	80048ea <_malloc_r+0xda>
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	3703      	adds	r7, #3
 8004866:	1aff      	subs	r7, r7, r3
 8004868:	2303      	movs	r3, #3
 800486a:	439f      	bics	r7, r3
 800486c:	3708      	adds	r7, #8
 800486e:	2f0c      	cmp	r7, #12
 8004870:	d200      	bcs.n	8004874 <_malloc_r+0x64>
 8004872:	270c      	movs	r7, #12
 8004874:	0039      	movs	r1, r7
 8004876:	0030      	movs	r0, r6
 8004878:	f7ff ffa8 	bl	80047cc <sbrk_aligned>
 800487c:	1c43      	adds	r3, r0, #1
 800487e:	d034      	beq.n	80048ea <_malloc_r+0xda>
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	19df      	adds	r7, r3, r7
 8004884:	6027      	str	r7, [r4, #0]
 8004886:	e013      	b.n	80048b0 <_malloc_r+0xa0>
 8004888:	2b00      	cmp	r3, #0
 800488a:	dacb      	bge.n	8004824 <_malloc_r+0x14>
 800488c:	230c      	movs	r3, #12
 800488e:	2500      	movs	r5, #0
 8004890:	6033      	str	r3, [r6, #0]
 8004892:	0028      	movs	r0, r5
 8004894:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004896:	6822      	ldr	r2, [r4, #0]
 8004898:	1bd1      	subs	r1, r2, r7
 800489a:	d420      	bmi.n	80048de <_malloc_r+0xce>
 800489c:	290b      	cmp	r1, #11
 800489e:	d917      	bls.n	80048d0 <_malloc_r+0xc0>
 80048a0:	19e2      	adds	r2, r4, r7
 80048a2:	6027      	str	r7, [r4, #0]
 80048a4:	42a3      	cmp	r3, r4
 80048a6:	d111      	bne.n	80048cc <_malloc_r+0xbc>
 80048a8:	602a      	str	r2, [r5, #0]
 80048aa:	6863      	ldr	r3, [r4, #4]
 80048ac:	6011      	str	r1, [r2, #0]
 80048ae:	6053      	str	r3, [r2, #4]
 80048b0:	0030      	movs	r0, r6
 80048b2:	0025      	movs	r5, r4
 80048b4:	f000 f86c 	bl	8004990 <__malloc_unlock>
 80048b8:	2207      	movs	r2, #7
 80048ba:	350b      	adds	r5, #11
 80048bc:	1d23      	adds	r3, r4, #4
 80048be:	4395      	bics	r5, r2
 80048c0:	1aea      	subs	r2, r5, r3
 80048c2:	429d      	cmp	r5, r3
 80048c4:	d0e5      	beq.n	8004892 <_malloc_r+0x82>
 80048c6:	1b5b      	subs	r3, r3, r5
 80048c8:	50a3      	str	r3, [r4, r2]
 80048ca:	e7e2      	b.n	8004892 <_malloc_r+0x82>
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	e7ec      	b.n	80048aa <_malloc_r+0x9a>
 80048d0:	6862      	ldr	r2, [r4, #4]
 80048d2:	42a3      	cmp	r3, r4
 80048d4:	d101      	bne.n	80048da <_malloc_r+0xca>
 80048d6:	602a      	str	r2, [r5, #0]
 80048d8:	e7ea      	b.n	80048b0 <_malloc_r+0xa0>
 80048da:	605a      	str	r2, [r3, #4]
 80048dc:	e7e8      	b.n	80048b0 <_malloc_r+0xa0>
 80048de:	0023      	movs	r3, r4
 80048e0:	6864      	ldr	r4, [r4, #4]
 80048e2:	e7a7      	b.n	8004834 <_malloc_r+0x24>
 80048e4:	002c      	movs	r4, r5
 80048e6:	686d      	ldr	r5, [r5, #4]
 80048e8:	e7af      	b.n	800484a <_malloc_r+0x3a>
 80048ea:	230c      	movs	r3, #12
 80048ec:	0030      	movs	r0, r6
 80048ee:	6033      	str	r3, [r6, #0]
 80048f0:	f000 f84e 	bl	8004990 <__malloc_unlock>
 80048f4:	e7cd      	b.n	8004892 <_malloc_r+0x82>
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	20001c90 	.word	0x20001c90

080048fc <_realloc_r>:
 80048fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048fe:	0007      	movs	r7, r0
 8004900:	000e      	movs	r6, r1
 8004902:	0014      	movs	r4, r2
 8004904:	2900      	cmp	r1, #0
 8004906:	d105      	bne.n	8004914 <_realloc_r+0x18>
 8004908:	0011      	movs	r1, r2
 800490a:	f7ff ff81 	bl	8004810 <_malloc_r>
 800490e:	0005      	movs	r5, r0
 8004910:	0028      	movs	r0, r5
 8004912:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004914:	2a00      	cmp	r2, #0
 8004916:	d103      	bne.n	8004920 <_realloc_r+0x24>
 8004918:	f7ff ff0e 	bl	8004738 <_free_r>
 800491c:	0025      	movs	r5, r4
 800491e:	e7f7      	b.n	8004910 <_realloc_r+0x14>
 8004920:	f000 f83e 	bl	80049a0 <_malloc_usable_size_r>
 8004924:	9001      	str	r0, [sp, #4]
 8004926:	4284      	cmp	r4, r0
 8004928:	d803      	bhi.n	8004932 <_realloc_r+0x36>
 800492a:	0035      	movs	r5, r6
 800492c:	0843      	lsrs	r3, r0, #1
 800492e:	42a3      	cmp	r3, r4
 8004930:	d3ee      	bcc.n	8004910 <_realloc_r+0x14>
 8004932:	0021      	movs	r1, r4
 8004934:	0038      	movs	r0, r7
 8004936:	f7ff ff6b 	bl	8004810 <_malloc_r>
 800493a:	1e05      	subs	r5, r0, #0
 800493c:	d0e8      	beq.n	8004910 <_realloc_r+0x14>
 800493e:	9b01      	ldr	r3, [sp, #4]
 8004940:	0022      	movs	r2, r4
 8004942:	429c      	cmp	r4, r3
 8004944:	d900      	bls.n	8004948 <_realloc_r+0x4c>
 8004946:	001a      	movs	r2, r3
 8004948:	0031      	movs	r1, r6
 800494a:	0028      	movs	r0, r5
 800494c:	f7ff fbc0 	bl	80040d0 <memcpy>
 8004950:	0031      	movs	r1, r6
 8004952:	0038      	movs	r0, r7
 8004954:	f7ff fef0 	bl	8004738 <_free_r>
 8004958:	e7da      	b.n	8004910 <_realloc_r+0x14>
	...

0800495c <_sbrk_r>:
 800495c:	2300      	movs	r3, #0
 800495e:	b570      	push	{r4, r5, r6, lr}
 8004960:	4d06      	ldr	r5, [pc, #24]	; (800497c <_sbrk_r+0x20>)
 8004962:	0004      	movs	r4, r0
 8004964:	0008      	movs	r0, r1
 8004966:	602b      	str	r3, [r5, #0]
 8004968:	f7fb fe20 	bl	80005ac <_sbrk>
 800496c:	1c43      	adds	r3, r0, #1
 800496e:	d103      	bne.n	8004978 <_sbrk_r+0x1c>
 8004970:	682b      	ldr	r3, [r5, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d000      	beq.n	8004978 <_sbrk_r+0x1c>
 8004976:	6023      	str	r3, [r4, #0]
 8004978:	bd70      	pop	{r4, r5, r6, pc}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	20001c98 	.word	0x20001c98

08004980 <__malloc_lock>:
 8004980:	b510      	push	{r4, lr}
 8004982:	4802      	ldr	r0, [pc, #8]	; (800498c <__malloc_lock+0xc>)
 8004984:	f000 f814 	bl	80049b0 <__retarget_lock_acquire_recursive>
 8004988:	bd10      	pop	{r4, pc}
 800498a:	46c0      	nop			; (mov r8, r8)
 800498c:	20001c9c 	.word	0x20001c9c

08004990 <__malloc_unlock>:
 8004990:	b510      	push	{r4, lr}
 8004992:	4802      	ldr	r0, [pc, #8]	; (800499c <__malloc_unlock+0xc>)
 8004994:	f000 f80d 	bl	80049b2 <__retarget_lock_release_recursive>
 8004998:	bd10      	pop	{r4, pc}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	20001c9c 	.word	0x20001c9c

080049a0 <_malloc_usable_size_r>:
 80049a0:	1f0b      	subs	r3, r1, #4
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	1f18      	subs	r0, r3, #4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	da01      	bge.n	80049ae <_malloc_usable_size_r+0xe>
 80049aa:	580b      	ldr	r3, [r1, r0]
 80049ac:	18c0      	adds	r0, r0, r3
 80049ae:	4770      	bx	lr

080049b0 <__retarget_lock_acquire_recursive>:
 80049b0:	4770      	bx	lr

080049b2 <__retarget_lock_release_recursive>:
 80049b2:	4770      	bx	lr

080049b4 <_init>:
 80049b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ba:	bc08      	pop	{r3}
 80049bc:	469e      	mov	lr, r3
 80049be:	4770      	bx	lr

080049c0 <_fini>:
 80049c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c6:	bc08      	pop	{r3}
 80049c8:	469e      	mov	lr, r3
 80049ca:	4770      	bx	lr
