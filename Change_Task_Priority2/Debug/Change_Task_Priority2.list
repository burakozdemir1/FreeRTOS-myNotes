
Change_Task_Priority2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cbc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004d7c  08004d7c  00014d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e90  08004e90  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004e90  08004e90  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e90  08004e90  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e90  08004e90  00014e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e94  08004e94  00014e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c2c  20000078  08004f10  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ca4  08004f10  00021ca4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c92e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c7  00000000  00000000  0002c9ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  0002eb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  0002f6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8fd  00000000  00000000  00030160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc4f  00000000  00000000  0004aa5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099585  00000000  00000000  000586ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1c31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a98  00000000  00000000  000f1c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004d64 	.word	0x08004d64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08004d64 	.word	0x08004d64

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <Task1_Handler>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Task1_Handler(void *params)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	UBaseType_t current_priority1,current_priority2;

	sprintf((char*)myMessage,"Task_1 Running!\r\n");
 800023c:	4a31      	ldr	r2, [pc, #196]	; (8000304 <Task1_Handler+0xd0>)
 800023e:	4b32      	ldr	r3, [pc, #200]	; (8000308 <Task1_Handler+0xd4>)
 8000240:	0011      	movs	r1, r2
 8000242:	0018      	movs	r0, r3
 8000244:	f004 f92e 	bl	80044a4 <siprintf>

	HAL_UART_Transmit(&huart1, myMessage, sizeof(myMessage), 1000);
 8000248:	23fa      	movs	r3, #250	; 0xfa
 800024a:	009b      	lsls	r3, r3, #2
 800024c:	492e      	ldr	r1, [pc, #184]	; (8000308 <Task1_Handler+0xd4>)
 800024e:	482f      	ldr	r0, [pc, #188]	; (800030c <Task1_Handler+0xd8>)
 8000250:	2264      	movs	r2, #100	; 0x64
 8000252:	f001 fc55 	bl	8001b00 <HAL_UART_Transmit>

	sprintf((char*)myMessage,"Task_1 Priority: %d\r\n",uxTaskPriorityGet(myTask1Handler));
 8000256:	4b2e      	ldr	r3, [pc, #184]	; (8000310 <Task1_Handler+0xdc>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	0018      	movs	r0, r3
 800025c:	f002 fd60 	bl	8002d20 <uxTaskPriorityGet>
 8000260:	0002      	movs	r2, r0
 8000262:	492c      	ldr	r1, [pc, #176]	; (8000314 <Task1_Handler+0xe0>)
 8000264:	4b28      	ldr	r3, [pc, #160]	; (8000308 <Task1_Handler+0xd4>)
 8000266:	0018      	movs	r0, r3
 8000268:	f004 f91c 	bl	80044a4 <siprintf>
		// Task_1 Priority: %d direkt 4 yazma, bırak uxTaskPriorityGet proirity neyse onu döndürür zaten
	HAL_UART_Transmit(&huart1, myMessage, sizeof(myMessage), 1000);
 800026c:	23fa      	movs	r3, #250	; 0xfa
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	4925      	ldr	r1, [pc, #148]	; (8000308 <Task1_Handler+0xd4>)
 8000272:	4826      	ldr	r0, [pc, #152]	; (800030c <Task1_Handler+0xd8>)
 8000274:	2264      	movs	r2, #100	; 0x64
 8000276:	f001 fc43 	bl	8001b00 <HAL_UART_Transmit>

	sprintf((char*)myMessage,"Task_2 Priority: %d\r\n",uxTaskPriorityGet(myTask2Handler));
 800027a:	4b27      	ldr	r3, [pc, #156]	; (8000318 <Task1_Handler+0xe4>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	0018      	movs	r0, r3
 8000280:	f002 fd4e 	bl	8002d20 <uxTaskPriorityGet>
 8000284:	0002      	movs	r2, r0
 8000286:	4925      	ldr	r1, [pc, #148]	; (800031c <Task1_Handler+0xe8>)
 8000288:	4b1f      	ldr	r3, [pc, #124]	; (8000308 <Task1_Handler+0xd4>)
 800028a:	0018      	movs	r0, r3
 800028c:	f004 f90a 	bl	80044a4 <siprintf>
	HAL_UART_Transmit(&huart1, myMessage, sizeof(myMessage), 1000);
 8000290:	23fa      	movs	r3, #250	; 0xfa
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	491c      	ldr	r1, [pc, #112]	; (8000308 <Task1_Handler+0xd4>)
 8000296:	481d      	ldr	r0, [pc, #116]	; (800030c <Task1_Handler+0xd8>)
 8000298:	2264      	movs	r2, #100	; 0x64
 800029a:	f001 fc31 	bl	8001b00 <HAL_UART_Transmit>

	for(;;)
	{
		if( buttonState == 1 )
 800029e:	4b20      	ldr	r3, [pc, #128]	; (8000320 <Task1_Handler+0xec>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d1fb      	bne.n	800029e <Task1_Handler+0x6a>
		{
			buttonState=0;
 80002a6:	4b1e      	ldr	r3, [pc, #120]	; (8000320 <Task1_Handler+0xec>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	701a      	strb	r2, [r3, #0]
			current_priority1 = uxTaskPriorityGet(myTask1Handler); // 4
 80002ac:	4b18      	ldr	r3, [pc, #96]	; (8000310 <Task1_Handler+0xdc>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	0018      	movs	r0, r3
 80002b2:	f002 fd35 	bl	8002d20 <uxTaskPriorityGet>
 80002b6:	0003      	movs	r3, r0
 80002b8:	60fb      	str	r3, [r7, #12]
			current_priority2 = uxTaskPriorityGet(myTask2Handler); // 2
 80002ba:	4b17      	ldr	r3, [pc, #92]	; (8000318 <Task1_Handler+0xe4>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	0018      	movs	r0, r3
 80002c0:	f002 fd2e 	bl	8002d20 <uxTaskPriorityGet>
 80002c4:	0003      	movs	r3, r0
 80002c6:	60bb      	str	r3, [r7, #8]

			vTaskPrioritySet(myTask1Handler, current_priority2); // 2  öncelikleri değiştirdik
 80002c8:	4b11      	ldr	r3, [pc, #68]	; (8000310 <Task1_Handler+0xdc>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	68ba      	ldr	r2, [r7, #8]
 80002ce:	0011      	movs	r1, r2
 80002d0:	0018      	movs	r0, r3
 80002d2:	f002 fd3f 	bl	8002d54 <vTaskPrioritySet>
			vTaskPrioritySet(myTask2Handler,current_priority1);	//4
 80002d6:	4b10      	ldr	r3, [pc, #64]	; (8000318 <Task1_Handler+0xe4>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	68fa      	ldr	r2, [r7, #12]
 80002dc:	0011      	movs	r1, r2
 80002de:	0018      	movs	r0, r3
 80002e0:	f002 fd38 	bl	8002d54 <vTaskPrioritySet>

			current_priority1 = uxTaskPriorityGet(myTask1Handler); // 4
 80002e4:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <Task1_Handler+0xdc>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	0018      	movs	r0, r3
 80002ea:	f002 fd19 	bl	8002d20 <uxTaskPriorityGet>
 80002ee:	0003      	movs	r3, r0
 80002f0:	60fb      	str	r3, [r7, #12]
			current_priority2 = uxTaskPriorityGet(myTask2Handler); // 2
 80002f2:	4b09      	ldr	r3, [pc, #36]	; (8000318 <Task1_Handler+0xe4>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	f002 fd12 	bl	8002d20 <uxTaskPriorityGet>
 80002fc:	0003      	movs	r3, r0
 80002fe:	60bb      	str	r3, [r7, #8]
		if( buttonState == 1 )
 8000300:	e7cd      	b.n	800029e <Task1_Handler+0x6a>
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	08004d7c 	.word	0x08004d7c
 8000308:	200000a0 	.word	0x200000a0
 800030c:	20000104 	.word	0x20000104
 8000310:	20000094 	.word	0x20000094
 8000314:	08004d90 	.word	0x08004d90
 8000318:	20000098 	.word	0x20000098
 800031c:	08004da8 	.word	0x08004da8
 8000320:	2000009c 	.word	0x2000009c

08000324 <Task2_Handler>:




void Task2_Handler(void *params)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]

	UBaseType_t current_priority1,current_priority2;

	sprintf((char*)myMessage,"Task_2 Running!\r\n");
 800032c:	4a2a      	ldr	r2, [pc, #168]	; (80003d8 <Task2_Handler+0xb4>)
 800032e:	4b2b      	ldr	r3, [pc, #172]	; (80003dc <Task2_Handler+0xb8>)
 8000330:	0011      	movs	r1, r2
 8000332:	0018      	movs	r0, r3
 8000334:	f004 f8b6 	bl	80044a4 <siprintf>
	HAL_UART_Transmit(&huart1, myMessage, sizeof(myMessage), 1000);
 8000338:	23fa      	movs	r3, #250	; 0xfa
 800033a:	009b      	lsls	r3, r3, #2
 800033c:	4927      	ldr	r1, [pc, #156]	; (80003dc <Task2_Handler+0xb8>)
 800033e:	4828      	ldr	r0, [pc, #160]	; (80003e0 <Task2_Handler+0xbc>)
 8000340:	2264      	movs	r2, #100	; 0x64
 8000342:	f001 fbdd 	bl	8001b00 <HAL_UART_Transmit>

	sprintf((char*)myMessage,"Task_1 Priority: %d\r\n",uxTaskPriorityGet(myTask1Handler));
 8000346:	4b27      	ldr	r3, [pc, #156]	; (80003e4 <Task2_Handler+0xc0>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	0018      	movs	r0, r3
 800034c:	f002 fce8 	bl	8002d20 <uxTaskPriorityGet>
 8000350:	0002      	movs	r2, r0
 8000352:	4925      	ldr	r1, [pc, #148]	; (80003e8 <Task2_Handler+0xc4>)
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <Task2_Handler+0xb8>)
 8000356:	0018      	movs	r0, r3
 8000358:	f004 f8a4 	bl	80044a4 <siprintf>
		// Task_1 Priority: %d direkt 4 yazma, bırak uxTaskPriorityGet proirity neyse onu döndürür zaten
	HAL_UART_Transmit(&huart1, myMessage, sizeof(myMessage), 1000);
 800035c:	23fa      	movs	r3, #250	; 0xfa
 800035e:	009b      	lsls	r3, r3, #2
 8000360:	491e      	ldr	r1, [pc, #120]	; (80003dc <Task2_Handler+0xb8>)
 8000362:	481f      	ldr	r0, [pc, #124]	; (80003e0 <Task2_Handler+0xbc>)
 8000364:	2264      	movs	r2, #100	; 0x64
 8000366:	f001 fbcb 	bl	8001b00 <HAL_UART_Transmit>

	sprintf((char*)myMessage,"Task_2 Priority: %d\r\n",uxTaskPriorityGet(myTask2Handler));
 800036a:	4b20      	ldr	r3, [pc, #128]	; (80003ec <Task2_Handler+0xc8>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	0018      	movs	r0, r3
 8000370:	f002 fcd6 	bl	8002d20 <uxTaskPriorityGet>
 8000374:	0002      	movs	r2, r0
 8000376:	491e      	ldr	r1, [pc, #120]	; (80003f0 <Task2_Handler+0xcc>)
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <Task2_Handler+0xb8>)
 800037a:	0018      	movs	r0, r3
 800037c:	f004 f892 	bl	80044a4 <siprintf>
	HAL_UART_Transmit(&huart1, myMessage, sizeof(myMessage), 1000);
 8000380:	23fa      	movs	r3, #250	; 0xfa
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	4915      	ldr	r1, [pc, #84]	; (80003dc <Task2_Handler+0xb8>)
 8000386:	4816      	ldr	r0, [pc, #88]	; (80003e0 <Task2_Handler+0xbc>)
 8000388:	2264      	movs	r2, #100	; 0x64
 800038a:	f001 fbb9 	bl	8001b00 <HAL_UART_Transmit>

	for(;;)
	{
		if(buttonState == 1)
 800038e:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <Task2_Handler+0xd0>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d1fb      	bne.n	800038e <Task2_Handler+0x6a>
		{
			buttonState=0;
 8000396:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <Task2_Handler+0xd0>)
 8000398:	2200      	movs	r2, #0
 800039a:	701a      	strb	r2, [r3, #0]

			current_priority1 = uxTaskPriorityGet(myTask1Handler); // 4
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <Task2_Handler+0xc0>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	0018      	movs	r0, r3
 80003a2:	f002 fcbd 	bl	8002d20 <uxTaskPriorityGet>
 80003a6:	0003      	movs	r3, r0
 80003a8:	60fb      	str	r3, [r7, #12]
			current_priority2 = uxTaskPriorityGet(myTask2Handler); // 2
 80003aa:	4b10      	ldr	r3, [pc, #64]	; (80003ec <Task2_Handler+0xc8>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	0018      	movs	r0, r3
 80003b0:	f002 fcb6 	bl	8002d20 <uxTaskPriorityGet>
 80003b4:	0003      	movs	r3, r0
 80003b6:	60bb      	str	r3, [r7, #8]

			vTaskPrioritySet(myTask1Handler, current_priority2); // 2  öncelikleri değiştirdik
 80003b8:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <Task2_Handler+0xc0>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	68ba      	ldr	r2, [r7, #8]
 80003be:	0011      	movs	r1, r2
 80003c0:	0018      	movs	r0, r3
 80003c2:	f002 fcc7 	bl	8002d54 <vTaskPrioritySet>
			vTaskPrioritySet(myTask2Handler,current_priority1);	//4
 80003c6:	4b09      	ldr	r3, [pc, #36]	; (80003ec <Task2_Handler+0xc8>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	68fa      	ldr	r2, [r7, #12]
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f002 fcc0 	bl	8002d54 <vTaskPrioritySet>
		if(buttonState == 1)
 80003d4:	e7db      	b.n	800038e <Task2_Handler+0x6a>
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	08004dc0 	.word	0x08004dc0
 80003dc:	200000a0 	.word	0x200000a0
 80003e0:	20000104 	.word	0x20000104
 80003e4:	20000094 	.word	0x20000094
 80003e8:	08004d90 	.word	0x08004d90
 80003ec:	20000098 	.word	0x20000098
 80003f0:	08004da8 	.word	0x08004da8
 80003f4:	2000009c 	.word	0x2000009c

080003f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fe:	f000 fa33 	bl	8000868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000402:	f000 f827 	bl	8000454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000406:	f000 f8a9 	bl	800055c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800040a:	f000 f877 	bl	80004fc <MX_USART1_UART_Init>

  // NOT : Bu xTaskCreate de size ı configmin... yapınca task2 ye geçmedi bunu 120 yapınca task2 ye geçti
  // buton arktan dolayı sert basınca oluyo haberin olsun


  xTaskCreate(Task1_Handler, "Task_1", 120, NULL, 4, &myTask1Handler);
 800040e:	490b      	ldr	r1, [pc, #44]	; (800043c <main+0x44>)
 8000410:	480b      	ldr	r0, [pc, #44]	; (8000440 <main+0x48>)
 8000412:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <main+0x4c>)
 8000414:	9301      	str	r3, [sp, #4]
 8000416:	2304      	movs	r3, #4
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	2300      	movs	r3, #0
 800041c:	2278      	movs	r2, #120	; 0x78
 800041e:	f002 fb22 	bl	8002a66 <xTaskCreate>

  xTaskCreate(Task2_Handler, "Task_2", 120, NULL, 2, &myTask2Handler);
 8000422:	4909      	ldr	r1, [pc, #36]	; (8000448 <main+0x50>)
 8000424:	4809      	ldr	r0, [pc, #36]	; (800044c <main+0x54>)
 8000426:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <main+0x58>)
 8000428:	9301      	str	r3, [sp, #4]
 800042a:	2302      	movs	r3, #2
 800042c:	9300      	str	r3, [sp, #0]
 800042e:	2300      	movs	r3, #0
 8000430:	2278      	movs	r2, #120	; 0x78
 8000432:	f002 fb18 	bl	8002a66 <xTaskCreate>

  vTaskStartScheduler();
 8000436:	f002 fd41 	bl	8002ebc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800043a:	e7fe      	b.n	800043a <main+0x42>
 800043c:	08004dd4 	.word	0x08004dd4
 8000440:	08000235 	.word	0x08000235
 8000444:	20000094 	.word	0x20000094
 8000448:	08004ddc 	.word	0x08004ddc
 800044c:	08000325 	.word	0x08000325
 8000450:	20000098 	.word	0x20000098

08000454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000454:	b590      	push	{r4, r7, lr}
 8000456:	b099      	sub	sp, #100	; 0x64
 8000458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045a:	242c      	movs	r4, #44	; 0x2c
 800045c:	193b      	adds	r3, r7, r4
 800045e:	0018      	movs	r0, r3
 8000460:	2334      	movs	r3, #52	; 0x34
 8000462:	001a      	movs	r2, r3
 8000464:	2100      	movs	r1, #0
 8000466:	f004 f814 	bl	8004492 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046a:	231c      	movs	r3, #28
 800046c:	18fb      	adds	r3, r7, r3
 800046e:	0018      	movs	r0, r3
 8000470:	2310      	movs	r3, #16
 8000472:	001a      	movs	r2, r3
 8000474:	2100      	movs	r1, #0
 8000476:	f004 f80c 	bl	8004492 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800047a:	003b      	movs	r3, r7
 800047c:	0018      	movs	r0, r3
 800047e:	231c      	movs	r3, #28
 8000480:	001a      	movs	r2, r3
 8000482:	2100      	movs	r1, #0
 8000484:	f004 f805 	bl	8004492 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000488:	193b      	adds	r3, r7, r4
 800048a:	2201      	movs	r2, #1
 800048c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800048e:	193b      	adds	r3, r7, r4
 8000490:	2201      	movs	r2, #1
 8000492:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000494:	193b      	adds	r3, r7, r4
 8000496:	2200      	movs	r2, #0
 8000498:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049a:	193b      	adds	r3, r7, r4
 800049c:	0018      	movs	r0, r3
 800049e:	f000 fceb 	bl	8000e78 <HAL_RCC_OscConfig>
 80004a2:	1e03      	subs	r3, r0, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x56>
  {
    Error_Handler();
 80004a6:	f000 f8e1 	bl	800066c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004aa:	211c      	movs	r1, #28
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2207      	movs	r2, #7
 80004b0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2201      	movs	r2, #1
 80004b6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2200      	movs	r2, #0
 80004c2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2100      	movs	r1, #0
 80004c8:	0018      	movs	r0, r3
 80004ca:	f001 f85b 	bl	8001584 <HAL_RCC_ClockConfig>
 80004ce:	1e03      	subs	r3, r0, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004d2:	f000 f8cb 	bl	800066c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80004d6:	003b      	movs	r3, r7
 80004d8:	2201      	movs	r2, #1
 80004da:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004dc:	003b      	movs	r3, r7
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004e2:	003b      	movs	r3, r7
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 f9b9 	bl	800185c <HAL_RCCEx_PeriphCLKConfig>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d001      	beq.n	80004f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80004ee:	f000 f8bd 	bl	800066c <Error_Handler>
  }
}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b019      	add	sp, #100	; 0x64
 80004f8:	bd90      	pop	{r4, r7, pc}
	...

080004fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000500:	4b14      	ldr	r3, [pc, #80]	; (8000554 <MX_USART1_UART_Init+0x58>)
 8000502:	4a15      	ldr	r2, [pc, #84]	; (8000558 <MX_USART1_UART_Init+0x5c>)
 8000504:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000506:	4b13      	ldr	r3, [pc, #76]	; (8000554 <MX_USART1_UART_Init+0x58>)
 8000508:	22e1      	movs	r2, #225	; 0xe1
 800050a:	0252      	lsls	r2, r2, #9
 800050c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <MX_USART1_UART_Init+0x58>)
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000514:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <MX_USART1_UART_Init+0x58>)
 8000516:	2200      	movs	r2, #0
 8000518:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <MX_USART1_UART_Init+0x58>)
 800051c:	2200      	movs	r2, #0
 800051e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <MX_USART1_UART_Init+0x58>)
 8000522:	220c      	movs	r2, #12
 8000524:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <MX_USART1_UART_Init+0x58>)
 8000528:	2200      	movs	r2, #0
 800052a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <MX_USART1_UART_Init+0x58>)
 800052e:	2200      	movs	r2, #0
 8000530:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <MX_USART1_UART_Init+0x58>)
 8000534:	2200      	movs	r2, #0
 8000536:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <MX_USART1_UART_Init+0x58>)
 800053a:	2200      	movs	r2, #0
 800053c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <MX_USART1_UART_Init+0x58>)
 8000540:	0018      	movs	r0, r3
 8000542:	f001 fa89 	bl	8001a58 <HAL_UART_Init>
 8000546:	1e03      	subs	r3, r0, #0
 8000548:	d001      	beq.n	800054e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800054a:	f000 f88f 	bl	800066c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000104 	.word	0x20000104
 8000558:	40013800 	.word	0x40013800

0800055c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b089      	sub	sp, #36	; 0x24
 8000560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	240c      	movs	r4, #12
 8000564:	193b      	adds	r3, r7, r4
 8000566:	0018      	movs	r0, r3
 8000568:	2314      	movs	r3, #20
 800056a:	001a      	movs	r2, r3
 800056c:	2100      	movs	r1, #0
 800056e:	f003 ff90 	bl	8004492 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000572:	4b3c      	ldr	r3, [pc, #240]	; (8000664 <MX_GPIO_Init+0x108>)
 8000574:	695a      	ldr	r2, [r3, #20]
 8000576:	4b3b      	ldr	r3, [pc, #236]	; (8000664 <MX_GPIO_Init+0x108>)
 8000578:	2180      	movs	r1, #128	; 0x80
 800057a:	0309      	lsls	r1, r1, #12
 800057c:	430a      	orrs	r2, r1
 800057e:	615a      	str	r2, [r3, #20]
 8000580:	4b38      	ldr	r3, [pc, #224]	; (8000664 <MX_GPIO_Init+0x108>)
 8000582:	695a      	ldr	r2, [r3, #20]
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	031b      	lsls	r3, r3, #12
 8000588:	4013      	ands	r3, r2
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800058e:	4b35      	ldr	r3, [pc, #212]	; (8000664 <MX_GPIO_Init+0x108>)
 8000590:	695a      	ldr	r2, [r3, #20]
 8000592:	4b34      	ldr	r3, [pc, #208]	; (8000664 <MX_GPIO_Init+0x108>)
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	03c9      	lsls	r1, r1, #15
 8000598:	430a      	orrs	r2, r1
 800059a:	615a      	str	r2, [r3, #20]
 800059c:	4b31      	ldr	r3, [pc, #196]	; (8000664 <MX_GPIO_Init+0x108>)
 800059e:	695a      	ldr	r2, [r3, #20]
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	03db      	lsls	r3, r3, #15
 80005a4:	4013      	ands	r3, r2
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4b2e      	ldr	r3, [pc, #184]	; (8000664 <MX_GPIO_Init+0x108>)
 80005ac:	695a      	ldr	r2, [r3, #20]
 80005ae:	4b2d      	ldr	r3, [pc, #180]	; (8000664 <MX_GPIO_Init+0x108>)
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	0289      	lsls	r1, r1, #10
 80005b4:	430a      	orrs	r2, r1
 80005b6:	615a      	str	r2, [r3, #20]
 80005b8:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <MX_GPIO_Init+0x108>)
 80005ba:	695a      	ldr	r2, [r3, #20]
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	029b      	lsls	r3, r3, #10
 80005c0:	4013      	ands	r3, r2
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005c6:	2390      	movs	r3, #144	; 0x90
 80005c8:	05db      	lsls	r3, r3, #23
 80005ca:	2200      	movs	r2, #0
 80005cc:	2120      	movs	r1, #32
 80005ce:	0018      	movs	r0, r3
 80005d0:	f000 fc0f 	bl	8000df2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005d4:	193b      	adds	r3, r7, r4
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	0192      	lsls	r2, r2, #6
 80005da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	2284      	movs	r2, #132	; 0x84
 80005e0:	0392      	lsls	r2, r2, #14
 80005e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	4a1e      	ldr	r2, [pc, #120]	; (8000668 <MX_GPIO_Init+0x10c>)
 80005ee:	0019      	movs	r1, r3
 80005f0:	0010      	movs	r0, r2
 80005f2:	f000 fa69 	bl	8000ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005f6:	193b      	adds	r3, r7, r4
 80005f8:	220c      	movs	r2, #12
 80005fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fc:	193b      	adds	r3, r7, r4
 80005fe:	2202      	movs	r2, #2
 8000600:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	193b      	adds	r3, r7, r4
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	193b      	adds	r3, r7, r4
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800060e:	193b      	adds	r3, r7, r4
 8000610:	2201      	movs	r2, #1
 8000612:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000614:	193a      	adds	r2, r7, r4
 8000616:	2390      	movs	r3, #144	; 0x90
 8000618:	05db      	lsls	r3, r3, #23
 800061a:	0011      	movs	r1, r2
 800061c:	0018      	movs	r0, r3
 800061e:	f000 fa53 	bl	8000ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000622:	0021      	movs	r1, r4
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2220      	movs	r2, #32
 8000628:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2201      	movs	r2, #1
 800062e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800063c:	187a      	adds	r2, r7, r1
 800063e:	2390      	movs	r3, #144	; 0x90
 8000640:	05db      	lsls	r3, r3, #23
 8000642:	0011      	movs	r1, r2
 8000644:	0018      	movs	r0, r3
 8000646:	f000 fa3f 	bl	8000ac8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	2007      	movs	r0, #7
 8000650:	f000 fa08 	bl	8000a64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000654:	2007      	movs	r0, #7
 8000656:	f000 fa1a 	bl	8000a8e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b009      	add	sp, #36	; 0x24
 8000660:	bd90      	pop	{r4, r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	40021000 	.word	0x40021000
 8000668:	48000800 	.word	0x48000800

0800066c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000670:	b672      	cpsid	i
}
 8000672:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000674:	e7fe      	b.n	8000674 <Error_Handler+0x8>
	...

08000678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <HAL_MspInit+0x44>)
 8000680:	699a      	ldr	r2, [r3, #24]
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <HAL_MspInit+0x44>)
 8000684:	2101      	movs	r1, #1
 8000686:	430a      	orrs	r2, r1
 8000688:	619a      	str	r2, [r3, #24]
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <HAL_MspInit+0x44>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	2201      	movs	r2, #1
 8000690:	4013      	ands	r3, r2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <HAL_MspInit+0x44>)
 8000698:	69da      	ldr	r2, [r3, #28]
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <HAL_MspInit+0x44>)
 800069c:	2180      	movs	r1, #128	; 0x80
 800069e:	0549      	lsls	r1, r1, #21
 80006a0:	430a      	orrs	r2, r1
 80006a2:	61da      	str	r2, [r3, #28]
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <HAL_MspInit+0x44>)
 80006a6:	69da      	ldr	r2, [r3, #28]
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	055b      	lsls	r3, r3, #21
 80006ac:	4013      	ands	r3, r2
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b002      	add	sp, #8
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	40021000 	.word	0x40021000

080006c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b08b      	sub	sp, #44	; 0x2c
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	2414      	movs	r4, #20
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	0018      	movs	r0, r3
 80006ce:	2314      	movs	r3, #20
 80006d0:	001a      	movs	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	f003 fedd 	bl	8004492 <memset>
  if(huart->Instance==USART1)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a1d      	ldr	r2, [pc, #116]	; (8000754 <HAL_UART_MspInit+0x94>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d133      	bne.n	800074a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <HAL_UART_MspInit+0x98>)
 80006e4:	699a      	ldr	r2, [r3, #24]
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <HAL_UART_MspInit+0x98>)
 80006e8:	2180      	movs	r1, #128	; 0x80
 80006ea:	01c9      	lsls	r1, r1, #7
 80006ec:	430a      	orrs	r2, r1
 80006ee:	619a      	str	r2, [r3, #24]
 80006f0:	4b19      	ldr	r3, [pc, #100]	; (8000758 <HAL_UART_MspInit+0x98>)
 80006f2:	699a      	ldr	r2, [r3, #24]
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	01db      	lsls	r3, r3, #7
 80006f8:	4013      	ands	r3, r2
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <HAL_UART_MspInit+0x98>)
 8000700:	695a      	ldr	r2, [r3, #20]
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <HAL_UART_MspInit+0x98>)
 8000704:	2180      	movs	r1, #128	; 0x80
 8000706:	0289      	lsls	r1, r1, #10
 8000708:	430a      	orrs	r2, r1
 800070a:	615a      	str	r2, [r3, #20]
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <HAL_UART_MspInit+0x98>)
 800070e:	695a      	ldr	r2, [r3, #20]
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	029b      	lsls	r3, r3, #10
 8000714:	4013      	ands	r3, r2
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800071a:	193b      	adds	r3, r7, r4
 800071c:	22c0      	movs	r2, #192	; 0xc0
 800071e:	00d2      	lsls	r2, r2, #3
 8000720:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	0021      	movs	r1, r4
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2202      	movs	r2, #2
 8000728:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2203      	movs	r2, #3
 8000734:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2201      	movs	r2, #1
 800073a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073c:	187a      	adds	r2, r7, r1
 800073e:	2390      	movs	r3, #144	; 0x90
 8000740:	05db      	lsls	r3, r3, #23
 8000742:	0011      	movs	r1, r2
 8000744:	0018      	movs	r0, r3
 8000746:	f000 f9bf 	bl	8000ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	b00b      	add	sp, #44	; 0x2c
 8000750:	bd90      	pop	{r4, r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	40013800 	.word	0x40013800
 8000758:	40021000 	.word	0x40021000

0800075c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <HardFault_Handler+0x4>
	...

08000764 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */


  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000768:	2380      	movs	r3, #128	; 0x80
 800076a:	019b      	lsls	r3, r3, #6
 800076c:	0018      	movs	r0, r3
 800076e:	f000 fb5d 	bl	8000e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==1)
 8000772:	2380      	movs	r3, #128	; 0x80
 8000774:	019b      	lsls	r3, r3, #6
 8000776:	4a07      	ldr	r2, [pc, #28]	; (8000794 <EXTI4_15_IRQHandler+0x30>)
 8000778:	0019      	movs	r1, r3
 800077a:	0010      	movs	r0, r2
 800077c:	f000 fb1c 	bl	8000db8 <HAL_GPIO_ReadPin>
 8000780:	0003      	movs	r3, r0
 8000782:	2b01      	cmp	r3, #1
 8000784:	d102      	bne.n	800078c <EXTI4_15_IRQHandler+0x28>
	{

		buttonState=1;
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <EXTI4_15_IRQHandler+0x34>)
 8000788:	2201      	movs	r2, #1
 800078a:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	48000800 	.word	0x48000800
 8000798:	2000009c 	.word	0x2000009c

0800079c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007a4:	4a14      	ldr	r2, [pc, #80]	; (80007f8 <_sbrk+0x5c>)
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <_sbrk+0x60>)
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <_sbrk+0x64>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d102      	bne.n	80007be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <_sbrk+0x64>)
 80007ba:	4a12      	ldr	r2, [pc, #72]	; (8000804 <_sbrk+0x68>)
 80007bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <_sbrk+0x64>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	18d3      	adds	r3, r2, r3
 80007c6:	693a      	ldr	r2, [r7, #16]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d207      	bcs.n	80007dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007cc:	f003 fe2e 	bl	800442c <__errno>
 80007d0:	0003      	movs	r3, r0
 80007d2:	220c      	movs	r2, #12
 80007d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007d6:	2301      	movs	r3, #1
 80007d8:	425b      	negs	r3, r3
 80007da:	e009      	b.n	80007f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <_sbrk+0x64>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007e2:	4b07      	ldr	r3, [pc, #28]	; (8000800 <_sbrk+0x64>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	18d2      	adds	r2, r2, r3
 80007ea:	4b05      	ldr	r3, [pc, #20]	; (8000800 <_sbrk+0x64>)
 80007ec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80007ee:	68fb      	ldr	r3, [r7, #12]
}
 80007f0:	0018      	movs	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b006      	add	sp, #24
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20004000 	.word	0x20004000
 80007fc:	00000400 	.word	0x00000400
 8000800:	2000018c 	.word	0x2000018c
 8000804:	20001ca8 	.word	0x20001ca8

08000808 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000814:	480d      	ldr	r0, [pc, #52]	; (800084c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000816:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000818:	f7ff fff6 	bl	8000808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <LoopForever+0x6>)
  ldr r1, =_edata
 800081e:	490d      	ldr	r1, [pc, #52]	; (8000854 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000820:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <LoopForever+0xe>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000824:	e002      	b.n	800082c <LoopCopyDataInit>

08000826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082a:	3304      	adds	r3, #4

0800082c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800082c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000830:	d3f9      	bcc.n	8000826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000834:	4c0a      	ldr	r4, [pc, #40]	; (8000860 <LoopForever+0x16>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000838:	e001      	b.n	800083e <LoopFillZerobss>

0800083a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800083c:	3204      	adds	r2, #4

0800083e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000840:	d3fb      	bcc.n	800083a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000842:	f003 fdf9 	bl	8004438 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000846:	f7ff fdd7 	bl	80003f8 <main>

0800084a <LoopForever>:

LoopForever:
    b LoopForever
 800084a:	e7fe      	b.n	800084a <LoopForever>
  ldr   r0, =_estack
 800084c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000854:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000858:	08004e98 	.word	0x08004e98
  ldr r2, =_sbss
 800085c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000860:	20001ca4 	.word	0x20001ca4

08000864 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC1_COMP_IRQHandler>
	...

08000868 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <HAL_Init+0x24>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_Init+0x24>)
 8000872:	2110      	movs	r1, #16
 8000874:	430a      	orrs	r2, r1
 8000876:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000878:	2000      	movs	r0, #0
 800087a:	f000 f809 	bl	8000890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800087e:	f7ff fefb 	bl	8000678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000882:	2300      	movs	r3, #0
}
 8000884:	0018      	movs	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	40022000 	.word	0x40022000

08000890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <HAL_InitTick+0x5c>)
 800089a:	681c      	ldr	r4, [r3, #0]
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <HAL_InitTick+0x60>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	0019      	movs	r1, r3
 80008a2:	23fa      	movs	r3, #250	; 0xfa
 80008a4:	0098      	lsls	r0, r3, #2
 80008a6:	f7ff fc39 	bl	800011c <__udivsi3>
 80008aa:	0003      	movs	r3, r0
 80008ac:	0019      	movs	r1, r3
 80008ae:	0020      	movs	r0, r4
 80008b0:	f7ff fc34 	bl	800011c <__udivsi3>
 80008b4:	0003      	movs	r3, r0
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 f8f9 	bl	8000aae <HAL_SYSTICK_Config>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008c0:	2301      	movs	r3, #1
 80008c2:	e00f      	b.n	80008e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d80b      	bhi.n	80008e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	2301      	movs	r3, #1
 80008ce:	425b      	negs	r3, r3
 80008d0:	2200      	movs	r2, #0
 80008d2:	0018      	movs	r0, r3
 80008d4:	f000 f8c6 	bl	8000a64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_InitTick+0x64>)
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008de:	2300      	movs	r3, #0
 80008e0:	e000      	b.n	80008e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
}
 80008e4:	0018      	movs	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b003      	add	sp, #12
 80008ea:	bd90      	pop	{r4, r7, pc}
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000008 	.word	0x20000008
 80008f4:	20000004 	.word	0x20000004

080008f8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  return uwTick;
 80008fc:	4b02      	ldr	r3, [pc, #8]	; (8000908 <HAL_GetTick+0x10>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	0018      	movs	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	20000190 	.word	0x20000190

0800090c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	0002      	movs	r2, r0
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000918:	1dfb      	adds	r3, r7, #7
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b7f      	cmp	r3, #127	; 0x7f
 800091e:	d809      	bhi.n	8000934 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000920:	1dfb      	adds	r3, r7, #7
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	001a      	movs	r2, r3
 8000926:	231f      	movs	r3, #31
 8000928:	401a      	ands	r2, r3
 800092a:	4b04      	ldr	r3, [pc, #16]	; (800093c <__NVIC_EnableIRQ+0x30>)
 800092c:	2101      	movs	r1, #1
 800092e:	4091      	lsls	r1, r2
 8000930:	000a      	movs	r2, r1
 8000932:	601a      	str	r2, [r3, #0]
  }
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b002      	add	sp, #8
 800093a:	bd80      	pop	{r7, pc}
 800093c:	e000e100 	.word	0xe000e100

08000940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	0002      	movs	r2, r0
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	1dfb      	adds	r3, r7, #7
 800094c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800094e:	1dfb      	adds	r3, r7, #7
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b7f      	cmp	r3, #127	; 0x7f
 8000954:	d828      	bhi.n	80009a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000956:	4a2f      	ldr	r2, [pc, #188]	; (8000a14 <__NVIC_SetPriority+0xd4>)
 8000958:	1dfb      	adds	r3, r7, #7
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b25b      	sxtb	r3, r3
 800095e:	089b      	lsrs	r3, r3, #2
 8000960:	33c0      	adds	r3, #192	; 0xc0
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	589b      	ldr	r3, [r3, r2]
 8000966:	1dfa      	adds	r2, r7, #7
 8000968:	7812      	ldrb	r2, [r2, #0]
 800096a:	0011      	movs	r1, r2
 800096c:	2203      	movs	r2, #3
 800096e:	400a      	ands	r2, r1
 8000970:	00d2      	lsls	r2, r2, #3
 8000972:	21ff      	movs	r1, #255	; 0xff
 8000974:	4091      	lsls	r1, r2
 8000976:	000a      	movs	r2, r1
 8000978:	43d2      	mvns	r2, r2
 800097a:	401a      	ands	r2, r3
 800097c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	019b      	lsls	r3, r3, #6
 8000982:	22ff      	movs	r2, #255	; 0xff
 8000984:	401a      	ands	r2, r3
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	0018      	movs	r0, r3
 800098c:	2303      	movs	r3, #3
 800098e:	4003      	ands	r3, r0
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000994:	481f      	ldr	r0, [pc, #124]	; (8000a14 <__NVIC_SetPriority+0xd4>)
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b25b      	sxtb	r3, r3
 800099c:	089b      	lsrs	r3, r3, #2
 800099e:	430a      	orrs	r2, r1
 80009a0:	33c0      	adds	r3, #192	; 0xc0
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009a6:	e031      	b.n	8000a0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a8:	4a1b      	ldr	r2, [pc, #108]	; (8000a18 <__NVIC_SetPriority+0xd8>)
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	0019      	movs	r1, r3
 80009b0:	230f      	movs	r3, #15
 80009b2:	400b      	ands	r3, r1
 80009b4:	3b08      	subs	r3, #8
 80009b6:	089b      	lsrs	r3, r3, #2
 80009b8:	3306      	adds	r3, #6
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	18d3      	adds	r3, r2, r3
 80009be:	3304      	adds	r3, #4
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	1dfa      	adds	r2, r7, #7
 80009c4:	7812      	ldrb	r2, [r2, #0]
 80009c6:	0011      	movs	r1, r2
 80009c8:	2203      	movs	r2, #3
 80009ca:	400a      	ands	r2, r1
 80009cc:	00d2      	lsls	r2, r2, #3
 80009ce:	21ff      	movs	r1, #255	; 0xff
 80009d0:	4091      	lsls	r1, r2
 80009d2:	000a      	movs	r2, r1
 80009d4:	43d2      	mvns	r2, r2
 80009d6:	401a      	ands	r2, r3
 80009d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	019b      	lsls	r3, r3, #6
 80009de:	22ff      	movs	r2, #255	; 0xff
 80009e0:	401a      	ands	r2, r3
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	0018      	movs	r0, r3
 80009e8:	2303      	movs	r3, #3
 80009ea:	4003      	ands	r3, r0
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f0:	4809      	ldr	r0, [pc, #36]	; (8000a18 <__NVIC_SetPriority+0xd8>)
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	001c      	movs	r4, r3
 80009f8:	230f      	movs	r3, #15
 80009fa:	4023      	ands	r3, r4
 80009fc:	3b08      	subs	r3, #8
 80009fe:	089b      	lsrs	r3, r3, #2
 8000a00:	430a      	orrs	r2, r1
 8000a02:	3306      	adds	r3, #6
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	18c3      	adds	r3, r0, r3
 8000a08:	3304      	adds	r3, #4
 8000a0a:	601a      	str	r2, [r3, #0]
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b003      	add	sp, #12
 8000a12:	bd90      	pop	{r4, r7, pc}
 8000a14:	e000e100 	.word	0xe000e100
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	1e5a      	subs	r2, r3, #1
 8000a28:	2380      	movs	r3, #128	; 0x80
 8000a2a:	045b      	lsls	r3, r3, #17
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d301      	bcc.n	8000a34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a30:	2301      	movs	r3, #1
 8000a32:	e010      	b.n	8000a56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <SysTick_Config+0x44>)
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	3a01      	subs	r2, #1
 8000a3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	425b      	negs	r3, r3
 8000a40:	2103      	movs	r1, #3
 8000a42:	0018      	movs	r0, r3
 8000a44:	f7ff ff7c 	bl	8000940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <SysTick_Config+0x44>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4e:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <SysTick_Config+0x44>)
 8000a50:	2207      	movs	r2, #7
 8000a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	0018      	movs	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b002      	add	sp, #8
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	e000e010 	.word	0xe000e010

08000a64 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
 8000a6e:	210f      	movs	r1, #15
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	1c02      	adds	r2, r0, #0
 8000a74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b25b      	sxtb	r3, r3
 8000a7e:	0011      	movs	r1, r2
 8000a80:	0018      	movs	r0, r3
 8000a82:	f7ff ff5d 	bl	8000940 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b004      	add	sp, #16
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	0002      	movs	r2, r0
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	b25b      	sxtb	r3, r3
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f7ff ff33 	bl	800090c <__NVIC_EnableIRQ>
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b002      	add	sp, #8
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff ffaf 	bl	8000a1c <SysTick_Config>
 8000abe:	0003      	movs	r3, r0
}
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b002      	add	sp, #8
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad6:	e155      	b.n	8000d84 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2101      	movs	r1, #1
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	4091      	lsls	r1, r2
 8000ae2:	000a      	movs	r2, r1
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d100      	bne.n	8000af0 <HAL_GPIO_Init+0x28>
 8000aee:	e146      	b.n	8000d7e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	2203      	movs	r2, #3
 8000af6:	4013      	ands	r3, r2
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d005      	beq.n	8000b08 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	2203      	movs	r2, #3
 8000b02:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d130      	bne.n	8000b6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	2203      	movs	r2, #3
 8000b14:	409a      	lsls	r2, r3
 8000b16:	0013      	movs	r3, r2
 8000b18:	43da      	mvns	r2, r3
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	68da      	ldr	r2, [r3, #12]
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	409a      	lsls	r2, r3
 8000b2a:	0013      	movs	r3, r2
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b3e:	2201      	movs	r2, #1
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	409a      	lsls	r2, r3
 8000b44:	0013      	movs	r3, r2
 8000b46:	43da      	mvns	r2, r3
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	091b      	lsrs	r3, r3, #4
 8000b54:	2201      	movs	r2, #1
 8000b56:	401a      	ands	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
 8000b5c:	0013      	movs	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	2203      	movs	r2, #3
 8000b70:	4013      	ands	r3, r2
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	d017      	beq.n	8000ba6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	2203      	movs	r2, #3
 8000b82:	409a      	lsls	r2, r3
 8000b84:	0013      	movs	r3, r2
 8000b86:	43da      	mvns	r2, r3
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	409a      	lsls	r2, r3
 8000b98:	0013      	movs	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2203      	movs	r2, #3
 8000bac:	4013      	ands	r3, r2
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d123      	bne.n	8000bfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	08da      	lsrs	r2, r3, #3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3208      	adds	r2, #8
 8000bba:	0092      	lsls	r2, r2, #2
 8000bbc:	58d3      	ldr	r3, [r2, r3]
 8000bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	2207      	movs	r2, #7
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	220f      	movs	r2, #15
 8000bca:	409a      	lsls	r2, r3
 8000bcc:	0013      	movs	r3, r2
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	691a      	ldr	r2, [r3, #16]
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	2107      	movs	r1, #7
 8000bde:	400b      	ands	r3, r1
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	409a      	lsls	r2, r3
 8000be4:	0013      	movs	r3, r2
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	08da      	lsrs	r2, r3, #3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3208      	adds	r2, #8
 8000bf4:	0092      	lsls	r2, r2, #2
 8000bf6:	6939      	ldr	r1, [r7, #16]
 8000bf8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	2203      	movs	r2, #3
 8000c06:	409a      	lsls	r2, r3
 8000c08:	0013      	movs	r3, r2
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	2203      	movs	r2, #3
 8000c18:	401a      	ands	r2, r3
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	409a      	lsls	r2, r3
 8000c20:	0013      	movs	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	23c0      	movs	r3, #192	; 0xc0
 8000c34:	029b      	lsls	r3, r3, #10
 8000c36:	4013      	ands	r3, r2
 8000c38:	d100      	bne.n	8000c3c <HAL_GPIO_Init+0x174>
 8000c3a:	e0a0      	b.n	8000d7e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3c:	4b57      	ldr	r3, [pc, #348]	; (8000d9c <HAL_GPIO_Init+0x2d4>)
 8000c3e:	699a      	ldr	r2, [r3, #24]
 8000c40:	4b56      	ldr	r3, [pc, #344]	; (8000d9c <HAL_GPIO_Init+0x2d4>)
 8000c42:	2101      	movs	r1, #1
 8000c44:	430a      	orrs	r2, r1
 8000c46:	619a      	str	r2, [r3, #24]
 8000c48:	4b54      	ldr	r3, [pc, #336]	; (8000d9c <HAL_GPIO_Init+0x2d4>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4013      	ands	r3, r2
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c54:	4a52      	ldr	r2, [pc, #328]	; (8000da0 <HAL_GPIO_Init+0x2d8>)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	089b      	lsrs	r3, r3, #2
 8000c5a:	3302      	adds	r3, #2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	589b      	ldr	r3, [r3, r2]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	2203      	movs	r2, #3
 8000c66:	4013      	ands	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	220f      	movs	r2, #15
 8000c6c:	409a      	lsls	r2, r3
 8000c6e:	0013      	movs	r3, r2
 8000c70:	43da      	mvns	r2, r3
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	2390      	movs	r3, #144	; 0x90
 8000c7c:	05db      	lsls	r3, r3, #23
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d019      	beq.n	8000cb6 <HAL_GPIO_Init+0x1ee>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a47      	ldr	r2, [pc, #284]	; (8000da4 <HAL_GPIO_Init+0x2dc>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d013      	beq.n	8000cb2 <HAL_GPIO_Init+0x1ea>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a46      	ldr	r2, [pc, #280]	; (8000da8 <HAL_GPIO_Init+0x2e0>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d00d      	beq.n	8000cae <HAL_GPIO_Init+0x1e6>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a45      	ldr	r2, [pc, #276]	; (8000dac <HAL_GPIO_Init+0x2e4>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d007      	beq.n	8000caa <HAL_GPIO_Init+0x1e2>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a44      	ldr	r2, [pc, #272]	; (8000db0 <HAL_GPIO_Init+0x2e8>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d101      	bne.n	8000ca6 <HAL_GPIO_Init+0x1de>
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	e008      	b.n	8000cb8 <HAL_GPIO_Init+0x1f0>
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	e006      	b.n	8000cb8 <HAL_GPIO_Init+0x1f0>
 8000caa:	2303      	movs	r3, #3
 8000cac:	e004      	b.n	8000cb8 <HAL_GPIO_Init+0x1f0>
 8000cae:	2302      	movs	r3, #2
 8000cb0:	e002      	b.n	8000cb8 <HAL_GPIO_Init+0x1f0>
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e000      	b.n	8000cb8 <HAL_GPIO_Init+0x1f0>
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	2103      	movs	r1, #3
 8000cbc:	400a      	ands	r2, r1
 8000cbe:	0092      	lsls	r2, r2, #2
 8000cc0:	4093      	lsls	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cc8:	4935      	ldr	r1, [pc, #212]	; (8000da0 <HAL_GPIO_Init+0x2d8>)
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	089b      	lsrs	r3, r3, #2
 8000cce:	3302      	adds	r3, #2
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cd6:	4b37      	ldr	r3, [pc, #220]	; (8000db4 <HAL_GPIO_Init+0x2ec>)
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	2380      	movs	r3, #128	; 0x80
 8000cec:	035b      	lsls	r3, r3, #13
 8000cee:	4013      	ands	r3, r2
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cfa:	4b2e      	ldr	r3, [pc, #184]	; (8000db4 <HAL_GPIO_Init+0x2ec>)
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d00:	4b2c      	ldr	r3, [pc, #176]	; (8000db4 <HAL_GPIO_Init+0x2ec>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	43da      	mvns	r2, r3
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	039b      	lsls	r3, r3, #14
 8000d18:	4013      	ands	r3, r2
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d24:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <HAL_GPIO_Init+0x2ec>)
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000d2a:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <HAL_GPIO_Init+0x2ec>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	43da      	mvns	r2, r3
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685a      	ldr	r2, [r3, #4]
 8000d3e:	2380      	movs	r3, #128	; 0x80
 8000d40:	029b      	lsls	r3, r3, #10
 8000d42:	4013      	ands	r3, r2
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d4e:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <HAL_GPIO_Init+0x2ec>)
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <HAL_GPIO_Init+0x2ec>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	43da      	mvns	r2, r3
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	025b      	lsls	r3, r3, #9
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	d003      	beq.n	8000d78 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_GPIO_Init+0x2ec>)
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3301      	adds	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	40da      	lsrs	r2, r3
 8000d8c:	1e13      	subs	r3, r2, #0
 8000d8e:	d000      	beq.n	8000d92 <HAL_GPIO_Init+0x2ca>
 8000d90:	e6a2      	b.n	8000ad8 <HAL_GPIO_Init+0x10>
  } 
}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46c0      	nop			; (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b006      	add	sp, #24
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010000 	.word	0x40010000
 8000da4:	48000400 	.word	0x48000400
 8000da8:	48000800 	.word	0x48000800
 8000dac:	48000c00 	.word	0x48000c00
 8000db0:	48001000 	.word	0x48001000
 8000db4:	40010400 	.word	0x40010400

08000db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	000a      	movs	r2, r1
 8000dc2:	1cbb      	adds	r3, r7, #2
 8000dc4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	1cba      	adds	r2, r7, #2
 8000dcc:	8812      	ldrh	r2, [r2, #0]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	d004      	beq.n	8000ddc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000dd2:	230f      	movs	r3, #15
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	701a      	strb	r2, [r3, #0]
 8000dda:	e003      	b.n	8000de4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ddc:	230f      	movs	r3, #15
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000de4:	230f      	movs	r3, #15
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	781b      	ldrb	r3, [r3, #0]
  }
 8000dea:	0018      	movs	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b004      	add	sp, #16
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
 8000dfa:	0008      	movs	r0, r1
 8000dfc:	0011      	movs	r1, r2
 8000dfe:	1cbb      	adds	r3, r7, #2
 8000e00:	1c02      	adds	r2, r0, #0
 8000e02:	801a      	strh	r2, [r3, #0]
 8000e04:	1c7b      	adds	r3, r7, #1
 8000e06:	1c0a      	adds	r2, r1, #0
 8000e08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e0a:	1c7b      	adds	r3, r7, #1
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d004      	beq.n	8000e1c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e12:	1cbb      	adds	r3, r7, #2
 8000e14:	881a      	ldrh	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e1a:	e003      	b.n	8000e24 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e1c:	1cbb      	adds	r3, r7, #2
 8000e1e:	881a      	ldrh	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b002      	add	sp, #8
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	0002      	movs	r2, r0
 8000e34:	1dbb      	adds	r3, r7, #6
 8000e36:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	1dba      	adds	r2, r7, #6
 8000e3e:	8812      	ldrh	r2, [r2, #0]
 8000e40:	4013      	ands	r3, r2
 8000e42:	d008      	beq.n	8000e56 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000e46:	1dba      	adds	r2, r7, #6
 8000e48:	8812      	ldrh	r2, [r2, #0]
 8000e4a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e4c:	1dbb      	adds	r3, r7, #6
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	0018      	movs	r0, r3
 8000e52:	f000 f807 	bl	8000e64 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b002      	add	sp, #8
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	40010400 	.word	0x40010400

08000e64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	0002      	movs	r2, r0
 8000e6c:	1dbb      	adds	r3, r7, #6
 8000e6e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b002      	add	sp, #8
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d102      	bne.n	8000e8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	f000 fb76 	bl	8001578 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2201      	movs	r2, #1
 8000e92:	4013      	ands	r3, r2
 8000e94:	d100      	bne.n	8000e98 <HAL_RCC_OscConfig+0x20>
 8000e96:	e08e      	b.n	8000fb6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e98:	4bc5      	ldr	r3, [pc, #788]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	220c      	movs	r2, #12
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	2b04      	cmp	r3, #4
 8000ea2:	d00e      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ea4:	4bc2      	ldr	r3, [pc, #776]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	220c      	movs	r2, #12
 8000eaa:	4013      	ands	r3, r2
 8000eac:	2b08      	cmp	r3, #8
 8000eae:	d117      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x68>
 8000eb0:	4bbf      	ldr	r3, [pc, #764]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	23c0      	movs	r3, #192	; 0xc0
 8000eb6:	025b      	lsls	r3, r3, #9
 8000eb8:	401a      	ands	r2, r3
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	025b      	lsls	r3, r3, #9
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d10e      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec2:	4bbb      	ldr	r3, [pc, #748]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	2380      	movs	r3, #128	; 0x80
 8000ec8:	029b      	lsls	r3, r3, #10
 8000eca:	4013      	ands	r3, r2
 8000ecc:	d100      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x58>
 8000ece:	e071      	b.n	8000fb4 <HAL_RCC_OscConfig+0x13c>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d000      	beq.n	8000eda <HAL_RCC_OscConfig+0x62>
 8000ed8:	e06c      	b.n	8000fb4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	f000 fb4c 	bl	8001578 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d107      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x80>
 8000ee8:	4bb1      	ldr	r3, [pc, #708]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4bb0      	ldr	r3, [pc, #704]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000eee:	2180      	movs	r1, #128	; 0x80
 8000ef0:	0249      	lsls	r1, r1, #9
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	e02f      	b.n	8000f58 <HAL_RCC_OscConfig+0xe0>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d10c      	bne.n	8000f1a <HAL_RCC_OscConfig+0xa2>
 8000f00:	4bab      	ldr	r3, [pc, #684]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4baa      	ldr	r3, [pc, #680]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f06:	49ab      	ldr	r1, [pc, #684]	; (80011b4 <HAL_RCC_OscConfig+0x33c>)
 8000f08:	400a      	ands	r2, r1
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	4ba8      	ldr	r3, [pc, #672]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4ba7      	ldr	r3, [pc, #668]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f12:	49a9      	ldr	r1, [pc, #676]	; (80011b8 <HAL_RCC_OscConfig+0x340>)
 8000f14:	400a      	ands	r2, r1
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	e01e      	b.n	8000f58 <HAL_RCC_OscConfig+0xe0>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b05      	cmp	r3, #5
 8000f20:	d10e      	bne.n	8000f40 <HAL_RCC_OscConfig+0xc8>
 8000f22:	4ba3      	ldr	r3, [pc, #652]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	4ba2      	ldr	r3, [pc, #648]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f28:	2180      	movs	r1, #128	; 0x80
 8000f2a:	02c9      	lsls	r1, r1, #11
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	4b9f      	ldr	r3, [pc, #636]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b9e      	ldr	r3, [pc, #632]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f36:	2180      	movs	r1, #128	; 0x80
 8000f38:	0249      	lsls	r1, r1, #9
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	e00b      	b.n	8000f58 <HAL_RCC_OscConfig+0xe0>
 8000f40:	4b9b      	ldr	r3, [pc, #620]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b9a      	ldr	r3, [pc, #616]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f46:	499b      	ldr	r1, [pc, #620]	; (80011b4 <HAL_RCC_OscConfig+0x33c>)
 8000f48:	400a      	ands	r2, r1
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	4b98      	ldr	r3, [pc, #608]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b97      	ldr	r3, [pc, #604]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f52:	4999      	ldr	r1, [pc, #612]	; (80011b8 <HAL_RCC_OscConfig+0x340>)
 8000f54:	400a      	ands	r2, r1
 8000f56:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d014      	beq.n	8000f8a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f60:	f7ff fcca 	bl	80008f8 <HAL_GetTick>
 8000f64:	0003      	movs	r3, r0
 8000f66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f68:	e008      	b.n	8000f7c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f6a:	f7ff fcc5 	bl	80008f8 <HAL_GetTick>
 8000f6e:	0002      	movs	r2, r0
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b64      	cmp	r3, #100	; 0x64
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e2fd      	b.n	8001578 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7c:	4b8c      	ldr	r3, [pc, #560]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	029b      	lsls	r3, r3, #10
 8000f84:	4013      	ands	r3, r2
 8000f86:	d0f0      	beq.n	8000f6a <HAL_RCC_OscConfig+0xf2>
 8000f88:	e015      	b.n	8000fb6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8a:	f7ff fcb5 	bl	80008f8 <HAL_GetTick>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f94:	f7ff fcb0 	bl	80008f8 <HAL_GetTick>
 8000f98:	0002      	movs	r2, r0
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b64      	cmp	r3, #100	; 0x64
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e2e8      	b.n	8001578 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa6:	4b82      	ldr	r3, [pc, #520]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	029b      	lsls	r3, r3, #10
 8000fae:	4013      	ands	r3, r2
 8000fb0:	d1f0      	bne.n	8000f94 <HAL_RCC_OscConfig+0x11c>
 8000fb2:	e000      	b.n	8000fb6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2202      	movs	r2, #2
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d100      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x14a>
 8000fc0:	e06c      	b.n	800109c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fc2:	4b7b      	ldr	r3, [pc, #492]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	4013      	ands	r3, r2
 8000fca:	d00e      	beq.n	8000fea <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fcc:	4b78      	ldr	r3, [pc, #480]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	220c      	movs	r2, #12
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2b08      	cmp	r3, #8
 8000fd6:	d11f      	bne.n	8001018 <HAL_RCC_OscConfig+0x1a0>
 8000fd8:	4b75      	ldr	r3, [pc, #468]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000fda:	685a      	ldr	r2, [r3, #4]
 8000fdc:	23c0      	movs	r3, #192	; 0xc0
 8000fde:	025b      	lsls	r3, r3, #9
 8000fe0:	401a      	ands	r2, r3
 8000fe2:	2380      	movs	r3, #128	; 0x80
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d116      	bne.n	8001018 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fea:	4b71      	ldr	r3, [pc, #452]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2202      	movs	r2, #2
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	d005      	beq.n	8001000 <HAL_RCC_OscConfig+0x188>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d001      	beq.n	8001000 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e2bb      	b.n	8001578 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001000:	4b6b      	ldr	r3, [pc, #428]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	22f8      	movs	r2, #248	; 0xf8
 8001006:	4393      	bics	r3, r2
 8001008:	0019      	movs	r1, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	00da      	lsls	r2, r3, #3
 8001010:	4b67      	ldr	r3, [pc, #412]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8001012:	430a      	orrs	r2, r1
 8001014:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001016:	e041      	b.n	800109c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d024      	beq.n	800106a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001020:	4b63      	ldr	r3, [pc, #396]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b62      	ldr	r3, [pc, #392]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8001026:	2101      	movs	r1, #1
 8001028:	430a      	orrs	r2, r1
 800102a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff fc64 	bl	80008f8 <HAL_GetTick>
 8001030:	0003      	movs	r3, r0
 8001032:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001036:	f7ff fc5f 	bl	80008f8 <HAL_GetTick>
 800103a:	0002      	movs	r2, r0
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e297      	b.n	8001578 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001048:	4b59      	ldr	r3, [pc, #356]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2202      	movs	r2, #2
 800104e:	4013      	ands	r3, r2
 8001050:	d0f1      	beq.n	8001036 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001052:	4b57      	ldr	r3, [pc, #348]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	22f8      	movs	r2, #248	; 0xf8
 8001058:	4393      	bics	r3, r2
 800105a:	0019      	movs	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	00da      	lsls	r2, r3, #3
 8001062:	4b53      	ldr	r3, [pc, #332]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8001064:	430a      	orrs	r2, r1
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	e018      	b.n	800109c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800106a:	4b51      	ldr	r3, [pc, #324]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	4b50      	ldr	r3, [pc, #320]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8001070:	2101      	movs	r1, #1
 8001072:	438a      	bics	r2, r1
 8001074:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001076:	f7ff fc3f 	bl	80008f8 <HAL_GetTick>
 800107a:	0003      	movs	r3, r0
 800107c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001080:	f7ff fc3a 	bl	80008f8 <HAL_GetTick>
 8001084:	0002      	movs	r2, r0
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e272      	b.n	8001578 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001092:	4b47      	ldr	r3, [pc, #284]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2202      	movs	r2, #2
 8001098:	4013      	ands	r3, r2
 800109a:	d1f1      	bne.n	8001080 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2208      	movs	r2, #8
 80010a2:	4013      	ands	r3, r2
 80010a4:	d036      	beq.n	8001114 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d019      	beq.n	80010e2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ae:	4b40      	ldr	r3, [pc, #256]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 80010b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010b2:	4b3f      	ldr	r3, [pc, #252]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 80010b4:	2101      	movs	r1, #1
 80010b6:	430a      	orrs	r2, r1
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ba:	f7ff fc1d 	bl	80008f8 <HAL_GetTick>
 80010be:	0003      	movs	r3, r0
 80010c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010c4:	f7ff fc18 	bl	80008f8 <HAL_GetTick>
 80010c8:	0002      	movs	r2, r0
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e250      	b.n	8001578 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010d6:	4b36      	ldr	r3, [pc, #216]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 80010d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010da:	2202      	movs	r2, #2
 80010dc:	4013      	ands	r3, r2
 80010de:	d0f1      	beq.n	80010c4 <HAL_RCC_OscConfig+0x24c>
 80010e0:	e018      	b.n	8001114 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010e2:	4b33      	ldr	r3, [pc, #204]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 80010e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010e6:	4b32      	ldr	r3, [pc, #200]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 80010e8:	2101      	movs	r1, #1
 80010ea:	438a      	bics	r2, r1
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ee:	f7ff fc03 	bl	80008f8 <HAL_GetTick>
 80010f2:	0003      	movs	r3, r0
 80010f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010f8:	f7ff fbfe 	bl	80008f8 <HAL_GetTick>
 80010fc:	0002      	movs	r2, r0
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e236      	b.n	8001578 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800110a:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 800110c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110e:	2202      	movs	r2, #2
 8001110:	4013      	ands	r3, r2
 8001112:	d1f1      	bne.n	80010f8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2204      	movs	r2, #4
 800111a:	4013      	ands	r3, r2
 800111c:	d100      	bne.n	8001120 <HAL_RCC_OscConfig+0x2a8>
 800111e:	e0b5      	b.n	800128c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001120:	201f      	movs	r0, #31
 8001122:	183b      	adds	r3, r7, r0
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001128:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 800112a:	69da      	ldr	r2, [r3, #28]
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	055b      	lsls	r3, r3, #21
 8001130:	4013      	ands	r3, r2
 8001132:	d110      	bne.n	8001156 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001134:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8001136:	69da      	ldr	r2, [r3, #28]
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 800113a:	2180      	movs	r1, #128	; 0x80
 800113c:	0549      	lsls	r1, r1, #21
 800113e:	430a      	orrs	r2, r1
 8001140:	61da      	str	r2, [r3, #28]
 8001142:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8001144:	69da      	ldr	r2, [r3, #28]
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	055b      	lsls	r3, r3, #21
 800114a:	4013      	ands	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001150:	183b      	adds	r3, r7, r0
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <HAL_RCC_OscConfig+0x344>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4013      	ands	r3, r2
 8001160:	d11a      	bne.n	8001198 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_RCC_OscConfig+0x344>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <HAL_RCC_OscConfig+0x344>)
 8001168:	2180      	movs	r1, #128	; 0x80
 800116a:	0049      	lsls	r1, r1, #1
 800116c:	430a      	orrs	r2, r1
 800116e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001170:	f7ff fbc2 	bl	80008f8 <HAL_GetTick>
 8001174:	0003      	movs	r3, r0
 8001176:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800117a:	f7ff fbbd 	bl	80008f8 <HAL_GetTick>
 800117e:	0002      	movs	r2, r0
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b64      	cmp	r3, #100	; 0x64
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e1f5      	b.n	8001578 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_RCC_OscConfig+0x344>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4013      	ands	r3, r2
 8001196:	d0f0      	beq.n	800117a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d10f      	bne.n	80011c0 <HAL_RCC_OscConfig+0x348>
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 80011a2:	6a1a      	ldr	r2, [r3, #32]
 80011a4:	4b02      	ldr	r3, [pc, #8]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 80011a6:	2101      	movs	r1, #1
 80011a8:	430a      	orrs	r2, r1
 80011aa:	621a      	str	r2, [r3, #32]
 80011ac:	e036      	b.n	800121c <HAL_RCC_OscConfig+0x3a4>
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	40021000 	.word	0x40021000
 80011b4:	fffeffff 	.word	0xfffeffff
 80011b8:	fffbffff 	.word	0xfffbffff
 80011bc:	40007000 	.word	0x40007000
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10c      	bne.n	80011e2 <HAL_RCC_OscConfig+0x36a>
 80011c8:	4bca      	ldr	r3, [pc, #808]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80011ca:	6a1a      	ldr	r2, [r3, #32]
 80011cc:	4bc9      	ldr	r3, [pc, #804]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80011ce:	2101      	movs	r1, #1
 80011d0:	438a      	bics	r2, r1
 80011d2:	621a      	str	r2, [r3, #32]
 80011d4:	4bc7      	ldr	r3, [pc, #796]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80011d6:	6a1a      	ldr	r2, [r3, #32]
 80011d8:	4bc6      	ldr	r3, [pc, #792]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80011da:	2104      	movs	r1, #4
 80011dc:	438a      	bics	r2, r1
 80011de:	621a      	str	r2, [r3, #32]
 80011e0:	e01c      	b.n	800121c <HAL_RCC_OscConfig+0x3a4>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2b05      	cmp	r3, #5
 80011e8:	d10c      	bne.n	8001204 <HAL_RCC_OscConfig+0x38c>
 80011ea:	4bc2      	ldr	r3, [pc, #776]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80011ec:	6a1a      	ldr	r2, [r3, #32]
 80011ee:	4bc1      	ldr	r3, [pc, #772]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80011f0:	2104      	movs	r1, #4
 80011f2:	430a      	orrs	r2, r1
 80011f4:	621a      	str	r2, [r3, #32]
 80011f6:	4bbf      	ldr	r3, [pc, #764]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80011f8:	6a1a      	ldr	r2, [r3, #32]
 80011fa:	4bbe      	ldr	r3, [pc, #760]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80011fc:	2101      	movs	r1, #1
 80011fe:	430a      	orrs	r2, r1
 8001200:	621a      	str	r2, [r3, #32]
 8001202:	e00b      	b.n	800121c <HAL_RCC_OscConfig+0x3a4>
 8001204:	4bbb      	ldr	r3, [pc, #748]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 8001206:	6a1a      	ldr	r2, [r3, #32]
 8001208:	4bba      	ldr	r3, [pc, #744]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 800120a:	2101      	movs	r1, #1
 800120c:	438a      	bics	r2, r1
 800120e:	621a      	str	r2, [r3, #32]
 8001210:	4bb8      	ldr	r3, [pc, #736]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 8001212:	6a1a      	ldr	r2, [r3, #32]
 8001214:	4bb7      	ldr	r3, [pc, #732]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 8001216:	2104      	movs	r1, #4
 8001218:	438a      	bics	r2, r1
 800121a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d014      	beq.n	800124e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001224:	f7ff fb68 	bl	80008f8 <HAL_GetTick>
 8001228:	0003      	movs	r3, r0
 800122a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122c:	e009      	b.n	8001242 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800122e:	f7ff fb63 	bl	80008f8 <HAL_GetTick>
 8001232:	0002      	movs	r2, r0
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	4aaf      	ldr	r2, [pc, #700]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e19a      	b.n	8001578 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001242:	4bac      	ldr	r3, [pc, #688]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	2202      	movs	r2, #2
 8001248:	4013      	ands	r3, r2
 800124a:	d0f0      	beq.n	800122e <HAL_RCC_OscConfig+0x3b6>
 800124c:	e013      	b.n	8001276 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124e:	f7ff fb53 	bl	80008f8 <HAL_GetTick>
 8001252:	0003      	movs	r3, r0
 8001254:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001256:	e009      	b.n	800126c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001258:	f7ff fb4e 	bl	80008f8 <HAL_GetTick>
 800125c:	0002      	movs	r2, r0
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	4aa5      	ldr	r2, [pc, #660]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e185      	b.n	8001578 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800126c:	4ba1      	ldr	r3, [pc, #644]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	2202      	movs	r2, #2
 8001272:	4013      	ands	r3, r2
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001276:	231f      	movs	r3, #31
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d105      	bne.n	800128c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001280:	4b9c      	ldr	r3, [pc, #624]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 8001282:	69da      	ldr	r2, [r3, #28]
 8001284:	4b9b      	ldr	r3, [pc, #620]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 8001286:	499d      	ldr	r1, [pc, #628]	; (80014fc <HAL_RCC_OscConfig+0x684>)
 8001288:	400a      	ands	r2, r1
 800128a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2210      	movs	r2, #16
 8001292:	4013      	ands	r3, r2
 8001294:	d063      	beq.n	800135e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d12a      	bne.n	80012f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800129e:	4b95      	ldr	r3, [pc, #596]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80012a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012a2:	4b94      	ldr	r3, [pc, #592]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80012a4:	2104      	movs	r1, #4
 80012a6:	430a      	orrs	r2, r1
 80012a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80012aa:	4b92      	ldr	r3, [pc, #584]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80012ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ae:	4b91      	ldr	r3, [pc, #580]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80012b0:	2101      	movs	r1, #1
 80012b2:	430a      	orrs	r2, r1
 80012b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fb1f 	bl	80008f8 <HAL_GetTick>
 80012ba:	0003      	movs	r3, r0
 80012bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012c0:	f7ff fb1a 	bl	80008f8 <HAL_GetTick>
 80012c4:	0002      	movs	r2, r0
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e152      	b.n	8001578 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012d2:	4b88      	ldr	r3, [pc, #544]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80012d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d6:	2202      	movs	r2, #2
 80012d8:	4013      	ands	r3, r2
 80012da:	d0f1      	beq.n	80012c0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012dc:	4b85      	ldr	r3, [pc, #532]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80012de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e0:	22f8      	movs	r2, #248	; 0xf8
 80012e2:	4393      	bics	r3, r2
 80012e4:	0019      	movs	r1, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	00da      	lsls	r2, r3, #3
 80012ec:	4b81      	ldr	r3, [pc, #516]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80012ee:	430a      	orrs	r2, r1
 80012f0:	635a      	str	r2, [r3, #52]	; 0x34
 80012f2:	e034      	b.n	800135e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	3305      	adds	r3, #5
 80012fa:	d111      	bne.n	8001320 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80012fc:	4b7d      	ldr	r3, [pc, #500]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80012fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001300:	4b7c      	ldr	r3, [pc, #496]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 8001302:	2104      	movs	r1, #4
 8001304:	438a      	bics	r2, r1
 8001306:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001308:	4b7a      	ldr	r3, [pc, #488]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 800130a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130c:	22f8      	movs	r2, #248	; 0xf8
 800130e:	4393      	bics	r3, r2
 8001310:	0019      	movs	r1, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	00da      	lsls	r2, r3, #3
 8001318:	4b76      	ldr	r3, [pc, #472]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 800131a:	430a      	orrs	r2, r1
 800131c:	635a      	str	r2, [r3, #52]	; 0x34
 800131e:	e01e      	b.n	800135e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001320:	4b74      	ldr	r3, [pc, #464]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 8001322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001324:	4b73      	ldr	r3, [pc, #460]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 8001326:	2104      	movs	r1, #4
 8001328:	430a      	orrs	r2, r1
 800132a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800132c:	4b71      	ldr	r3, [pc, #452]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 800132e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001330:	4b70      	ldr	r3, [pc, #448]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 8001332:	2101      	movs	r1, #1
 8001334:	438a      	bics	r2, r1
 8001336:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001338:	f7ff fade 	bl	80008f8 <HAL_GetTick>
 800133c:	0003      	movs	r3, r0
 800133e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001342:	f7ff fad9 	bl	80008f8 <HAL_GetTick>
 8001346:	0002      	movs	r2, r0
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e111      	b.n	8001578 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001354:	4b67      	ldr	r3, [pc, #412]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 8001356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001358:	2202      	movs	r2, #2
 800135a:	4013      	ands	r3, r2
 800135c:	d1f1      	bne.n	8001342 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2220      	movs	r2, #32
 8001364:	4013      	ands	r3, r2
 8001366:	d05c      	beq.n	8001422 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001368:	4b62      	ldr	r3, [pc, #392]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	220c      	movs	r2, #12
 800136e:	4013      	ands	r3, r2
 8001370:	2b0c      	cmp	r3, #12
 8001372:	d00e      	beq.n	8001392 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001374:	4b5f      	ldr	r3, [pc, #380]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	220c      	movs	r2, #12
 800137a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800137c:	2b08      	cmp	r3, #8
 800137e:	d114      	bne.n	80013aa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001380:	4b5c      	ldr	r3, [pc, #368]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	23c0      	movs	r3, #192	; 0xc0
 8001386:	025b      	lsls	r3, r3, #9
 8001388:	401a      	ands	r2, r3
 800138a:	23c0      	movs	r3, #192	; 0xc0
 800138c:	025b      	lsls	r3, r3, #9
 800138e:	429a      	cmp	r2, r3
 8001390:	d10b      	bne.n	80013aa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001392:	4b58      	ldr	r3, [pc, #352]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 8001394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	029b      	lsls	r3, r3, #10
 800139a:	4013      	ands	r3, r2
 800139c:	d040      	beq.n	8001420 <HAL_RCC_OscConfig+0x5a8>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d03c      	beq.n	8001420 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e0e6      	b.n	8001578 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d01b      	beq.n	80013ea <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80013b2:	4b50      	ldr	r3, [pc, #320]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80013b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013b6:	4b4f      	ldr	r3, [pc, #316]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80013b8:	2180      	movs	r1, #128	; 0x80
 80013ba:	0249      	lsls	r1, r1, #9
 80013bc:	430a      	orrs	r2, r1
 80013be:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fa9a 	bl	80008f8 <HAL_GetTick>
 80013c4:	0003      	movs	r3, r0
 80013c6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013ca:	f7ff fa95 	bl	80008f8 <HAL_GetTick>
 80013ce:	0002      	movs	r2, r0
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e0cd      	b.n	8001578 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80013dc:	4b45      	ldr	r3, [pc, #276]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80013de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	029b      	lsls	r3, r3, #10
 80013e4:	4013      	ands	r3, r2
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x552>
 80013e8:	e01b      	b.n	8001422 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80013ea:	4b42      	ldr	r3, [pc, #264]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80013ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ee:	4b41      	ldr	r3, [pc, #260]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80013f0:	4943      	ldr	r1, [pc, #268]	; (8001500 <HAL_RCC_OscConfig+0x688>)
 80013f2:	400a      	ands	r2, r1
 80013f4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f6:	f7ff fa7f 	bl	80008f8 <HAL_GetTick>
 80013fa:	0003      	movs	r3, r0
 80013fc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001400:	f7ff fa7a 	bl	80008f8 <HAL_GetTick>
 8001404:	0002      	movs	r2, r0
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e0b2      	b.n	8001578 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001412:	4b38      	ldr	r3, [pc, #224]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 8001414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001416:	2380      	movs	r3, #128	; 0x80
 8001418:	029b      	lsls	r3, r3, #10
 800141a:	4013      	ands	r3, r2
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x588>
 800141e:	e000      	b.n	8001422 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001420:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	2b00      	cmp	r3, #0
 8001428:	d100      	bne.n	800142c <HAL_RCC_OscConfig+0x5b4>
 800142a:	e0a4      	b.n	8001576 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800142c:	4b31      	ldr	r3, [pc, #196]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	220c      	movs	r2, #12
 8001432:	4013      	ands	r3, r2
 8001434:	2b08      	cmp	r3, #8
 8001436:	d100      	bne.n	800143a <HAL_RCC_OscConfig+0x5c2>
 8001438:	e078      	b.n	800152c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143e:	2b02      	cmp	r3, #2
 8001440:	d14c      	bne.n	80014dc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001442:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 8001448:	492e      	ldr	r1, [pc, #184]	; (8001504 <HAL_RCC_OscConfig+0x68c>)
 800144a:	400a      	ands	r2, r1
 800144c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144e:	f7ff fa53 	bl	80008f8 <HAL_GetTick>
 8001452:	0003      	movs	r3, r0
 8001454:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001458:	f7ff fa4e 	bl	80008f8 <HAL_GetTick>
 800145c:	0002      	movs	r2, r0
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e086      	b.n	8001578 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800146a:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	049b      	lsls	r3, r3, #18
 8001472:	4013      	ands	r3, r2
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 8001478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147a:	220f      	movs	r2, #15
 800147c:	4393      	bics	r3, r2
 800147e:	0019      	movs	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 8001486:	430a      	orrs	r2, r1
 8001488:	62da      	str	r2, [r3, #44]	; 0x2c
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	4a1e      	ldr	r2, [pc, #120]	; (8001508 <HAL_RCC_OscConfig+0x690>)
 8001490:	4013      	ands	r3, r2
 8001492:	0019      	movs	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149c:	431a      	orrs	r2, r3
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80014a0:	430a      	orrs	r2, r1
 80014a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80014aa:	2180      	movs	r1, #128	; 0x80
 80014ac:	0449      	lsls	r1, r1, #17
 80014ae:	430a      	orrs	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff fa21 	bl	80008f8 <HAL_GetTick>
 80014b6:	0003      	movs	r3, r0
 80014b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014bc:	f7ff fa1c 	bl	80008f8 <HAL_GetTick>
 80014c0:	0002      	movs	r2, r0
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e054      	b.n	8001578 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	049b      	lsls	r3, r3, #18
 80014d6:	4013      	ands	r3, r2
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x644>
 80014da:	e04c      	b.n	8001576 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <HAL_RCC_OscConfig+0x67c>)
 80014e2:	4908      	ldr	r1, [pc, #32]	; (8001504 <HAL_RCC_OscConfig+0x68c>)
 80014e4:	400a      	ands	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fa06 	bl	80008f8 <HAL_GetTick>
 80014ec:	0003      	movs	r3, r0
 80014ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f0:	e015      	b.n	800151e <HAL_RCC_OscConfig+0x6a6>
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	40021000 	.word	0x40021000
 80014f8:	00001388 	.word	0x00001388
 80014fc:	efffffff 	.word	0xefffffff
 8001500:	fffeffff 	.word	0xfffeffff
 8001504:	feffffff 	.word	0xfeffffff
 8001508:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800150c:	f7ff f9f4 	bl	80008f8 <HAL_GetTick>
 8001510:	0002      	movs	r2, r0
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e02c      	b.n	8001578 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_RCC_OscConfig+0x708>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	2380      	movs	r3, #128	; 0x80
 8001524:	049b      	lsls	r3, r3, #18
 8001526:	4013      	ands	r3, r2
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x694>
 800152a:	e024      	b.n	8001576 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001530:	2b01      	cmp	r3, #1
 8001532:	d101      	bne.n	8001538 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e01f      	b.n	8001578 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_RCC_OscConfig+0x708>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_RCC_OscConfig+0x708>)
 8001540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001542:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	23c0      	movs	r3, #192	; 0xc0
 8001548:	025b      	lsls	r3, r3, #9
 800154a:	401a      	ands	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001550:	429a      	cmp	r2, r3
 8001552:	d10e      	bne.n	8001572 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	220f      	movs	r2, #15
 8001558:	401a      	ands	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800155e:	429a      	cmp	r2, r3
 8001560:	d107      	bne.n	8001572 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	23f0      	movs	r3, #240	; 0xf0
 8001566:	039b      	lsls	r3, r3, #14
 8001568:	401a      	ands	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800156e:	429a      	cmp	r2, r3
 8001570:	d001      	beq.n	8001576 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	0018      	movs	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	b008      	add	sp, #32
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40021000 	.word	0x40021000

08001584 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0bf      	b.n	8001718 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001598:	4b61      	ldr	r3, [pc, #388]	; (8001720 <HAL_RCC_ClockConfig+0x19c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2201      	movs	r2, #1
 800159e:	4013      	ands	r3, r2
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d911      	bls.n	80015ca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a6:	4b5e      	ldr	r3, [pc, #376]	; (8001720 <HAL_RCC_ClockConfig+0x19c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2201      	movs	r2, #1
 80015ac:	4393      	bics	r3, r2
 80015ae:	0019      	movs	r1, r3
 80015b0:	4b5b      	ldr	r3, [pc, #364]	; (8001720 <HAL_RCC_ClockConfig+0x19c>)
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b8:	4b59      	ldr	r3, [pc, #356]	; (8001720 <HAL_RCC_ClockConfig+0x19c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2201      	movs	r2, #1
 80015be:	4013      	ands	r3, r2
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d001      	beq.n	80015ca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e0a6      	b.n	8001718 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2202      	movs	r2, #2
 80015d0:	4013      	ands	r3, r2
 80015d2:	d015      	beq.n	8001600 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2204      	movs	r2, #4
 80015da:	4013      	ands	r3, r2
 80015dc:	d006      	beq.n	80015ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015de:	4b51      	ldr	r3, [pc, #324]	; (8001724 <HAL_RCC_ClockConfig+0x1a0>)
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	4b50      	ldr	r3, [pc, #320]	; (8001724 <HAL_RCC_ClockConfig+0x1a0>)
 80015e4:	21e0      	movs	r1, #224	; 0xe0
 80015e6:	00c9      	lsls	r1, r1, #3
 80015e8:	430a      	orrs	r2, r1
 80015ea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ec:	4b4d      	ldr	r3, [pc, #308]	; (8001724 <HAL_RCC_ClockConfig+0x1a0>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	22f0      	movs	r2, #240	; 0xf0
 80015f2:	4393      	bics	r3, r2
 80015f4:	0019      	movs	r1, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	4b4a      	ldr	r3, [pc, #296]	; (8001724 <HAL_RCC_ClockConfig+0x1a0>)
 80015fc:	430a      	orrs	r2, r1
 80015fe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2201      	movs	r2, #1
 8001606:	4013      	ands	r3, r2
 8001608:	d04c      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d107      	bne.n	8001622 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001612:	4b44      	ldr	r3, [pc, #272]	; (8001724 <HAL_RCC_ClockConfig+0x1a0>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	029b      	lsls	r3, r3, #10
 800161a:	4013      	ands	r3, r2
 800161c:	d120      	bne.n	8001660 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e07a      	b.n	8001718 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d107      	bne.n	800163a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162a:	4b3e      	ldr	r3, [pc, #248]	; (8001724 <HAL_RCC_ClockConfig+0x1a0>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	049b      	lsls	r3, r3, #18
 8001632:	4013      	ands	r3, r2
 8001634:	d114      	bne.n	8001660 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e06e      	b.n	8001718 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b03      	cmp	r3, #3
 8001640:	d107      	bne.n	8001652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001642:	4b38      	ldr	r3, [pc, #224]	; (8001724 <HAL_RCC_ClockConfig+0x1a0>)
 8001644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	029b      	lsls	r3, r3, #10
 800164a:	4013      	ands	r3, r2
 800164c:	d108      	bne.n	8001660 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e062      	b.n	8001718 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001652:	4b34      	ldr	r3, [pc, #208]	; (8001724 <HAL_RCC_ClockConfig+0x1a0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2202      	movs	r2, #2
 8001658:	4013      	ands	r3, r2
 800165a:	d101      	bne.n	8001660 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e05b      	b.n	8001718 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001660:	4b30      	ldr	r3, [pc, #192]	; (8001724 <HAL_RCC_ClockConfig+0x1a0>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2203      	movs	r2, #3
 8001666:	4393      	bics	r3, r2
 8001668:	0019      	movs	r1, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <HAL_RCC_ClockConfig+0x1a0>)
 8001670:	430a      	orrs	r2, r1
 8001672:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001674:	f7ff f940 	bl	80008f8 <HAL_GetTick>
 8001678:	0003      	movs	r3, r0
 800167a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167c:	e009      	b.n	8001692 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800167e:	f7ff f93b 	bl	80008f8 <HAL_GetTick>
 8001682:	0002      	movs	r2, r0
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	4a27      	ldr	r2, [pc, #156]	; (8001728 <HAL_RCC_ClockConfig+0x1a4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e042      	b.n	8001718 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001692:	4b24      	ldr	r3, [pc, #144]	; (8001724 <HAL_RCC_ClockConfig+0x1a0>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	220c      	movs	r2, #12
 8001698:	401a      	ands	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d1ec      	bne.n	800167e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016a4:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <HAL_RCC_ClockConfig+0x19c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2201      	movs	r2, #1
 80016aa:	4013      	ands	r3, r2
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d211      	bcs.n	80016d6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <HAL_RCC_ClockConfig+0x19c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2201      	movs	r2, #1
 80016b8:	4393      	bics	r3, r2
 80016ba:	0019      	movs	r1, r3
 80016bc:	4b18      	ldr	r3, [pc, #96]	; (8001720 <HAL_RCC_ClockConfig+0x19c>)
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <HAL_RCC_ClockConfig+0x19c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2201      	movs	r2, #1
 80016ca:	4013      	ands	r3, r2
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d001      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e020      	b.n	8001718 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2204      	movs	r2, #4
 80016dc:	4013      	ands	r3, r2
 80016de:	d009      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016e0:	4b10      	ldr	r3, [pc, #64]	; (8001724 <HAL_RCC_ClockConfig+0x1a0>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	4a11      	ldr	r2, [pc, #68]	; (800172c <HAL_RCC_ClockConfig+0x1a8>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	0019      	movs	r1, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <HAL_RCC_ClockConfig+0x1a0>)
 80016f0:	430a      	orrs	r2, r1
 80016f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80016f4:	f000 f820 	bl	8001738 <HAL_RCC_GetSysClockFreq>
 80016f8:	0001      	movs	r1, r0
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <HAL_RCC_ClockConfig+0x1a0>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	220f      	movs	r2, #15
 8001702:	4013      	ands	r3, r2
 8001704:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <HAL_RCC_ClockConfig+0x1ac>)
 8001706:	5cd3      	ldrb	r3, [r2, r3]
 8001708:	000a      	movs	r2, r1
 800170a:	40da      	lsrs	r2, r3
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_RCC_ClockConfig+0x1b0>)
 800170e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff f8bd 	bl	8000890 <HAL_InitTick>
  
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	0018      	movs	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	b004      	add	sp, #16
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40022000 	.word	0x40022000
 8001724:	40021000 	.word	0x40021000
 8001728:	00001388 	.word	0x00001388
 800172c:	fffff8ff 	.word	0xfffff8ff
 8001730:	08004dfc 	.word	0x08004dfc
 8001734:	20000000 	.word	0x20000000

08001738 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001752:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	220c      	movs	r2, #12
 800175c:	4013      	ands	r3, r2
 800175e:	2b0c      	cmp	r3, #12
 8001760:	d046      	beq.n	80017f0 <HAL_RCC_GetSysClockFreq+0xb8>
 8001762:	d848      	bhi.n	80017f6 <HAL_RCC_GetSysClockFreq+0xbe>
 8001764:	2b04      	cmp	r3, #4
 8001766:	d002      	beq.n	800176e <HAL_RCC_GetSysClockFreq+0x36>
 8001768:	2b08      	cmp	r3, #8
 800176a:	d003      	beq.n	8001774 <HAL_RCC_GetSysClockFreq+0x3c>
 800176c:	e043      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800176e:	4b27      	ldr	r3, [pc, #156]	; (800180c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001770:	613b      	str	r3, [r7, #16]
      break;
 8001772:	e043      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	0c9b      	lsrs	r3, r3, #18
 8001778:	220f      	movs	r2, #15
 800177a:	4013      	ands	r3, r2
 800177c:	4a24      	ldr	r2, [pc, #144]	; (8001810 <HAL_RCC_GetSysClockFreq+0xd8>)
 800177e:	5cd3      	ldrb	r3, [r2, r3]
 8001780:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001782:	4b21      	ldr	r3, [pc, #132]	; (8001808 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001786:	220f      	movs	r2, #15
 8001788:	4013      	ands	r3, r2
 800178a:	4a22      	ldr	r2, [pc, #136]	; (8001814 <HAL_RCC_GetSysClockFreq+0xdc>)
 800178c:	5cd3      	ldrb	r3, [r2, r3]
 800178e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	23c0      	movs	r3, #192	; 0xc0
 8001794:	025b      	lsls	r3, r3, #9
 8001796:	401a      	ands	r2, r3
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	025b      	lsls	r3, r3, #9
 800179c:	429a      	cmp	r2, r3
 800179e:	d109      	bne.n	80017b4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017a0:	68b9      	ldr	r1, [r7, #8]
 80017a2:	481a      	ldr	r0, [pc, #104]	; (800180c <HAL_RCC_GetSysClockFreq+0xd4>)
 80017a4:	f7fe fcba 	bl	800011c <__udivsi3>
 80017a8:	0003      	movs	r3, r0
 80017aa:	001a      	movs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4353      	muls	r3, r2
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	e01a      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	23c0      	movs	r3, #192	; 0xc0
 80017b8:	025b      	lsls	r3, r3, #9
 80017ba:	401a      	ands	r2, r3
 80017bc:	23c0      	movs	r3, #192	; 0xc0
 80017be:	025b      	lsls	r3, r3, #9
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d109      	bne.n	80017d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	4814      	ldr	r0, [pc, #80]	; (8001818 <HAL_RCC_GetSysClockFreq+0xe0>)
 80017c8:	f7fe fca8 	bl	800011c <__udivsi3>
 80017cc:	0003      	movs	r3, r0
 80017ce:	001a      	movs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4353      	muls	r3, r2
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	e008      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	480c      	ldr	r0, [pc, #48]	; (800180c <HAL_RCC_GetSysClockFreq+0xd4>)
 80017dc:	f7fe fc9e 	bl	800011c <__udivsi3>
 80017e0:	0003      	movs	r3, r0
 80017e2:	001a      	movs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4353      	muls	r3, r2
 80017e8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	613b      	str	r3, [r7, #16]
      break;
 80017ee:	e005      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <HAL_RCC_GetSysClockFreq+0xe0>)
 80017f2:	613b      	str	r3, [r7, #16]
      break;
 80017f4:	e002      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017f6:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_RCC_GetSysClockFreq+0xd4>)
 80017f8:	613b      	str	r3, [r7, #16]
      break;
 80017fa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80017fc:	693b      	ldr	r3, [r7, #16]
}
 80017fe:	0018      	movs	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	b006      	add	sp, #24
 8001804:	bd80      	pop	{r7, pc}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	40021000 	.word	0x40021000
 800180c:	007a1200 	.word	0x007a1200
 8001810:	08004e14 	.word	0x08004e14
 8001814:	08004e24 	.word	0x08004e24
 8001818:	02dc6c00 	.word	0x02dc6c00

0800181c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001820:	4b02      	ldr	r3, [pc, #8]	; (800182c <HAL_RCC_GetHCLKFreq+0x10>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	0018      	movs	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	20000000 	.word	0x20000000

08001830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001834:	f7ff fff2 	bl	800181c <HAL_RCC_GetHCLKFreq>
 8001838:	0001      	movs	r1, r0
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_RCC_GetPCLK1Freq+0x24>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	0a1b      	lsrs	r3, r3, #8
 8001840:	2207      	movs	r2, #7
 8001842:	4013      	ands	r3, r2
 8001844:	4a04      	ldr	r2, [pc, #16]	; (8001858 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001846:	5cd3      	ldrb	r3, [r2, r3]
 8001848:	40d9      	lsrs	r1, r3
 800184a:	000b      	movs	r3, r1
}    
 800184c:	0018      	movs	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	40021000 	.word	0x40021000
 8001858:	08004e0c 	.word	0x08004e0c

0800185c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	025b      	lsls	r3, r3, #9
 8001874:	4013      	ands	r3, r2
 8001876:	d100      	bne.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001878:	e08e      	b.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800187a:	2017      	movs	r0, #23
 800187c:	183b      	adds	r3, r7, r0
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001882:	4b6e      	ldr	r3, [pc, #440]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001884:	69da      	ldr	r2, [r3, #28]
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	055b      	lsls	r3, r3, #21
 800188a:	4013      	ands	r3, r2
 800188c:	d110      	bne.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800188e:	4b6b      	ldr	r3, [pc, #428]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001890:	69da      	ldr	r2, [r3, #28]
 8001892:	4b6a      	ldr	r3, [pc, #424]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001894:	2180      	movs	r1, #128	; 0x80
 8001896:	0549      	lsls	r1, r1, #21
 8001898:	430a      	orrs	r2, r1
 800189a:	61da      	str	r2, [r3, #28]
 800189c:	4b67      	ldr	r3, [pc, #412]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800189e:	69da      	ldr	r2, [r3, #28]
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	055b      	lsls	r3, r3, #21
 80018a4:	4013      	ands	r3, r2
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018aa:	183b      	adds	r3, r7, r0
 80018ac:	2201      	movs	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b0:	4b63      	ldr	r3, [pc, #396]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4013      	ands	r3, r2
 80018ba:	d11a      	bne.n	80018f2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018bc:	4b60      	ldr	r3, [pc, #384]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b5f      	ldr	r3, [pc, #380]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018c2:	2180      	movs	r1, #128	; 0x80
 80018c4:	0049      	lsls	r1, r1, #1
 80018c6:	430a      	orrs	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ca:	f7ff f815 	bl	80008f8 <HAL_GetTick>
 80018ce:	0003      	movs	r3, r0
 80018d0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d2:	e008      	b.n	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d4:	f7ff f810 	bl	80008f8 <HAL_GetTick>
 80018d8:	0002      	movs	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b64      	cmp	r3, #100	; 0x64
 80018e0:	d901      	bls.n	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e0a6      	b.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e6:	4b56      	ldr	r3, [pc, #344]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4013      	ands	r3, r2
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018f2:	4b52      	ldr	r3, [pc, #328]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018f4:	6a1a      	ldr	r2, [r3, #32]
 80018f6:	23c0      	movs	r3, #192	; 0xc0
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4013      	ands	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d034      	beq.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	23c0      	movs	r3, #192	; 0xc0
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4013      	ands	r3, r2
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	429a      	cmp	r2, r3
 8001912:	d02c      	beq.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001914:	4b49      	ldr	r3, [pc, #292]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	4a4a      	ldr	r2, [pc, #296]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800191a:	4013      	ands	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800191e:	4b47      	ldr	r3, [pc, #284]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001920:	6a1a      	ldr	r2, [r3, #32]
 8001922:	4b46      	ldr	r3, [pc, #280]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001924:	2180      	movs	r1, #128	; 0x80
 8001926:	0249      	lsls	r1, r1, #9
 8001928:	430a      	orrs	r2, r1
 800192a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800192c:	4b43      	ldr	r3, [pc, #268]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800192e:	6a1a      	ldr	r2, [r3, #32]
 8001930:	4b42      	ldr	r3, [pc, #264]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001932:	4945      	ldr	r1, [pc, #276]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001934:	400a      	ands	r2, r1
 8001936:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001938:	4b40      	ldr	r3, [pc, #256]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2201      	movs	r2, #1
 8001942:	4013      	ands	r3, r2
 8001944:	d013      	beq.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001946:	f7fe ffd7 	bl	80008f8 <HAL_GetTick>
 800194a:	0003      	movs	r3, r0
 800194c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800194e:	e009      	b.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001950:	f7fe ffd2 	bl	80008f8 <HAL_GetTick>
 8001954:	0002      	movs	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	4a3c      	ldr	r2, [pc, #240]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d901      	bls.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e067      	b.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001964:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	2202      	movs	r2, #2
 800196a:	4013      	ands	r3, r2
 800196c:	d0f0      	beq.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800196e:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	4a34      	ldr	r2, [pc, #208]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001974:	4013      	ands	r3, r2
 8001976:	0019      	movs	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800197e:	430a      	orrs	r2, r1
 8001980:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001982:	2317      	movs	r3, #23
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d105      	bne.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800198c:	4b2b      	ldr	r3, [pc, #172]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800198e:	69da      	ldr	r2, [r3, #28]
 8001990:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001992:	492f      	ldr	r1, [pc, #188]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001994:	400a      	ands	r2, r1
 8001996:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2201      	movs	r2, #1
 800199e:	4013      	ands	r3, r2
 80019a0:	d009      	beq.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019a2:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	2203      	movs	r2, #3
 80019a8:	4393      	bics	r3, r2
 80019aa:	0019      	movs	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019b2:	430a      	orrs	r2, r1
 80019b4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2202      	movs	r2, #2
 80019bc:	4013      	ands	r3, r2
 80019be:	d009      	beq.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019c0:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c4:	4a23      	ldr	r2, [pc, #140]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	0019      	movs	r1, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019d0:	430a      	orrs	r2, r1
 80019d2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2220      	movs	r2, #32
 80019da:	4013      	ands	r3, r2
 80019dc:	d009      	beq.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019de:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	2210      	movs	r2, #16
 80019e4:	4393      	bics	r3, r2
 80019e6:	0019      	movs	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019ee:	430a      	orrs	r2, r1
 80019f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	029b      	lsls	r3, r3, #10
 80019fa:	4013      	ands	r3, r2
 80019fc:	d009      	beq.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80019fe:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	2280      	movs	r2, #128	; 0x80
 8001a04:	4393      	bics	r3, r2
 8001a06:	0019      	movs	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699a      	ldr	r2, [r3, #24]
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d009      	beq.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	2240      	movs	r2, #64	; 0x40
 8001a24:	4393      	bics	r3, r2
 8001a26:	0019      	movs	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695a      	ldr	r2, [r3, #20]
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	0018      	movs	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b006      	add	sp, #24
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40007000 	.word	0x40007000
 8001a44:	fffffcff 	.word	0xfffffcff
 8001a48:	fffeffff 	.word	0xfffeffff
 8001a4c:	00001388 	.word	0x00001388
 8001a50:	efffffff 	.word	0xefffffff
 8001a54:	fffcffff 	.word	0xfffcffff

08001a58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e044      	b.n	8001af4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d107      	bne.n	8001a82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2278      	movs	r2, #120	; 0x78
 8001a76:	2100      	movs	r1, #0
 8001a78:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7fe fe1f 	bl	80006c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2224      	movs	r2, #36	; 0x24
 8001a86:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2101      	movs	r1, #1
 8001a94:	438a      	bics	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f000 fa54 	bl	8001f50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f000 f8c8 	bl	8001c40 <UART_SetConfig>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d101      	bne.n	8001aba <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e01c      	b.n	8001af4 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	490d      	ldr	r1, [pc, #52]	; (8001afc <HAL_UART_Init+0xa4>)
 8001ac6:	400a      	ands	r2, r1
 8001ac8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	212a      	movs	r1, #42	; 0x2a
 8001ad6:	438a      	bics	r2, r1
 8001ad8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	0018      	movs	r0, r3
 8001aee:	f000 fae3 	bl	80020b8 <UART_CheckIdleState>
 8001af2:	0003      	movs	r3, r0
}
 8001af4:	0018      	movs	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b002      	add	sp, #8
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	ffffb7ff 	.word	0xffffb7ff

08001b00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	1dbb      	adds	r3, r7, #6
 8001b0e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b14:	2b20      	cmp	r3, #32
 8001b16:	d000      	beq.n	8001b1a <HAL_UART_Transmit+0x1a>
 8001b18:	e08d      	b.n	8001c36 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_UART_Transmit+0x28>
 8001b20:	1dbb      	adds	r3, r7, #6
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e085      	b.n	8001c38 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	015b      	lsls	r3, r3, #5
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d109      	bne.n	8001b4c <HAL_UART_Transmit+0x4c>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d105      	bne.n	8001b4c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2201      	movs	r2, #1
 8001b44:	4013      	ands	r3, r2
 8001b46:	d001      	beq.n	8001b4c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e075      	b.n	8001c38 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2284      	movs	r2, #132	; 0x84
 8001b50:	2100      	movs	r1, #0
 8001b52:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2221      	movs	r2, #33	; 0x21
 8001b58:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b5a:	f7fe fecd 	bl	80008f8 <HAL_GetTick>
 8001b5e:	0003      	movs	r3, r0
 8001b60:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1dba      	adds	r2, r7, #6
 8001b66:	2150      	movs	r1, #80	; 0x50
 8001b68:	8812      	ldrh	r2, [r2, #0]
 8001b6a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	1dba      	adds	r2, r7, #6
 8001b70:	2152      	movs	r1, #82	; 0x52
 8001b72:	8812      	ldrh	r2, [r2, #0]
 8001b74:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	015b      	lsls	r3, r3, #5
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d108      	bne.n	8001b94 <HAL_UART_Transmit+0x94>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d104      	bne.n	8001b94 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	61bb      	str	r3, [r7, #24]
 8001b92:	e003      	b.n	8001b9c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b9c:	e030      	b.n	8001c00 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	0013      	movs	r3, r2
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2180      	movs	r1, #128	; 0x80
 8001bac:	f000 fb2c 	bl	8002208 <UART_WaitOnFlagUntilTimeout>
 8001bb0:	1e03      	subs	r3, r0, #0
 8001bb2:	d004      	beq.n	8001bbe <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e03c      	b.n	8001c38 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10b      	bne.n	8001bdc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	881a      	ldrh	r2, [r3, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	05d2      	lsls	r2, r2, #23
 8001bce:	0dd2      	lsrs	r2, r2, #23
 8001bd0:	b292      	uxth	r2, r2
 8001bd2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	61bb      	str	r3, [r7, #24]
 8001bda:	e008      	b.n	8001bee <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	781a      	ldrb	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	b292      	uxth	r2, r2
 8001be6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	3301      	adds	r3, #1
 8001bec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2252      	movs	r2, #82	; 0x52
 8001bf2:	5a9b      	ldrh	r3, [r3, r2]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b299      	uxth	r1, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2252      	movs	r2, #82	; 0x52
 8001bfe:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2252      	movs	r2, #82	; 0x52
 8001c04:	5a9b      	ldrh	r3, [r3, r2]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1c8      	bne.n	8001b9e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	0013      	movs	r3, r2
 8001c16:	2200      	movs	r2, #0
 8001c18:	2140      	movs	r1, #64	; 0x40
 8001c1a:	f000 faf5 	bl	8002208 <UART_WaitOnFlagUntilTimeout>
 8001c1e:	1e03      	subs	r3, r0, #0
 8001c20:	d004      	beq.n	8001c2c <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2220      	movs	r2, #32
 8001c26:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e005      	b.n	8001c38 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e000      	b.n	8001c38 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8001c36:	2302      	movs	r3, #2
  }
}
 8001c38:	0018      	movs	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b008      	add	sp, #32
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c48:	231e      	movs	r3, #30
 8001c4a:	18fb      	adds	r3, r7, r3
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4aaf      	ldr	r2, [pc, #700]	; (8001f2c <UART_SetConfig+0x2ec>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	0019      	movs	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	4aaa      	ldr	r2, [pc, #680]	; (8001f30 <UART_SetConfig+0x2f0>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	0019      	movs	r1, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	4aa1      	ldr	r2, [pc, #644]	; (8001f34 <UART_SetConfig+0x2f4>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	0019      	movs	r1, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a9d      	ldr	r2, [pc, #628]	; (8001f38 <UART_SetConfig+0x2f8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d127      	bne.n	8001d16 <UART_SetConfig+0xd6>
 8001cc6:	4b9d      	ldr	r3, [pc, #628]	; (8001f3c <UART_SetConfig+0x2fc>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	2203      	movs	r2, #3
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d00d      	beq.n	8001cee <UART_SetConfig+0xae>
 8001cd2:	d81b      	bhi.n	8001d0c <UART_SetConfig+0xcc>
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d014      	beq.n	8001d02 <UART_SetConfig+0xc2>
 8001cd8:	d818      	bhi.n	8001d0c <UART_SetConfig+0xcc>
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <UART_SetConfig+0xa4>
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d00a      	beq.n	8001cf8 <UART_SetConfig+0xb8>
 8001ce2:	e013      	b.n	8001d0c <UART_SetConfig+0xcc>
 8001ce4:	231f      	movs	r3, #31
 8001ce6:	18fb      	adds	r3, r7, r3
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
 8001cec:	e065      	b.n	8001dba <UART_SetConfig+0x17a>
 8001cee:	231f      	movs	r3, #31
 8001cf0:	18fb      	adds	r3, r7, r3
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	701a      	strb	r2, [r3, #0]
 8001cf6:	e060      	b.n	8001dba <UART_SetConfig+0x17a>
 8001cf8:	231f      	movs	r3, #31
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	2204      	movs	r2, #4
 8001cfe:	701a      	strb	r2, [r3, #0]
 8001d00:	e05b      	b.n	8001dba <UART_SetConfig+0x17a>
 8001d02:	231f      	movs	r3, #31
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	2208      	movs	r2, #8
 8001d08:	701a      	strb	r2, [r3, #0]
 8001d0a:	e056      	b.n	8001dba <UART_SetConfig+0x17a>
 8001d0c:	231f      	movs	r3, #31
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	2210      	movs	r2, #16
 8001d12:	701a      	strb	r2, [r3, #0]
 8001d14:	e051      	b.n	8001dba <UART_SetConfig+0x17a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a89      	ldr	r2, [pc, #548]	; (8001f40 <UART_SetConfig+0x300>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d134      	bne.n	8001d8a <UART_SetConfig+0x14a>
 8001d20:	4b86      	ldr	r3, [pc, #536]	; (8001f3c <UART_SetConfig+0x2fc>)
 8001d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d24:	23c0      	movs	r3, #192	; 0xc0
 8001d26:	029b      	lsls	r3, r3, #10
 8001d28:	4013      	ands	r3, r2
 8001d2a:	22c0      	movs	r2, #192	; 0xc0
 8001d2c:	0292      	lsls	r2, r2, #10
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d017      	beq.n	8001d62 <UART_SetConfig+0x122>
 8001d32:	22c0      	movs	r2, #192	; 0xc0
 8001d34:	0292      	lsls	r2, r2, #10
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d822      	bhi.n	8001d80 <UART_SetConfig+0x140>
 8001d3a:	2280      	movs	r2, #128	; 0x80
 8001d3c:	0292      	lsls	r2, r2, #10
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d019      	beq.n	8001d76 <UART_SetConfig+0x136>
 8001d42:	2280      	movs	r2, #128	; 0x80
 8001d44:	0292      	lsls	r2, r2, #10
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d81a      	bhi.n	8001d80 <UART_SetConfig+0x140>
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d004      	beq.n	8001d58 <UART_SetConfig+0x118>
 8001d4e:	2280      	movs	r2, #128	; 0x80
 8001d50:	0252      	lsls	r2, r2, #9
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00a      	beq.n	8001d6c <UART_SetConfig+0x12c>
 8001d56:	e013      	b.n	8001d80 <UART_SetConfig+0x140>
 8001d58:	231f      	movs	r3, #31
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
 8001d60:	e02b      	b.n	8001dba <UART_SetConfig+0x17a>
 8001d62:	231f      	movs	r3, #31
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	2202      	movs	r2, #2
 8001d68:	701a      	strb	r2, [r3, #0]
 8001d6a:	e026      	b.n	8001dba <UART_SetConfig+0x17a>
 8001d6c:	231f      	movs	r3, #31
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	2204      	movs	r2, #4
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	e021      	b.n	8001dba <UART_SetConfig+0x17a>
 8001d76:	231f      	movs	r3, #31
 8001d78:	18fb      	adds	r3, r7, r3
 8001d7a:	2208      	movs	r2, #8
 8001d7c:	701a      	strb	r2, [r3, #0]
 8001d7e:	e01c      	b.n	8001dba <UART_SetConfig+0x17a>
 8001d80:	231f      	movs	r3, #31
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	2210      	movs	r2, #16
 8001d86:	701a      	strb	r2, [r3, #0]
 8001d88:	e017      	b.n	8001dba <UART_SetConfig+0x17a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a6d      	ldr	r2, [pc, #436]	; (8001f44 <UART_SetConfig+0x304>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d104      	bne.n	8001d9e <UART_SetConfig+0x15e>
 8001d94:	231f      	movs	r3, #31
 8001d96:	18fb      	adds	r3, r7, r3
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
 8001d9c:	e00d      	b.n	8001dba <UART_SetConfig+0x17a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a69      	ldr	r2, [pc, #420]	; (8001f48 <UART_SetConfig+0x308>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d104      	bne.n	8001db2 <UART_SetConfig+0x172>
 8001da8:	231f      	movs	r3, #31
 8001daa:	18fb      	adds	r3, r7, r3
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
 8001db0:	e003      	b.n	8001dba <UART_SetConfig+0x17a>
 8001db2:	231f      	movs	r3, #31
 8001db4:	18fb      	adds	r3, r7, r3
 8001db6:	2210      	movs	r2, #16
 8001db8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69da      	ldr	r2, [r3, #28]
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d15c      	bne.n	8001e80 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8001dc6:	231f      	movs	r3, #31
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d015      	beq.n	8001dfc <UART_SetConfig+0x1bc>
 8001dd0:	dc18      	bgt.n	8001e04 <UART_SetConfig+0x1c4>
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d00d      	beq.n	8001df2 <UART_SetConfig+0x1b2>
 8001dd6:	dc15      	bgt.n	8001e04 <UART_SetConfig+0x1c4>
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <UART_SetConfig+0x1a2>
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d005      	beq.n	8001dec <UART_SetConfig+0x1ac>
 8001de0:	e010      	b.n	8001e04 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001de2:	f7ff fd25 	bl	8001830 <HAL_RCC_GetPCLK1Freq>
 8001de6:	0003      	movs	r3, r0
 8001de8:	61bb      	str	r3, [r7, #24]
        break;
 8001dea:	e012      	b.n	8001e12 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001dec:	4b57      	ldr	r3, [pc, #348]	; (8001f4c <UART_SetConfig+0x30c>)
 8001dee:	61bb      	str	r3, [r7, #24]
        break;
 8001df0:	e00f      	b.n	8001e12 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001df2:	f7ff fca1 	bl	8001738 <HAL_RCC_GetSysClockFreq>
 8001df6:	0003      	movs	r3, r0
 8001df8:	61bb      	str	r3, [r7, #24]
        break;
 8001dfa:	e00a      	b.n	8001e12 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	021b      	lsls	r3, r3, #8
 8001e00:	61bb      	str	r3, [r7, #24]
        break;
 8001e02:	e006      	b.n	8001e12 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001e08:	231e      	movs	r3, #30
 8001e0a:	18fb      	adds	r3, r7, r3
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
        break;
 8001e10:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d100      	bne.n	8001e1a <UART_SetConfig+0x1da>
 8001e18:	e07a      	b.n	8001f10 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	005a      	lsls	r2, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	085b      	lsrs	r3, r3, #1
 8001e24:	18d2      	adds	r2, r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	0010      	movs	r0, r2
 8001e2e:	f7fe f975 	bl	800011c <__udivsi3>
 8001e32:	0003      	movs	r3, r0
 8001e34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	2b0f      	cmp	r3, #15
 8001e3a:	d91c      	bls.n	8001e76 <UART_SetConfig+0x236>
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	2380      	movs	r3, #128	; 0x80
 8001e40:	025b      	lsls	r3, r3, #9
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d217      	bcs.n	8001e76 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	200e      	movs	r0, #14
 8001e4c:	183b      	adds	r3, r7, r0
 8001e4e:	210f      	movs	r1, #15
 8001e50:	438a      	bics	r2, r1
 8001e52:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	085b      	lsrs	r3, r3, #1
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	2207      	movs	r2, #7
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	b299      	uxth	r1, r3
 8001e60:	183b      	adds	r3, r7, r0
 8001e62:	183a      	adds	r2, r7, r0
 8001e64:	8812      	ldrh	r2, [r2, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	183a      	adds	r2, r7, r0
 8001e70:	8812      	ldrh	r2, [r2, #0]
 8001e72:	60da      	str	r2, [r3, #12]
 8001e74:	e04c      	b.n	8001f10 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8001e76:	231e      	movs	r3, #30
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
 8001e7e:	e047      	b.n	8001f10 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001e80:	231f      	movs	r3, #31
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d015      	beq.n	8001eb6 <UART_SetConfig+0x276>
 8001e8a:	dc18      	bgt.n	8001ebe <UART_SetConfig+0x27e>
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d00d      	beq.n	8001eac <UART_SetConfig+0x26c>
 8001e90:	dc15      	bgt.n	8001ebe <UART_SetConfig+0x27e>
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <UART_SetConfig+0x25c>
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d005      	beq.n	8001ea6 <UART_SetConfig+0x266>
 8001e9a:	e010      	b.n	8001ebe <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e9c:	f7ff fcc8 	bl	8001830 <HAL_RCC_GetPCLK1Freq>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	61bb      	str	r3, [r7, #24]
        break;
 8001ea4:	e012      	b.n	8001ecc <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001ea6:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <UART_SetConfig+0x30c>)
 8001ea8:	61bb      	str	r3, [r7, #24]
        break;
 8001eaa:	e00f      	b.n	8001ecc <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001eac:	f7ff fc44 	bl	8001738 <HAL_RCC_GetSysClockFreq>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	61bb      	str	r3, [r7, #24]
        break;
 8001eb4:	e00a      	b.n	8001ecc <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	61bb      	str	r3, [r7, #24]
        break;
 8001ebc:	e006      	b.n	8001ecc <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001ec2:	231e      	movs	r3, #30
 8001ec4:	18fb      	adds	r3, r7, r3
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
        break;
 8001eca:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d01e      	beq.n	8001f10 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	085a      	lsrs	r2, r3, #1
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	18d2      	adds	r2, r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	0010      	movs	r0, r2
 8001ee4:	f7fe f91a 	bl	800011c <__udivsi3>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	2b0f      	cmp	r3, #15
 8001ef0:	d90a      	bls.n	8001f08 <UART_SetConfig+0x2c8>
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	025b      	lsls	r3, r3, #9
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d205      	bcs.n	8001f08 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	e003      	b.n	8001f10 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8001f08:	231e      	movs	r3, #30
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8001f1c:	231e      	movs	r3, #30
 8001f1e:	18fb      	adds	r3, r7, r3
 8001f20:	781b      	ldrb	r3, [r3, #0]
}
 8001f22:	0018      	movs	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	b008      	add	sp, #32
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	efff69f3 	.word	0xefff69f3
 8001f30:	ffffcfff 	.word	0xffffcfff
 8001f34:	fffff4ff 	.word	0xfffff4ff
 8001f38:	40013800 	.word	0x40013800
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40004400 	.word	0x40004400
 8001f44:	40004800 	.word	0x40004800
 8001f48:	40004c00 	.word	0x40004c00
 8001f4c:	007a1200 	.word	0x007a1200

08001f50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	2208      	movs	r2, #8
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d00b      	beq.n	8001f7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	4a4a      	ldr	r2, [pc, #296]	; (8002094 <UART_AdvFeatureConfig+0x144>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	0019      	movs	r1, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4013      	ands	r3, r2
 8001f82:	d00b      	beq.n	8001f9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4a43      	ldr	r2, [pc, #268]	; (8002098 <UART_AdvFeatureConfig+0x148>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d00b      	beq.n	8001fbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	4a3b      	ldr	r2, [pc, #236]	; (800209c <UART_AdvFeatureConfig+0x14c>)
 8001fae:	4013      	ands	r3, r2
 8001fb0:	0019      	movs	r1, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d00b      	beq.n	8001fe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4a34      	ldr	r2, [pc, #208]	; (80020a0 <UART_AdvFeatureConfig+0x150>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	2210      	movs	r2, #16
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d00b      	beq.n	8002002 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	4a2c      	ldr	r2, [pc, #176]	; (80020a4 <UART_AdvFeatureConfig+0x154>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	2220      	movs	r2, #32
 8002008:	4013      	ands	r3, r2
 800200a:	d00b      	beq.n	8002024 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	4a25      	ldr	r2, [pc, #148]	; (80020a8 <UART_AdvFeatureConfig+0x158>)
 8002014:	4013      	ands	r3, r2
 8002016:	0019      	movs	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	2240      	movs	r2, #64	; 0x40
 800202a:	4013      	ands	r3, r2
 800202c:	d01d      	beq.n	800206a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	4a1d      	ldr	r2, [pc, #116]	; (80020ac <UART_AdvFeatureConfig+0x15c>)
 8002036:	4013      	ands	r3, r2
 8002038:	0019      	movs	r1, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	035b      	lsls	r3, r3, #13
 800204e:	429a      	cmp	r2, r3
 8002050:	d10b      	bne.n	800206a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <UART_AdvFeatureConfig+0x160>)
 800205a:	4013      	ands	r3, r2
 800205c:	0019      	movs	r1, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	2280      	movs	r2, #128	; 0x80
 8002070:	4013      	ands	r3, r2
 8002072:	d00b      	beq.n	800208c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4a0e      	ldr	r2, [pc, #56]	; (80020b4 <UART_AdvFeatureConfig+0x164>)
 800207c:	4013      	ands	r3, r2
 800207e:	0019      	movs	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	605a      	str	r2, [r3, #4]
  }
}
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	b002      	add	sp, #8
 8002092:	bd80      	pop	{r7, pc}
 8002094:	ffff7fff 	.word	0xffff7fff
 8002098:	fffdffff 	.word	0xfffdffff
 800209c:	fffeffff 	.word	0xfffeffff
 80020a0:	fffbffff 	.word	0xfffbffff
 80020a4:	ffffefff 	.word	0xffffefff
 80020a8:	ffffdfff 	.word	0xffffdfff
 80020ac:	ffefffff 	.word	0xffefffff
 80020b0:	ff9fffff 	.word	0xff9fffff
 80020b4:	fff7ffff 	.word	0xfff7ffff

080020b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b092      	sub	sp, #72	; 0x48
 80020bc:	af02      	add	r7, sp, #8
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2284      	movs	r2, #132	; 0x84
 80020c4:	2100      	movs	r1, #0
 80020c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80020c8:	f7fe fc16 	bl	80008f8 <HAL_GetTick>
 80020cc:	0003      	movs	r3, r0
 80020ce:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2208      	movs	r2, #8
 80020d8:	4013      	ands	r3, r2
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d12c      	bne.n	8002138 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80020de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e0:	2280      	movs	r2, #128	; 0x80
 80020e2:	0391      	lsls	r1, r2, #14
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	4a46      	ldr	r2, [pc, #280]	; (8002200 <UART_CheckIdleState+0x148>)
 80020e8:	9200      	str	r2, [sp, #0]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f000 f88c 	bl	8002208 <UART_WaitOnFlagUntilTimeout>
 80020f0:	1e03      	subs	r3, r0, #0
 80020f2:	d021      	beq.n	8002138 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020f4:	f3ef 8310 	mrs	r3, PRIMASK
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80020fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80020fe:	2301      	movs	r3, #1
 8002100:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002104:	f383 8810 	msr	PRIMASK, r3
}
 8002108:	46c0      	nop			; (mov r8, r8)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2180      	movs	r1, #128	; 0x80
 8002116:	438a      	bics	r2, r1
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800211e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002120:	f383 8810 	msr	PRIMASK, r3
}
 8002124:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2220      	movs	r2, #32
 800212a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2278      	movs	r2, #120	; 0x78
 8002130:	2100      	movs	r1, #0
 8002132:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e05f      	b.n	80021f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2204      	movs	r2, #4
 8002140:	4013      	ands	r3, r2
 8002142:	2b04      	cmp	r3, #4
 8002144:	d146      	bne.n	80021d4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002148:	2280      	movs	r2, #128	; 0x80
 800214a:	03d1      	lsls	r1, r2, #15
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	4a2c      	ldr	r2, [pc, #176]	; (8002200 <UART_CheckIdleState+0x148>)
 8002150:	9200      	str	r2, [sp, #0]
 8002152:	2200      	movs	r2, #0
 8002154:	f000 f858 	bl	8002208 <UART_WaitOnFlagUntilTimeout>
 8002158:	1e03      	subs	r3, r0, #0
 800215a:	d03b      	beq.n	80021d4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800215c:	f3ef 8310 	mrs	r3, PRIMASK
 8002160:	60fb      	str	r3, [r7, #12]
  return(result);
 8002162:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002164:	637b      	str	r3, [r7, #52]	; 0x34
 8002166:	2301      	movs	r3, #1
 8002168:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f383 8810 	msr	PRIMASK, r3
}
 8002170:	46c0      	nop			; (mov r8, r8)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4921      	ldr	r1, [pc, #132]	; (8002204 <UART_CheckIdleState+0x14c>)
 800217e:	400a      	ands	r2, r1
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002184:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f383 8810 	msr	PRIMASK, r3
}
 800218c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800218e:	f3ef 8310 	mrs	r3, PRIMASK
 8002192:	61bb      	str	r3, [r7, #24]
  return(result);
 8002194:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002196:	633b      	str	r3, [r7, #48]	; 0x30
 8002198:	2301      	movs	r3, #1
 800219a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f383 8810 	msr	PRIMASK, r3
}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2101      	movs	r1, #1
 80021b0:	438a      	bics	r2, r1
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	f383 8810 	msr	PRIMASK, r3
}
 80021be:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2280      	movs	r2, #128	; 0x80
 80021c4:	2120      	movs	r1, #32
 80021c6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2278      	movs	r2, #120	; 0x78
 80021cc:	2100      	movs	r1, #0
 80021ce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e011      	b.n	80021f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2220      	movs	r2, #32
 80021d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2280      	movs	r2, #128	; 0x80
 80021de:	2120      	movs	r1, #32
 80021e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2278      	movs	r2, #120	; 0x78
 80021f2:	2100      	movs	r1, #0
 80021f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	0018      	movs	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b010      	add	sp, #64	; 0x40
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	01ffffff 	.word	0x01ffffff
 8002204:	fffffedf 	.word	0xfffffedf

08002208 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	1dfb      	adds	r3, r7, #7
 8002216:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002218:	e051      	b.n	80022be <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	3301      	adds	r3, #1
 800221e:	d04e      	beq.n	80022be <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002220:	f7fe fb6a 	bl	80008f8 <HAL_GetTick>
 8002224:	0002      	movs	r2, r0
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	429a      	cmp	r2, r3
 800222e:	d302      	bcc.n	8002236 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e051      	b.n	80022de <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2204      	movs	r2, #4
 8002242:	4013      	ands	r3, r2
 8002244:	d03b      	beq.n	80022be <UART_WaitOnFlagUntilTimeout+0xb6>
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b80      	cmp	r3, #128	; 0x80
 800224a:	d038      	beq.n	80022be <UART_WaitOnFlagUntilTimeout+0xb6>
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b40      	cmp	r3, #64	; 0x40
 8002250:	d035      	beq.n	80022be <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	2208      	movs	r2, #8
 800225a:	4013      	ands	r3, r2
 800225c:	2b08      	cmp	r3, #8
 800225e:	d111      	bne.n	8002284 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2208      	movs	r2, #8
 8002266:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	0018      	movs	r0, r3
 800226c:	f000 f83c 	bl	80022e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2284      	movs	r2, #132	; 0x84
 8002274:	2108      	movs	r1, #8
 8002276:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2278      	movs	r2, #120	; 0x78
 800227c:	2100      	movs	r1, #0
 800227e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e02c      	b.n	80022de <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	69da      	ldr	r2, [r3, #28]
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	401a      	ands	r2, r3
 8002290:	2380      	movs	r3, #128	; 0x80
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	429a      	cmp	r2, r3
 8002296:	d112      	bne.n	80022be <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2280      	movs	r2, #128	; 0x80
 800229e:	0112      	lsls	r2, r2, #4
 80022a0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	0018      	movs	r0, r3
 80022a6:	f000 f81f 	bl	80022e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2284      	movs	r2, #132	; 0x84
 80022ae:	2120      	movs	r1, #32
 80022b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2278      	movs	r2, #120	; 0x78
 80022b6:	2100      	movs	r1, #0
 80022b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e00f      	b.n	80022de <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	4013      	ands	r3, r2
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	425a      	negs	r2, r3
 80022ce:	4153      	adcs	r3, r2
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	001a      	movs	r2, r3
 80022d4:	1dfb      	adds	r3, r7, #7
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d09e      	beq.n	800221a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	0018      	movs	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b004      	add	sp, #16
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08e      	sub	sp, #56	; 0x38
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022f0:	f3ef 8310 	mrs	r3, PRIMASK
 80022f4:	617b      	str	r3, [r7, #20]
  return(result);
 80022f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022f8:	637b      	str	r3, [r7, #52]	; 0x34
 80022fa:	2301      	movs	r3, #1
 80022fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	f383 8810 	msr	PRIMASK, r3
}
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4926      	ldr	r1, [pc, #152]	; (80023ac <UART_EndRxTransfer+0xc4>)
 8002312:	400a      	ands	r2, r1
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002318:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f383 8810 	msr	PRIMASK, r3
}
 8002320:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002322:	f3ef 8310 	mrs	r3, PRIMASK
 8002326:	623b      	str	r3, [r7, #32]
  return(result);
 8002328:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800232a:	633b      	str	r3, [r7, #48]	; 0x30
 800232c:	2301      	movs	r3, #1
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	f383 8810 	msr	PRIMASK, r3
}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2101      	movs	r1, #1
 8002344:	438a      	bics	r2, r1
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800234c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234e:	f383 8810 	msr	PRIMASK, r3
}
 8002352:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002358:	2b01      	cmp	r3, #1
 800235a:	d118      	bne.n	800238e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800235c:	f3ef 8310 	mrs	r3, PRIMASK
 8002360:	60bb      	str	r3, [r7, #8]
  return(result);
 8002362:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002366:	2301      	movs	r3, #1
 8002368:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f383 8810 	msr	PRIMASK, r3
}
 8002370:	46c0      	nop			; (mov r8, r8)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2110      	movs	r1, #16
 800237e:	438a      	bics	r2, r1
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002384:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f383 8810 	msr	PRIMASK, r3
}
 800238c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2280      	movs	r2, #128	; 0x80
 8002392:	2120      	movs	r1, #32
 8002394:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b00e      	add	sp, #56	; 0x38
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	fffffedf 	.word	0xfffffedf

080023b0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3308      	adds	r3, #8
 80023bc:	001a      	movs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	4252      	negs	r2, r2
 80023c8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3308      	adds	r3, #8
 80023ce:	001a      	movs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3308      	adds	r3, #8
 80023d8:	001a      	movs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023e4:	46c0      	nop			; (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b002      	add	sp, #8
 80023ea:	bd80      	pop	{r7, pc}

080023ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b002      	add	sp, #8
 8002400:	bd80      	pop	{r7, pc}

08002402 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	3301      	adds	r3, #1
 8002416:	d103      	bne.n	8002420 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	e00c      	b.n	800243a <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3308      	adds	r3, #8
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	e002      	b.n	800242e <vListInsert+0x2c>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	429a      	cmp	r2, r3
 8002438:	d2f6      	bcs.n	8002428 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	601a      	str	r2, [r3, #0]
}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	46bd      	mov	sp, r7
 800246a:	b004      	add	sp, #16
 800246c:	bd80      	pop	{r7, pc}

0800246e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6892      	ldr	r2, [r2, #8]
 8002484:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6852      	ldr	r2, [r2, #4]
 800248e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	429a      	cmp	r2, r3
 8002498:	d103      	bne.n	80024a2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	1e5a      	subs	r2, r3, #1
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
}
 80024b6:	0018      	movs	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b004      	add	sp, #16
 80024bc:	bd80      	pop	{r7, pc}

080024be <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80024be:	b5b0      	push	{r4, r5, r7, lr}
 80024c0:	b084      	sub	sp, #16
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80024c8:	2301      	movs	r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <xQueueGenericReset+0x1c>
 80024d6:	b672      	cpsid	i
 80024d8:	e7fe      	b.n	80024d8 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d100      	bne.n	80024e2 <xQueueGenericReset+0x24>
 80024e0:	e06a      	b.n	80025b8 <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d066      	beq.n	80025b8 <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f2:	2400      	movs	r4, #0
 80024f4:	0c15      	lsrs	r5, r2, #16
 80024f6:	0c19      	lsrs	r1, r3, #16
 80024f8:	b2a8      	uxth	r0, r5
 80024fa:	2800      	cmp	r0, #0
 80024fc:	d104      	bne.n	8002508 <xQueueGenericReset+0x4a>
 80024fe:	b288      	uxth	r0, r1
 8002500:	2800      	cmp	r0, #0
 8002502:	d013      	beq.n	800252c <xQueueGenericReset+0x6e>
 8002504:	1c10      	adds	r0, r2, #0
 8002506:	e004      	b.n	8002512 <xQueueGenericReset+0x54>
 8002508:	b289      	uxth	r1, r1
 800250a:	2900      	cmp	r1, #0
 800250c:	d10d      	bne.n	800252a <xQueueGenericReset+0x6c>
 800250e:	1c29      	adds	r1, r5, #0
 8002510:	1c18      	adds	r0, r3, #0
 8002512:	b292      	uxth	r2, r2
 8002514:	b29b      	uxth	r3, r3
 8002516:	435a      	muls	r2, r3
 8002518:	b283      	uxth	r3, r0
 800251a:	b289      	uxth	r1, r1
 800251c:	434b      	muls	r3, r1
 800251e:	0c12      	lsrs	r2, r2, #16
 8002520:	189b      	adds	r3, r3, r2
 8002522:	141b      	asrs	r3, r3, #16
 8002524:	b29b      	uxth	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d000      	beq.n	800252c <xQueueGenericReset+0x6e>
 800252a:	2401      	movs	r4, #1
 800252c:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 800252e:	d143      	bne.n	80025b8 <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 8002530:	f001 fd3e 	bl	8003fb0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	434b      	muls	r3, r1
 8002542:	18d2      	adds	r2, r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2200      	movs	r2, #0
 800254c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255e:	1e59      	subs	r1, r3, #1
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	434b      	muls	r3, r1
 8002566:	18d2      	adds	r2, r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2244      	movs	r2, #68	; 0x44
 8002570:	21ff      	movs	r1, #255	; 0xff
 8002572:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2245      	movs	r2, #69	; 0x45
 8002578:	21ff      	movs	r1, #255	; 0xff
 800257a:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10d      	bne.n	800259e <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d013      	beq.n	80025b2 <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	3310      	adds	r3, #16
 800258e:	0018      	movs	r0, r3
 8002590:	f000 ff90 	bl	80034b4 <xTaskRemoveFromEventList>
 8002594:	1e03      	subs	r3, r0, #0
 8002596:	d00c      	beq.n	80025b2 <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002598:	f001 fcfa 	bl	8003f90 <vPortYield>
 800259c:	e009      	b.n	80025b2 <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	3310      	adds	r3, #16
 80025a2:	0018      	movs	r0, r3
 80025a4:	f7ff ff04 	bl	80023b0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	3324      	adds	r3, #36	; 0x24
 80025ac:	0018      	movs	r0, r3
 80025ae:	f7ff feff 	bl	80023b0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80025b2:	f001 fd0f 	bl	8003fd4 <vPortExitCritical>
 80025b6:	e001      	b.n	80025bc <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <xQueueGenericReset+0x108>
 80025c2:	b672      	cpsid	i
 80025c4:	e7fe      	b.n	80025c4 <xQueueGenericReset+0x106>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80025c6:	68fb      	ldr	r3, [r7, #12]
}
 80025c8:	0018      	movs	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b004      	add	sp, #16
 80025ce:	bdb0      	pop	{r4, r5, r7, pc}

080025d0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80025d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025d2:	b08b      	sub	sp, #44	; 0x2c
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	1dfb      	adds	r3, r7, #7
 80025dc:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d047      	beq.n	8002678 <xQueueGenericCreate+0xa8>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80025e8:	2000      	movs	r0, #0
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	0c19      	lsrs	r1, r3, #16
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	1c1e      	adds	r6, r3, #0
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	0c1b      	lsrs	r3, r3, #16
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	1c15      	adds	r5, r2, #0
 80025fa:	b28a      	uxth	r2, r1
 80025fc:	2a00      	cmp	r2, #0
 80025fe:	d105      	bne.n	800260c <xQueueGenericCreate+0x3c>
 8002600:	b29a      	uxth	r2, r3
 8002602:	2a00      	cmp	r2, #0
 8002604:	d013      	beq.n	800262e <xQueueGenericCreate+0x5e>
 8002606:	1c19      	adds	r1, r3, #0
 8002608:	1c34      	adds	r4, r6, #0
 800260a:	e003      	b.n	8002614 <xQueueGenericCreate+0x44>
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10c      	bne.n	800262c <xQueueGenericCreate+0x5c>
 8002612:	1c2c      	adds	r4, r5, #0
 8002614:	b2b3      	uxth	r3, r6
 8002616:	b2aa      	uxth	r2, r5
 8002618:	435a      	muls	r2, r3
 800261a:	b2a3      	uxth	r3, r4
 800261c:	b289      	uxth	r1, r1
 800261e:	434b      	muls	r3, r1
 8002620:	0c12      	lsrs	r2, r2, #16
 8002622:	189b      	adds	r3, r3, r2
 8002624:	141b      	asrs	r3, r3, #16
 8002626:	b29b      	uxth	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d000      	beq.n	800262e <xQueueGenericCreate+0x5e>
 800262c:	2001      	movs	r0, #1
 800262e:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002630:	d122      	bne.n	8002678 <xQueueGenericCreate+0xa8>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002638:	3351      	adds	r3, #81	; 0x51
 800263a:	d81d      	bhi.n	8002678 <xQueueGenericCreate+0xa8>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	4353      	muls	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	3350      	adds	r3, #80	; 0x50
 8002648:	0018      	movs	r0, r3
 800264a:	f001 fd49 	bl	80040e0 <pvPortMalloc>
 800264e:	0003      	movs	r3, r0
 8002650:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d014      	beq.n	8002682 <xQueueGenericCreate+0xb2>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	3350      	adds	r3, #80	; 0x50
 8002660:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002662:	1dfb      	adds	r3, r7, #7
 8002664:	781c      	ldrb	r4, [r3, #0]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	0023      	movs	r3, r4
 8002672:	f000 f80b 	bl	800268c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002676:	e004      	b.n	8002682 <xQueueGenericCreate+0xb2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <xQueueGenericCreate+0xb2>
 800267e:	b672      	cpsid	i
 8002680:	e7fe      	b.n	8002680 <xQueueGenericCreate+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002682:	69fb      	ldr	r3, [r7, #28]
    }
 8002684:	0018      	movs	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	b009      	add	sp, #36	; 0x24
 800268a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800268c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	001a      	movs	r2, r3
 800269a:	1cfb      	adds	r3, r7, #3
 800269c:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d103      	bne.n	80026ac <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	e002      	b.n	80026b2 <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	2101      	movs	r1, #1
 80026c2:	0018      	movs	r0, r3
 80026c4:	f7ff fefb 	bl	80024be <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	1cfa      	adds	r2, r7, #3
 80026cc:	214c      	movs	r1, #76	; 0x4c
 80026ce:	7812      	ldrb	r2, [r2, #0]
 80026d0:	545a      	strb	r2, [r3, r1]
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	46bd      	mov	sp, r7
 80026d6:	b004      	add	sp, #16
 80026d8:	bd80      	pop	{r7, pc}

080026da <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b08a      	sub	sp, #40	; 0x28
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <xQueueReceive+0x1e>
 80026f4:	b672      	cpsid	i
 80026f6:	e7fe      	b.n	80026f6 <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d103      	bne.n	8002706 <xQueueReceive+0x2c>
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <xQueueReceive+0x30>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <xQueueReceive+0x32>
 800270a:	2300      	movs	r3, #0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <xQueueReceive+0x3a>
 8002710:	b672      	cpsid	i
 8002712:	e7fe      	b.n	8002712 <xQueueReceive+0x38>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002714:	f001 f8b8 	bl	8003888 <xTaskGetSchedulerState>
 8002718:	1e03      	subs	r3, r0, #0
 800271a:	d102      	bne.n	8002722 <xQueueReceive+0x48>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <xQueueReceive+0x4c>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <xQueueReceive+0x4e>
 8002726:	2300      	movs	r3, #0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <xQueueReceive+0x56>
 800272c:	b672      	cpsid	i
 800272e:	e7fe      	b.n	800272e <xQueueReceive+0x54>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002730:	f001 fc3e 	bl	8003fb0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002738:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d01a      	beq.n	8002776 <xQueueReceive+0x9c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	0011      	movs	r1, r2
 8002746:	0018      	movs	r0, r3
 8002748:	f000 f87c 	bl	8002844 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	1e5a      	subs	r2, r3, #1
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <xQueueReceive+0x94>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	3310      	adds	r3, #16
 8002760:	0018      	movs	r0, r3
 8002762:	f000 fea7 	bl	80034b4 <xTaskRemoveFromEventList>
 8002766:	1e03      	subs	r3, r0, #0
 8002768:	d001      	beq.n	800276e <xQueueReceive+0x94>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800276a:	f001 fc11 	bl	8003f90 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800276e:	f001 fc31 	bl	8003fd4 <vPortExitCritical>
                return pdPASS;
 8002772:	2301      	movs	r3, #1
 8002774:	e062      	b.n	800283c <xQueueReceive+0x162>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d103      	bne.n	8002784 <xQueueReceive+0xaa>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800277c:	f001 fc2a 	bl	8003fd4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002780:	2300      	movs	r3, #0
 8002782:	e05b      	b.n	800283c <xQueueReceive+0x162>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <xQueueReceive+0xbe>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800278a:	2314      	movs	r3, #20
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	0018      	movs	r0, r3
 8002790:	f000 ff5a 	bl	8003648 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002794:	2301      	movs	r3, #1
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002798:	f001 fc1c 	bl	8003fd4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800279c:	f000 fbce 	bl	8002f3c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80027a0:	f001 fc06 	bl	8003fb0 <vPortEnterCritical>
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	2244      	movs	r2, #68	; 0x44
 80027a8:	5c9b      	ldrb	r3, [r3, r2]
 80027aa:	b25b      	sxtb	r3, r3
 80027ac:	3301      	adds	r3, #1
 80027ae:	d103      	bne.n	80027b8 <xQueueReceive+0xde>
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	2244      	movs	r2, #68	; 0x44
 80027b4:	2100      	movs	r1, #0
 80027b6:	5499      	strb	r1, [r3, r2]
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	2245      	movs	r2, #69	; 0x45
 80027bc:	5c9b      	ldrb	r3, [r3, r2]
 80027be:	b25b      	sxtb	r3, r3
 80027c0:	3301      	adds	r3, #1
 80027c2:	d103      	bne.n	80027cc <xQueueReceive+0xf2>
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	2245      	movs	r2, #69	; 0x45
 80027c8:	2100      	movs	r1, #0
 80027ca:	5499      	strb	r1, [r3, r2]
 80027cc:	f001 fc02 	bl	8003fd4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027d0:	1d3a      	adds	r2, r7, #4
 80027d2:	2314      	movs	r3, #20
 80027d4:	18fb      	adds	r3, r7, r3
 80027d6:	0011      	movs	r1, r2
 80027d8:	0018      	movs	r0, r3
 80027da:	f000 ff49 	bl	8003670 <xTaskCheckForTimeOut>
 80027de:	1e03      	subs	r3, r0, #0
 80027e0:	d11e      	bne.n	8002820 <xQueueReceive+0x146>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 f8b1 	bl	800294c <prvIsQueueEmpty>
 80027ea:	1e03      	subs	r3, r0, #0
 80027ec:	d011      	beq.n	8002812 <xQueueReceive+0x138>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	3324      	adds	r3, #36	; 0x24
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	0011      	movs	r1, r2
 80027f6:	0018      	movs	r0, r3
 80027f8:	f000 fe00 	bl	80033fc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	0018      	movs	r0, r3
 8002800:	f000 f846 	bl	8002890 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002804:	f000 fba6 	bl	8002f54 <xTaskResumeAll>
 8002808:	1e03      	subs	r3, r0, #0
 800280a:	d191      	bne.n	8002730 <xQueueReceive+0x56>
                {
                    portYIELD_WITHIN_API();
 800280c:	f001 fbc0 	bl	8003f90 <vPortYield>
 8002810:	e78e      	b.n	8002730 <xQueueReceive+0x56>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	0018      	movs	r0, r3
 8002816:	f000 f83b 	bl	8002890 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800281a:	f000 fb9b 	bl	8002f54 <xTaskResumeAll>
 800281e:	e787      	b.n	8002730 <xQueueReceive+0x56>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	0018      	movs	r0, r3
 8002824:	f000 f834 	bl	8002890 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002828:	f000 fb94 	bl	8002f54 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	0018      	movs	r0, r3
 8002830:	f000 f88c 	bl	800294c <prvIsQueueEmpty>
 8002834:	1e03      	subs	r3, r0, #0
 8002836:	d100      	bne.n	800283a <xQueueReceive+0x160>
 8002838:	e77a      	b.n	8002730 <xQueueReceive+0x56>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800283a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800283c:	0018      	movs	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	b00a      	add	sp, #40	; 0x28
 8002842:	bd80      	pop	{r7, pc}

08002844 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	2b00      	cmp	r3, #0
 8002854:	d018      	beq.n	8002888 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	18d2      	adds	r2, r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	429a      	cmp	r2, r3
 800286e:	d303      	bcc.n	8002878 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68d9      	ldr	r1, [r3, #12]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	0018      	movs	r0, r3
 8002884:	f001 fdfc 	bl	8004480 <memcpy>
    }
}
 8002888:	46c0      	nop			; (mov r8, r8)
 800288a:	46bd      	mov	sp, r7
 800288c:	b002      	add	sp, #8
 800288e:	bd80      	pop	{r7, pc}

08002890 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002898:	f001 fb8a 	bl	8003fb0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800289c:	230f      	movs	r3, #15
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	2145      	movs	r1, #69	; 0x45
 80028a4:	5c52      	ldrb	r2, [r2, r1]
 80028a6:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80028a8:	e013      	b.n	80028d2 <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d016      	beq.n	80028e0 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3324      	adds	r3, #36	; 0x24
 80028b6:	0018      	movs	r0, r3
 80028b8:	f000 fdfc 	bl	80034b4 <xTaskRemoveFromEventList>
 80028bc:	1e03      	subs	r3, r0, #0
 80028be:	d001      	beq.n	80028c4 <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80028c0:	f000 ff2a 	bl	8003718 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80028c4:	210f      	movs	r1, #15
 80028c6:	187b      	adds	r3, r7, r1
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	187b      	adds	r3, r7, r1
 80028d0:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80028d2:	230f      	movs	r3, #15
 80028d4:	18fb      	adds	r3, r7, r3
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	b25b      	sxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	dce5      	bgt.n	80028aa <prvUnlockQueue+0x1a>
 80028de:	e000      	b.n	80028e2 <prvUnlockQueue+0x52>
                    break;
 80028e0:	46c0      	nop			; (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2245      	movs	r2, #69	; 0x45
 80028e6:	21ff      	movs	r1, #255	; 0xff
 80028e8:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 80028ea:	f001 fb73 	bl	8003fd4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80028ee:	f001 fb5f 	bl	8003fb0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80028f2:	230e      	movs	r3, #14
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	2144      	movs	r1, #68	; 0x44
 80028fa:	5c52      	ldrb	r2, [r2, r1]
 80028fc:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80028fe:	e013      	b.n	8002928 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d016      	beq.n	8002936 <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3310      	adds	r3, #16
 800290c:	0018      	movs	r0, r3
 800290e:	f000 fdd1 	bl	80034b4 <xTaskRemoveFromEventList>
 8002912:	1e03      	subs	r3, r0, #0
 8002914:	d001      	beq.n	800291a <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8002916:	f000 feff 	bl	8003718 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800291a:	210e      	movs	r1, #14
 800291c:	187b      	adds	r3, r7, r1
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	3b01      	subs	r3, #1
 8002922:	b2da      	uxtb	r2, r3
 8002924:	187b      	adds	r3, r7, r1
 8002926:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002928:	230e      	movs	r3, #14
 800292a:	18fb      	adds	r3, r7, r3
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	b25b      	sxtb	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	dce5      	bgt.n	8002900 <prvUnlockQueue+0x70>
 8002934:	e000      	b.n	8002938 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 8002936:	46c0      	nop			; (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2244      	movs	r2, #68	; 0x44
 800293c:	21ff      	movs	r1, #255	; 0xff
 800293e:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8002940:	f001 fb48 	bl	8003fd4 <vPortExitCritical>
}
 8002944:	46c0      	nop			; (mov r8, r8)
 8002946:	46bd      	mov	sp, r7
 8002948:	b004      	add	sp, #16
 800294a:	bd80      	pop	{r7, pc}

0800294c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002954:	f001 fb2c 	bl	8003fb0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295c:	2b00      	cmp	r3, #0
 800295e:	d102      	bne.n	8002966 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002960:	2301      	movs	r3, #1
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	e001      	b.n	800296a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800296a:	f001 fb33 	bl	8003fd4 <vPortExitCritical>

    return xReturn;
 800296e:	68fb      	ldr	r3, [r7, #12]
}
 8002970:	0018      	movs	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	b004      	add	sp, #16
 8002976:	bd80      	pop	{r7, pc}

08002978 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002982:	2300      	movs	r3, #0
 8002984:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <vQueueAddToRegistry+0x18>
 800298c:	b672      	cpsid	i
 800298e:	e7fe      	b.n	800298e <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d025      	beq.n	80029e2 <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	e01f      	b.n	80029dc <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800299c:	4a17      	ldr	r2, [pc, #92]	; (80029fc <vQueueAddToRegistry+0x84>)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	18d3      	adds	r3, r2, r3
 80029a4:	3304      	adds	r3, #4
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d105      	bne.n	80029ba <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	00da      	lsls	r2, r3, #3
 80029b2:	4b12      	ldr	r3, [pc, #72]	; (80029fc <vQueueAddToRegistry+0x84>)
 80029b4:	18d3      	adds	r3, r2, r3
 80029b6:	60bb      	str	r3, [r7, #8]
                    break;
 80029b8:	e013      	b.n	80029e2 <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10a      	bne.n	80029d6 <vQueueAddToRegistry+0x5e>
 80029c0:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <vQueueAddToRegistry+0x84>)
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	00d2      	lsls	r2, r2, #3
 80029c6:	58d3      	ldr	r3, [r2, r3]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d104      	bne.n	80029d6 <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	00da      	lsls	r2, r3, #3
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <vQueueAddToRegistry+0x84>)
 80029d2:	18d3      	adds	r3, r2, r3
 80029d4:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3301      	adds	r3, #1
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2b07      	cmp	r3, #7
 80029e0:	d9dc      	bls.n	800299c <vQueueAddToRegistry+0x24>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b004      	add	sp, #16
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20000194 	.word	0x20000194

08002a00 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002a10:	f001 face 	bl	8003fb0 <vPortEnterCritical>
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2244      	movs	r2, #68	; 0x44
 8002a18:	5c9b      	ldrb	r3, [r3, r2]
 8002a1a:	b25b      	sxtb	r3, r3
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	d103      	bne.n	8002a28 <vQueueWaitForMessageRestricted+0x28>
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	2244      	movs	r2, #68	; 0x44
 8002a24:	2100      	movs	r1, #0
 8002a26:	5499      	strb	r1, [r3, r2]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2245      	movs	r2, #69	; 0x45
 8002a2c:	5c9b      	ldrb	r3, [r3, r2]
 8002a2e:	b25b      	sxtb	r3, r3
 8002a30:	3301      	adds	r3, #1
 8002a32:	d103      	bne.n	8002a3c <vQueueWaitForMessageRestricted+0x3c>
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2245      	movs	r2, #69	; 0x45
 8002a38:	2100      	movs	r1, #0
 8002a3a:	5499      	strb	r1, [r3, r2]
 8002a3c:	f001 faca 	bl	8003fd4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d106      	bne.n	8002a56 <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	3324      	adds	r3, #36	; 0x24
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f000 fcf1 	bl	8003438 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f7ff ff19 	bl	8002890 <prvUnlockQueue>
    }
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b006      	add	sp, #24
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a66:	b590      	push	{r4, r7, lr}
 8002a68:	b08d      	sub	sp, #52	; 0x34
 8002a6a:	af04      	add	r7, sp, #16
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	1dbb      	adds	r3, r7, #6
 8002a74:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a76:	1dbb      	adds	r3, r7, #6
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f001 fb2f 	bl	80040e0 <pvPortMalloc>
 8002a82:	0003      	movs	r3, r0
 8002a84:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d016      	beq.n	8002aba <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a8c:	2054      	movs	r0, #84	; 0x54
 8002a8e:	f001 fb27 	bl	80040e0 <pvPortMalloc>
 8002a92:	0003      	movs	r3, r0
 8002a94:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d009      	beq.n	8002ab0 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	2254      	movs	r2, #84	; 0x54
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f001 fcf5 	bl	8004492 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	631a      	str	r2, [r3, #48]	; 0x30
 8002aae:	e006      	b.n	8002abe <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f001 fbbc 	bl	8004230 <vPortFree>
 8002ab8:	e001      	b.n	8002abe <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d016      	beq.n	8002af2 <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ac4:	1dbb      	adds	r3, r7, #6
 8002ac6:	881a      	ldrh	r2, [r3, #0]
 8002ac8:	683c      	ldr	r4, [r7, #0]
 8002aca:	68b9      	ldr	r1, [r7, #8]
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	9303      	str	r3, [sp, #12]
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	9302      	str	r3, [sp, #8]
 8002ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	0023      	movs	r3, r4
 8002ae0:	f000 f810 	bl	8002b04 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f000 f88c 	bl	8002c04 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002aec:	2301      	movs	r3, #1
 8002aee:	61bb      	str	r3, [r7, #24]
 8002af0:	e002      	b.n	8002af8 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002af2:	2301      	movs	r3, #1
 8002af4:	425b      	negs	r3, r3
 8002af6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002af8:	69bb      	ldr	r3, [r7, #24]
    }
 8002afa:	0018      	movs	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	b009      	add	sp, #36	; 0x24
 8002b00:	bd90      	pop	{r4, r7, pc}
	...

08002b04 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	001a      	movs	r2, r3
 8002b1c:	21a5      	movs	r1, #165	; 0xa5
 8002b1e:	f001 fcb8 	bl	8004492 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4935      	ldr	r1, [pc, #212]	; (8002c00 <prvInitialiseNewTask+0xfc>)
 8002b2a:	468c      	mov	ip, r1
 8002b2c:	4463      	add	r3, ip
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	18d3      	adds	r3, r2, r3
 8002b32:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	2207      	movs	r2, #7
 8002b38:	4393      	bics	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	2207      	movs	r2, #7
 8002b40:	4013      	ands	r3, r2
 8002b42:	d001      	beq.n	8002b48 <prvInitialiseNewTask+0x44>
 8002b44:	b672      	cpsid	i
 8002b46:	e7fe      	b.n	8002b46 <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d01f      	beq.n	8002b8e <prvInitialiseNewTask+0x8a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	e013      	b.n	8002b7c <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	18d3      	adds	r3, r2, r3
 8002b5a:	7818      	ldrb	r0, [r3, #0]
 8002b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b5e:	2134      	movs	r1, #52	; 0x34
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	18d3      	adds	r3, r2, r3
 8002b64:	185b      	adds	r3, r3, r1
 8002b66:	1c02      	adds	r2, r0, #0
 8002b68:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	18d3      	adds	r3, r2, r3
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d006      	beq.n	8002b84 <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d9e8      	bls.n	8002b54 <prvInitialiseNewTask+0x50>
 8002b82:	e000      	b.n	8002b86 <prvInitialiseNewTask+0x82>
            {
                break;
 8002b84:	46c0      	nop			; (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	2238      	movs	r2, #56	; 0x38
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d901      	bls.n	8002b98 <prvInitialiseNewTask+0x94>
 8002b94:	b672      	cpsid	i
 8002b96:	e7fe      	b.n	8002b96 <prvInitialiseNewTask+0x92>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d901      	bls.n	8002ba2 <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	6a3a      	ldr	r2, [r7, #32]
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002baa:	6a3a      	ldr	r2, [r7, #32]
 8002bac:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f7ff fc1a 	bl	80023ec <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bba:	3318      	adds	r3, #24
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f7ff fc15 	bl	80023ec <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bc6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	2205      	movs	r2, #5
 8002bcc:	1ad2      	subs	r2, r2, r3
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	68f9      	ldr	r1, [r7, #12]
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	0018      	movs	r0, r3
 8002be0:	f001 f94a 	bl	8003e78 <pxPortInitialiseStack>
 8002be4:	0002      	movs	r2, r0
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <prvInitialiseNewTask+0xf2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bf4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b006      	add	sp, #24
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	3fffffff 	.word	0x3fffffff

08002c04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002c0c:	f001 f9d0 	bl	8003fb0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002c10:	4b3d      	ldr	r3, [pc, #244]	; (8002d08 <prvAddNewTaskToReadyList+0x104>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	4b3c      	ldr	r3, [pc, #240]	; (8002d08 <prvAddNewTaskToReadyList+0x104>)
 8002c18:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 8002c1a:	4b3c      	ldr	r3, [pc, #240]	; (8002d0c <prvAddNewTaskToReadyList+0x108>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002c22:	4b3a      	ldr	r3, [pc, #232]	; (8002d0c <prvAddNewTaskToReadyList+0x108>)
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c28:	4b37      	ldr	r3, [pc, #220]	; (8002d08 <prvAddNewTaskToReadyList+0x104>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d110      	bne.n	8002c52 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002c30:	f000 fd8c 	bl	800374c <prvInitialiseTaskLists>
 8002c34:	e00d      	b.n	8002c52 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002c36:	4b36      	ldr	r3, [pc, #216]	; (8002d10 <prvAddNewTaskToReadyList+0x10c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c3e:	4b33      	ldr	r3, [pc, #204]	; (8002d0c <prvAddNewTaskToReadyList+0x108>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d802      	bhi.n	8002c52 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002c4c:	4b2f      	ldr	r3, [pc, #188]	; (8002d0c <prvAddNewTaskToReadyList+0x108>)
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002c52:	4b30      	ldr	r3, [pc, #192]	; (8002d14 <prvAddNewTaskToReadyList+0x110>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	4b2e      	ldr	r3, [pc, #184]	; (8002d14 <prvAddNewTaskToReadyList+0x110>)
 8002c5a:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c5c:	4b2d      	ldr	r3, [pc, #180]	; (8002d14 <prvAddNewTaskToReadyList+0x110>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c68:	4b2b      	ldr	r3, [pc, #172]	; (8002d18 <prvAddNewTaskToReadyList+0x114>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d903      	bls.n	8002c78 <prvAddNewTaskToReadyList+0x74>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c74:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <prvAddNewTaskToReadyList+0x114>)
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7c:	4927      	ldr	r1, [pc, #156]	; (8002d1c <prvAddNewTaskToReadyList+0x118>)
 8002c7e:	0013      	movs	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	189b      	adds	r3, r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	18cb      	adds	r3, r1, r3
 8002c88:	3304      	adds	r3, #4
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	60da      	str	r2, [r3, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	3204      	adds	r2, #4
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	1d1a      	adds	r2, r3, #4
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	609a      	str	r2, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb2:	0013      	movs	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	189b      	adds	r3, r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4a18      	ldr	r2, [pc, #96]	; (8002d1c <prvAddNewTaskToReadyList+0x118>)
 8002cbc:	189a      	adds	r2, r3, r2
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	615a      	str	r2, [r3, #20]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc6:	4915      	ldr	r1, [pc, #84]	; (8002d1c <prvAddNewTaskToReadyList+0x118>)
 8002cc8:	0013      	movs	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	189b      	adds	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	585b      	ldr	r3, [r3, r1]
 8002cd2:	1c58      	adds	r0, r3, #1
 8002cd4:	4911      	ldr	r1, [pc, #68]	; (8002d1c <prvAddNewTaskToReadyList+0x118>)
 8002cd6:	0013      	movs	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	189b      	adds	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002ce0:	f001 f978 	bl	8003fd4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002ce4:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <prvAddNewTaskToReadyList+0x10c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002cec:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <prvAddNewTaskToReadyList+0x108>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d201      	bcs.n	8002cfe <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002cfa:	f001 f949 	bl	8003f90 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b004      	add	sp, #16
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	200002ac 	.word	0x200002ac
 8002d0c:	200001d4 	.word	0x200001d4
 8002d10:	200002b8 	.word	0x200002b8
 8002d14:	200002c8 	.word	0x200002c8
 8002d18:	200002b4 	.word	0x200002b4
 8002d1c:	200001d8 	.word	0x200001d8

08002d20 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8002d28:	f001 f942 	bl	8003fb0 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d102      	bne.n	8002d38 <uxTaskPriorityGet+0x18>
 8002d32:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <uxTaskPriorityGet+0x30>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	e000      	b.n	8002d3a <uxTaskPriorityGet+0x1a>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d40:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8002d42:	f001 f947 	bl	8003fd4 <vPortExitCritical>

        return uxReturn;
 8002d46:	68bb      	ldr	r3, [r7, #8]
    }
 8002d48:	0018      	movs	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b004      	add	sp, #16
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	200001d4 	.word	0x200001d4

08002d54 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d901      	bls.n	8002d6c <vTaskPrioritySet+0x18>
 8002d68:	b672      	cpsid	i
 8002d6a:	e7fe      	b.n	8002d6a <vTaskPrioritySet+0x16>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d901      	bls.n	8002d76 <vTaskPrioritySet+0x22>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d72:	2304      	movs	r3, #4
 8002d74:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002d76:	f001 f91b 	bl	8003fb0 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d102      	bne.n	8002d86 <vTaskPrioritySet+0x32>
 8002d80:	4b4b      	ldr	r3, [pc, #300]	; (8002eb0 <vTaskPrioritySet+0x15c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	e000      	b.n	8002d88 <vTaskPrioritySet+0x34>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d100      	bne.n	8002d9a <vTaskPrioritySet+0x46>
 8002d98:	e083      	b.n	8002ea2 <vTaskPrioritySet+0x14e>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d90d      	bls.n	8002dbe <vTaskPrioritySet+0x6a>
                {
                    if( pxTCB != pxCurrentTCB )
 8002da2:	4b43      	ldr	r3, [pc, #268]	; (8002eb0 <vTaskPrioritySet+0x15c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d00f      	beq.n	8002dcc <vTaskPrioritySet+0x78>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8002dac:	4b40      	ldr	r3, [pc, #256]	; (8002eb0 <vTaskPrioritySet+0x15c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d309      	bcc.n	8002dcc <vTaskPrioritySet+0x78>
                        {
                            xYieldRequired = pdTRUE;
 8002db8:	2301      	movs	r3, #1
 8002dba:	61fb      	str	r3, [r7, #28]
 8002dbc:	e006      	b.n	8002dcc <vTaskPrioritySet+0x78>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8002dbe:	4b3c      	ldr	r3, [pc, #240]	; (8002eb0 <vTaskPrioritySet+0x15c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d101      	bne.n	8002dcc <vTaskPrioritySet+0x78>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d102      	bne.n	8002de4 <vTaskPrioritySet+0x90>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	62da      	str	r2, [r3, #44]	; 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	645a      	str	r2, [r3, #68]	; 0x44
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	db04      	blt.n	8002dfc <vTaskPrioritySet+0xa8>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2205      	movs	r2, #5
 8002df6:	1ad2      	subs	r2, r2, r3
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	6959      	ldr	r1, [r3, #20]
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	0013      	movs	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	189b      	adds	r3, r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4a2a      	ldr	r2, [pc, #168]	; (8002eb4 <vTaskPrioritySet+0x160>)
 8002e0c:	189b      	adds	r3, r3, r2
 8002e0e:	4299      	cmp	r1, r3
 8002e10:	d142      	bne.n	8002e98 <vTaskPrioritySet+0x144>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	3304      	adds	r3, #4
 8002e16:	0018      	movs	r0, r3
 8002e18:	f7ff fb29 	bl	800246e <uxListRemove>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e20:	4b25      	ldr	r3, [pc, #148]	; (8002eb8 <vTaskPrioritySet+0x164>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d903      	bls.n	8002e30 <vTaskPrioritySet+0xdc>
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e2c:	4b22      	ldr	r3, [pc, #136]	; (8002eb8 <vTaskPrioritySet+0x164>)
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e34:	491f      	ldr	r1, [pc, #124]	; (8002eb4 <vTaskPrioritySet+0x160>)
 8002e36:	0013      	movs	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	189b      	adds	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	18cb      	adds	r3, r1, r3
 8002e40:	3304      	adds	r3, #4
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	609a      	str	r2, [r3, #8]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	60da      	str	r2, [r3, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	3204      	adds	r2, #4
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	1d1a      	adds	r2, r3, #4
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	609a      	str	r2, [r3, #8]
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6a:	0013      	movs	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	189b      	adds	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4a10      	ldr	r2, [pc, #64]	; (8002eb4 <vTaskPrioritySet+0x160>)
 8002e74:	189a      	adds	r2, r3, r2
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	615a      	str	r2, [r3, #20]
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e7e:	490d      	ldr	r1, [pc, #52]	; (8002eb4 <vTaskPrioritySet+0x160>)
 8002e80:	0013      	movs	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	189b      	adds	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	585b      	ldr	r3, [r3, r1]
 8002e8a:	1c58      	adds	r0, r3, #1
 8002e8c:	4909      	ldr	r1, [pc, #36]	; (8002eb4 <vTaskPrioritySet+0x160>)
 8002e8e:	0013      	movs	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	189b      	adds	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	5058      	str	r0, [r3, r1]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <vTaskPrioritySet+0x14e>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8002e9e:	f001 f877 	bl	8003f90 <vPortYield>
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8002ea2:	f001 f897 	bl	8003fd4 <vPortExitCritical>
    }
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b008      	add	sp, #32
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	200001d4 	.word	0x200001d4
 8002eb4:	200001d8 	.word	0x200001d8
 8002eb8:	200002b4 	.word	0x200002b4

08002ebc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002ec2:	4917      	ldr	r1, [pc, #92]	; (8002f20 <vTaskStartScheduler+0x64>)
 8002ec4:	4817      	ldr	r0, [pc, #92]	; (8002f24 <vTaskStartScheduler+0x68>)
 8002ec6:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <vTaskStartScheduler+0x6c>)
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	223c      	movs	r2, #60	; 0x3c
 8002ed2:	f7ff fdc8 	bl	8002a66 <xTaskCreate>
 8002ed6:	0003      	movs	r3, r0
 8002ed8:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d103      	bne.n	8002ee8 <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 8002ee0:	f000 fd5c 	bl	800399c <xTimerCreateTimerTask>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d10d      	bne.n	8002f0a <vTaskStartScheduler+0x4e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8002eee:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002ef0:	4b0e      	ldr	r3, [pc, #56]	; (8002f2c <vTaskStartScheduler+0x70>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	4252      	negs	r2, r2
 8002ef6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002ef8:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <vTaskStartScheduler+0x74>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002efe:	4b0d      	ldr	r3, [pc, #52]	; (8002f34 <vTaskStartScheduler+0x78>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002f04:	f001 f820 	bl	8003f48 <xPortStartScheduler>
 8002f08:	e004      	b.n	8002f14 <vTaskStartScheduler+0x58>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <vTaskStartScheduler+0x58>
 8002f10:	b672      	cpsid	i
 8002f12:	e7fe      	b.n	8002f12 <vTaskStartScheduler+0x56>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002f14:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <vTaskStartScheduler+0x7c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
}
 8002f18:	46c0      	nop			; (mov r8, r8)
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b002      	add	sp, #8
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	08004de4 	.word	0x08004de4
 8002f24:	0800372d 	.word	0x0800372d
 8002f28:	200002d0 	.word	0x200002d0
 8002f2c:	200002cc 	.word	0x200002cc
 8002f30:	200002b8 	.word	0x200002b8
 8002f34:	200002b0 	.word	0x200002b0
 8002f38:	2000000c 	.word	0x2000000c

08002f3c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <vTaskSuspendAll+0x14>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	4b02      	ldr	r3, [pc, #8]	; (8002f50 <vTaskSuspendAll+0x14>)
 8002f48:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	200002d4 	.word	0x200002d4

08002f54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002f62:	4b68      	ldr	r3, [pc, #416]	; (8003104 <xTaskResumeAll+0x1b0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <xTaskResumeAll+0x1a>
 8002f6a:	b672      	cpsid	i
 8002f6c:	e7fe      	b.n	8002f6c <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002f6e:	f001 f81f 	bl	8003fb0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002f72:	4b64      	ldr	r3, [pc, #400]	; (8003104 <xTaskResumeAll+0x1b0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	1e5a      	subs	r2, r3, #1
 8002f78:	4b62      	ldr	r3, [pc, #392]	; (8003104 <xTaskResumeAll+0x1b0>)
 8002f7a:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f7c:	4b61      	ldr	r3, [pc, #388]	; (8003104 <xTaskResumeAll+0x1b0>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d000      	beq.n	8002f86 <xTaskResumeAll+0x32>
 8002f84:	e0b7      	b.n	80030f6 <xTaskResumeAll+0x1a2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f86:	4b60      	ldr	r3, [pc, #384]	; (8003108 <xTaskResumeAll+0x1b4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d100      	bne.n	8002f90 <xTaskResumeAll+0x3c>
 8002f8e:	e0b2      	b.n	80030f6 <xTaskResumeAll+0x1a2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f90:	e089      	b.n	80030a6 <xTaskResumeAll+0x152>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f92:	4b5e      	ldr	r3, [pc, #376]	; (800310c <xTaskResumeAll+0x1b8>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	6a12      	ldr	r2, [r2, #32]
 8002fa8:	609a      	str	r2, [r3, #8]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	69d2      	ldr	r2, [r2, #28]
 8002fb2:	605a      	str	r2, [r3, #4]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	3318      	adds	r3, #24
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d103      	bne.n	8002fc8 <xTaskResumeAll+0x74>
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	6a1a      	ldr	r2, [r3, #32]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	629a      	str	r2, [r3, #40]	; 0x28
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	1e5a      	subs	r2, r3, #1
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	607b      	str	r3, [r7, #4]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	68d2      	ldr	r2, [r2, #12]
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	6892      	ldr	r2, [r2, #8]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d103      	bne.n	8003006 <xTaskResumeAll+0xb2>
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2200      	movs	r2, #0
 800300a:	615a      	str	r2, [r3, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	1e5a      	subs	r2, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301a:	4b3d      	ldr	r3, [pc, #244]	; (8003110 <xTaskResumeAll+0x1bc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d903      	bls.n	800302a <xTaskResumeAll+0xd6>
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003026:	4b3a      	ldr	r3, [pc, #232]	; (8003110 <xTaskResumeAll+0x1bc>)
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800302e:	4939      	ldr	r1, [pc, #228]	; (8003114 <xTaskResumeAll+0x1c0>)
 8003030:	0013      	movs	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	189b      	adds	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	18cb      	adds	r3, r1, r3
 800303a:	3304      	adds	r3, #4
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	609a      	str	r2, [r3, #8]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	3204      	adds	r2, #4
 8003056:	605a      	str	r2, [r3, #4]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	1d1a      	adds	r2, r3, #4
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003064:	0013      	movs	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	189b      	adds	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4a29      	ldr	r2, [pc, #164]	; (8003114 <xTaskResumeAll+0x1c0>)
 800306e:	189a      	adds	r2, r3, r2
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	615a      	str	r2, [r3, #20]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003078:	4926      	ldr	r1, [pc, #152]	; (8003114 <xTaskResumeAll+0x1c0>)
 800307a:	0013      	movs	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	189b      	adds	r3, r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	585b      	ldr	r3, [r3, r1]
 8003084:	1c58      	adds	r0, r3, #1
 8003086:	4923      	ldr	r1, [pc, #140]	; (8003114 <xTaskResumeAll+0x1c0>)
 8003088:	0013      	movs	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	189b      	adds	r3, r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003096:	4b20      	ldr	r3, [pc, #128]	; (8003118 <xTaskResumeAll+0x1c4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	429a      	cmp	r2, r3
 800309e:	d302      	bcc.n	80030a6 <xTaskResumeAll+0x152>
                    {
                        xYieldPending = pdTRUE;
 80030a0:	4b1e      	ldr	r3, [pc, #120]	; (800311c <xTaskResumeAll+0x1c8>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030a6:	4b19      	ldr	r3, [pc, #100]	; (800310c <xTaskResumeAll+0x1b8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d000      	beq.n	80030b0 <xTaskResumeAll+0x15c>
 80030ae:	e770      	b.n	8002f92 <xTaskResumeAll+0x3e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <xTaskResumeAll+0x166>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80030b6:	f000 fbcd 	bl	8003854 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80030ba:	4b19      	ldr	r3, [pc, #100]	; (8003120 <xTaskResumeAll+0x1cc>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00f      	beq.n	80030e6 <xTaskResumeAll+0x192>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80030c6:	f000 f83b 	bl	8003140 <xTaskIncrementTick>
 80030ca:	1e03      	subs	r3, r0, #0
 80030cc:	d002      	beq.n	80030d4 <xTaskResumeAll+0x180>
                            {
                                xYieldPending = pdTRUE;
 80030ce:	4b13      	ldr	r3, [pc, #76]	; (800311c <xTaskResumeAll+0x1c8>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1f2      	bne.n	80030c6 <xTaskResumeAll+0x172>

                        xPendedTicks = 0;
 80030e0:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <xTaskResumeAll+0x1cc>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80030e6:	4b0d      	ldr	r3, [pc, #52]	; (800311c <xTaskResumeAll+0x1c8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <xTaskResumeAll+0x1a2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80030ee:	2301      	movs	r3, #1
 80030f0:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80030f2:	f000 ff4d 	bl	8003f90 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80030f6:	f000 ff6d 	bl	8003fd4 <vPortExitCritical>

    return xAlreadyYielded;
 80030fa:	693b      	ldr	r3, [r7, #16]
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b006      	add	sp, #24
 8003102:	bd80      	pop	{r7, pc}
 8003104:	200002d4 	.word	0x200002d4
 8003108:	200002ac 	.word	0x200002ac
 800310c:	2000026c 	.word	0x2000026c
 8003110:	200002b4 	.word	0x200002b4
 8003114:	200001d8 	.word	0x200001d8
 8003118:	200001d4 	.word	0x200001d4
 800311c:	200002c0 	.word	0x200002c0
 8003120:	200002bc 	.word	0x200002bc

08003124 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800312a:	4b04      	ldr	r3, [pc, #16]	; (800313c <xTaskGetTickCount+0x18>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003130:	687b      	ldr	r3, [r7, #4]
}
 8003132:	0018      	movs	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	b002      	add	sp, #8
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	200002b0 	.word	0x200002b0

08003140 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800314a:	4b78      	ldr	r3, [pc, #480]	; (800332c <xTaskIncrementTick+0x1ec>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d000      	beq.n	8003154 <xTaskIncrementTick+0x14>
 8003152:	e0e0      	b.n	8003316 <xTaskIncrementTick+0x1d6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003154:	4b76      	ldr	r3, [pc, #472]	; (8003330 <xTaskIncrementTick+0x1f0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3301      	adds	r3, #1
 800315a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800315c:	4b74      	ldr	r3, [pc, #464]	; (8003330 <xTaskIncrementTick+0x1f0>)
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d117      	bne.n	8003198 <xTaskIncrementTick+0x58>
        {
            taskSWITCH_DELAYED_LISTS();
 8003168:	4b72      	ldr	r3, [pc, #456]	; (8003334 <xTaskIncrementTick+0x1f4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <xTaskIncrementTick+0x36>
 8003172:	b672      	cpsid	i
 8003174:	e7fe      	b.n	8003174 <xTaskIncrementTick+0x34>
 8003176:	4b6f      	ldr	r3, [pc, #444]	; (8003334 <xTaskIncrementTick+0x1f4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	4b6e      	ldr	r3, [pc, #440]	; (8003338 <xTaskIncrementTick+0x1f8>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	4b6c      	ldr	r3, [pc, #432]	; (8003334 <xTaskIncrementTick+0x1f4>)
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	4b6c      	ldr	r3, [pc, #432]	; (8003338 <xTaskIncrementTick+0x1f8>)
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	4b6c      	ldr	r3, [pc, #432]	; (800333c <xTaskIncrementTick+0x1fc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	4b6a      	ldr	r3, [pc, #424]	; (800333c <xTaskIncrementTick+0x1fc>)
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	f000 fb5e 	bl	8003854 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003198:	4b69      	ldr	r3, [pc, #420]	; (8003340 <xTaskIncrementTick+0x200>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d200      	bcs.n	80031a4 <xTaskIncrementTick+0x64>
 80031a2:	e0a4      	b.n	80032ee <xTaskIncrementTick+0x1ae>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031a4:	4b63      	ldr	r3, [pc, #396]	; (8003334 <xTaskIncrementTick+0x1f4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d104      	bne.n	80031b8 <xTaskIncrementTick+0x78>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031ae:	4b64      	ldr	r3, [pc, #400]	; (8003340 <xTaskIncrementTick+0x200>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	4252      	negs	r2, r2
 80031b4:	601a      	str	r2, [r3, #0]
                    break;
 80031b6:	e09a      	b.n	80032ee <xTaskIncrementTick+0x1ae>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031b8:	4b5e      	ldr	r3, [pc, #376]	; (8003334 <xTaskIncrementTick+0x1f4>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d203      	bcs.n	80031d8 <xTaskIncrementTick+0x98>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80031d0:	4b5b      	ldr	r3, [pc, #364]	; (8003340 <xTaskIncrementTick+0x200>)
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80031d6:	e08a      	b.n	80032ee <xTaskIncrementTick+0x1ae>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	68d2      	ldr	r2, [r2, #12]
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	6892      	ldr	r2, [r2, #8]
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	3304      	adds	r3, #4
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d103      	bne.n	8003206 <xTaskIncrementTick+0xc6>
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2200      	movs	r2, #0
 800320a:	615a      	str	r2, [r3, #20]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	1e5a      	subs	r2, r3, #1
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	2b00      	cmp	r3, #0
 800321c:	d01e      	beq.n	800325c <xTaskIncrementTick+0x11c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	607b      	str	r3, [r7, #4]
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	6a12      	ldr	r2, [r2, #32]
 800322c:	609a      	str	r2, [r3, #8]
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	69d2      	ldr	r2, [r2, #28]
 8003236:	605a      	str	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	3318      	adds	r3, #24
 8003240:	429a      	cmp	r2, r3
 8003242:	d103      	bne.n	800324c <xTaskIncrementTick+0x10c>
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	6a1a      	ldr	r2, [r3, #32]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	605a      	str	r2, [r3, #4]
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	2200      	movs	r2, #0
 8003250:	629a      	str	r2, [r3, #40]	; 0x28
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	1e5a      	subs	r2, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003260:	4b38      	ldr	r3, [pc, #224]	; (8003344 <xTaskIncrementTick+0x204>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d903      	bls.n	8003270 <xTaskIncrementTick+0x130>
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326c:	4b35      	ldr	r3, [pc, #212]	; (8003344 <xTaskIncrementTick+0x204>)
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003274:	4934      	ldr	r1, [pc, #208]	; (8003348 <xTaskIncrementTick+0x208>)
 8003276:	0013      	movs	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	189b      	adds	r3, r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	18cb      	adds	r3, r1, r3
 8003280:	3304      	adds	r3, #4
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	60da      	str	r2, [r3, #12]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	3204      	adds	r2, #4
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1d1a      	adds	r2, r3, #4
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	609a      	str	r2, [r3, #8]
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032aa:	0013      	movs	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	189b      	adds	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4a25      	ldr	r2, [pc, #148]	; (8003348 <xTaskIncrementTick+0x208>)
 80032b4:	189a      	adds	r2, r3, r2
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	615a      	str	r2, [r3, #20]
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032be:	4922      	ldr	r1, [pc, #136]	; (8003348 <xTaskIncrementTick+0x208>)
 80032c0:	0013      	movs	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	189b      	adds	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	585b      	ldr	r3, [r3, r1]
 80032ca:	1c58      	adds	r0, r3, #1
 80032cc:	491e      	ldr	r1, [pc, #120]	; (8003348 <xTaskIncrementTick+0x208>)
 80032ce:	0013      	movs	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	189b      	adds	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032dc:	4b1b      	ldr	r3, [pc, #108]	; (800334c <xTaskIncrementTick+0x20c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d800      	bhi.n	80032e8 <xTaskIncrementTick+0x1a8>
 80032e6:	e75d      	b.n	80031a4 <xTaskIncrementTick+0x64>
                        {
                            xSwitchRequired = pdTRUE;
 80032e8:	2301      	movs	r3, #1
 80032ea:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032ec:	e75a      	b.n	80031a4 <xTaskIncrementTick+0x64>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032ee:	4b17      	ldr	r3, [pc, #92]	; (800334c <xTaskIncrementTick+0x20c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f4:	4914      	ldr	r1, [pc, #80]	; (8003348 <xTaskIncrementTick+0x208>)
 80032f6:	0013      	movs	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	189b      	adds	r3, r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	585b      	ldr	r3, [r3, r1]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d901      	bls.n	8003308 <xTaskIncrementTick+0x1c8>
            {
                xSwitchRequired = pdTRUE;
 8003304:	2301      	movs	r3, #1
 8003306:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003308:	4b11      	ldr	r3, [pc, #68]	; (8003350 <xTaskIncrementTick+0x210>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d007      	beq.n	8003320 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8003310:	2301      	movs	r3, #1
 8003312:	61fb      	str	r3, [r7, #28]
 8003314:	e004      	b.n	8003320 <xTaskIncrementTick+0x1e0>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003316:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <xTaskIncrementTick+0x214>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <xTaskIncrementTick+0x214>)
 800331e:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003320:	69fb      	ldr	r3, [r7, #28]
}
 8003322:	0018      	movs	r0, r3
 8003324:	46bd      	mov	sp, r7
 8003326:	b008      	add	sp, #32
 8003328:	bd80      	pop	{r7, pc}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	200002d4 	.word	0x200002d4
 8003330:	200002b0 	.word	0x200002b0
 8003334:	20000264 	.word	0x20000264
 8003338:	20000268 	.word	0x20000268
 800333c:	200002c4 	.word	0x200002c4
 8003340:	200002cc 	.word	0x200002cc
 8003344:	200002b4 	.word	0x200002b4
 8003348:	200001d8 	.word	0x200001d8
 800334c:	200001d4 	.word	0x200001d4
 8003350:	200002c0 	.word	0x200002c0
 8003354:	200002bc 	.word	0x200002bc

08003358 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800335e:	4b22      	ldr	r3, [pc, #136]	; (80033e8 <vTaskSwitchContext+0x90>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003366:	4b21      	ldr	r3, [pc, #132]	; (80033ec <vTaskSwitchContext+0x94>)
 8003368:	2201      	movs	r2, #1
 800336a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800336c:	e037      	b.n	80033de <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 800336e:	4b1f      	ldr	r3, [pc, #124]	; (80033ec <vTaskSwitchContext+0x94>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003374:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <vTaskSwitchContext+0x98>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	607b      	str	r3, [r7, #4]
 800337a:	e007      	b.n	800338c <vTaskSwitchContext+0x34>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <vTaskSwitchContext+0x2e>
 8003382:	b672      	cpsid	i
 8003384:	e7fe      	b.n	8003384 <vTaskSwitchContext+0x2c>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3b01      	subs	r3, #1
 800338a:	607b      	str	r3, [r7, #4]
 800338c:	4919      	ldr	r1, [pc, #100]	; (80033f4 <vTaskSwitchContext+0x9c>)
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	0013      	movs	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	189b      	adds	r3, r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	585b      	ldr	r3, [r3, r1]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0ee      	beq.n	800337c <vTaskSwitchContext+0x24>
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	0013      	movs	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	189b      	adds	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4a12      	ldr	r2, [pc, #72]	; (80033f4 <vTaskSwitchContext+0x9c>)
 80033aa:	189b      	adds	r3, r3, r2
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	605a      	str	r2, [r3, #4]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	3308      	adds	r3, #8
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d104      	bne.n	80033ce <vTaskSwitchContext+0x76>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	4b08      	ldr	r3, [pc, #32]	; (80033f8 <vTaskSwitchContext+0xa0>)
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <vTaskSwitchContext+0x98>)
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	601a      	str	r2, [r3, #0]
}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	46bd      	mov	sp, r7
 80033e2:	b002      	add	sp, #8
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	200002d4 	.word	0x200002d4
 80033ec:	200002c0 	.word	0x200002c0
 80033f0:	200002b4 	.word	0x200002b4
 80033f4:	200001d8 	.word	0x200001d8
 80033f8:	200001d4 	.word	0x200001d4

080033fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <vTaskPlaceOnEventList+0x14>
 800340c:	b672      	cpsid	i
 800340e:	e7fe      	b.n	800340e <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003410:	4b08      	ldr	r3, [pc, #32]	; (8003434 <vTaskPlaceOnEventList+0x38>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3318      	adds	r3, #24
 8003416:	001a      	movs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	0011      	movs	r1, r2
 800341c:	0018      	movs	r0, r3
 800341e:	f7fe fff0 	bl	8002402 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2101      	movs	r1, #1
 8003426:	0018      	movs	r0, r3
 8003428:	f000 fa4a 	bl	80038c0 <prvAddCurrentTaskToDelayedList>
}
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	46bd      	mov	sp, r7
 8003430:	b002      	add	sp, #8
 8003432:	bd80      	pop	{r7, pc}
 8003434:	200001d4 	.word	0x200001d4

08003438 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <vTaskPlaceOnEventListRestricted+0x16>
 800344a:	b672      	cpsid	i
 800344c:	e7fe      	b.n	800344c <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	4b16      	ldr	r3, [pc, #88]	; (80034b0 <vTaskPlaceOnEventListRestricted+0x78>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	61da      	str	r2, [r3, #28]
 800345c:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <vTaskPlaceOnEventListRestricted+0x78>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	6892      	ldr	r2, [r2, #8]
 8003464:	621a      	str	r2, [r3, #32]
 8003466:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <vTaskPlaceOnEventListRestricted+0x78>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	3218      	adds	r2, #24
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <vTaskPlaceOnEventListRestricted+0x78>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3318      	adds	r3, #24
 8003478:	001a      	movs	r2, r3
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	609a      	str	r2, [r3, #8]
 800347e:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <vTaskPlaceOnEventListRestricted+0x78>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	629a      	str	r2, [r3, #40]	; 0x28
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <vTaskPlaceOnEventListRestricted+0x64>
        {
            xTicksToWait = portMAX_DELAY;
 8003496:	2301      	movs	r3, #1
 8003498:	425b      	negs	r3, r3
 800349a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	0011      	movs	r1, r2
 80034a2:	0018      	movs	r0, r3
 80034a4:	f000 fa0c 	bl	80038c0 <prvAddCurrentTaskToDelayedList>
    }
 80034a8:	46c0      	nop			; (mov r8, r8)
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b006      	add	sp, #24
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	200001d4 	.word	0x200001d4

080034b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <xTaskRemoveFromEventList+0x1a>
 80034ca:	b672      	cpsid	i
 80034cc:	e7fe      	b.n	80034cc <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	6a12      	ldr	r2, [r2, #32]
 80034dc:	609a      	str	r2, [r3, #8]
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	69d2      	ldr	r2, [r2, #28]
 80034e6:	605a      	str	r2, [r3, #4]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	3318      	adds	r3, #24
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d103      	bne.n	80034fc <xTaskRemoveFromEventList+0x48>
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	6a1a      	ldr	r2, [r3, #32]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	605a      	str	r2, [r3, #4]
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	2200      	movs	r2, #0
 8003500:	629a      	str	r2, [r3, #40]	; 0x28
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	1e5a      	subs	r2, r3, #1
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800350c:	4b48      	ldr	r3, [pc, #288]	; (8003630 <xTaskRemoveFromEventList+0x17c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d15d      	bne.n	80035d0 <xTaskRemoveFromEventList+0x11c>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	68d2      	ldr	r2, [r2, #12]
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	6892      	ldr	r2, [r2, #8]
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	3304      	adds	r3, #4
 8003536:	429a      	cmp	r2, r3
 8003538:	d103      	bne.n	8003542 <xTaskRemoveFromEventList+0x8e>
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	605a      	str	r2, [r3, #4]
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2200      	movs	r2, #0
 8003546:	615a      	str	r2, [r3, #20]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	1e5a      	subs	r2, r3, #1
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003556:	4b37      	ldr	r3, [pc, #220]	; (8003634 <xTaskRemoveFromEventList+0x180>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d903      	bls.n	8003566 <xTaskRemoveFromEventList+0xb2>
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003562:	4b34      	ldr	r3, [pc, #208]	; (8003634 <xTaskRemoveFromEventList+0x180>)
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356a:	4933      	ldr	r1, [pc, #204]	; (8003638 <xTaskRemoveFromEventList+0x184>)
 800356c:	0013      	movs	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	189b      	adds	r3, r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	18cb      	adds	r3, r1, r3
 8003576:	3304      	adds	r3, #4
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60bb      	str	r3, [r7, #8]
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	609a      	str	r2, [r3, #8]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	60da      	str	r2, [r3, #12]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	3204      	adds	r2, #4
 8003592:	605a      	str	r2, [r3, #4]
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	1d1a      	adds	r2, r3, #4
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a0:	0013      	movs	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	189b      	adds	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4a23      	ldr	r2, [pc, #140]	; (8003638 <xTaskRemoveFromEventList+0x184>)
 80035aa:	189a      	adds	r2, r3, r2
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	615a      	str	r2, [r3, #20]
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b4:	4920      	ldr	r1, [pc, #128]	; (8003638 <xTaskRemoveFromEventList+0x184>)
 80035b6:	0013      	movs	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	189b      	adds	r3, r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	585b      	ldr	r3, [r3, r1]
 80035c0:	1c58      	adds	r0, r3, #1
 80035c2:	491d      	ldr	r1, [pc, #116]	; (8003638 <xTaskRemoveFromEventList+0x184>)
 80035c4:	0013      	movs	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	189b      	adds	r3, r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	5058      	str	r0, [r3, r1]
 80035ce:	e01b      	b.n	8003608 <xTaskRemoveFromEventList+0x154>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035d0:	4b1a      	ldr	r3, [pc, #104]	; (800363c <xTaskRemoveFromEventList+0x188>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	61da      	str	r2, [r3, #28]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	621a      	str	r2, [r3, #32]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	3218      	adds	r2, #24
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	3318      	adds	r3, #24
 80035f2:	001a      	movs	r2, r3
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	609a      	str	r2, [r3, #8]
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	4a10      	ldr	r2, [pc, #64]	; (800363c <xTaskRemoveFromEventList+0x188>)
 80035fc:	629a      	str	r2, [r3, #40]	; 0x28
 80035fe:	4b0f      	ldr	r3, [pc, #60]	; (800363c <xTaskRemoveFromEventList+0x188>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	4b0d      	ldr	r3, [pc, #52]	; (800363c <xTaskRemoveFromEventList+0x188>)
 8003606:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360c:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <xTaskRemoveFromEventList+0x18c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	429a      	cmp	r2, r3
 8003614:	d905      	bls.n	8003622 <xTaskRemoveFromEventList+0x16e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003616:	2301      	movs	r3, #1
 8003618:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800361a:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <xTaskRemoveFromEventList+0x190>)
 800361c:	2201      	movs	r2, #1
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	e001      	b.n	8003626 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        xReturn = pdFALSE;
 8003622:	2300      	movs	r3, #0
 8003624:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8003626:	69fb      	ldr	r3, [r7, #28]
}
 8003628:	0018      	movs	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	b008      	add	sp, #32
 800362e:	bd80      	pop	{r7, pc}
 8003630:	200002d4 	.word	0x200002d4
 8003634:	200002b4 	.word	0x200002b4
 8003638:	200001d8 	.word	0x200001d8
 800363c:	2000026c 	.word	0x2000026c
 8003640:	200001d4 	.word	0x200001d4
 8003644:	200002c0 	.word	0x200002c0

08003648 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <vTaskInternalSetTimeOutState+0x20>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003658:	4b04      	ldr	r3, [pc, #16]	; (800366c <vTaskInternalSetTimeOutState+0x24>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	605a      	str	r2, [r3, #4]
}
 8003660:	46c0      	nop			; (mov r8, r8)
 8003662:	46bd      	mov	sp, r7
 8003664:	b002      	add	sp, #8
 8003666:	bd80      	pop	{r7, pc}
 8003668:	200002c4 	.word	0x200002c4
 800366c:	200002b0 	.word	0x200002b0

08003670 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <xTaskCheckForTimeOut+0x14>
 8003680:	b672      	cpsid	i
 8003682:	e7fe      	b.n	8003682 <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <xTaskCheckForTimeOut+0x1e>
 800368a:	b672      	cpsid	i
 800368c:	e7fe      	b.n	800368c <xTaskCheckForTimeOut+0x1c>

    taskENTER_CRITICAL();
 800368e:	f000 fc8f 	bl	8003fb0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003692:	4b1f      	ldr	r3, [pc, #124]	; (8003710 <xTaskCheckForTimeOut+0xa0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3301      	adds	r3, #1
 80036a8:	d102      	bne.n	80036b0 <xTaskCheckForTimeOut+0x40>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	e027      	b.n	8003700 <xTaskCheckForTimeOut+0x90>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	4b17      	ldr	r3, [pc, #92]	; (8003714 <xTaskCheckForTimeOut+0xa4>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d00a      	beq.n	80036d2 <xTaskCheckForTimeOut+0x62>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d305      	bcc.n	80036d2 <xTaskCheckForTimeOut+0x62>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80036c6:	2301      	movs	r3, #1
 80036c8:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e016      	b.n	8003700 <xTaskCheckForTimeOut+0x90>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d20c      	bcs.n	80036f6 <xTaskCheckForTimeOut+0x86>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	1ad2      	subs	r2, r2, r3
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffac 	bl	8003648 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	e004      	b.n	8003700 <xTaskCheckForTimeOut+0x90>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80036fc:	2301      	movs	r3, #1
 80036fe:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8003700:	f000 fc68 	bl	8003fd4 <vPortExitCritical>

    return xReturn;
 8003704:	697b      	ldr	r3, [r7, #20]
}
 8003706:	0018      	movs	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	b006      	add	sp, #24
 800370c:	bd80      	pop	{r7, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	200002b0 	.word	0x200002b0
 8003714:	200002c4 	.word	0x200002c4

08003718 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800371c:	4b02      	ldr	r3, [pc, #8]	; (8003728 <vTaskMissedYield+0x10>)
 800371e:	2201      	movs	r2, #1
 8003720:	601a      	str	r2, [r3, #0]
}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	200002c0 	.word	0x200002c0

0800372c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003734:	f000 f84e 	bl	80037d4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003738:	4b03      	ldr	r3, [pc, #12]	; (8003748 <prvIdleTask+0x1c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d9f9      	bls.n	8003734 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003740:	f000 fc26 	bl	8003f90 <vPortYield>
        prvCheckTasksWaitingTermination();
 8003744:	e7f6      	b.n	8003734 <prvIdleTask+0x8>
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	200001d8 	.word	0x200001d8

0800374c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003752:	2300      	movs	r3, #0
 8003754:	607b      	str	r3, [r7, #4]
 8003756:	e00c      	b.n	8003772 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	0013      	movs	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	189b      	adds	r3, r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4a14      	ldr	r2, [pc, #80]	; (80037b4 <prvInitialiseTaskLists+0x68>)
 8003764:	189b      	adds	r3, r3, r2
 8003766:	0018      	movs	r0, r3
 8003768:	f7fe fe22 	bl	80023b0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3301      	adds	r3, #1
 8003770:	607b      	str	r3, [r7, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b04      	cmp	r3, #4
 8003776:	d9ef      	bls.n	8003758 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003778:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <prvInitialiseTaskLists+0x6c>)
 800377a:	0018      	movs	r0, r3
 800377c:	f7fe fe18 	bl	80023b0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003780:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <prvInitialiseTaskLists+0x70>)
 8003782:	0018      	movs	r0, r3
 8003784:	f7fe fe14 	bl	80023b0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003788:	4b0d      	ldr	r3, [pc, #52]	; (80037c0 <prvInitialiseTaskLists+0x74>)
 800378a:	0018      	movs	r0, r3
 800378c:	f7fe fe10 	bl	80023b0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003790:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <prvInitialiseTaskLists+0x78>)
 8003792:	0018      	movs	r0, r3
 8003794:	f7fe fe0c 	bl	80023b0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <prvInitialiseTaskLists+0x7c>)
 800379a:	0018      	movs	r0, r3
 800379c:	f7fe fe08 	bl	80023b0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80037a0:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <prvInitialiseTaskLists+0x80>)
 80037a2:	4a05      	ldr	r2, [pc, #20]	; (80037b8 <prvInitialiseTaskLists+0x6c>)
 80037a4:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037a6:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <prvInitialiseTaskLists+0x84>)
 80037a8:	4a04      	ldr	r2, [pc, #16]	; (80037bc <prvInitialiseTaskLists+0x70>)
 80037aa:	601a      	str	r2, [r3, #0]
}
 80037ac:	46c0      	nop			; (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b002      	add	sp, #8
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	200001d8 	.word	0x200001d8
 80037b8:	2000023c 	.word	0x2000023c
 80037bc:	20000250 	.word	0x20000250
 80037c0:	2000026c 	.word	0x2000026c
 80037c4:	20000280 	.word	0x20000280
 80037c8:	20000298 	.word	0x20000298
 80037cc:	20000264 	.word	0x20000264
 80037d0:	20000268 	.word	0x20000268

080037d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037da:	e01a      	b.n	8003812 <prvCheckTasksWaitingTermination+0x3e>
        {
            taskENTER_CRITICAL();
 80037dc:	f000 fbe8 	bl	8003fb0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037e0:	4b10      	ldr	r3, [pc, #64]	; (8003824 <prvCheckTasksWaitingTermination+0x50>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	0018      	movs	r0, r3
 80037ee:	f7fe fe3e 	bl	800246e <uxListRemove>
                --uxCurrentNumberOfTasks;
 80037f2:	4b0d      	ldr	r3, [pc, #52]	; (8003828 <prvCheckTasksWaitingTermination+0x54>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	1e5a      	subs	r2, r3, #1
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <prvCheckTasksWaitingTermination+0x54>)
 80037fa:	601a      	str	r2, [r3, #0]
                --uxDeletedTasksWaitingCleanUp;
 80037fc:	4b0b      	ldr	r3, [pc, #44]	; (800382c <prvCheckTasksWaitingTermination+0x58>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	1e5a      	subs	r2, r3, #1
 8003802:	4b0a      	ldr	r3, [pc, #40]	; (800382c <prvCheckTasksWaitingTermination+0x58>)
 8003804:	601a      	str	r2, [r3, #0]
            }
            taskEXIT_CRITICAL();
 8003806:	f000 fbe5 	bl	8003fd4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	0018      	movs	r0, r3
 800380e:	f000 f80f 	bl	8003830 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <prvCheckTasksWaitingTermination+0x58>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1e0      	bne.n	80037dc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	46c0      	nop			; (mov r8, r8)
 800381e:	46bd      	mov	sp, r7
 8003820:	b002      	add	sp, #8
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20000280 	.word	0x20000280
 8003828:	200002ac 	.word	0x200002ac
 800382c:	20000294 	.word	0x20000294

08003830 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	0018      	movs	r0, r3
 800383e:	f000 fcf7 	bl	8004230 <vPortFree>
            vPortFree( pxTCB );
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	0018      	movs	r0, r3
 8003846:	f000 fcf3 	bl	8004230 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	46bd      	mov	sp, r7
 800384e:	b002      	add	sp, #8
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003858:	4b09      	ldr	r3, [pc, #36]	; (8003880 <prvResetNextTaskUnblockTime+0x2c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d104      	bne.n	800386c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003862:	4b08      	ldr	r3, [pc, #32]	; (8003884 <prvResetNextTaskUnblockTime+0x30>)
 8003864:	2201      	movs	r2, #1
 8003866:	4252      	negs	r2, r2
 8003868:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800386a:	e005      	b.n	8003878 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <prvResetNextTaskUnblockTime+0x2c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4b03      	ldr	r3, [pc, #12]	; (8003884 <prvResetNextTaskUnblockTime+0x30>)
 8003876:	601a      	str	r2, [r3, #0]
}
 8003878:	46c0      	nop			; (mov r8, r8)
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	20000264 	.word	0x20000264
 8003884:	200002cc 	.word	0x200002cc

08003888 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <xTaskGetSchedulerState+0x30>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d102      	bne.n	800389c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003896:	2301      	movs	r3, #1
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	e008      	b.n	80038ae <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800389c:	4b07      	ldr	r3, [pc, #28]	; (80038bc <xTaskGetSchedulerState+0x34>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d102      	bne.n	80038aa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80038a4:	2302      	movs	r3, #2
 80038a6:	607b      	str	r3, [r7, #4]
 80038a8:	e001      	b.n	80038ae <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80038aa:	2300      	movs	r3, #0
 80038ac:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80038ae:	687b      	ldr	r3, [r7, #4]
    }
 80038b0:	0018      	movs	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b002      	add	sp, #8
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	200002b8 	.word	0x200002b8
 80038bc:	200002d4 	.word	0x200002d4

080038c0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80038ca:	4b2e      	ldr	r3, [pc, #184]	; (8003984 <prvAddCurrentTaskToDelayedList+0xc4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038d0:	4b2d      	ldr	r3, [pc, #180]	; (8003988 <prvAddCurrentTaskToDelayedList+0xc8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3304      	adds	r3, #4
 80038d6:	0018      	movs	r0, r3
 80038d8:	f7fe fdc9 	bl	800246e <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3301      	adds	r3, #1
 80038e0:	d124      	bne.n	800392c <prvAddCurrentTaskToDelayedList+0x6c>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d021      	beq.n	800392c <prvAddCurrentTaskToDelayedList+0x6c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038e8:	4b28      	ldr	r3, [pc, #160]	; (800398c <prvAddCurrentTaskToDelayedList+0xcc>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	613b      	str	r3, [r7, #16]
 80038ee:	4b26      	ldr	r3, [pc, #152]	; (8003988 <prvAddCurrentTaskToDelayedList+0xc8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	609a      	str	r2, [r3, #8]
 80038f6:	4b24      	ldr	r3, [pc, #144]	; (8003988 <prvAddCurrentTaskToDelayedList+0xc8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	6892      	ldr	r2, [r2, #8]
 80038fe:	60da      	str	r2, [r3, #12]
 8003900:	4b21      	ldr	r3, [pc, #132]	; (8003988 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	3204      	adds	r2, #4
 800390a:	605a      	str	r2, [r3, #4]
 800390c:	4b1e      	ldr	r3, [pc, #120]	; (8003988 <prvAddCurrentTaskToDelayedList+0xc8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	1d1a      	adds	r2, r3, #4
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	609a      	str	r2, [r3, #8]
 8003916:	4b1c      	ldr	r3, [pc, #112]	; (8003988 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1c      	ldr	r2, [pc, #112]	; (800398c <prvAddCurrentTaskToDelayedList+0xcc>)
 800391c:	615a      	str	r2, [r3, #20]
 800391e:	4b1b      	ldr	r3, [pc, #108]	; (800398c <prvAddCurrentTaskToDelayedList+0xcc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	4b19      	ldr	r3, [pc, #100]	; (800398c <prvAddCurrentTaskToDelayedList+0xcc>)
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	46c0      	nop			; (mov r8, r8)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800392a:	e026      	b.n	800397a <prvAddCurrentTaskToDelayedList+0xba>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	18d3      	adds	r3, r2, r3
 8003932:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003934:	4b14      	ldr	r3, [pc, #80]	; (8003988 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	429a      	cmp	r2, r3
 8003942:	d209      	bcs.n	8003958 <prvAddCurrentTaskToDelayedList+0x98>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003944:	4b12      	ldr	r3, [pc, #72]	; (8003990 <prvAddCurrentTaskToDelayedList+0xd0>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	4b0f      	ldr	r3, [pc, #60]	; (8003988 <prvAddCurrentTaskToDelayedList+0xc8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3304      	adds	r3, #4
 800394e:	0019      	movs	r1, r3
 8003950:	0010      	movs	r0, r2
 8003952:	f7fe fd56 	bl	8002402 <vListInsert>
}
 8003956:	e010      	b.n	800397a <prvAddCurrentTaskToDelayedList+0xba>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003958:	4b0e      	ldr	r3, [pc, #56]	; (8003994 <prvAddCurrentTaskToDelayedList+0xd4>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <prvAddCurrentTaskToDelayedList+0xc8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3304      	adds	r3, #4
 8003962:	0019      	movs	r1, r3
 8003964:	0010      	movs	r0, r2
 8003966:	f7fe fd4c 	bl	8002402 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800396a:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <prvAddCurrentTaskToDelayedList+0xd8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	429a      	cmp	r2, r3
 8003972:	d202      	bcs.n	800397a <prvAddCurrentTaskToDelayedList+0xba>
                    xNextTaskUnblockTime = xTimeToWake;
 8003974:	4b08      	ldr	r3, [pc, #32]	; (8003998 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	601a      	str	r2, [r3, #0]
}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	46bd      	mov	sp, r7
 800397e:	b006      	add	sp, #24
 8003980:	bd80      	pop	{r7, pc}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	200002b0 	.word	0x200002b0
 8003988:	200001d4 	.word	0x200001d4
 800398c:	20000298 	.word	0x20000298
 8003990:	20000268 	.word	0x20000268
 8003994:	20000264 	.word	0x20000264
 8003998:	200002cc 	.word	0x200002cc

0800399c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80039a6:	f000 fa2d 	bl	8003e04 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80039aa:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <xTimerCreateTimerTask+0x44>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80039b2:	490c      	ldr	r1, [pc, #48]	; (80039e4 <xTimerCreateTimerTask+0x48>)
 80039b4:	480c      	ldr	r0, [pc, #48]	; (80039e8 <xTimerCreateTimerTask+0x4c>)
 80039b6:	4b0d      	ldr	r3, [pc, #52]	; (80039ec <xTimerCreateTimerTask+0x50>)
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	2302      	movs	r3, #2
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	2300      	movs	r3, #0
 80039c0:	2250      	movs	r2, #80	; 0x50
 80039c2:	f7ff f850 	bl	8002a66 <xTaskCreate>
 80039c6:	0003      	movs	r3, r0
 80039c8:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <xTimerCreateTimerTask+0x38>
 80039d0:	b672      	cpsid	i
 80039d2:	e7fe      	b.n	80039d2 <xTimerCreateTimerTask+0x36>
        return xReturn;
 80039d4:	687b      	ldr	r3, [r7, #4]
    }
 80039d6:	0018      	movs	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	b002      	add	sp, #8
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	20000308 	.word	0x20000308
 80039e4:	08004dec 	.word	0x08004dec
 80039e8:	08003a99 	.word	0x08003a99
 80039ec:	2000030c 	.word	0x2000030c

080039f0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80039fc:	e009      	b.n	8003a12 <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	18d3      	adds	r3, r2, r3
 8003a06:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	0010      	movs	r0, r2
 8003a10:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	699a      	ldr	r2, [r3, #24]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	18d1      	adds	r1, r2, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f8d8 	bl	8003bd4 <prvInsertTimerInActiveList>
 8003a24:	1e03      	subs	r3, r0, #0
 8003a26:	d1ea      	bne.n	80039fe <prvReloadTimer+0xe>
        }
    }
 8003a28:	46c0      	nop			; (mov r8, r8)
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b004      	add	sp, #16
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a3e:	4b15      	ldr	r3, [pc, #84]	; (8003a94 <prvProcessExpiredTimer+0x60>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f7fe fd0e 	bl	800246e <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2228      	movs	r2, #40	; 0x28
 8003a56:	5c9b      	ldrb	r3, [r3, r2]
 8003a58:	001a      	movs	r2, r3
 8003a5a:	2304      	movs	r3, #4
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d006      	beq.n	8003a6e <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	0018      	movs	r0, r3
 8003a68:	f7ff ffc2 	bl	80039f0 <prvReloadTimer>
 8003a6c:	e008      	b.n	8003a80 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2228      	movs	r2, #40	; 0x28
 8003a72:	5c9b      	ldrb	r3, [r3, r2]
 8003a74:	2201      	movs	r2, #1
 8003a76:	4393      	bics	r3, r2
 8003a78:	b2d9      	uxtb	r1, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2228      	movs	r2, #40	; 0x28
 8003a7e:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	0010      	movs	r0, r2
 8003a88:	4798      	blx	r3
    }
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b004      	add	sp, #16
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	20000300 	.word	0x20000300

08003a98 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003aa0:	2308      	movs	r3, #8
 8003aa2:	18fb      	adds	r3, r7, r3
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f000 f853 	bl	8003b50 <prvGetNextExpireTime>
 8003aaa:	0003      	movs	r3, r0
 8003aac:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	0011      	movs	r1, r2
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	f000 f803 	bl	8003ac0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003aba:	f000 f8cd 	bl	8003c58 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003abe:	e7ef      	b.n	8003aa0 <prvTimerTask+0x8>

08003ac0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003aca:	f7ff fa37 	bl	8002f3c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ace:	2308      	movs	r3, #8
 8003ad0:	18fb      	adds	r3, r7, r3
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f000 f85e 	bl	8003b94 <prvSampleTimeNow>
 8003ad8:	0003      	movs	r3, r0
 8003ada:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d12b      	bne.n	8003b3a <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10c      	bne.n	8003b02 <prvProcessTimerOrBlockTask+0x42>
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d808      	bhi.n	8003b02 <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8003af0:	f7ff fa30 	bl	8002f54 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	0011      	movs	r1, r2
 8003afa:	0018      	movs	r0, r3
 8003afc:	f7ff ff9a 	bl	8003a34 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003b00:	e01d      	b.n	8003b3e <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b08:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <prvProcessTimerOrBlockTask+0x88>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <prvProcessTimerOrBlockTask+0x56>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <prvProcessTimerOrBlockTask+0x58>
 8003b16:	2300      	movs	r3, #0
 8003b18:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <prvProcessTimerOrBlockTask+0x8c>)
 8003b1c:	6818      	ldr	r0, [r3, #0]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	0019      	movs	r1, r3
 8003b28:	f7fe ff6a 	bl	8002a00 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003b2c:	f7ff fa12 	bl	8002f54 <xTaskResumeAll>
 8003b30:	1e03      	subs	r3, r0, #0
 8003b32:	d104      	bne.n	8003b3e <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8003b34:	f000 fa2c 	bl	8003f90 <vPortYield>
    }
 8003b38:	e001      	b.n	8003b3e <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8003b3a:	f7ff fa0b 	bl	8002f54 <xTaskResumeAll>
    }
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b004      	add	sp, #16
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	20000304 	.word	0x20000304
 8003b4c:	20000308 	.word	0x20000308

08003b50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003b58:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <prvGetNextExpireTime+0x40>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <prvGetNextExpireTime+0x16>
 8003b62:	2201      	movs	r2, #1
 8003b64:	e000      	b.n	8003b68 <prvGetNextExpireTime+0x18>
 8003b66:	2200      	movs	r2, #0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d105      	bne.n	8003b80 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b74:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <prvGetNextExpireTime+0x40>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	e001      	b.n	8003b84 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003b84:	68fb      	ldr	r3, [r7, #12]
    }
 8003b86:	0018      	movs	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b004      	add	sp, #16
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	20000300 	.word	0x20000300

08003b94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003b9c:	f7ff fac2 	bl	8003124 <xTaskGetTickCount>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8003ba4:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <prvSampleTimeNow+0x3c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d205      	bcs.n	8003bba <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8003bae:	f000 f901 	bl	8003db4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	e002      	b.n	8003bc0 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <prvSampleTimeNow+0x3c>)
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
    }
 8003bc8:	0018      	movs	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b004      	add	sp, #16
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20000310 	.word	0x20000310

08003bd4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d812      	bhi.n	8003c20 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	1ad2      	subs	r2, r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d302      	bcc.n	8003c0e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	e01b      	b.n	8003c46 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c0e:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <prvInsertTimerInActiveList+0x7c>)
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	3304      	adds	r3, #4
 8003c16:	0019      	movs	r1, r3
 8003c18:	0010      	movs	r0, r2
 8003c1a:	f7fe fbf2 	bl	8002402 <vListInsert>
 8003c1e:	e012      	b.n	8003c46 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d206      	bcs.n	8003c36 <prvInsertTimerInActiveList+0x62>
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d302      	bcc.n	8003c36 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003c30:	2301      	movs	r3, #1
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	e007      	b.n	8003c46 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c36:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <prvInsertTimerInActiveList+0x80>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	0019      	movs	r1, r3
 8003c40:	0010      	movs	r0, r2
 8003c42:	f7fe fbde 	bl	8002402 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003c46:	697b      	ldr	r3, [r7, #20]
    }
 8003c48:	0018      	movs	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	b006      	add	sp, #24
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20000304 	.word	0x20000304
 8003c54:	20000300 	.word	0x20000300

08003c58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c5e:	e095      	b.n	8003d8c <prvProcessReceivedCommands+0x134>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003c60:	1d3b      	adds	r3, r7, #4
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	da00      	bge.n	8003c6a <prvProcessReceivedCommands+0x12>
 8003c68:	e08f      	b.n	8003d8a <prvProcessReceivedCommands+0x132>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003c6a:	1d3b      	adds	r3, r7, #4
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d004      	beq.n	8003c82 <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f7fe fbf6 	bl	800246e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c82:	003b      	movs	r3, r7
 8003c84:	0018      	movs	r0, r3
 8003c86:	f7ff ff85 	bl	8003b94 <prvSampleTimeNow>
 8003c8a:	0003      	movs	r3, r0
 8003c8c:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 8003c8e:	1d3b      	adds	r3, r7, #4
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b09      	cmp	r3, #9
 8003c94:	d900      	bls.n	8003c98 <prvProcessReceivedCommands+0x40>
 8003c96:	e079      	b.n	8003d8c <prvProcessReceivedCommands+0x134>
 8003c98:	009a      	lsls	r2, r3, #2
 8003c9a:	4b44      	ldr	r3, [pc, #272]	; (8003dac <prvProcessReceivedCommands+0x154>)
 8003c9c:	18d3      	adds	r3, r2, r3
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2228      	movs	r2, #40	; 0x28
 8003ca6:	5c9b      	ldrb	r3, [r3, r2]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	4313      	orrs	r3, r2
 8003cac:	b2d9      	uxtb	r1, r3
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2228      	movs	r2, #40	; 0x28
 8003cb2:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003cb4:	1d3b      	adds	r3, r7, #4
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	18d1      	adds	r1, r2, r3
 8003cbe:	1d3b      	adds	r3, r7, #4
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	6978      	ldr	r0, [r7, #20]
 8003cc6:	f7ff ff85 	bl	8003bd4 <prvInsertTimerInActiveList>
 8003cca:	1e03      	subs	r3, r0, #0
 8003ccc:	d05e      	beq.n	8003d8c <prvProcessReceivedCommands+0x134>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2228      	movs	r2, #40	; 0x28
 8003cd2:	5c9b      	ldrb	r3, [r3, r2]
 8003cd4:	001a      	movs	r2, r3
 8003cd6:	2304      	movs	r3, #4
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d00a      	beq.n	8003cf2 <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003cdc:	1d3b      	adds	r3, r7, #4
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	18d1      	adds	r1, r2, r3
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	0018      	movs	r0, r3
 8003cec:	f7ff fe80 	bl	80039f0 <prvReloadTimer>
 8003cf0:	e008      	b.n	8003d04 <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2228      	movs	r2, #40	; 0x28
 8003cf6:	5c9b      	ldrb	r3, [r3, r2]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	4393      	bics	r3, r2
 8003cfc:	b2d9      	uxtb	r1, r3
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2228      	movs	r2, #40	; 0x28
 8003d02:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	0010      	movs	r0, r2
 8003d0c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003d0e:	e03d      	b.n	8003d8c <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2228      	movs	r2, #40	; 0x28
 8003d14:	5c9b      	ldrb	r3, [r3, r2]
 8003d16:	2201      	movs	r2, #1
 8003d18:	4393      	bics	r3, r2
 8003d1a:	b2d9      	uxtb	r1, r3
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	2228      	movs	r2, #40	; 0x28
 8003d20:	5499      	strb	r1, [r3, r2]
                        break;
 8003d22:	e033      	b.n	8003d8c <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	2228      	movs	r2, #40	; 0x28
 8003d28:	5c9b      	ldrb	r3, [r3, r2]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	b2d9      	uxtb	r1, r3
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2228      	movs	r2, #40	; 0x28
 8003d34:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003d36:	1d3b      	adds	r3, r7, #4
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <prvProcessReceivedCommands+0xf2>
 8003d46:	b672      	cpsid	i
 8003d48:	e7fe      	b.n	8003d48 <prvProcessReceivedCommands+0xf0>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	18d1      	adds	r1, r2, r3
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	6978      	ldr	r0, [r7, #20]
 8003d58:	f7ff ff3c 	bl	8003bd4 <prvInsertTimerInActiveList>
                        break;
 8003d5c:	e016      	b.n	8003d8c <prvProcessReceivedCommands+0x134>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2228      	movs	r2, #40	; 0x28
 8003d62:	5c9b      	ldrb	r3, [r3, r2]
 8003d64:	001a      	movs	r2, r3
 8003d66:	2302      	movs	r3, #2
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d104      	bne.n	8003d76 <prvProcessReceivedCommands+0x11e>
                            {
                                vPortFree( pxTimer );
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f000 fa5e 	bl	8004230 <vPortFree>
 8003d74:	e00a      	b.n	8003d8c <prvProcessReceivedCommands+0x134>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2228      	movs	r2, #40	; 0x28
 8003d7a:	5c9b      	ldrb	r3, [r3, r2]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	4393      	bics	r3, r2
 8003d80:	b2d9      	uxtb	r1, r3
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2228      	movs	r2, #40	; 0x28
 8003d86:	5499      	strb	r1, [r3, r2]
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003d88:	e000      	b.n	8003d8c <prvProcessReceivedCommands+0x134>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003d8a:	46c0      	nop			; (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d8c:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <prvProcessReceivedCommands+0x158>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	1d39      	adds	r1, r7, #4
 8003d92:	2200      	movs	r2, #0
 8003d94:	0018      	movs	r0, r3
 8003d96:	f7fe fca0 	bl	80026da <xQueueReceive>
 8003d9a:	1e03      	subs	r3, r0, #0
 8003d9c:	d000      	beq.n	8003da0 <prvProcessReceivedCommands+0x148>
 8003d9e:	e75f      	b.n	8003c60 <prvProcessReceivedCommands+0x8>
        }
    }
 8003da0:	46c0      	nop			; (mov r8, r8)
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	46bd      	mov	sp, r7
 8003da6:	b006      	add	sp, #24
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	08004e34 	.word	0x08004e34
 8003db0:	20000308 	.word	0x20000308

08003db4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003dba:	e00b      	b.n	8003dd4 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <prvSwitchTimerLists+0x48>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	425a      	negs	r2, r3
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	0011      	movs	r1, r2
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f7ff fe30 	bl	8003a34 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003dd4:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <prvSwitchTimerLists+0x48>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1ee      	bne.n	8003dbc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003dde:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <prvSwitchTimerLists+0x48>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <prvSwitchTimerLists+0x4c>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <prvSwitchTimerLists+0x48>)
 8003dea:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8003dec:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <prvSwitchTimerLists+0x4c>)
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	601a      	str	r2, [r3, #0]
    }
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b002      	add	sp, #8
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	20000300 	.word	0x20000300
 8003e00:	20000304 	.word	0x20000304

08003e04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003e08:	f000 f8d2 	bl	8003fb0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003e0c:	4b14      	ldr	r3, [pc, #80]	; (8003e60 <prvCheckForValidListAndQueue+0x5c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d120      	bne.n	8003e56 <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8003e14:	4b13      	ldr	r3, [pc, #76]	; (8003e64 <prvCheckForValidListAndQueue+0x60>)
 8003e16:	0018      	movs	r0, r3
 8003e18:	f7fe faca 	bl	80023b0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003e1c:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <prvCheckForValidListAndQueue+0x64>)
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f7fe fac6 	bl	80023b0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003e24:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <prvCheckForValidListAndQueue+0x68>)
 8003e26:	4a0f      	ldr	r2, [pc, #60]	; (8003e64 <prvCheckForValidListAndQueue+0x60>)
 8003e28:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003e2a:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <prvCheckForValidListAndQueue+0x6c>)
 8003e2c:	4a0e      	ldr	r2, [pc, #56]	; (8003e68 <prvCheckForValidListAndQueue+0x64>)
 8003e2e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003e30:	2200      	movs	r2, #0
 8003e32:	210c      	movs	r1, #12
 8003e34:	2005      	movs	r0, #5
 8003e36:	f7fe fbcb 	bl	80025d0 <xQueueGenericCreate>
 8003e3a:	0002      	movs	r2, r0
 8003e3c:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <prvCheckForValidListAndQueue+0x5c>)
 8003e3e:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003e40:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <prvCheckForValidListAndQueue+0x5c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d006      	beq.n	8003e56 <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <prvCheckForValidListAndQueue+0x5c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a09      	ldr	r2, [pc, #36]	; (8003e74 <prvCheckForValidListAndQueue+0x70>)
 8003e4e:	0011      	movs	r1, r2
 8003e50:	0018      	movs	r0, r3
 8003e52:	f7fe fd91 	bl	8002978 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003e56:	f000 f8bd 	bl	8003fd4 <vPortExitCritical>
    }
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20000308 	.word	0x20000308
 8003e64:	200002d8 	.word	0x200002d8
 8003e68:	200002ec 	.word	0x200002ec
 8003e6c:	20000300 	.word	0x20000300
 8003e70:	20000304 	.word	0x20000304
 8003e74:	08004df4 	.word	0x08004df4

08003e78 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	3b04      	subs	r3, #4
 8003e88:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2280      	movs	r2, #128	; 0x80
 8003e8e:	0452      	lsls	r2, r2, #17
 8003e90:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3b04      	subs	r3, #4
 8003e96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	3b04      	subs	r3, #4
 8003ea2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8003ea4:	4a08      	ldr	r2, [pc, #32]	; (8003ec8 <pxPortInitialiseStack+0x50>)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	3b14      	subs	r3, #20
 8003eae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	3b20      	subs	r3, #32
 8003eba:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
}
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	b004      	add	sp, #16
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	08003ecd 	.word	0x08003ecd

08003ecc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003ed6:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <prvTaskExitError+0x2c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3301      	adds	r3, #1
 8003edc:	d001      	beq.n	8003ee2 <prvTaskExitError+0x16>
 8003ede:	b672      	cpsid	i
 8003ee0:	e7fe      	b.n	8003ee0 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8003ee2:	b672      	cpsid	i

    while( ulDummy == 0 )
 8003ee4:	46c0      	nop			; (mov r8, r8)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0fc      	beq.n	8003ee6 <prvTaskExitError+0x1a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003eec:	46c0      	nop			; (mov r8, r8)
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b002      	add	sp, #8
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	20000010 	.word	0x20000010

08003efc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8003f00:	46c0      	nop			; (mov r8, r8)
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f10 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8003f10:	4a0b      	ldr	r2, [pc, #44]	; (8003f40 <pxCurrentTCBConst2>)
 8003f12:	6813      	ldr	r3, [r2, #0]
 8003f14:	6818      	ldr	r0, [r3, #0]
 8003f16:	3020      	adds	r0, #32
 8003f18:	f380 8809 	msr	PSP, r0
 8003f1c:	2002      	movs	r0, #2
 8003f1e:	f380 8814 	msr	CONTROL, r0
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003f28:	46ae      	mov	lr, r5
 8003f2a:	bc08      	pop	{r3}
 8003f2c:	bc04      	pop	{r2}
 8003f2e:	b662      	cpsie	i
 8003f30:	4718      	bx	r3
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	46c0      	nop			; (mov r8, r8)
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	46c0      	nop			; (mov r8, r8)
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	46c0      	nop			; (mov r8, r8)
 8003f3e:	46c0      	nop			; (mov r8, r8)

08003f40 <pxCurrentTCBConst2>:
 8003f40:	200001d4 	.word	0x200001d4
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8003f44:	46c0      	nop			; (mov r8, r8)
 8003f46:	46c0      	nop			; (mov r8, r8)

08003f48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003f4c:	4b0e      	ldr	r3, [pc, #56]	; (8003f88 <xPortStartScheduler+0x40>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	4b0d      	ldr	r3, [pc, #52]	; (8003f88 <xPortStartScheduler+0x40>)
 8003f52:	21ff      	movs	r1, #255	; 0xff
 8003f54:	0409      	lsls	r1, r1, #16
 8003f56:	430a      	orrs	r2, r1
 8003f58:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <xPortStartScheduler+0x40>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <xPortStartScheduler+0x40>)
 8003f60:	21ff      	movs	r1, #255	; 0xff
 8003f62:	0609      	lsls	r1, r1, #24
 8003f64:	430a      	orrs	r2, r1
 8003f66:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003f68:	f000 f898 	bl	800409c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003f6c:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <xPortStartScheduler+0x44>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8003f72:	f7ff ffcd 	bl	8003f10 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003f76:	f7ff f9ef 	bl	8003358 <vTaskSwitchContext>
    prvTaskExitError();
 8003f7a:	f7ff ffa7 	bl	8003ecc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	0018      	movs	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	e000ed20 	.word	0xe000ed20
 8003f8c:	20000010 	.word	0x20000010

08003f90 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f94:	4b05      	ldr	r3, [pc, #20]	; (8003fac <vPortYield+0x1c>)
 8003f96:	2280      	movs	r2, #128	; 0x80
 8003f98:	0552      	lsls	r2, r2, #21
 8003f9a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8003f9c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8003fa0:	f3bf 8f6f 	isb	sy
}
 8003fa4:	46c0      	nop			; (mov r8, r8)
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	e000ed04 	.word	0xe000ed04

08003fb0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003fb4:	b672      	cpsid	i
    uxCriticalNesting++;
 8003fb6:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <vPortEnterCritical+0x20>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	4b04      	ldr	r3, [pc, #16]	; (8003fd0 <vPortEnterCritical+0x20>)
 8003fbe:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8003fc0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8003fc4:	f3bf 8f6f 	isb	sy
}
 8003fc8:	46c0      	nop			; (mov r8, r8)
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	20000010 	.word	0x20000010

08003fd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003fd8:	4b09      	ldr	r3, [pc, #36]	; (8004000 <vPortExitCritical+0x2c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <vPortExitCritical+0x10>
 8003fe0:	b672      	cpsid	i
 8003fe2:	e7fe      	b.n	8003fe2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003fe4:	4b06      	ldr	r3, [pc, #24]	; (8004000 <vPortExitCritical+0x2c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	1e5a      	subs	r2, r3, #1
 8003fea:	4b05      	ldr	r3, [pc, #20]	; (8004000 <vPortExitCritical+0x2c>)
 8003fec:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8003fee:	4b04      	ldr	r3, [pc, #16]	; (8004000 <vPortExitCritical+0x2c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d100      	bne.n	8003ff8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8003ff6:	b662      	cpsie	i
    }
}
 8003ff8:	46c0      	nop			; (mov r8, r8)
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	20000010 	.word	0x20000010

08004004 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8004004:	f3ef 8010 	mrs	r0, PRIMASK
 8004008:	b672      	cpsid	i
 800400a:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 800400c:	46c0      	nop			; (mov r8, r8)
 800400e:	0018      	movs	r0, r3

08004010 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8004010:	f380 8810 	msr	PRIMASK, r0
 8004014:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8004016:	46c0      	nop			; (mov r8, r8)
	...

08004020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004020:	f3ef 8009 	mrs	r0, PSP
 8004024:	4b0e      	ldr	r3, [pc, #56]	; (8004060 <pxCurrentTCBConst>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	3820      	subs	r0, #32
 800402a:	6010      	str	r0, [r2, #0]
 800402c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800402e:	4644      	mov	r4, r8
 8004030:	464d      	mov	r5, r9
 8004032:	4656      	mov	r6, sl
 8004034:	465f      	mov	r7, fp
 8004036:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004038:	b508      	push	{r3, lr}
 800403a:	b672      	cpsid	i
 800403c:	f7ff f98c 	bl	8003358 <vTaskSwitchContext>
 8004040:	b662      	cpsie	i
 8004042:	bc0c      	pop	{r2, r3}
 8004044:	6811      	ldr	r1, [r2, #0]
 8004046:	6808      	ldr	r0, [r1, #0]
 8004048:	3010      	adds	r0, #16
 800404a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800404c:	46a0      	mov	r8, r4
 800404e:	46a9      	mov	r9, r5
 8004050:	46b2      	mov	sl, r6
 8004052:	46bb      	mov	fp, r7
 8004054:	f380 8809 	msr	PSP, r0
 8004058:	3820      	subs	r0, #32
 800405a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800405c:	4718      	bx	r3
 800405e:	46c0      	nop			; (mov r8, r8)

08004060 <pxCurrentTCBConst>:
 8004060:	200001d4 	.word	0x200001d4
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8004064:	46c0      	nop			; (mov r8, r8)
 8004066:	46c0      	nop			; (mov r8, r8)

08004068 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800406e:	f7ff ffc9 	bl	8004004 <ulSetInterruptMaskFromISR>
 8004072:	0003      	movs	r3, r0
 8004074:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004076:	f7ff f863 	bl	8003140 <xTaskIncrementTick>
 800407a:	1e03      	subs	r3, r0, #0
 800407c:	d003      	beq.n	8004086 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800407e:	4b06      	ldr	r3, [pc, #24]	; (8004098 <SysTick_Handler+0x30>)
 8004080:	2280      	movs	r2, #128	; 0x80
 8004082:	0552      	lsls	r2, r2, #21
 8004084:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	0018      	movs	r0, r3
 800408a:	f7ff ffc1 	bl	8004010 <vClearInterruptMaskFromISR>
}
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	46bd      	mov	sp, r7
 8004092:	b002      	add	sp, #8
 8004094:	bd80      	pop	{r7, pc}
 8004096:	46c0      	nop			; (mov r8, r8)
 8004098:	e000ed04 	.word	0xe000ed04

0800409c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <vPortSetupTimerInterrupt+0x34>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040a6:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <vPortSetupTimerInterrupt+0x38>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040ac:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <vPortSetupTimerInterrupt+0x3c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	22fa      	movs	r2, #250	; 0xfa
 80040b2:	0091      	lsls	r1, r2, #2
 80040b4:	0018      	movs	r0, r3
 80040b6:	f7fc f831 	bl	800011c <__udivsi3>
 80040ba:	0003      	movs	r3, r0
 80040bc:	001a      	movs	r2, r3
 80040be:	4b07      	ldr	r3, [pc, #28]	; (80040dc <vPortSetupTimerInterrupt+0x40>)
 80040c0:	3a01      	subs	r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80040c4:	4b02      	ldr	r3, [pc, #8]	; (80040d0 <vPortSetupTimerInterrupt+0x34>)
 80040c6:	2207      	movs	r2, #7
 80040c8:	601a      	str	r2, [r3, #0]
}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	e000e010 	.word	0xe000e010
 80040d4:	e000e018 	.word	0xe000e018
 80040d8:	20000000 	.word	0x20000000
 80040dc:	e000e014 	.word	0xe000e014

080040e0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80040ec:	f7fe ff26 	bl	8002f3c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80040f0:	4b4a      	ldr	r3, [pc, #296]	; (800421c <pvPortMalloc+0x13c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80040f8:	f000 f8e6 	bl	80042c8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d012      	beq.n	8004128 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004102:	2208      	movs	r2, #8
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2107      	movs	r1, #7
 8004108:	400b      	ands	r3, r1
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	3308      	adds	r3, #8
 800410e:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	43db      	mvns	r3, r3
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	429a      	cmp	r2, r3
 8004118:	d804      	bhi.n	8004124 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	18d3      	adds	r3, r2, r3
 8004120:	607b      	str	r3, [r7, #4]
 8004122:	e001      	b.n	8004128 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004124:	2300      	movs	r3, #0
 8004126:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	db68      	blt.n	8004200 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d065      	beq.n	8004200 <pvPortMalloc+0x120>
 8004134:	4b3a      	ldr	r3, [pc, #232]	; (8004220 <pvPortMalloc+0x140>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	429a      	cmp	r2, r3
 800413c:	d860      	bhi.n	8004200 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800413e:	4b39      	ldr	r3, [pc, #228]	; (8004224 <pvPortMalloc+0x144>)
 8004140:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8004142:	4b38      	ldr	r3, [pc, #224]	; (8004224 <pvPortMalloc+0x144>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004148:	e004      	b.n	8004154 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	429a      	cmp	r2, r3
 800415c:	d903      	bls.n	8004166 <pvPortMalloc+0x86>
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f1      	bne.n	800414a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004166:	4b2d      	ldr	r3, [pc, #180]	; (800421c <pvPortMalloc+0x13c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69fa      	ldr	r2, [r7, #28]
 800416c:	429a      	cmp	r2, r3
 800416e:	d047      	beq.n	8004200 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2208      	movs	r2, #8
 8004176:	189b      	adds	r3, r3, r2
 8004178:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	1ad2      	subs	r2, r2, r3
 800418a:	2308      	movs	r3, #8
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	429a      	cmp	r2, r3
 8004190:	d916      	bls.n	80041c0 <pvPortMalloc+0xe0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	18d3      	adds	r3, r2, r3
 8004198:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2207      	movs	r2, #7
 800419e:	4013      	ands	r3, r2
 80041a0:	d001      	beq.n	80041a6 <pvPortMalloc+0xc6>
 80041a2:	b672      	cpsid	i
 80041a4:	e7fe      	b.n	80041a4 <pvPortMalloc+0xc4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	1ad2      	subs	r2, r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	0018      	movs	r0, r3
 80041bc:	f000 f8de 	bl	800437c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80041c0:	4b17      	ldr	r3, [pc, #92]	; (8004220 <pvPortMalloc+0x140>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	1ad2      	subs	r2, r2, r3
 80041ca:	4b15      	ldr	r3, [pc, #84]	; (8004220 <pvPortMalloc+0x140>)
 80041cc:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80041ce:	4b14      	ldr	r3, [pc, #80]	; (8004220 <pvPortMalloc+0x140>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4b15      	ldr	r3, [pc, #84]	; (8004228 <pvPortMalloc+0x148>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d203      	bcs.n	80041e2 <pvPortMalloc+0x102>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80041da:	4b11      	ldr	r3, [pc, #68]	; (8004220 <pvPortMalloc+0x140>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	4b12      	ldr	r3, [pc, #72]	; (8004228 <pvPortMalloc+0x148>)
 80041e0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2280      	movs	r2, #128	; 0x80
 80041e8:	0612      	lsls	r2, r2, #24
 80041ea:	431a      	orrs	r2, r3
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80041f6:	4b0d      	ldr	r3, [pc, #52]	; (800422c <pvPortMalloc+0x14c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	4b0b      	ldr	r3, [pc, #44]	; (800422c <pvPortMalloc+0x14c>)
 80041fe:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004200:	f7fe fea8 	bl	8002f54 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	2207      	movs	r2, #7
 8004208:	4013      	ands	r3, r2
 800420a:	d001      	beq.n	8004210 <pvPortMalloc+0x130>
 800420c:	b672      	cpsid	i
 800420e:	e7fe      	b.n	800420e <pvPortMalloc+0x12e>
    return pvReturn;
 8004210:	697b      	ldr	r3, [r7, #20]
}
 8004212:	0018      	movs	r0, r3
 8004214:	46bd      	mov	sp, r7
 8004216:	b008      	add	sp, #32
 8004218:	bd80      	pop	{r7, pc}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	20001c80 	.word	0x20001c80
 8004220:	20001c84 	.word	0x20001c84
 8004224:	20001c78 	.word	0x20001c78
 8004228:	20001c88 	.word	0x20001c88
 800422c:	20001c8c 	.word	0x20001c8c

08004230 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d039      	beq.n	80042b6 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004242:	2308      	movs	r3, #8
 8004244:	425b      	negs	r3, r3
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	18d3      	adds	r3, r2, r3
 800424a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	db01      	blt.n	800425c <vPortFree+0x2c>
 8004258:	b672      	cpsid	i
 800425a:	e7fe      	b.n	800425a <vPortFree+0x2a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <vPortFree+0x38>
 8004264:	b672      	cpsid	i
 8004266:	e7fe      	b.n	8004266 <vPortFree+0x36>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	0fdb      	lsrs	r3, r3, #31
 800426e:	1c1a      	adds	r2, r3, #0
 8004270:	2301      	movs	r3, #1
 8004272:	4013      	ands	r3, r2
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d01d      	beq.n	80042b6 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d119      	bne.n	80042b6 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	085a      	lsrs	r2, r3, #1
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800428e:	f7fe fe55 	bl	8002f3c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <vPortFree+0x90>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	18d2      	adds	r2, r2, r3
 800429c:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <vPortFree+0x90>)
 800429e:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	0018      	movs	r0, r3
 80042a4:	f000 f86a 	bl	800437c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80042a8:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <vPortFree+0x94>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <vPortFree+0x94>)
 80042b0:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 80042b2:	f7fe fe4f 	bl	8002f54 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	46bd      	mov	sp, r7
 80042ba:	b004      	add	sp, #16
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	20001c84 	.word	0x20001c84
 80042c4:	20001c90 	.word	0x20001c90

080042c8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80042ce:	4b25      	ldr	r3, [pc, #148]	; (8004364 <prvHeapInit+0x9c>)
 80042d0:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80042d2:	4b25      	ldr	r3, [pc, #148]	; (8004368 <prvHeapInit+0xa0>)
 80042d4:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2207      	movs	r2, #7
 80042da:	4013      	ands	r3, r2
 80042dc:	d00c      	beq.n	80042f8 <prvHeapInit+0x30>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	3307      	adds	r3, #7
 80042e2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2207      	movs	r2, #7
 80042e8:	4393      	bics	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	1ad2      	subs	r2, r2, r3
 80042f2:	4b1d      	ldr	r3, [pc, #116]	; (8004368 <prvHeapInit+0xa0>)
 80042f4:	18d3      	adds	r3, r2, r3
 80042f6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042fc:	4b1b      	ldr	r3, [pc, #108]	; (800436c <prvHeapInit+0xa4>)
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004302:	4b1a      	ldr	r3, [pc, #104]	; (800436c <prvHeapInit+0xa4>)
 8004304:	2200      	movs	r2, #0
 8004306:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	18d3      	adds	r3, r2, r3
 800430e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004310:	2208      	movs	r2, #8
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2207      	movs	r2, #7
 800431c:	4393      	bics	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4b13      	ldr	r3, [pc, #76]	; (8004370 <prvHeapInit+0xa8>)
 8004324:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 8004326:	4b12      	ldr	r3, [pc, #72]	; (8004370 <prvHeapInit+0xa8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2200      	movs	r2, #0
 800432c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <prvHeapInit+0xa8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	1ad2      	subs	r2, r2, r3
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004344:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <prvHeapInit+0xa8>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	4b08      	ldr	r3, [pc, #32]	; (8004374 <prvHeapInit+0xac>)
 8004352:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	4b07      	ldr	r3, [pc, #28]	; (8004378 <prvHeapInit+0xb0>)
 800435a:	601a      	str	r2, [r3, #0]
}
 800435c:	46c0      	nop			; (mov r8, r8)
 800435e:	46bd      	mov	sp, r7
 8004360:	b004      	add	sp, #16
 8004362:	bd80      	pop	{r7, pc}
 8004364:	00001964 	.word	0x00001964
 8004368:	20000314 	.word	0x20000314
 800436c:	20001c78 	.word	0x20001c78
 8004370:	20001c80 	.word	0x20001c80
 8004374:	20001c88 	.word	0x20001c88
 8004378:	20001c84 	.word	0x20001c84

0800437c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004384:	4b27      	ldr	r3, [pc, #156]	; (8004424 <prvInsertBlockIntoFreeList+0xa8>)
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	e002      	b.n	8004390 <prvInsertBlockIntoFreeList+0x14>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	429a      	cmp	r2, r3
 8004398:	d8f7      	bhi.n	800438a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	18d3      	adds	r3, r2, r3
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d108      	bne.n	80043be <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	18d2      	adds	r2, r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	18d2      	adds	r2, r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d118      	bne.n	8004404 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4b14      	ldr	r3, [pc, #80]	; (8004428 <prvInsertBlockIntoFreeList+0xac>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d00d      	beq.n	80043fa <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	18d2      	adds	r2, r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	e008      	b.n	800440c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043fa:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <prvInsertBlockIntoFreeList+0xac>)
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	e003      	b.n	800440c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	429a      	cmp	r2, r3
 8004412:	d002      	beq.n	800441a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	46bd      	mov	sp, r7
 800441e:	b004      	add	sp, #16
 8004420:	bd80      	pop	{r7, pc}
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	20001c78 	.word	0x20001c78
 8004428:	20001c80 	.word	0x20001c80

0800442c <__errno>:
 800442c:	4b01      	ldr	r3, [pc, #4]	; (8004434 <__errno+0x8>)
 800442e:	6818      	ldr	r0, [r3, #0]
 8004430:	4770      	bx	lr
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	20000014 	.word	0x20000014

08004438 <__libc_init_array>:
 8004438:	b570      	push	{r4, r5, r6, lr}
 800443a:	2600      	movs	r6, #0
 800443c:	4d0c      	ldr	r5, [pc, #48]	; (8004470 <__libc_init_array+0x38>)
 800443e:	4c0d      	ldr	r4, [pc, #52]	; (8004474 <__libc_init_array+0x3c>)
 8004440:	1b64      	subs	r4, r4, r5
 8004442:	10a4      	asrs	r4, r4, #2
 8004444:	42a6      	cmp	r6, r4
 8004446:	d109      	bne.n	800445c <__libc_init_array+0x24>
 8004448:	2600      	movs	r6, #0
 800444a:	f000 fc8b 	bl	8004d64 <_init>
 800444e:	4d0a      	ldr	r5, [pc, #40]	; (8004478 <__libc_init_array+0x40>)
 8004450:	4c0a      	ldr	r4, [pc, #40]	; (800447c <__libc_init_array+0x44>)
 8004452:	1b64      	subs	r4, r4, r5
 8004454:	10a4      	asrs	r4, r4, #2
 8004456:	42a6      	cmp	r6, r4
 8004458:	d105      	bne.n	8004466 <__libc_init_array+0x2e>
 800445a:	bd70      	pop	{r4, r5, r6, pc}
 800445c:	00b3      	lsls	r3, r6, #2
 800445e:	58eb      	ldr	r3, [r5, r3]
 8004460:	4798      	blx	r3
 8004462:	3601      	adds	r6, #1
 8004464:	e7ee      	b.n	8004444 <__libc_init_array+0xc>
 8004466:	00b3      	lsls	r3, r6, #2
 8004468:	58eb      	ldr	r3, [r5, r3]
 800446a:	4798      	blx	r3
 800446c:	3601      	adds	r6, #1
 800446e:	e7f2      	b.n	8004456 <__libc_init_array+0x1e>
 8004470:	08004e90 	.word	0x08004e90
 8004474:	08004e90 	.word	0x08004e90
 8004478:	08004e90 	.word	0x08004e90
 800447c:	08004e94 	.word	0x08004e94

08004480 <memcpy>:
 8004480:	2300      	movs	r3, #0
 8004482:	b510      	push	{r4, lr}
 8004484:	429a      	cmp	r2, r3
 8004486:	d100      	bne.n	800448a <memcpy+0xa>
 8004488:	bd10      	pop	{r4, pc}
 800448a:	5ccc      	ldrb	r4, [r1, r3]
 800448c:	54c4      	strb	r4, [r0, r3]
 800448e:	3301      	adds	r3, #1
 8004490:	e7f8      	b.n	8004484 <memcpy+0x4>

08004492 <memset>:
 8004492:	0003      	movs	r3, r0
 8004494:	1882      	adds	r2, r0, r2
 8004496:	4293      	cmp	r3, r2
 8004498:	d100      	bne.n	800449c <memset+0xa>
 800449a:	4770      	bx	lr
 800449c:	7019      	strb	r1, [r3, #0]
 800449e:	3301      	adds	r3, #1
 80044a0:	e7f9      	b.n	8004496 <memset+0x4>
	...

080044a4 <siprintf>:
 80044a4:	b40e      	push	{r1, r2, r3}
 80044a6:	b500      	push	{lr}
 80044a8:	490b      	ldr	r1, [pc, #44]	; (80044d8 <siprintf+0x34>)
 80044aa:	b09c      	sub	sp, #112	; 0x70
 80044ac:	ab1d      	add	r3, sp, #116	; 0x74
 80044ae:	9002      	str	r0, [sp, #8]
 80044b0:	9006      	str	r0, [sp, #24]
 80044b2:	9107      	str	r1, [sp, #28]
 80044b4:	9104      	str	r1, [sp, #16]
 80044b6:	4809      	ldr	r0, [pc, #36]	; (80044dc <siprintf+0x38>)
 80044b8:	4909      	ldr	r1, [pc, #36]	; (80044e0 <siprintf+0x3c>)
 80044ba:	cb04      	ldmia	r3!, {r2}
 80044bc:	9105      	str	r1, [sp, #20]
 80044be:	6800      	ldr	r0, [r0, #0]
 80044c0:	a902      	add	r1, sp, #8
 80044c2:	9301      	str	r3, [sp, #4]
 80044c4:	f000 f870 	bl	80045a8 <_svfiprintf_r>
 80044c8:	2300      	movs	r3, #0
 80044ca:	9a02      	ldr	r2, [sp, #8]
 80044cc:	7013      	strb	r3, [r2, #0]
 80044ce:	b01c      	add	sp, #112	; 0x70
 80044d0:	bc08      	pop	{r3}
 80044d2:	b003      	add	sp, #12
 80044d4:	4718      	bx	r3
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	7fffffff 	.word	0x7fffffff
 80044dc:	20000014 	.word	0x20000014
 80044e0:	ffff0208 	.word	0xffff0208

080044e4 <__ssputs_r>:
 80044e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044e6:	688e      	ldr	r6, [r1, #8]
 80044e8:	b085      	sub	sp, #20
 80044ea:	0007      	movs	r7, r0
 80044ec:	000c      	movs	r4, r1
 80044ee:	9203      	str	r2, [sp, #12]
 80044f0:	9301      	str	r3, [sp, #4]
 80044f2:	429e      	cmp	r6, r3
 80044f4:	d83c      	bhi.n	8004570 <__ssputs_r+0x8c>
 80044f6:	2390      	movs	r3, #144	; 0x90
 80044f8:	898a      	ldrh	r2, [r1, #12]
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	421a      	tst	r2, r3
 80044fe:	d034      	beq.n	800456a <__ssputs_r+0x86>
 8004500:	6909      	ldr	r1, [r1, #16]
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	6960      	ldr	r0, [r4, #20]
 8004506:	1a5b      	subs	r3, r3, r1
 8004508:	9302      	str	r3, [sp, #8]
 800450a:	2303      	movs	r3, #3
 800450c:	4343      	muls	r3, r0
 800450e:	0fdd      	lsrs	r5, r3, #31
 8004510:	18ed      	adds	r5, r5, r3
 8004512:	9b01      	ldr	r3, [sp, #4]
 8004514:	9802      	ldr	r0, [sp, #8]
 8004516:	3301      	adds	r3, #1
 8004518:	181b      	adds	r3, r3, r0
 800451a:	106d      	asrs	r5, r5, #1
 800451c:	42ab      	cmp	r3, r5
 800451e:	d900      	bls.n	8004522 <__ssputs_r+0x3e>
 8004520:	001d      	movs	r5, r3
 8004522:	0553      	lsls	r3, r2, #21
 8004524:	d532      	bpl.n	800458c <__ssputs_r+0xa8>
 8004526:	0029      	movs	r1, r5
 8004528:	0038      	movs	r0, r7
 800452a:	f000 fb49 	bl	8004bc0 <_malloc_r>
 800452e:	1e06      	subs	r6, r0, #0
 8004530:	d109      	bne.n	8004546 <__ssputs_r+0x62>
 8004532:	230c      	movs	r3, #12
 8004534:	603b      	str	r3, [r7, #0]
 8004536:	2340      	movs	r3, #64	; 0x40
 8004538:	2001      	movs	r0, #1
 800453a:	89a2      	ldrh	r2, [r4, #12]
 800453c:	4240      	negs	r0, r0
 800453e:	4313      	orrs	r3, r2
 8004540:	81a3      	strh	r3, [r4, #12]
 8004542:	b005      	add	sp, #20
 8004544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004546:	9a02      	ldr	r2, [sp, #8]
 8004548:	6921      	ldr	r1, [r4, #16]
 800454a:	f7ff ff99 	bl	8004480 <memcpy>
 800454e:	89a3      	ldrh	r3, [r4, #12]
 8004550:	4a14      	ldr	r2, [pc, #80]	; (80045a4 <__ssputs_r+0xc0>)
 8004552:	401a      	ands	r2, r3
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	4313      	orrs	r3, r2
 8004558:	81a3      	strh	r3, [r4, #12]
 800455a:	9b02      	ldr	r3, [sp, #8]
 800455c:	6126      	str	r6, [r4, #16]
 800455e:	18f6      	adds	r6, r6, r3
 8004560:	6026      	str	r6, [r4, #0]
 8004562:	6165      	str	r5, [r4, #20]
 8004564:	9e01      	ldr	r6, [sp, #4]
 8004566:	1aed      	subs	r5, r5, r3
 8004568:	60a5      	str	r5, [r4, #8]
 800456a:	9b01      	ldr	r3, [sp, #4]
 800456c:	429e      	cmp	r6, r3
 800456e:	d900      	bls.n	8004572 <__ssputs_r+0x8e>
 8004570:	9e01      	ldr	r6, [sp, #4]
 8004572:	0032      	movs	r2, r6
 8004574:	9903      	ldr	r1, [sp, #12]
 8004576:	6820      	ldr	r0, [r4, #0]
 8004578:	f000 faa3 	bl	8004ac2 <memmove>
 800457c:	68a3      	ldr	r3, [r4, #8]
 800457e:	2000      	movs	r0, #0
 8004580:	1b9b      	subs	r3, r3, r6
 8004582:	60a3      	str	r3, [r4, #8]
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	199e      	adds	r6, r3, r6
 8004588:	6026      	str	r6, [r4, #0]
 800458a:	e7da      	b.n	8004542 <__ssputs_r+0x5e>
 800458c:	002a      	movs	r2, r5
 800458e:	0038      	movs	r0, r7
 8004590:	f000 fb8c 	bl	8004cac <_realloc_r>
 8004594:	1e06      	subs	r6, r0, #0
 8004596:	d1e0      	bne.n	800455a <__ssputs_r+0x76>
 8004598:	0038      	movs	r0, r7
 800459a:	6921      	ldr	r1, [r4, #16]
 800459c:	f000 faa4 	bl	8004ae8 <_free_r>
 80045a0:	e7c7      	b.n	8004532 <__ssputs_r+0x4e>
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	fffffb7f 	.word	0xfffffb7f

080045a8 <_svfiprintf_r>:
 80045a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045aa:	b0a1      	sub	sp, #132	; 0x84
 80045ac:	9003      	str	r0, [sp, #12]
 80045ae:	001d      	movs	r5, r3
 80045b0:	898b      	ldrh	r3, [r1, #12]
 80045b2:	000f      	movs	r7, r1
 80045b4:	0016      	movs	r6, r2
 80045b6:	061b      	lsls	r3, r3, #24
 80045b8:	d511      	bpl.n	80045de <_svfiprintf_r+0x36>
 80045ba:	690b      	ldr	r3, [r1, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10e      	bne.n	80045de <_svfiprintf_r+0x36>
 80045c0:	2140      	movs	r1, #64	; 0x40
 80045c2:	f000 fafd 	bl	8004bc0 <_malloc_r>
 80045c6:	6038      	str	r0, [r7, #0]
 80045c8:	6138      	str	r0, [r7, #16]
 80045ca:	2800      	cmp	r0, #0
 80045cc:	d105      	bne.n	80045da <_svfiprintf_r+0x32>
 80045ce:	230c      	movs	r3, #12
 80045d0:	9a03      	ldr	r2, [sp, #12]
 80045d2:	3801      	subs	r0, #1
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	b021      	add	sp, #132	; 0x84
 80045d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045da:	2340      	movs	r3, #64	; 0x40
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	2300      	movs	r3, #0
 80045e0:	ac08      	add	r4, sp, #32
 80045e2:	6163      	str	r3, [r4, #20]
 80045e4:	3320      	adds	r3, #32
 80045e6:	7663      	strb	r3, [r4, #25]
 80045e8:	3310      	adds	r3, #16
 80045ea:	76a3      	strb	r3, [r4, #26]
 80045ec:	9507      	str	r5, [sp, #28]
 80045ee:	0035      	movs	r5, r6
 80045f0:	782b      	ldrb	r3, [r5, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <_svfiprintf_r+0x52>
 80045f6:	2b25      	cmp	r3, #37	; 0x25
 80045f8:	d147      	bne.n	800468a <_svfiprintf_r+0xe2>
 80045fa:	1bab      	subs	r3, r5, r6
 80045fc:	9305      	str	r3, [sp, #20]
 80045fe:	42b5      	cmp	r5, r6
 8004600:	d00c      	beq.n	800461c <_svfiprintf_r+0x74>
 8004602:	0032      	movs	r2, r6
 8004604:	0039      	movs	r1, r7
 8004606:	9803      	ldr	r0, [sp, #12]
 8004608:	f7ff ff6c 	bl	80044e4 <__ssputs_r>
 800460c:	1c43      	adds	r3, r0, #1
 800460e:	d100      	bne.n	8004612 <_svfiprintf_r+0x6a>
 8004610:	e0ae      	b.n	8004770 <_svfiprintf_r+0x1c8>
 8004612:	6962      	ldr	r2, [r4, #20]
 8004614:	9b05      	ldr	r3, [sp, #20]
 8004616:	4694      	mov	ip, r2
 8004618:	4463      	add	r3, ip
 800461a:	6163      	str	r3, [r4, #20]
 800461c:	782b      	ldrb	r3, [r5, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d100      	bne.n	8004624 <_svfiprintf_r+0x7c>
 8004622:	e0a5      	b.n	8004770 <_svfiprintf_r+0x1c8>
 8004624:	2201      	movs	r2, #1
 8004626:	2300      	movs	r3, #0
 8004628:	4252      	negs	r2, r2
 800462a:	6062      	str	r2, [r4, #4]
 800462c:	a904      	add	r1, sp, #16
 800462e:	3254      	adds	r2, #84	; 0x54
 8004630:	1852      	adds	r2, r2, r1
 8004632:	1c6e      	adds	r6, r5, #1
 8004634:	6023      	str	r3, [r4, #0]
 8004636:	60e3      	str	r3, [r4, #12]
 8004638:	60a3      	str	r3, [r4, #8]
 800463a:	7013      	strb	r3, [r2, #0]
 800463c:	65a3      	str	r3, [r4, #88]	; 0x58
 800463e:	2205      	movs	r2, #5
 8004640:	7831      	ldrb	r1, [r6, #0]
 8004642:	4854      	ldr	r0, [pc, #336]	; (8004794 <_svfiprintf_r+0x1ec>)
 8004644:	f000 fa32 	bl	8004aac <memchr>
 8004648:	1c75      	adds	r5, r6, #1
 800464a:	2800      	cmp	r0, #0
 800464c:	d11f      	bne.n	800468e <_svfiprintf_r+0xe6>
 800464e:	6822      	ldr	r2, [r4, #0]
 8004650:	06d3      	lsls	r3, r2, #27
 8004652:	d504      	bpl.n	800465e <_svfiprintf_r+0xb6>
 8004654:	2353      	movs	r3, #83	; 0x53
 8004656:	a904      	add	r1, sp, #16
 8004658:	185b      	adds	r3, r3, r1
 800465a:	2120      	movs	r1, #32
 800465c:	7019      	strb	r1, [r3, #0]
 800465e:	0713      	lsls	r3, r2, #28
 8004660:	d504      	bpl.n	800466c <_svfiprintf_r+0xc4>
 8004662:	2353      	movs	r3, #83	; 0x53
 8004664:	a904      	add	r1, sp, #16
 8004666:	185b      	adds	r3, r3, r1
 8004668:	212b      	movs	r1, #43	; 0x2b
 800466a:	7019      	strb	r1, [r3, #0]
 800466c:	7833      	ldrb	r3, [r6, #0]
 800466e:	2b2a      	cmp	r3, #42	; 0x2a
 8004670:	d016      	beq.n	80046a0 <_svfiprintf_r+0xf8>
 8004672:	0035      	movs	r5, r6
 8004674:	2100      	movs	r1, #0
 8004676:	200a      	movs	r0, #10
 8004678:	68e3      	ldr	r3, [r4, #12]
 800467a:	782a      	ldrb	r2, [r5, #0]
 800467c:	1c6e      	adds	r6, r5, #1
 800467e:	3a30      	subs	r2, #48	; 0x30
 8004680:	2a09      	cmp	r2, #9
 8004682:	d94e      	bls.n	8004722 <_svfiprintf_r+0x17a>
 8004684:	2900      	cmp	r1, #0
 8004686:	d111      	bne.n	80046ac <_svfiprintf_r+0x104>
 8004688:	e017      	b.n	80046ba <_svfiprintf_r+0x112>
 800468a:	3501      	adds	r5, #1
 800468c:	e7b0      	b.n	80045f0 <_svfiprintf_r+0x48>
 800468e:	4b41      	ldr	r3, [pc, #260]	; (8004794 <_svfiprintf_r+0x1ec>)
 8004690:	6822      	ldr	r2, [r4, #0]
 8004692:	1ac0      	subs	r0, r0, r3
 8004694:	2301      	movs	r3, #1
 8004696:	4083      	lsls	r3, r0
 8004698:	4313      	orrs	r3, r2
 800469a:	002e      	movs	r6, r5
 800469c:	6023      	str	r3, [r4, #0]
 800469e:	e7ce      	b.n	800463e <_svfiprintf_r+0x96>
 80046a0:	9b07      	ldr	r3, [sp, #28]
 80046a2:	1d19      	adds	r1, r3, #4
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	9107      	str	r1, [sp, #28]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	db01      	blt.n	80046b0 <_svfiprintf_r+0x108>
 80046ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80046ae:	e004      	b.n	80046ba <_svfiprintf_r+0x112>
 80046b0:	425b      	negs	r3, r3
 80046b2:	60e3      	str	r3, [r4, #12]
 80046b4:	2302      	movs	r3, #2
 80046b6:	4313      	orrs	r3, r2
 80046b8:	6023      	str	r3, [r4, #0]
 80046ba:	782b      	ldrb	r3, [r5, #0]
 80046bc:	2b2e      	cmp	r3, #46	; 0x2e
 80046be:	d10a      	bne.n	80046d6 <_svfiprintf_r+0x12e>
 80046c0:	786b      	ldrb	r3, [r5, #1]
 80046c2:	2b2a      	cmp	r3, #42	; 0x2a
 80046c4:	d135      	bne.n	8004732 <_svfiprintf_r+0x18a>
 80046c6:	9b07      	ldr	r3, [sp, #28]
 80046c8:	3502      	adds	r5, #2
 80046ca:	1d1a      	adds	r2, r3, #4
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	9207      	str	r2, [sp, #28]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	db2b      	blt.n	800472c <_svfiprintf_r+0x184>
 80046d4:	9309      	str	r3, [sp, #36]	; 0x24
 80046d6:	4e30      	ldr	r6, [pc, #192]	; (8004798 <_svfiprintf_r+0x1f0>)
 80046d8:	2203      	movs	r2, #3
 80046da:	0030      	movs	r0, r6
 80046dc:	7829      	ldrb	r1, [r5, #0]
 80046de:	f000 f9e5 	bl	8004aac <memchr>
 80046e2:	2800      	cmp	r0, #0
 80046e4:	d006      	beq.n	80046f4 <_svfiprintf_r+0x14c>
 80046e6:	2340      	movs	r3, #64	; 0x40
 80046e8:	1b80      	subs	r0, r0, r6
 80046ea:	4083      	lsls	r3, r0
 80046ec:	6822      	ldr	r2, [r4, #0]
 80046ee:	3501      	adds	r5, #1
 80046f0:	4313      	orrs	r3, r2
 80046f2:	6023      	str	r3, [r4, #0]
 80046f4:	7829      	ldrb	r1, [r5, #0]
 80046f6:	2206      	movs	r2, #6
 80046f8:	4828      	ldr	r0, [pc, #160]	; (800479c <_svfiprintf_r+0x1f4>)
 80046fa:	1c6e      	adds	r6, r5, #1
 80046fc:	7621      	strb	r1, [r4, #24]
 80046fe:	f000 f9d5 	bl	8004aac <memchr>
 8004702:	2800      	cmp	r0, #0
 8004704:	d03c      	beq.n	8004780 <_svfiprintf_r+0x1d8>
 8004706:	4b26      	ldr	r3, [pc, #152]	; (80047a0 <_svfiprintf_r+0x1f8>)
 8004708:	2b00      	cmp	r3, #0
 800470a:	d125      	bne.n	8004758 <_svfiprintf_r+0x1b0>
 800470c:	2207      	movs	r2, #7
 800470e:	9b07      	ldr	r3, [sp, #28]
 8004710:	3307      	adds	r3, #7
 8004712:	4393      	bics	r3, r2
 8004714:	3308      	adds	r3, #8
 8004716:	9307      	str	r3, [sp, #28]
 8004718:	6963      	ldr	r3, [r4, #20]
 800471a:	9a04      	ldr	r2, [sp, #16]
 800471c:	189b      	adds	r3, r3, r2
 800471e:	6163      	str	r3, [r4, #20]
 8004720:	e765      	b.n	80045ee <_svfiprintf_r+0x46>
 8004722:	4343      	muls	r3, r0
 8004724:	0035      	movs	r5, r6
 8004726:	2101      	movs	r1, #1
 8004728:	189b      	adds	r3, r3, r2
 800472a:	e7a6      	b.n	800467a <_svfiprintf_r+0xd2>
 800472c:	2301      	movs	r3, #1
 800472e:	425b      	negs	r3, r3
 8004730:	e7d0      	b.n	80046d4 <_svfiprintf_r+0x12c>
 8004732:	2300      	movs	r3, #0
 8004734:	200a      	movs	r0, #10
 8004736:	001a      	movs	r2, r3
 8004738:	3501      	adds	r5, #1
 800473a:	6063      	str	r3, [r4, #4]
 800473c:	7829      	ldrb	r1, [r5, #0]
 800473e:	1c6e      	adds	r6, r5, #1
 8004740:	3930      	subs	r1, #48	; 0x30
 8004742:	2909      	cmp	r1, #9
 8004744:	d903      	bls.n	800474e <_svfiprintf_r+0x1a6>
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0c5      	beq.n	80046d6 <_svfiprintf_r+0x12e>
 800474a:	9209      	str	r2, [sp, #36]	; 0x24
 800474c:	e7c3      	b.n	80046d6 <_svfiprintf_r+0x12e>
 800474e:	4342      	muls	r2, r0
 8004750:	0035      	movs	r5, r6
 8004752:	2301      	movs	r3, #1
 8004754:	1852      	adds	r2, r2, r1
 8004756:	e7f1      	b.n	800473c <_svfiprintf_r+0x194>
 8004758:	ab07      	add	r3, sp, #28
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	003a      	movs	r2, r7
 800475e:	0021      	movs	r1, r4
 8004760:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <_svfiprintf_r+0x1fc>)
 8004762:	9803      	ldr	r0, [sp, #12]
 8004764:	e000      	b.n	8004768 <_svfiprintf_r+0x1c0>
 8004766:	bf00      	nop
 8004768:	9004      	str	r0, [sp, #16]
 800476a:	9b04      	ldr	r3, [sp, #16]
 800476c:	3301      	adds	r3, #1
 800476e:	d1d3      	bne.n	8004718 <_svfiprintf_r+0x170>
 8004770:	89bb      	ldrh	r3, [r7, #12]
 8004772:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004774:	065b      	lsls	r3, r3, #25
 8004776:	d400      	bmi.n	800477a <_svfiprintf_r+0x1d2>
 8004778:	e72d      	b.n	80045d6 <_svfiprintf_r+0x2e>
 800477a:	2001      	movs	r0, #1
 800477c:	4240      	negs	r0, r0
 800477e:	e72a      	b.n	80045d6 <_svfiprintf_r+0x2e>
 8004780:	ab07      	add	r3, sp, #28
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	003a      	movs	r2, r7
 8004786:	0021      	movs	r1, r4
 8004788:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <_svfiprintf_r+0x1fc>)
 800478a:	9803      	ldr	r0, [sp, #12]
 800478c:	f000 f87c 	bl	8004888 <_printf_i>
 8004790:	e7ea      	b.n	8004768 <_svfiprintf_r+0x1c0>
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	08004e5c 	.word	0x08004e5c
 8004798:	08004e62 	.word	0x08004e62
 800479c:	08004e66 	.word	0x08004e66
 80047a0:	00000000 	.word	0x00000000
 80047a4:	080044e5 	.word	0x080044e5

080047a8 <_printf_common>:
 80047a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047aa:	0015      	movs	r5, r2
 80047ac:	9301      	str	r3, [sp, #4]
 80047ae:	688a      	ldr	r2, [r1, #8]
 80047b0:	690b      	ldr	r3, [r1, #16]
 80047b2:	000c      	movs	r4, r1
 80047b4:	9000      	str	r0, [sp, #0]
 80047b6:	4293      	cmp	r3, r2
 80047b8:	da00      	bge.n	80047bc <_printf_common+0x14>
 80047ba:	0013      	movs	r3, r2
 80047bc:	0022      	movs	r2, r4
 80047be:	602b      	str	r3, [r5, #0]
 80047c0:	3243      	adds	r2, #67	; 0x43
 80047c2:	7812      	ldrb	r2, [r2, #0]
 80047c4:	2a00      	cmp	r2, #0
 80047c6:	d001      	beq.n	80047cc <_printf_common+0x24>
 80047c8:	3301      	adds	r3, #1
 80047ca:	602b      	str	r3, [r5, #0]
 80047cc:	6823      	ldr	r3, [r4, #0]
 80047ce:	069b      	lsls	r3, r3, #26
 80047d0:	d502      	bpl.n	80047d8 <_printf_common+0x30>
 80047d2:	682b      	ldr	r3, [r5, #0]
 80047d4:	3302      	adds	r3, #2
 80047d6:	602b      	str	r3, [r5, #0]
 80047d8:	6822      	ldr	r2, [r4, #0]
 80047da:	2306      	movs	r3, #6
 80047dc:	0017      	movs	r7, r2
 80047de:	401f      	ands	r7, r3
 80047e0:	421a      	tst	r2, r3
 80047e2:	d027      	beq.n	8004834 <_printf_common+0x8c>
 80047e4:	0023      	movs	r3, r4
 80047e6:	3343      	adds	r3, #67	; 0x43
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	1e5a      	subs	r2, r3, #1
 80047ec:	4193      	sbcs	r3, r2
 80047ee:	6822      	ldr	r2, [r4, #0]
 80047f0:	0692      	lsls	r2, r2, #26
 80047f2:	d430      	bmi.n	8004856 <_printf_common+0xae>
 80047f4:	0022      	movs	r2, r4
 80047f6:	9901      	ldr	r1, [sp, #4]
 80047f8:	9800      	ldr	r0, [sp, #0]
 80047fa:	9e08      	ldr	r6, [sp, #32]
 80047fc:	3243      	adds	r2, #67	; 0x43
 80047fe:	47b0      	blx	r6
 8004800:	1c43      	adds	r3, r0, #1
 8004802:	d025      	beq.n	8004850 <_printf_common+0xa8>
 8004804:	2306      	movs	r3, #6
 8004806:	6820      	ldr	r0, [r4, #0]
 8004808:	682a      	ldr	r2, [r5, #0]
 800480a:	68e1      	ldr	r1, [r4, #12]
 800480c:	2500      	movs	r5, #0
 800480e:	4003      	ands	r3, r0
 8004810:	2b04      	cmp	r3, #4
 8004812:	d103      	bne.n	800481c <_printf_common+0x74>
 8004814:	1a8d      	subs	r5, r1, r2
 8004816:	43eb      	mvns	r3, r5
 8004818:	17db      	asrs	r3, r3, #31
 800481a:	401d      	ands	r5, r3
 800481c:	68a3      	ldr	r3, [r4, #8]
 800481e:	6922      	ldr	r2, [r4, #16]
 8004820:	4293      	cmp	r3, r2
 8004822:	dd01      	ble.n	8004828 <_printf_common+0x80>
 8004824:	1a9b      	subs	r3, r3, r2
 8004826:	18ed      	adds	r5, r5, r3
 8004828:	2700      	movs	r7, #0
 800482a:	42bd      	cmp	r5, r7
 800482c:	d120      	bne.n	8004870 <_printf_common+0xc8>
 800482e:	2000      	movs	r0, #0
 8004830:	e010      	b.n	8004854 <_printf_common+0xac>
 8004832:	3701      	adds	r7, #1
 8004834:	68e3      	ldr	r3, [r4, #12]
 8004836:	682a      	ldr	r2, [r5, #0]
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	42bb      	cmp	r3, r7
 800483c:	ddd2      	ble.n	80047e4 <_printf_common+0x3c>
 800483e:	0022      	movs	r2, r4
 8004840:	2301      	movs	r3, #1
 8004842:	9901      	ldr	r1, [sp, #4]
 8004844:	9800      	ldr	r0, [sp, #0]
 8004846:	9e08      	ldr	r6, [sp, #32]
 8004848:	3219      	adds	r2, #25
 800484a:	47b0      	blx	r6
 800484c:	1c43      	adds	r3, r0, #1
 800484e:	d1f0      	bne.n	8004832 <_printf_common+0x8a>
 8004850:	2001      	movs	r0, #1
 8004852:	4240      	negs	r0, r0
 8004854:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004856:	2030      	movs	r0, #48	; 0x30
 8004858:	18e1      	adds	r1, r4, r3
 800485a:	3143      	adds	r1, #67	; 0x43
 800485c:	7008      	strb	r0, [r1, #0]
 800485e:	0021      	movs	r1, r4
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	3145      	adds	r1, #69	; 0x45
 8004864:	7809      	ldrb	r1, [r1, #0]
 8004866:	18a2      	adds	r2, r4, r2
 8004868:	3243      	adds	r2, #67	; 0x43
 800486a:	3302      	adds	r3, #2
 800486c:	7011      	strb	r1, [r2, #0]
 800486e:	e7c1      	b.n	80047f4 <_printf_common+0x4c>
 8004870:	0022      	movs	r2, r4
 8004872:	2301      	movs	r3, #1
 8004874:	9901      	ldr	r1, [sp, #4]
 8004876:	9800      	ldr	r0, [sp, #0]
 8004878:	9e08      	ldr	r6, [sp, #32]
 800487a:	321a      	adds	r2, #26
 800487c:	47b0      	blx	r6
 800487e:	1c43      	adds	r3, r0, #1
 8004880:	d0e6      	beq.n	8004850 <_printf_common+0xa8>
 8004882:	3701      	adds	r7, #1
 8004884:	e7d1      	b.n	800482a <_printf_common+0x82>
	...

08004888 <_printf_i>:
 8004888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800488a:	b08b      	sub	sp, #44	; 0x2c
 800488c:	9206      	str	r2, [sp, #24]
 800488e:	000a      	movs	r2, r1
 8004890:	3243      	adds	r2, #67	; 0x43
 8004892:	9307      	str	r3, [sp, #28]
 8004894:	9005      	str	r0, [sp, #20]
 8004896:	9204      	str	r2, [sp, #16]
 8004898:	7e0a      	ldrb	r2, [r1, #24]
 800489a:	000c      	movs	r4, r1
 800489c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800489e:	2a78      	cmp	r2, #120	; 0x78
 80048a0:	d807      	bhi.n	80048b2 <_printf_i+0x2a>
 80048a2:	2a62      	cmp	r2, #98	; 0x62
 80048a4:	d809      	bhi.n	80048ba <_printf_i+0x32>
 80048a6:	2a00      	cmp	r2, #0
 80048a8:	d100      	bne.n	80048ac <_printf_i+0x24>
 80048aa:	e0c1      	b.n	8004a30 <_printf_i+0x1a8>
 80048ac:	2a58      	cmp	r2, #88	; 0x58
 80048ae:	d100      	bne.n	80048b2 <_printf_i+0x2a>
 80048b0:	e08c      	b.n	80049cc <_printf_i+0x144>
 80048b2:	0026      	movs	r6, r4
 80048b4:	3642      	adds	r6, #66	; 0x42
 80048b6:	7032      	strb	r2, [r6, #0]
 80048b8:	e022      	b.n	8004900 <_printf_i+0x78>
 80048ba:	0010      	movs	r0, r2
 80048bc:	3863      	subs	r0, #99	; 0x63
 80048be:	2815      	cmp	r0, #21
 80048c0:	d8f7      	bhi.n	80048b2 <_printf_i+0x2a>
 80048c2:	f7fb fc21 	bl	8000108 <__gnu_thumb1_case_shi>
 80048c6:	0016      	.short	0x0016
 80048c8:	fff6001f 	.word	0xfff6001f
 80048cc:	fff6fff6 	.word	0xfff6fff6
 80048d0:	001ffff6 	.word	0x001ffff6
 80048d4:	fff6fff6 	.word	0xfff6fff6
 80048d8:	fff6fff6 	.word	0xfff6fff6
 80048dc:	003600a8 	.word	0x003600a8
 80048e0:	fff6009a 	.word	0xfff6009a
 80048e4:	00b9fff6 	.word	0x00b9fff6
 80048e8:	0036fff6 	.word	0x0036fff6
 80048ec:	fff6fff6 	.word	0xfff6fff6
 80048f0:	009e      	.short	0x009e
 80048f2:	0026      	movs	r6, r4
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	3642      	adds	r6, #66	; 0x42
 80048f8:	1d11      	adds	r1, r2, #4
 80048fa:	6019      	str	r1, [r3, #0]
 80048fc:	6813      	ldr	r3, [r2, #0]
 80048fe:	7033      	strb	r3, [r6, #0]
 8004900:	2301      	movs	r3, #1
 8004902:	e0a7      	b.n	8004a54 <_printf_i+0x1cc>
 8004904:	6808      	ldr	r0, [r1, #0]
 8004906:	6819      	ldr	r1, [r3, #0]
 8004908:	1d0a      	adds	r2, r1, #4
 800490a:	0605      	lsls	r5, r0, #24
 800490c:	d50b      	bpl.n	8004926 <_printf_i+0x9e>
 800490e:	680d      	ldr	r5, [r1, #0]
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	2d00      	cmp	r5, #0
 8004914:	da03      	bge.n	800491e <_printf_i+0x96>
 8004916:	232d      	movs	r3, #45	; 0x2d
 8004918:	9a04      	ldr	r2, [sp, #16]
 800491a:	426d      	negs	r5, r5
 800491c:	7013      	strb	r3, [r2, #0]
 800491e:	4b61      	ldr	r3, [pc, #388]	; (8004aa4 <_printf_i+0x21c>)
 8004920:	270a      	movs	r7, #10
 8004922:	9303      	str	r3, [sp, #12]
 8004924:	e01b      	b.n	800495e <_printf_i+0xd6>
 8004926:	680d      	ldr	r5, [r1, #0]
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	0641      	lsls	r1, r0, #25
 800492c:	d5f1      	bpl.n	8004912 <_printf_i+0x8a>
 800492e:	b22d      	sxth	r5, r5
 8004930:	e7ef      	b.n	8004912 <_printf_i+0x8a>
 8004932:	680d      	ldr	r5, [r1, #0]
 8004934:	6819      	ldr	r1, [r3, #0]
 8004936:	1d08      	adds	r0, r1, #4
 8004938:	6018      	str	r0, [r3, #0]
 800493a:	062e      	lsls	r6, r5, #24
 800493c:	d501      	bpl.n	8004942 <_printf_i+0xba>
 800493e:	680d      	ldr	r5, [r1, #0]
 8004940:	e003      	b.n	800494a <_printf_i+0xc2>
 8004942:	066d      	lsls	r5, r5, #25
 8004944:	d5fb      	bpl.n	800493e <_printf_i+0xb6>
 8004946:	680d      	ldr	r5, [r1, #0]
 8004948:	b2ad      	uxth	r5, r5
 800494a:	4b56      	ldr	r3, [pc, #344]	; (8004aa4 <_printf_i+0x21c>)
 800494c:	2708      	movs	r7, #8
 800494e:	9303      	str	r3, [sp, #12]
 8004950:	2a6f      	cmp	r2, #111	; 0x6f
 8004952:	d000      	beq.n	8004956 <_printf_i+0xce>
 8004954:	3702      	adds	r7, #2
 8004956:	0023      	movs	r3, r4
 8004958:	2200      	movs	r2, #0
 800495a:	3343      	adds	r3, #67	; 0x43
 800495c:	701a      	strb	r2, [r3, #0]
 800495e:	6863      	ldr	r3, [r4, #4]
 8004960:	60a3      	str	r3, [r4, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	db03      	blt.n	800496e <_printf_i+0xe6>
 8004966:	2204      	movs	r2, #4
 8004968:	6821      	ldr	r1, [r4, #0]
 800496a:	4391      	bics	r1, r2
 800496c:	6021      	str	r1, [r4, #0]
 800496e:	2d00      	cmp	r5, #0
 8004970:	d102      	bne.n	8004978 <_printf_i+0xf0>
 8004972:	9e04      	ldr	r6, [sp, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00c      	beq.n	8004992 <_printf_i+0x10a>
 8004978:	9e04      	ldr	r6, [sp, #16]
 800497a:	0028      	movs	r0, r5
 800497c:	0039      	movs	r1, r7
 800497e:	f7fb fc53 	bl	8000228 <__aeabi_uidivmod>
 8004982:	9b03      	ldr	r3, [sp, #12]
 8004984:	3e01      	subs	r6, #1
 8004986:	5c5b      	ldrb	r3, [r3, r1]
 8004988:	7033      	strb	r3, [r6, #0]
 800498a:	002b      	movs	r3, r5
 800498c:	0005      	movs	r5, r0
 800498e:	429f      	cmp	r7, r3
 8004990:	d9f3      	bls.n	800497a <_printf_i+0xf2>
 8004992:	2f08      	cmp	r7, #8
 8004994:	d109      	bne.n	80049aa <_printf_i+0x122>
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	07db      	lsls	r3, r3, #31
 800499a:	d506      	bpl.n	80049aa <_printf_i+0x122>
 800499c:	6863      	ldr	r3, [r4, #4]
 800499e:	6922      	ldr	r2, [r4, #16]
 80049a0:	4293      	cmp	r3, r2
 80049a2:	dc02      	bgt.n	80049aa <_printf_i+0x122>
 80049a4:	2330      	movs	r3, #48	; 0x30
 80049a6:	3e01      	subs	r6, #1
 80049a8:	7033      	strb	r3, [r6, #0]
 80049aa:	9b04      	ldr	r3, [sp, #16]
 80049ac:	1b9b      	subs	r3, r3, r6
 80049ae:	6123      	str	r3, [r4, #16]
 80049b0:	9b07      	ldr	r3, [sp, #28]
 80049b2:	0021      	movs	r1, r4
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	9805      	ldr	r0, [sp, #20]
 80049b8:	9b06      	ldr	r3, [sp, #24]
 80049ba:	aa09      	add	r2, sp, #36	; 0x24
 80049bc:	f7ff fef4 	bl	80047a8 <_printf_common>
 80049c0:	1c43      	adds	r3, r0, #1
 80049c2:	d14c      	bne.n	8004a5e <_printf_i+0x1d6>
 80049c4:	2001      	movs	r0, #1
 80049c6:	4240      	negs	r0, r0
 80049c8:	b00b      	add	sp, #44	; 0x2c
 80049ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049cc:	3145      	adds	r1, #69	; 0x45
 80049ce:	700a      	strb	r2, [r1, #0]
 80049d0:	4a34      	ldr	r2, [pc, #208]	; (8004aa4 <_printf_i+0x21c>)
 80049d2:	9203      	str	r2, [sp, #12]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	6821      	ldr	r1, [r4, #0]
 80049d8:	ca20      	ldmia	r2!, {r5}
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	0608      	lsls	r0, r1, #24
 80049de:	d516      	bpl.n	8004a0e <_printf_i+0x186>
 80049e0:	07cb      	lsls	r3, r1, #31
 80049e2:	d502      	bpl.n	80049ea <_printf_i+0x162>
 80049e4:	2320      	movs	r3, #32
 80049e6:	4319      	orrs	r1, r3
 80049e8:	6021      	str	r1, [r4, #0]
 80049ea:	2710      	movs	r7, #16
 80049ec:	2d00      	cmp	r5, #0
 80049ee:	d1b2      	bne.n	8004956 <_printf_i+0xce>
 80049f0:	2320      	movs	r3, #32
 80049f2:	6822      	ldr	r2, [r4, #0]
 80049f4:	439a      	bics	r2, r3
 80049f6:	6022      	str	r2, [r4, #0]
 80049f8:	e7ad      	b.n	8004956 <_printf_i+0xce>
 80049fa:	2220      	movs	r2, #32
 80049fc:	6809      	ldr	r1, [r1, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	6022      	str	r2, [r4, #0]
 8004a02:	0022      	movs	r2, r4
 8004a04:	2178      	movs	r1, #120	; 0x78
 8004a06:	3245      	adds	r2, #69	; 0x45
 8004a08:	7011      	strb	r1, [r2, #0]
 8004a0a:	4a27      	ldr	r2, [pc, #156]	; (8004aa8 <_printf_i+0x220>)
 8004a0c:	e7e1      	b.n	80049d2 <_printf_i+0x14a>
 8004a0e:	0648      	lsls	r0, r1, #25
 8004a10:	d5e6      	bpl.n	80049e0 <_printf_i+0x158>
 8004a12:	b2ad      	uxth	r5, r5
 8004a14:	e7e4      	b.n	80049e0 <_printf_i+0x158>
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	680d      	ldr	r5, [r1, #0]
 8004a1a:	1d10      	adds	r0, r2, #4
 8004a1c:	6949      	ldr	r1, [r1, #20]
 8004a1e:	6018      	str	r0, [r3, #0]
 8004a20:	6813      	ldr	r3, [r2, #0]
 8004a22:	062e      	lsls	r6, r5, #24
 8004a24:	d501      	bpl.n	8004a2a <_printf_i+0x1a2>
 8004a26:	6019      	str	r1, [r3, #0]
 8004a28:	e002      	b.n	8004a30 <_printf_i+0x1a8>
 8004a2a:	066d      	lsls	r5, r5, #25
 8004a2c:	d5fb      	bpl.n	8004a26 <_printf_i+0x19e>
 8004a2e:	8019      	strh	r1, [r3, #0]
 8004a30:	2300      	movs	r3, #0
 8004a32:	9e04      	ldr	r6, [sp, #16]
 8004a34:	6123      	str	r3, [r4, #16]
 8004a36:	e7bb      	b.n	80049b0 <_printf_i+0x128>
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	1d11      	adds	r1, r2, #4
 8004a3c:	6019      	str	r1, [r3, #0]
 8004a3e:	6816      	ldr	r6, [r2, #0]
 8004a40:	2100      	movs	r1, #0
 8004a42:	0030      	movs	r0, r6
 8004a44:	6862      	ldr	r2, [r4, #4]
 8004a46:	f000 f831 	bl	8004aac <memchr>
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	d001      	beq.n	8004a52 <_printf_i+0x1ca>
 8004a4e:	1b80      	subs	r0, r0, r6
 8004a50:	6060      	str	r0, [r4, #4]
 8004a52:	6863      	ldr	r3, [r4, #4]
 8004a54:	6123      	str	r3, [r4, #16]
 8004a56:	2300      	movs	r3, #0
 8004a58:	9a04      	ldr	r2, [sp, #16]
 8004a5a:	7013      	strb	r3, [r2, #0]
 8004a5c:	e7a8      	b.n	80049b0 <_printf_i+0x128>
 8004a5e:	6923      	ldr	r3, [r4, #16]
 8004a60:	0032      	movs	r2, r6
 8004a62:	9906      	ldr	r1, [sp, #24]
 8004a64:	9805      	ldr	r0, [sp, #20]
 8004a66:	9d07      	ldr	r5, [sp, #28]
 8004a68:	47a8      	blx	r5
 8004a6a:	1c43      	adds	r3, r0, #1
 8004a6c:	d0aa      	beq.n	80049c4 <_printf_i+0x13c>
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	079b      	lsls	r3, r3, #30
 8004a72:	d415      	bmi.n	8004aa0 <_printf_i+0x218>
 8004a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a76:	68e0      	ldr	r0, [r4, #12]
 8004a78:	4298      	cmp	r0, r3
 8004a7a:	daa5      	bge.n	80049c8 <_printf_i+0x140>
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	e7a3      	b.n	80049c8 <_printf_i+0x140>
 8004a80:	0022      	movs	r2, r4
 8004a82:	2301      	movs	r3, #1
 8004a84:	9906      	ldr	r1, [sp, #24]
 8004a86:	9805      	ldr	r0, [sp, #20]
 8004a88:	9e07      	ldr	r6, [sp, #28]
 8004a8a:	3219      	adds	r2, #25
 8004a8c:	47b0      	blx	r6
 8004a8e:	1c43      	adds	r3, r0, #1
 8004a90:	d098      	beq.n	80049c4 <_printf_i+0x13c>
 8004a92:	3501      	adds	r5, #1
 8004a94:	68e3      	ldr	r3, [r4, #12]
 8004a96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a98:	1a9b      	subs	r3, r3, r2
 8004a9a:	42ab      	cmp	r3, r5
 8004a9c:	dcf0      	bgt.n	8004a80 <_printf_i+0x1f8>
 8004a9e:	e7e9      	b.n	8004a74 <_printf_i+0x1ec>
 8004aa0:	2500      	movs	r5, #0
 8004aa2:	e7f7      	b.n	8004a94 <_printf_i+0x20c>
 8004aa4:	08004e6d 	.word	0x08004e6d
 8004aa8:	08004e7e 	.word	0x08004e7e

08004aac <memchr>:
 8004aac:	b2c9      	uxtb	r1, r1
 8004aae:	1882      	adds	r2, r0, r2
 8004ab0:	4290      	cmp	r0, r2
 8004ab2:	d101      	bne.n	8004ab8 <memchr+0xc>
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	4770      	bx	lr
 8004ab8:	7803      	ldrb	r3, [r0, #0]
 8004aba:	428b      	cmp	r3, r1
 8004abc:	d0fb      	beq.n	8004ab6 <memchr+0xa>
 8004abe:	3001      	adds	r0, #1
 8004ac0:	e7f6      	b.n	8004ab0 <memchr+0x4>

08004ac2 <memmove>:
 8004ac2:	b510      	push	{r4, lr}
 8004ac4:	4288      	cmp	r0, r1
 8004ac6:	d902      	bls.n	8004ace <memmove+0xc>
 8004ac8:	188b      	adds	r3, r1, r2
 8004aca:	4298      	cmp	r0, r3
 8004acc:	d303      	bcc.n	8004ad6 <memmove+0x14>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	e007      	b.n	8004ae2 <memmove+0x20>
 8004ad2:	5c8b      	ldrb	r3, [r1, r2]
 8004ad4:	5483      	strb	r3, [r0, r2]
 8004ad6:	3a01      	subs	r2, #1
 8004ad8:	d2fb      	bcs.n	8004ad2 <memmove+0x10>
 8004ada:	bd10      	pop	{r4, pc}
 8004adc:	5ccc      	ldrb	r4, [r1, r3]
 8004ade:	54c4      	strb	r4, [r0, r3]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d1fa      	bne.n	8004adc <memmove+0x1a>
 8004ae6:	e7f8      	b.n	8004ada <memmove+0x18>

08004ae8 <_free_r>:
 8004ae8:	b570      	push	{r4, r5, r6, lr}
 8004aea:	0005      	movs	r5, r0
 8004aec:	2900      	cmp	r1, #0
 8004aee:	d010      	beq.n	8004b12 <_free_r+0x2a>
 8004af0:	1f0c      	subs	r4, r1, #4
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	da00      	bge.n	8004afa <_free_r+0x12>
 8004af8:	18e4      	adds	r4, r4, r3
 8004afa:	0028      	movs	r0, r5
 8004afc:	f000 f918 	bl	8004d30 <__malloc_lock>
 8004b00:	4a1d      	ldr	r2, [pc, #116]	; (8004b78 <_free_r+0x90>)
 8004b02:	6813      	ldr	r3, [r2, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d105      	bne.n	8004b14 <_free_r+0x2c>
 8004b08:	6063      	str	r3, [r4, #4]
 8004b0a:	6014      	str	r4, [r2, #0]
 8004b0c:	0028      	movs	r0, r5
 8004b0e:	f000 f917 	bl	8004d40 <__malloc_unlock>
 8004b12:	bd70      	pop	{r4, r5, r6, pc}
 8004b14:	42a3      	cmp	r3, r4
 8004b16:	d908      	bls.n	8004b2a <_free_r+0x42>
 8004b18:	6821      	ldr	r1, [r4, #0]
 8004b1a:	1860      	adds	r0, r4, r1
 8004b1c:	4283      	cmp	r3, r0
 8004b1e:	d1f3      	bne.n	8004b08 <_free_r+0x20>
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	1841      	adds	r1, r0, r1
 8004b26:	6021      	str	r1, [r4, #0]
 8004b28:	e7ee      	b.n	8004b08 <_free_r+0x20>
 8004b2a:	001a      	movs	r2, r3
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <_free_r+0x4e>
 8004b32:	42a3      	cmp	r3, r4
 8004b34:	d9f9      	bls.n	8004b2a <_free_r+0x42>
 8004b36:	6811      	ldr	r1, [r2, #0]
 8004b38:	1850      	adds	r0, r2, r1
 8004b3a:	42a0      	cmp	r0, r4
 8004b3c:	d10b      	bne.n	8004b56 <_free_r+0x6e>
 8004b3e:	6820      	ldr	r0, [r4, #0]
 8004b40:	1809      	adds	r1, r1, r0
 8004b42:	1850      	adds	r0, r2, r1
 8004b44:	6011      	str	r1, [r2, #0]
 8004b46:	4283      	cmp	r3, r0
 8004b48:	d1e0      	bne.n	8004b0c <_free_r+0x24>
 8004b4a:	6818      	ldr	r0, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	1841      	adds	r1, r0, r1
 8004b50:	6011      	str	r1, [r2, #0]
 8004b52:	6053      	str	r3, [r2, #4]
 8004b54:	e7da      	b.n	8004b0c <_free_r+0x24>
 8004b56:	42a0      	cmp	r0, r4
 8004b58:	d902      	bls.n	8004b60 <_free_r+0x78>
 8004b5a:	230c      	movs	r3, #12
 8004b5c:	602b      	str	r3, [r5, #0]
 8004b5e:	e7d5      	b.n	8004b0c <_free_r+0x24>
 8004b60:	6821      	ldr	r1, [r4, #0]
 8004b62:	1860      	adds	r0, r4, r1
 8004b64:	4283      	cmp	r3, r0
 8004b66:	d103      	bne.n	8004b70 <_free_r+0x88>
 8004b68:	6818      	ldr	r0, [r3, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	1841      	adds	r1, r0, r1
 8004b6e:	6021      	str	r1, [r4, #0]
 8004b70:	6063      	str	r3, [r4, #4]
 8004b72:	6054      	str	r4, [r2, #4]
 8004b74:	e7ca      	b.n	8004b0c <_free_r+0x24>
 8004b76:	46c0      	nop			; (mov r8, r8)
 8004b78:	20001c94 	.word	0x20001c94

08004b7c <sbrk_aligned>:
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	4e0f      	ldr	r6, [pc, #60]	; (8004bbc <sbrk_aligned+0x40>)
 8004b80:	000d      	movs	r5, r1
 8004b82:	6831      	ldr	r1, [r6, #0]
 8004b84:	0004      	movs	r4, r0
 8004b86:	2900      	cmp	r1, #0
 8004b88:	d102      	bne.n	8004b90 <sbrk_aligned+0x14>
 8004b8a:	f000 f8bf 	bl	8004d0c <_sbrk_r>
 8004b8e:	6030      	str	r0, [r6, #0]
 8004b90:	0029      	movs	r1, r5
 8004b92:	0020      	movs	r0, r4
 8004b94:	f000 f8ba 	bl	8004d0c <_sbrk_r>
 8004b98:	1c43      	adds	r3, r0, #1
 8004b9a:	d00a      	beq.n	8004bb2 <sbrk_aligned+0x36>
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	1cc5      	adds	r5, r0, #3
 8004ba0:	439d      	bics	r5, r3
 8004ba2:	42a8      	cmp	r0, r5
 8004ba4:	d007      	beq.n	8004bb6 <sbrk_aligned+0x3a>
 8004ba6:	1a29      	subs	r1, r5, r0
 8004ba8:	0020      	movs	r0, r4
 8004baa:	f000 f8af 	bl	8004d0c <_sbrk_r>
 8004bae:	1c43      	adds	r3, r0, #1
 8004bb0:	d101      	bne.n	8004bb6 <sbrk_aligned+0x3a>
 8004bb2:	2501      	movs	r5, #1
 8004bb4:	426d      	negs	r5, r5
 8004bb6:	0028      	movs	r0, r5
 8004bb8:	bd70      	pop	{r4, r5, r6, pc}
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	20001c98 	.word	0x20001c98

08004bc0 <_malloc_r>:
 8004bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bc2:	2203      	movs	r2, #3
 8004bc4:	1ccb      	adds	r3, r1, #3
 8004bc6:	4393      	bics	r3, r2
 8004bc8:	3308      	adds	r3, #8
 8004bca:	0006      	movs	r6, r0
 8004bcc:	001f      	movs	r7, r3
 8004bce:	2b0c      	cmp	r3, #12
 8004bd0:	d232      	bcs.n	8004c38 <_malloc_r+0x78>
 8004bd2:	270c      	movs	r7, #12
 8004bd4:	42b9      	cmp	r1, r7
 8004bd6:	d831      	bhi.n	8004c3c <_malloc_r+0x7c>
 8004bd8:	0030      	movs	r0, r6
 8004bda:	f000 f8a9 	bl	8004d30 <__malloc_lock>
 8004bde:	4d32      	ldr	r5, [pc, #200]	; (8004ca8 <_malloc_r+0xe8>)
 8004be0:	682b      	ldr	r3, [r5, #0]
 8004be2:	001c      	movs	r4, r3
 8004be4:	2c00      	cmp	r4, #0
 8004be6:	d12e      	bne.n	8004c46 <_malloc_r+0x86>
 8004be8:	0039      	movs	r1, r7
 8004bea:	0030      	movs	r0, r6
 8004bec:	f7ff ffc6 	bl	8004b7c <sbrk_aligned>
 8004bf0:	0004      	movs	r4, r0
 8004bf2:	1c43      	adds	r3, r0, #1
 8004bf4:	d11e      	bne.n	8004c34 <_malloc_r+0x74>
 8004bf6:	682c      	ldr	r4, [r5, #0]
 8004bf8:	0025      	movs	r5, r4
 8004bfa:	2d00      	cmp	r5, #0
 8004bfc:	d14a      	bne.n	8004c94 <_malloc_r+0xd4>
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	0029      	movs	r1, r5
 8004c02:	18e3      	adds	r3, r4, r3
 8004c04:	0030      	movs	r0, r6
 8004c06:	9301      	str	r3, [sp, #4]
 8004c08:	f000 f880 	bl	8004d0c <_sbrk_r>
 8004c0c:	9b01      	ldr	r3, [sp, #4]
 8004c0e:	4283      	cmp	r3, r0
 8004c10:	d143      	bne.n	8004c9a <_malloc_r+0xda>
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	3703      	adds	r7, #3
 8004c16:	1aff      	subs	r7, r7, r3
 8004c18:	2303      	movs	r3, #3
 8004c1a:	439f      	bics	r7, r3
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	2f0c      	cmp	r7, #12
 8004c20:	d200      	bcs.n	8004c24 <_malloc_r+0x64>
 8004c22:	270c      	movs	r7, #12
 8004c24:	0039      	movs	r1, r7
 8004c26:	0030      	movs	r0, r6
 8004c28:	f7ff ffa8 	bl	8004b7c <sbrk_aligned>
 8004c2c:	1c43      	adds	r3, r0, #1
 8004c2e:	d034      	beq.n	8004c9a <_malloc_r+0xda>
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	19df      	adds	r7, r3, r7
 8004c34:	6027      	str	r7, [r4, #0]
 8004c36:	e013      	b.n	8004c60 <_malloc_r+0xa0>
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	dacb      	bge.n	8004bd4 <_malloc_r+0x14>
 8004c3c:	230c      	movs	r3, #12
 8004c3e:	2500      	movs	r5, #0
 8004c40:	6033      	str	r3, [r6, #0]
 8004c42:	0028      	movs	r0, r5
 8004c44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c46:	6822      	ldr	r2, [r4, #0]
 8004c48:	1bd1      	subs	r1, r2, r7
 8004c4a:	d420      	bmi.n	8004c8e <_malloc_r+0xce>
 8004c4c:	290b      	cmp	r1, #11
 8004c4e:	d917      	bls.n	8004c80 <_malloc_r+0xc0>
 8004c50:	19e2      	adds	r2, r4, r7
 8004c52:	6027      	str	r7, [r4, #0]
 8004c54:	42a3      	cmp	r3, r4
 8004c56:	d111      	bne.n	8004c7c <_malloc_r+0xbc>
 8004c58:	602a      	str	r2, [r5, #0]
 8004c5a:	6863      	ldr	r3, [r4, #4]
 8004c5c:	6011      	str	r1, [r2, #0]
 8004c5e:	6053      	str	r3, [r2, #4]
 8004c60:	0030      	movs	r0, r6
 8004c62:	0025      	movs	r5, r4
 8004c64:	f000 f86c 	bl	8004d40 <__malloc_unlock>
 8004c68:	2207      	movs	r2, #7
 8004c6a:	350b      	adds	r5, #11
 8004c6c:	1d23      	adds	r3, r4, #4
 8004c6e:	4395      	bics	r5, r2
 8004c70:	1aea      	subs	r2, r5, r3
 8004c72:	429d      	cmp	r5, r3
 8004c74:	d0e5      	beq.n	8004c42 <_malloc_r+0x82>
 8004c76:	1b5b      	subs	r3, r3, r5
 8004c78:	50a3      	str	r3, [r4, r2]
 8004c7a:	e7e2      	b.n	8004c42 <_malloc_r+0x82>
 8004c7c:	605a      	str	r2, [r3, #4]
 8004c7e:	e7ec      	b.n	8004c5a <_malloc_r+0x9a>
 8004c80:	6862      	ldr	r2, [r4, #4]
 8004c82:	42a3      	cmp	r3, r4
 8004c84:	d101      	bne.n	8004c8a <_malloc_r+0xca>
 8004c86:	602a      	str	r2, [r5, #0]
 8004c88:	e7ea      	b.n	8004c60 <_malloc_r+0xa0>
 8004c8a:	605a      	str	r2, [r3, #4]
 8004c8c:	e7e8      	b.n	8004c60 <_malloc_r+0xa0>
 8004c8e:	0023      	movs	r3, r4
 8004c90:	6864      	ldr	r4, [r4, #4]
 8004c92:	e7a7      	b.n	8004be4 <_malloc_r+0x24>
 8004c94:	002c      	movs	r4, r5
 8004c96:	686d      	ldr	r5, [r5, #4]
 8004c98:	e7af      	b.n	8004bfa <_malloc_r+0x3a>
 8004c9a:	230c      	movs	r3, #12
 8004c9c:	0030      	movs	r0, r6
 8004c9e:	6033      	str	r3, [r6, #0]
 8004ca0:	f000 f84e 	bl	8004d40 <__malloc_unlock>
 8004ca4:	e7cd      	b.n	8004c42 <_malloc_r+0x82>
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	20001c94 	.word	0x20001c94

08004cac <_realloc_r>:
 8004cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cae:	0007      	movs	r7, r0
 8004cb0:	000e      	movs	r6, r1
 8004cb2:	0014      	movs	r4, r2
 8004cb4:	2900      	cmp	r1, #0
 8004cb6:	d105      	bne.n	8004cc4 <_realloc_r+0x18>
 8004cb8:	0011      	movs	r1, r2
 8004cba:	f7ff ff81 	bl	8004bc0 <_malloc_r>
 8004cbe:	0005      	movs	r5, r0
 8004cc0:	0028      	movs	r0, r5
 8004cc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004cc4:	2a00      	cmp	r2, #0
 8004cc6:	d103      	bne.n	8004cd0 <_realloc_r+0x24>
 8004cc8:	f7ff ff0e 	bl	8004ae8 <_free_r>
 8004ccc:	0025      	movs	r5, r4
 8004cce:	e7f7      	b.n	8004cc0 <_realloc_r+0x14>
 8004cd0:	f000 f83e 	bl	8004d50 <_malloc_usable_size_r>
 8004cd4:	9001      	str	r0, [sp, #4]
 8004cd6:	4284      	cmp	r4, r0
 8004cd8:	d803      	bhi.n	8004ce2 <_realloc_r+0x36>
 8004cda:	0035      	movs	r5, r6
 8004cdc:	0843      	lsrs	r3, r0, #1
 8004cde:	42a3      	cmp	r3, r4
 8004ce0:	d3ee      	bcc.n	8004cc0 <_realloc_r+0x14>
 8004ce2:	0021      	movs	r1, r4
 8004ce4:	0038      	movs	r0, r7
 8004ce6:	f7ff ff6b 	bl	8004bc0 <_malloc_r>
 8004cea:	1e05      	subs	r5, r0, #0
 8004cec:	d0e8      	beq.n	8004cc0 <_realloc_r+0x14>
 8004cee:	9b01      	ldr	r3, [sp, #4]
 8004cf0:	0022      	movs	r2, r4
 8004cf2:	429c      	cmp	r4, r3
 8004cf4:	d900      	bls.n	8004cf8 <_realloc_r+0x4c>
 8004cf6:	001a      	movs	r2, r3
 8004cf8:	0031      	movs	r1, r6
 8004cfa:	0028      	movs	r0, r5
 8004cfc:	f7ff fbc0 	bl	8004480 <memcpy>
 8004d00:	0031      	movs	r1, r6
 8004d02:	0038      	movs	r0, r7
 8004d04:	f7ff fef0 	bl	8004ae8 <_free_r>
 8004d08:	e7da      	b.n	8004cc0 <_realloc_r+0x14>
	...

08004d0c <_sbrk_r>:
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	b570      	push	{r4, r5, r6, lr}
 8004d10:	4d06      	ldr	r5, [pc, #24]	; (8004d2c <_sbrk_r+0x20>)
 8004d12:	0004      	movs	r4, r0
 8004d14:	0008      	movs	r0, r1
 8004d16:	602b      	str	r3, [r5, #0]
 8004d18:	f7fb fd40 	bl	800079c <_sbrk>
 8004d1c:	1c43      	adds	r3, r0, #1
 8004d1e:	d103      	bne.n	8004d28 <_sbrk_r+0x1c>
 8004d20:	682b      	ldr	r3, [r5, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d000      	beq.n	8004d28 <_sbrk_r+0x1c>
 8004d26:	6023      	str	r3, [r4, #0]
 8004d28:	bd70      	pop	{r4, r5, r6, pc}
 8004d2a:	46c0      	nop			; (mov r8, r8)
 8004d2c:	20001c9c 	.word	0x20001c9c

08004d30 <__malloc_lock>:
 8004d30:	b510      	push	{r4, lr}
 8004d32:	4802      	ldr	r0, [pc, #8]	; (8004d3c <__malloc_lock+0xc>)
 8004d34:	f000 f814 	bl	8004d60 <__retarget_lock_acquire_recursive>
 8004d38:	bd10      	pop	{r4, pc}
 8004d3a:	46c0      	nop			; (mov r8, r8)
 8004d3c:	20001ca0 	.word	0x20001ca0

08004d40 <__malloc_unlock>:
 8004d40:	b510      	push	{r4, lr}
 8004d42:	4802      	ldr	r0, [pc, #8]	; (8004d4c <__malloc_unlock+0xc>)
 8004d44:	f000 f80d 	bl	8004d62 <__retarget_lock_release_recursive>
 8004d48:	bd10      	pop	{r4, pc}
 8004d4a:	46c0      	nop			; (mov r8, r8)
 8004d4c:	20001ca0 	.word	0x20001ca0

08004d50 <_malloc_usable_size_r>:
 8004d50:	1f0b      	subs	r3, r1, #4
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	1f18      	subs	r0, r3, #4
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	da01      	bge.n	8004d5e <_malloc_usable_size_r+0xe>
 8004d5a:	580b      	ldr	r3, [r1, r0]
 8004d5c:	18c0      	adds	r0, r0, r3
 8004d5e:	4770      	bx	lr

08004d60 <__retarget_lock_acquire_recursive>:
 8004d60:	4770      	bx	lr

08004d62 <__retarget_lock_release_recursive>:
 8004d62:	4770      	bx	lr

08004d64 <_init>:
 8004d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6a:	bc08      	pop	{r3}
 8004d6c:	469e      	mov	lr, r3
 8004d6e:	4770      	bx	lr

08004d70 <_fini>:
 8004d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d76:	bc08      	pop	{r3}
 8004d78:	469e      	mov	lr, r3
 8004d7a:	4770      	bx	lr
