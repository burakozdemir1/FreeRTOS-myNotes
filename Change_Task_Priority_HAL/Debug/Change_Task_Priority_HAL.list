
Change_Task_Priority_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f2c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08003fec  08003fec  00013fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004108  08004108  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004108  08004108  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004108  08004108  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004108  08004108  00014108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800410c  0800410c  0001410c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001090  20000074  08004184  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001104  08004184  00021104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c167  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002060  00000000  00000000  0002c203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0002e268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  0002ed50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9b8  00000000  00000000  0002f750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d027  00000000  00000000  0004a108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009877b  00000000  00000000  0005712f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef8aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028c4  00000000  00000000  000ef8fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003fd4 	.word	0x08003fd4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08003fd4 	.word	0x08003fd4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	4a06      	ldr	r2, [pc, #24]	; (800025c <vApplicationGetIdleTaskMemory+0x28>)
 8000244:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	4a05      	ldr	r2, [pc, #20]	; (8000260 <vApplicationGetIdleTaskMemory+0x2c>)
 800024a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2280      	movs	r2, #128	; 0x80
 8000250:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	46bd      	mov	sp, r7
 8000256:	b004      	add	sp, #16
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	20000090 	.word	0x20000090
 8000260:	200000e4 	.word	0x200000e4

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b5b0      	push	{r4, r5, r7, lr}
 8000266:	b08e      	sub	sp, #56	; 0x38
 8000268:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026a:	f000 fb3d 	bl	80008e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026e:	f000 f831 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000272:	f000 f8b3 	bl	80003dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000276:	f000 f881 	bl	800037c <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadDef(myTask01, Task1_Handler, osPriorityRealtime, 0, 128);
 800027a:	211c      	movs	r1, #28
 800027c:	187b      	adds	r3, r7, r1
 800027e:	4a11      	ldr	r2, [pc, #68]	; (80002c4 <main+0x60>)
 8000280:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000282:	c331      	stmia	r3!, {r0, r4, r5}
 8000284:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000286:	c331      	stmia	r3!, {r0, r4, r5}
 8000288:	6812      	ldr	r2, [r2, #0]
 800028a:	601a      	str	r2, [r3, #0]
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 800028c:	187b      	adds	r3, r7, r1
 800028e:	2100      	movs	r1, #0
 8000290:	0018      	movs	r0, r3
 8000292:	f002 f927 	bl	80024e4 <osThreadCreate>
 8000296:	0002      	movs	r2, r0
 8000298:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <main+0x64>)
 800029a:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, Task2_Handler, osPriorityHigh, 0, 128);
 800029c:	003b      	movs	r3, r7
 800029e:	4a0b      	ldr	r2, [pc, #44]	; (80002cc <main+0x68>)
 80002a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002a2:	c313      	stmia	r3!, {r0, r1, r4}
 80002a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002a6:	c313      	stmia	r3!, {r0, r1, r4}
 80002a8:	6812      	ldr	r2, [r2, #0]
 80002aa:	601a      	str	r2, [r3, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80002ac:	003b      	movs	r3, r7
 80002ae:	2100      	movs	r1, #0
 80002b0:	0018      	movs	r0, r3
 80002b2:	f002 f917 	bl	80024e4 <osThreadCreate>
 80002b6:	0002      	movs	r2, r0
 80002b8:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <main+0x6c>)
 80002ba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002bc:	f002 f90a 	bl	80024d4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002c0:	e7fe      	b.n	80002c0 <main+0x5c>
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	08004004 	.word	0x08004004
 80002c8:	2000036c 	.word	0x2000036c
 80002cc:	08004020 	.word	0x08004020
 80002d0:	20000370 	.word	0x20000370

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b590      	push	{r4, r7, lr}
 80002d6:	b099      	sub	sp, #100	; 0x64
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	242c      	movs	r4, #44	; 0x2c
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	0018      	movs	r0, r3
 80002e0:	2334      	movs	r3, #52	; 0x34
 80002e2:	001a      	movs	r2, r3
 80002e4:	2100      	movs	r1, #0
 80002e6:	f003 fa0c 	bl	8003702 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ea:	231c      	movs	r3, #28
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	0018      	movs	r0, r3
 80002f0:	2310      	movs	r3, #16
 80002f2:	001a      	movs	r2, r3
 80002f4:	2100      	movs	r1, #0
 80002f6:	f003 fa04 	bl	8003702 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002fa:	003b      	movs	r3, r7
 80002fc:	0018      	movs	r0, r3
 80002fe:	231c      	movs	r3, #28
 8000300:	001a      	movs	r2, r3
 8000302:	2100      	movs	r1, #0
 8000304:	f003 f9fd 	bl	8003702 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000308:	193b      	adds	r3, r7, r4
 800030a:	2201      	movs	r2, #1
 800030c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800030e:	193b      	adds	r3, r7, r4
 8000310:	2201      	movs	r2, #1
 8000312:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000314:	193b      	adds	r3, r7, r4
 8000316:	2200      	movs	r2, #0
 8000318:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	193b      	adds	r3, r7, r4
 800031c:	0018      	movs	r0, r3
 800031e:	f000 fdfd 	bl	8000f1c <HAL_RCC_OscConfig>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000326:	f000 f9cb 	bl	80006c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032a:	211c      	movs	r1, #28
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2207      	movs	r2, #7
 8000330:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000332:	187b      	adds	r3, r7, r1
 8000334:	2201      	movs	r2, #1
 8000336:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2200      	movs	r2, #0
 8000342:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2100      	movs	r1, #0
 8000348:	0018      	movs	r0, r3
 800034a:	f001 f96d 	bl	8001628 <HAL_RCC_ClockConfig>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000352:	f000 f9b5 	bl	80006c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000356:	003b      	movs	r3, r7
 8000358:	2201      	movs	r2, #1
 800035a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800035c:	003b      	movs	r3, r7
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000362:	003b      	movs	r3, r7
 8000364:	0018      	movs	r0, r3
 8000366:	f001 facb 	bl	8001900 <HAL_RCCEx_PeriphCLKConfig>
 800036a:	1e03      	subs	r3, r0, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800036e:	f000 f9a7 	bl	80006c0 <Error_Handler>
  }
}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	46bd      	mov	sp, r7
 8000376:	b019      	add	sp, #100	; 0x64
 8000378:	bd90      	pop	{r4, r7, pc}
	...

0800037c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000380:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <MX_USART1_UART_Init+0x58>)
 8000382:	4a15      	ldr	r2, [pc, #84]	; (80003d8 <MX_USART1_UART_Init+0x5c>)
 8000384:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000386:	4b13      	ldr	r3, [pc, #76]	; (80003d4 <MX_USART1_UART_Init+0x58>)
 8000388:	22e1      	movs	r2, #225	; 0xe1
 800038a:	0252      	lsls	r2, r2, #9
 800038c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800038e:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <MX_USART1_UART_Init+0x58>)
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000394:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_USART1_UART_Init+0x58>)
 8000396:	2200      	movs	r2, #0
 8000398:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800039a:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <MX_USART1_UART_Init+0x58>)
 800039c:	2200      	movs	r2, #0
 800039e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <MX_USART1_UART_Init+0x58>)
 80003a2:	220c      	movs	r2, #12
 80003a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003a6:	4b0b      	ldr	r3, [pc, #44]	; (80003d4 <MX_USART1_UART_Init+0x58>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ac:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <MX_USART1_UART_Init+0x58>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003b2:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <MX_USART1_UART_Init+0x58>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <MX_USART1_UART_Init+0x58>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003be:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <MX_USART1_UART_Init+0x58>)
 80003c0:	0018      	movs	r0, r3
 80003c2:	f001 fb9b 	bl	8001afc <HAL_UART_Init>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003ca:	f000 f979 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	200002e4 	.word	0x200002e4
 80003d8:	40013800 	.word	0x40013800

080003dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003dc:	b590      	push	{r4, r7, lr}
 80003de:	b089      	sub	sp, #36	; 0x24
 80003e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e2:	240c      	movs	r4, #12
 80003e4:	193b      	adds	r3, r7, r4
 80003e6:	0018      	movs	r0, r3
 80003e8:	2314      	movs	r3, #20
 80003ea:	001a      	movs	r2, r3
 80003ec:	2100      	movs	r1, #0
 80003ee:	f003 f988 	bl	8003702 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f2:	4b31      	ldr	r3, [pc, #196]	; (80004b8 <MX_GPIO_Init+0xdc>)
 80003f4:	695a      	ldr	r2, [r3, #20]
 80003f6:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <MX_GPIO_Init+0xdc>)
 80003f8:	2180      	movs	r1, #128	; 0x80
 80003fa:	0309      	lsls	r1, r1, #12
 80003fc:	430a      	orrs	r2, r1
 80003fe:	615a      	str	r2, [r3, #20]
 8000400:	4b2d      	ldr	r3, [pc, #180]	; (80004b8 <MX_GPIO_Init+0xdc>)
 8000402:	695a      	ldr	r2, [r3, #20]
 8000404:	2380      	movs	r3, #128	; 0x80
 8000406:	031b      	lsls	r3, r3, #12
 8000408:	4013      	ands	r3, r2
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800040e:	4b2a      	ldr	r3, [pc, #168]	; (80004b8 <MX_GPIO_Init+0xdc>)
 8000410:	695a      	ldr	r2, [r3, #20]
 8000412:	4b29      	ldr	r3, [pc, #164]	; (80004b8 <MX_GPIO_Init+0xdc>)
 8000414:	2180      	movs	r1, #128	; 0x80
 8000416:	03c9      	lsls	r1, r1, #15
 8000418:	430a      	orrs	r2, r1
 800041a:	615a      	str	r2, [r3, #20]
 800041c:	4b26      	ldr	r3, [pc, #152]	; (80004b8 <MX_GPIO_Init+0xdc>)
 800041e:	695a      	ldr	r2, [r3, #20]
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	03db      	lsls	r3, r3, #15
 8000424:	4013      	ands	r3, r2
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042a:	4b23      	ldr	r3, [pc, #140]	; (80004b8 <MX_GPIO_Init+0xdc>)
 800042c:	695a      	ldr	r2, [r3, #20]
 800042e:	4b22      	ldr	r3, [pc, #136]	; (80004b8 <MX_GPIO_Init+0xdc>)
 8000430:	2180      	movs	r1, #128	; 0x80
 8000432:	0289      	lsls	r1, r1, #10
 8000434:	430a      	orrs	r2, r1
 8000436:	615a      	str	r2, [r3, #20]
 8000438:	4b1f      	ldr	r3, [pc, #124]	; (80004b8 <MX_GPIO_Init+0xdc>)
 800043a:	695a      	ldr	r2, [r3, #20]
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	029b      	lsls	r3, r3, #10
 8000440:	4013      	ands	r3, r2
 8000442:	603b      	str	r3, [r7, #0]
 8000444:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000446:	2390      	movs	r3, #144	; 0x90
 8000448:	05db      	lsls	r3, r3, #23
 800044a:	2200      	movs	r2, #0
 800044c:	2120      	movs	r1, #32
 800044e:	0018      	movs	r0, r3
 8000450:	f000 fd21 	bl	8000e96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000454:	193b      	adds	r3, r7, r4
 8000456:	2280      	movs	r2, #128	; 0x80
 8000458:	0192      	lsls	r2, r2, #6
 800045a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800045c:	193b      	adds	r3, r7, r4
 800045e:	2284      	movs	r2, #132	; 0x84
 8000460:	0392      	lsls	r2, r2, #14
 8000462:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	193b      	adds	r3, r7, r4
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800046a:	193b      	adds	r3, r7, r4
 800046c:	4a13      	ldr	r2, [pc, #76]	; (80004bc <MX_GPIO_Init+0xe0>)
 800046e:	0019      	movs	r1, r3
 8000470:	0010      	movs	r0, r2
 8000472:	f000 fb7b 	bl	8000b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000476:	0021      	movs	r1, r4
 8000478:	187b      	adds	r3, r7, r1
 800047a:	2220      	movs	r2, #32
 800047c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047e:	187b      	adds	r3, r7, r1
 8000480:	2201      	movs	r2, #1
 8000482:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000484:	187b      	adds	r3, r7, r1
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2200      	movs	r2, #0
 800048e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000490:	187a      	adds	r2, r7, r1
 8000492:	2390      	movs	r3, #144	; 0x90
 8000494:	05db      	lsls	r3, r3, #23
 8000496:	0011      	movs	r1, r2
 8000498:	0018      	movs	r0, r3
 800049a:	f000 fb67 	bl	8000b6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 800049e:	2200      	movs	r2, #0
 80004a0:	2103      	movs	r1, #3
 80004a2:	2007      	movs	r0, #7
 80004a4:	f000 fb30 	bl	8000b08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004a8:	2007      	movs	r0, #7
 80004aa:	f000 fb42 	bl	8000b32 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b009      	add	sp, #36	; 0x24
 80004b4:	bd90      	pop	{r4, r7, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	40021000 	.word	0x40021000
 80004bc:	48000800 	.word	0x48000800

080004c0 <Task1_Handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1_Handler */
void Task1_Handler(void const * argument)
{
 80004c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

	osPriority p1,p2;


	sprintf((char*)myMessage,"Task1 is running...\r\n");
 80004c8:	4a35      	ldr	r2, [pc, #212]	; (80005a0 <Task1_Handler+0xe0>)
 80004ca:	4b36      	ldr	r3, [pc, #216]	; (80005a4 <Task1_Handler+0xe4>)
 80004cc:	0011      	movs	r1, r2
 80004ce:	0018      	movs	r0, r3
 80004d0:	f003 f920 	bl	8003714 <siprintf>
	HAL_UART_Transmit(&huart1, myMessage, sizeof(myMessage), 1000);
 80004d4:	23fa      	movs	r3, #250	; 0xfa
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	4932      	ldr	r1, [pc, #200]	; (80005a4 <Task1_Handler+0xe4>)
 80004da:	4833      	ldr	r0, [pc, #204]	; (80005a8 <Task1_Handler+0xe8>)
 80004dc:	2232      	movs	r2, #50	; 0x32
 80004de:	f001 fb61 	bl	8001ba4 <HAL_UART_Transmit>


	sprintf((char*)myMessage,"Task1 Priority: %d",osThreadGetPriority(myTask01Handle));
 80004e2:	4b32      	ldr	r3, [pc, #200]	; (80005ac <Task1_Handler+0xec>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	0018      	movs	r0, r3
 80004e8:	f002 f861 	bl	80025ae <osThreadGetPriority>
 80004ec:	0003      	movs	r3, r0
 80004ee:	001a      	movs	r2, r3
 80004f0:	492f      	ldr	r1, [pc, #188]	; (80005b0 <Task1_Handler+0xf0>)
 80004f2:	4b2c      	ldr	r3, [pc, #176]	; (80005a4 <Task1_Handler+0xe4>)
 80004f4:	0018      	movs	r0, r3
 80004f6:	f003 f90d 	bl	8003714 <siprintf>
	HAL_UART_Transmit(&huart1, myMessage, sizeof(myMessage), 1000);
 80004fa:	23fa      	movs	r3, #250	; 0xfa
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	4929      	ldr	r1, [pc, #164]	; (80005a4 <Task1_Handler+0xe4>)
 8000500:	4829      	ldr	r0, [pc, #164]	; (80005a8 <Task1_Handler+0xe8>)
 8000502:	2232      	movs	r2, #50	; 0x32
 8000504:	f001 fb4e 	bl	8001ba4 <HAL_UART_Transmit>
	sprintf((char*)myMessage,"Task2 Priority: %d",osThreadGetPriority(myTask02Handle));
 8000508:	4b2a      	ldr	r3, [pc, #168]	; (80005b4 <Task1_Handler+0xf4>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	0018      	movs	r0, r3
 800050e:	f002 f84e 	bl	80025ae <osThreadGetPriority>
 8000512:	0003      	movs	r3, r0
 8000514:	001a      	movs	r2, r3
 8000516:	4928      	ldr	r1, [pc, #160]	; (80005b8 <Task1_Handler+0xf8>)
 8000518:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <Task1_Handler+0xe4>)
 800051a:	0018      	movs	r0, r3
 800051c:	f003 f8fa 	bl	8003714 <siprintf>
	HAL_UART_Transmit(&huart1, myMessage, sizeof(myMessage), 1000);
 8000520:	23fa      	movs	r3, #250	; 0xfa
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	491f      	ldr	r1, [pc, #124]	; (80005a4 <Task1_Handler+0xe4>)
 8000526:	4820      	ldr	r0, [pc, #128]	; (80005a8 <Task1_Handler+0xe8>)
 8000528:	2232      	movs	r2, #50	; 0x32
 800052a:	f001 fb3b 	bl	8001ba4 <HAL_UART_Transmit>

  for(;;)
  {
		sprintf((char*)myMessage,"Task1 is running...\r\n");
 800052e:	4a1c      	ldr	r2, [pc, #112]	; (80005a0 <Task1_Handler+0xe0>)
 8000530:	4b1c      	ldr	r3, [pc, #112]	; (80005a4 <Task1_Handler+0xe4>)
 8000532:	0011      	movs	r1, r2
 8000534:	0018      	movs	r0, r3
 8000536:	f003 f8ed 	bl	8003714 <siprintf>
		HAL_UART_Transmit(&huart1, myMessage, sizeof(myMessage), 1000);
 800053a:	23fa      	movs	r3, #250	; 0xfa
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	4919      	ldr	r1, [pc, #100]	; (80005a4 <Task1_Handler+0xe4>)
 8000540:	4819      	ldr	r0, [pc, #100]	; (80005a8 <Task1_Handler+0xe8>)
 8000542:	2232      	movs	r2, #50	; 0x32
 8000544:	f001 fb2e 	bl	8001ba4 <HAL_UART_Transmit>


	  if(buttonState == 1)
 8000548:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <Task1_Handler+0xfc>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d1ee      	bne.n	800052e <Task1_Handler+0x6e>
	  {
		  buttonState = 0;
 8000550:	4b1a      	ldr	r3, [pc, #104]	; (80005bc <Task1_Handler+0xfc>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]

		  p1 = osThreadGetPriority(myTask01Handle);
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <Task1_Handler+0xec>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	250e      	movs	r5, #14
 800055c:	197c      	adds	r4, r7, r5
 800055e:	0018      	movs	r0, r3
 8000560:	f002 f825 	bl	80025ae <osThreadGetPriority>
 8000564:	0003      	movs	r3, r0
 8000566:	8023      	strh	r3, [r4, #0]
		  p2 = osThreadGetPriority(myTask02Handle) ;
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <Task1_Handler+0xf4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	260c      	movs	r6, #12
 800056e:	19bc      	adds	r4, r7, r6
 8000570:	0018      	movs	r0, r3
 8000572:	f002 f81c 	bl	80025ae <osThreadGetPriority>
 8000576:	0003      	movs	r3, r0
 8000578:	8023      	strh	r3, [r4, #0]

		  osThreadSetPriority(myTask01Handle, p2);
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <Task1_Handler+0xec>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	19bb      	adds	r3, r7, r6
 8000580:	2100      	movs	r1, #0
 8000582:	5e5b      	ldrsh	r3, [r3, r1]
 8000584:	0019      	movs	r1, r3
 8000586:	0010      	movs	r0, r2
 8000588:	f001 fff9 	bl	800257e <osThreadSetPriority>
		  osThreadSetPriority(myTask02Handle, p1);
 800058c:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <Task1_Handler+0xf4>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	197b      	adds	r3, r7, r5
 8000592:	2100      	movs	r1, #0
 8000594:	5e5b      	ldrsh	r3, [r3, r1]
 8000596:	0019      	movs	r1, r3
 8000598:	0010      	movs	r0, r2
 800059a:	f001 fff0 	bl	800257e <osThreadSetPriority>
		sprintf((char*)myMessage,"Task1 is running...\r\n");
 800059e:	e7c6      	b.n	800052e <Task1_Handler+0x6e>
 80005a0:	0800403c 	.word	0x0800403c
 80005a4:	20000374 	.word	0x20000374
 80005a8:	200002e4 	.word	0x200002e4
 80005ac:	2000036c 	.word	0x2000036c
 80005b0:	08004054 	.word	0x08004054
 80005b4:	20000370 	.word	0x20000370
 80005b8:	08004068 	.word	0x08004068
 80005bc:	200003a6 	.word	0x200003a6

080005c0 <Task2_Handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_Handler */
void Task2_Handler(void const * argument)
{
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_Handler */
  /* Infinite loop */

	osPriority p1,p2;

	sprintf((char*)myMessage,"Task2 is running...\r\n");
 80005c8:	4a35      	ldr	r2, [pc, #212]	; (80006a0 <Task2_Handler+0xe0>)
 80005ca:	4b36      	ldr	r3, [pc, #216]	; (80006a4 <Task2_Handler+0xe4>)
 80005cc:	0011      	movs	r1, r2
 80005ce:	0018      	movs	r0, r3
 80005d0:	f003 f8a0 	bl	8003714 <siprintf>
	HAL_UART_Transmit(&huart1, myMessage, sizeof(myMessage), 1000);
 80005d4:	23fa      	movs	r3, #250	; 0xfa
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	4932      	ldr	r1, [pc, #200]	; (80006a4 <Task2_Handler+0xe4>)
 80005da:	4833      	ldr	r0, [pc, #204]	; (80006a8 <Task2_Handler+0xe8>)
 80005dc:	2232      	movs	r2, #50	; 0x32
 80005de:	f001 fae1 	bl	8001ba4 <HAL_UART_Transmit>


	sprintf((char*)myMessage,"Task1 Priority: %d",osThreadGetPriority(myTask01Handle));
 80005e2:	4b32      	ldr	r3, [pc, #200]	; (80006ac <Task2_Handler+0xec>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	0018      	movs	r0, r3
 80005e8:	f001 ffe1 	bl	80025ae <osThreadGetPriority>
 80005ec:	0003      	movs	r3, r0
 80005ee:	001a      	movs	r2, r3
 80005f0:	492f      	ldr	r1, [pc, #188]	; (80006b0 <Task2_Handler+0xf0>)
 80005f2:	4b2c      	ldr	r3, [pc, #176]	; (80006a4 <Task2_Handler+0xe4>)
 80005f4:	0018      	movs	r0, r3
 80005f6:	f003 f88d 	bl	8003714 <siprintf>
	HAL_UART_Transmit(&huart1, myMessage, sizeof(myMessage), 1000);
 80005fa:	23fa      	movs	r3, #250	; 0xfa
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	4929      	ldr	r1, [pc, #164]	; (80006a4 <Task2_Handler+0xe4>)
 8000600:	4829      	ldr	r0, [pc, #164]	; (80006a8 <Task2_Handler+0xe8>)
 8000602:	2232      	movs	r2, #50	; 0x32
 8000604:	f001 face 	bl	8001ba4 <HAL_UART_Transmit>
	sprintf((char*)myMessage,"Task2 Priority: %d",osThreadGetPriority(myTask02Handle));
 8000608:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <Task2_Handler+0xf4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	0018      	movs	r0, r3
 800060e:	f001 ffce 	bl	80025ae <osThreadGetPriority>
 8000612:	0003      	movs	r3, r0
 8000614:	001a      	movs	r2, r3
 8000616:	4928      	ldr	r1, [pc, #160]	; (80006b8 <Task2_Handler+0xf8>)
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <Task2_Handler+0xe4>)
 800061a:	0018      	movs	r0, r3
 800061c:	f003 f87a 	bl	8003714 <siprintf>
	HAL_UART_Transmit(&huart1, myMessage, sizeof(myMessage), 1000);
 8000620:	23fa      	movs	r3, #250	; 0xfa
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	491f      	ldr	r1, [pc, #124]	; (80006a4 <Task2_Handler+0xe4>)
 8000626:	4820      	ldr	r0, [pc, #128]	; (80006a8 <Task2_Handler+0xe8>)
 8000628:	2232      	movs	r2, #50	; 0x32
 800062a:	f001 fabb 	bl	8001ba4 <HAL_UART_Transmit>


  for(;;)
  {

		sprintf((char*)myMessage,"Task2 is running...\r\n");
 800062e:	4a1c      	ldr	r2, [pc, #112]	; (80006a0 <Task2_Handler+0xe0>)
 8000630:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <Task2_Handler+0xe4>)
 8000632:	0011      	movs	r1, r2
 8000634:	0018      	movs	r0, r3
 8000636:	f003 f86d 	bl	8003714 <siprintf>
		HAL_UART_Transmit(&huart1, myMessage, sizeof(myMessage), 1000);
 800063a:	23fa      	movs	r3, #250	; 0xfa
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	4919      	ldr	r1, [pc, #100]	; (80006a4 <Task2_Handler+0xe4>)
 8000640:	4819      	ldr	r0, [pc, #100]	; (80006a8 <Task2_Handler+0xe8>)
 8000642:	2232      	movs	r2, #50	; 0x32
 8000644:	f001 faae 	bl	8001ba4 <HAL_UART_Transmit>

	  if(buttonState == 1)
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <Task2_Handler+0xfc>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d1ee      	bne.n	800062e <Task2_Handler+0x6e>
	  {
		  buttonState = 0;
 8000650:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <Task2_Handler+0xfc>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]

		  p1 = osThreadGetPriority(myTask01Handle);
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <Task2_Handler+0xec>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	250e      	movs	r5, #14
 800065c:	197c      	adds	r4, r7, r5
 800065e:	0018      	movs	r0, r3
 8000660:	f001 ffa5 	bl	80025ae <osThreadGetPriority>
 8000664:	0003      	movs	r3, r0
 8000666:	8023      	strh	r3, [r4, #0]
		  p2 = osThreadGetPriority(myTask02Handle) ;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <Task2_Handler+0xf4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	260c      	movs	r6, #12
 800066e:	19bc      	adds	r4, r7, r6
 8000670:	0018      	movs	r0, r3
 8000672:	f001 ff9c 	bl	80025ae <osThreadGetPriority>
 8000676:	0003      	movs	r3, r0
 8000678:	8023      	strh	r3, [r4, #0]

		  osThreadSetPriority(myTask01Handle, p2);
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <Task2_Handler+0xec>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	19bb      	adds	r3, r7, r6
 8000680:	2100      	movs	r1, #0
 8000682:	5e5b      	ldrsh	r3, [r3, r1]
 8000684:	0019      	movs	r1, r3
 8000686:	0010      	movs	r0, r2
 8000688:	f001 ff79 	bl	800257e <osThreadSetPriority>
		  osThreadSetPriority(myTask02Handle, p1);
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <Task2_Handler+0xf4>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	197b      	adds	r3, r7, r5
 8000692:	2100      	movs	r1, #0
 8000694:	5e5b      	ldrsh	r3, [r3, r1]
 8000696:	0019      	movs	r1, r3
 8000698:	0010      	movs	r0, r2
 800069a:	f001 ff70 	bl	800257e <osThreadSetPriority>
		sprintf((char*)myMessage,"Task2 is running...\r\n");
 800069e:	e7c6      	b.n	800062e <Task2_Handler+0x6e>
 80006a0:	0800407c 	.word	0x0800407c
 80006a4:	20000374 	.word	0x20000374
 80006a8:	200002e4 	.word	0x200002e4
 80006ac:	2000036c 	.word	0x2000036c
 80006b0:	08004054 	.word	0x08004054
 80006b4:	20000370 	.word	0x20000370
 80006b8:	08004068 	.word	0x08004068
 80006bc:	200003a6 	.word	0x200003a6

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <Error_Handler+0x8>
	...

080006cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <HAL_MspInit+0x50>)
 80006d4:	699a      	ldr	r2, [r3, #24]
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <HAL_MspInit+0x50>)
 80006d8:	2101      	movs	r1, #1
 80006da:	430a      	orrs	r2, r1
 80006dc:	619a      	str	r2, [r3, #24]
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_MspInit+0x50>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	2201      	movs	r2, #1
 80006e4:	4013      	ands	r3, r2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <HAL_MspInit+0x50>)
 80006ec:	69da      	ldr	r2, [r3, #28]
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <HAL_MspInit+0x50>)
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	0549      	lsls	r1, r1, #21
 80006f4:	430a      	orrs	r2, r1
 80006f6:	61da      	str	r2, [r3, #28]
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <HAL_MspInit+0x50>)
 80006fa:	69da      	ldr	r2, [r3, #28]
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	055b      	lsls	r3, r3, #21
 8000700:	4013      	ands	r3, r2
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000706:	2302      	movs	r3, #2
 8000708:	425b      	negs	r3, r3
 800070a:	2200      	movs	r2, #0
 800070c:	2103      	movs	r1, #3
 800070e:	0018      	movs	r0, r3
 8000710:	f000 f9fa 	bl	8000b08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b002      	add	sp, #8
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40021000 	.word	0x40021000

08000720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b08b      	sub	sp, #44	; 0x2c
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	2414      	movs	r4, #20
 800072a:	193b      	adds	r3, r7, r4
 800072c:	0018      	movs	r0, r3
 800072e:	2314      	movs	r3, #20
 8000730:	001a      	movs	r2, r3
 8000732:	2100      	movs	r1, #0
 8000734:	f002 ffe5 	bl	8003702 <memset>
  if(huart->Instance==USART1)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a1d      	ldr	r2, [pc, #116]	; (80007b4 <HAL_UART_MspInit+0x94>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d133      	bne.n	80007aa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000742:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <HAL_UART_MspInit+0x98>)
 8000744:	699a      	ldr	r2, [r3, #24]
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <HAL_UART_MspInit+0x98>)
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	01c9      	lsls	r1, r1, #7
 800074c:	430a      	orrs	r2, r1
 800074e:	619a      	str	r2, [r3, #24]
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <HAL_UART_MspInit+0x98>)
 8000752:	699a      	ldr	r2, [r3, #24]
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	01db      	lsls	r3, r3, #7
 8000758:	4013      	ands	r3, r2
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <HAL_UART_MspInit+0x98>)
 8000760:	695a      	ldr	r2, [r3, #20]
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <HAL_UART_MspInit+0x98>)
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	0289      	lsls	r1, r1, #10
 8000768:	430a      	orrs	r2, r1
 800076a:	615a      	str	r2, [r3, #20]
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <HAL_UART_MspInit+0x98>)
 800076e:	695a      	ldr	r2, [r3, #20]
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	029b      	lsls	r3, r3, #10
 8000774:	4013      	ands	r3, r2
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800077a:	193b      	adds	r3, r7, r4
 800077c:	22c0      	movs	r2, #192	; 0xc0
 800077e:	00d2      	lsls	r2, r2, #3
 8000780:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	0021      	movs	r1, r4
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2202      	movs	r2, #2
 8000788:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2203      	movs	r2, #3
 8000794:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2201      	movs	r2, #1
 800079a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079c:	187a      	adds	r2, r7, r1
 800079e:	2390      	movs	r3, #144	; 0x90
 80007a0:	05db      	lsls	r3, r3, #23
 80007a2:	0011      	movs	r1, r2
 80007a4:	0018      	movs	r0, r3
 80007a6:	f000 f9e1 	bl	8000b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b00b      	add	sp, #44	; 0x2c
 80007b0:	bd90      	pop	{r4, r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	40013800 	.word	0x40013800
 80007b8:	40021000 	.word	0x40021000

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <NMI_Handler+0x4>

080007c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <HardFault_Handler+0x4>

080007c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007cc:	f000 f8d4 	bl	8000978 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007d0:	f002 fc70 	bl	80030b4 <xTaskGetSchedulerState>
 80007d4:	0003      	movs	r3, r0
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d001      	beq.n	80007de <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007da:	f002 fd7d 	bl	80032d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==1)
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	019b      	lsls	r3, r3, #6
 80007ec:	4a09      	ldr	r2, [pc, #36]	; (8000814 <EXTI4_15_IRQHandler+0x30>)
 80007ee:	0019      	movs	r1, r3
 80007f0:	0010      	movs	r0, r2
 80007f2:	f000 fb33 	bl	8000e5c <HAL_GPIO_ReadPin>
 80007f6:	0003      	movs	r3, r0
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d102      	bne.n	8000802 <EXTI4_15_IRQHandler+0x1e>
	{
		//while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==1) ;
		buttonState=1;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <EXTI4_15_IRQHandler+0x34>)
 80007fe:	2201      	movs	r2, #1
 8000800:	701a      	strb	r2, [r3, #0]
	}



  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000802:	2380      	movs	r3, #128	; 0x80
 8000804:	019b      	lsls	r3, r3, #6
 8000806:	0018      	movs	r0, r3
 8000808:	f000 fb62 	bl	8000ed0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	48000800 	.word	0x48000800
 8000818:	200003a6 	.word	0x200003a6

0800081c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000824:	4a14      	ldr	r2, [pc, #80]	; (8000878 <_sbrk+0x5c>)
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <_sbrk+0x60>)
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000830:	4b13      	ldr	r3, [pc, #76]	; (8000880 <_sbrk+0x64>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d102      	bne.n	800083e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <_sbrk+0x64>)
 800083a:	4a12      	ldr	r2, [pc, #72]	; (8000884 <_sbrk+0x68>)
 800083c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <_sbrk+0x64>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	18d3      	adds	r3, r2, r3
 8000846:	693a      	ldr	r2, [r7, #16]
 8000848:	429a      	cmp	r2, r3
 800084a:	d207      	bcs.n	800085c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800084c:	f002 ff26 	bl	800369c <__errno>
 8000850:	0003      	movs	r3, r0
 8000852:	220c      	movs	r2, #12
 8000854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000856:	2301      	movs	r3, #1
 8000858:	425b      	negs	r3, r3
 800085a:	e009      	b.n	8000870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <_sbrk+0x64>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000862:	4b07      	ldr	r3, [pc, #28]	; (8000880 <_sbrk+0x64>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	18d2      	adds	r2, r2, r3
 800086a:	4b05      	ldr	r3, [pc, #20]	; (8000880 <_sbrk+0x64>)
 800086c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800086e:	68fb      	ldr	r3, [r7, #12]
}
 8000870:	0018      	movs	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	b006      	add	sp, #24
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20004000 	.word	0x20004000
 800087c:	00000400 	.word	0x00000400
 8000880:	200003a8 	.word	0x200003a8
 8000884:	20001108 	.word	0x20001108

08000888 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000894:	480d      	ldr	r0, [pc, #52]	; (80008cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000896:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000898:	f7ff fff6 	bl	8000888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800089e:	490d      	ldr	r1, [pc, #52]	; (80008d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a0:	4a0d      	ldr	r2, [pc, #52]	; (80008d8 <LoopForever+0xe>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a4:	e002      	b.n	80008ac <LoopCopyDataInit>

080008a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008aa:	3304      	adds	r3, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b0:	d3f9      	bcc.n	80008a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b4:	4c0a      	ldr	r4, [pc, #40]	; (80008e0 <LoopForever+0x16>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b8:	e001      	b.n	80008be <LoopFillZerobss>

080008ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008bc:	3204      	adds	r2, #4

080008be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c0:	d3fb      	bcc.n	80008ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008c2:	f002 fef1 	bl	80036a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008c6:	f7ff fccd 	bl	8000264 <main>

080008ca <LoopForever>:

LoopForever:
    b LoopForever
 80008ca:	e7fe      	b.n	80008ca <LoopForever>
  ldr   r0, =_estack
 80008cc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80008d8:	08004110 	.word	0x08004110
  ldr r2, =_sbss
 80008dc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80008e0:	20001104 	.word	0x20001104

080008e4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC1_COMP_IRQHandler>
	...

080008e8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <HAL_Init+0x24>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_Init+0x24>)
 80008f2:	2110      	movs	r1, #16
 80008f4:	430a      	orrs	r2, r1
 80008f6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008f8:	2003      	movs	r0, #3
 80008fa:	f000 f809 	bl	8000910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008fe:	f7ff fee5 	bl	80006cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000902:	2300      	movs	r3, #0
}
 8000904:	0018      	movs	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	40022000 	.word	0x40022000

08000910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <HAL_InitTick+0x5c>)
 800091a:	681c      	ldr	r4, [r3, #0]
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <HAL_InitTick+0x60>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	0019      	movs	r1, r3
 8000922:	23fa      	movs	r3, #250	; 0xfa
 8000924:	0098      	lsls	r0, r3, #2
 8000926:	f7ff fbf9 	bl	800011c <__udivsi3>
 800092a:	0003      	movs	r3, r0
 800092c:	0019      	movs	r1, r3
 800092e:	0020      	movs	r0, r4
 8000930:	f7ff fbf4 	bl	800011c <__udivsi3>
 8000934:	0003      	movs	r3, r0
 8000936:	0018      	movs	r0, r3
 8000938:	f000 f90b 	bl	8000b52 <HAL_SYSTICK_Config>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d001      	beq.n	8000944 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000940:	2301      	movs	r3, #1
 8000942:	e00f      	b.n	8000964 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b03      	cmp	r3, #3
 8000948:	d80b      	bhi.n	8000962 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800094a:	6879      	ldr	r1, [r7, #4]
 800094c:	2301      	movs	r3, #1
 800094e:	425b      	negs	r3, r3
 8000950:	2200      	movs	r2, #0
 8000952:	0018      	movs	r0, r3
 8000954:	f000 f8d8 	bl	8000b08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_InitTick+0x64>)
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800095e:	2300      	movs	r3, #0
 8000960:	e000      	b.n	8000964 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
}
 8000964:	0018      	movs	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	b003      	add	sp, #12
 800096a:	bd90      	pop	{r4, r7, pc}
 800096c:	20000000 	.word	0x20000000
 8000970:	20000008 	.word	0x20000008
 8000974:	20000004 	.word	0x20000004

08000978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <HAL_IncTick+0x1c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	001a      	movs	r2, r3
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <HAL_IncTick+0x20>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	18d2      	adds	r2, r2, r3
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <HAL_IncTick+0x20>)
 800098a:	601a      	str	r2, [r3, #0]
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	20000008 	.word	0x20000008
 8000998:	200003ac 	.word	0x200003ac

0800099c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  return uwTick;
 80009a0:	4b02      	ldr	r3, [pc, #8]	; (80009ac <HAL_GetTick+0x10>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	0018      	movs	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	200003ac 	.word	0x200003ac

080009b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	0002      	movs	r2, r0
 80009b8:	1dfb      	adds	r3, r7, #7
 80009ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009bc:	1dfb      	adds	r3, r7, #7
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b7f      	cmp	r3, #127	; 0x7f
 80009c2:	d809      	bhi.n	80009d8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c4:	1dfb      	adds	r3, r7, #7
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	001a      	movs	r2, r3
 80009ca:	231f      	movs	r3, #31
 80009cc:	401a      	ands	r2, r3
 80009ce:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <__NVIC_EnableIRQ+0x30>)
 80009d0:	2101      	movs	r1, #1
 80009d2:	4091      	lsls	r1, r2
 80009d4:	000a      	movs	r2, r1
 80009d6:	601a      	str	r2, [r3, #0]
  }
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	b002      	add	sp, #8
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	e000e100 	.word	0xe000e100

080009e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	0002      	movs	r2, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b7f      	cmp	r3, #127	; 0x7f
 80009f8:	d828      	bhi.n	8000a4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009fa:	4a2f      	ldr	r2, [pc, #188]	; (8000ab8 <__NVIC_SetPriority+0xd4>)
 80009fc:	1dfb      	adds	r3, r7, #7
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	089b      	lsrs	r3, r3, #2
 8000a04:	33c0      	adds	r3, #192	; 0xc0
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	589b      	ldr	r3, [r3, r2]
 8000a0a:	1dfa      	adds	r2, r7, #7
 8000a0c:	7812      	ldrb	r2, [r2, #0]
 8000a0e:	0011      	movs	r1, r2
 8000a10:	2203      	movs	r2, #3
 8000a12:	400a      	ands	r2, r1
 8000a14:	00d2      	lsls	r2, r2, #3
 8000a16:	21ff      	movs	r1, #255	; 0xff
 8000a18:	4091      	lsls	r1, r2
 8000a1a:	000a      	movs	r2, r1
 8000a1c:	43d2      	mvns	r2, r2
 8000a1e:	401a      	ands	r2, r3
 8000a20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	019b      	lsls	r3, r3, #6
 8000a26:	22ff      	movs	r2, #255	; 0xff
 8000a28:	401a      	ands	r2, r3
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	0018      	movs	r0, r3
 8000a30:	2303      	movs	r3, #3
 8000a32:	4003      	ands	r3, r0
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a38:	481f      	ldr	r0, [pc, #124]	; (8000ab8 <__NVIC_SetPriority+0xd4>)
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b25b      	sxtb	r3, r3
 8000a40:	089b      	lsrs	r3, r3, #2
 8000a42:	430a      	orrs	r2, r1
 8000a44:	33c0      	adds	r3, #192	; 0xc0
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a4a:	e031      	b.n	8000ab0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a4c:	4a1b      	ldr	r2, [pc, #108]	; (8000abc <__NVIC_SetPriority+0xd8>)
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	0019      	movs	r1, r3
 8000a54:	230f      	movs	r3, #15
 8000a56:	400b      	ands	r3, r1
 8000a58:	3b08      	subs	r3, #8
 8000a5a:	089b      	lsrs	r3, r3, #2
 8000a5c:	3306      	adds	r3, #6
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	18d3      	adds	r3, r2, r3
 8000a62:	3304      	adds	r3, #4
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	1dfa      	adds	r2, r7, #7
 8000a68:	7812      	ldrb	r2, [r2, #0]
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	400a      	ands	r2, r1
 8000a70:	00d2      	lsls	r2, r2, #3
 8000a72:	21ff      	movs	r1, #255	; 0xff
 8000a74:	4091      	lsls	r1, r2
 8000a76:	000a      	movs	r2, r1
 8000a78:	43d2      	mvns	r2, r2
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	019b      	lsls	r3, r3, #6
 8000a82:	22ff      	movs	r2, #255	; 0xff
 8000a84:	401a      	ands	r2, r3
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	4003      	ands	r3, r0
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a94:	4809      	ldr	r0, [pc, #36]	; (8000abc <__NVIC_SetPriority+0xd8>)
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	001c      	movs	r4, r3
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	4023      	ands	r3, r4
 8000aa0:	3b08      	subs	r3, #8
 8000aa2:	089b      	lsrs	r3, r3, #2
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	3306      	adds	r3, #6
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	18c3      	adds	r3, r0, r3
 8000aac:	3304      	adds	r3, #4
 8000aae:	601a      	str	r2, [r3, #0]
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b003      	add	sp, #12
 8000ab6:	bd90      	pop	{r4, r7, pc}
 8000ab8:	e000e100 	.word	0xe000e100
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	045b      	lsls	r3, r3, #17
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d301      	bcc.n	8000ad8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e010      	b.n	8000afa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <SysTick_Config+0x44>)
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	3a01      	subs	r2, #1
 8000ade:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	425b      	negs	r3, r3
 8000ae4:	2103      	movs	r1, #3
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f7ff ff7c 	bl	80009e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <SysTick_Config+0x44>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af2:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <SysTick_Config+0x44>)
 8000af4:	2207      	movs	r2, #7
 8000af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	0018      	movs	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b002      	add	sp, #8
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	e000e010 	.word	0xe000e010

08000b08 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	210f      	movs	r1, #15
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	1c02      	adds	r2, r0, #0
 8000b18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	b25b      	sxtb	r3, r3
 8000b22:	0011      	movs	r1, r2
 8000b24:	0018      	movs	r0, r3
 8000b26:	f7ff ff5d 	bl	80009e4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b004      	add	sp, #16
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	0002      	movs	r2, r0
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	b25b      	sxtb	r3, r3
 8000b44:	0018      	movs	r0, r3
 8000b46:	f7ff ff33 	bl	80009b0 <__NVIC_EnableIRQ>
}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b002      	add	sp, #8
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f7ff ffaf 	bl	8000ac0 <SysTick_Config>
 8000b62:	0003      	movs	r3, r0
}
 8000b64:	0018      	movs	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b002      	add	sp, #8
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7a:	e155      	b.n	8000e28 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2101      	movs	r1, #1
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	4091      	lsls	r1, r2
 8000b86:	000a      	movs	r2, r1
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d100      	bne.n	8000b94 <HAL_GPIO_Init+0x28>
 8000b92:	e146      	b.n	8000e22 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2203      	movs	r2, #3
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d005      	beq.n	8000bac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d130      	bne.n	8000c0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	409a      	lsls	r2, r3
 8000bba:	0013      	movs	r3, r2
 8000bbc:	43da      	mvns	r2, r3
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	68da      	ldr	r2, [r3, #12]
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	409a      	lsls	r2, r3
 8000bce:	0013      	movs	r3, r2
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000be2:	2201      	movs	r2, #1
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	409a      	lsls	r2, r3
 8000be8:	0013      	movs	r3, r2
 8000bea:	43da      	mvns	r2, r3
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	091b      	lsrs	r3, r3, #4
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	409a      	lsls	r2, r3
 8000c00:	0013      	movs	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2203      	movs	r2, #3
 8000c14:	4013      	ands	r3, r2
 8000c16:	2b03      	cmp	r3, #3
 8000c18:	d017      	beq.n	8000c4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	2203      	movs	r2, #3
 8000c26:	409a      	lsls	r2, r3
 8000c28:	0013      	movs	r3, r2
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	409a      	lsls	r2, r3
 8000c3c:	0013      	movs	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2203      	movs	r2, #3
 8000c50:	4013      	ands	r3, r2
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d123      	bne.n	8000c9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	08da      	lsrs	r2, r3, #3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	3208      	adds	r2, #8
 8000c5e:	0092      	lsls	r2, r2, #2
 8000c60:	58d3      	ldr	r3, [r2, r3]
 8000c62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	2207      	movs	r2, #7
 8000c68:	4013      	ands	r3, r2
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	220f      	movs	r2, #15
 8000c6e:	409a      	lsls	r2, r3
 8000c70:	0013      	movs	r3, r2
 8000c72:	43da      	mvns	r2, r3
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	4013      	ands	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	691a      	ldr	r2, [r3, #16]
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	2107      	movs	r1, #7
 8000c82:	400b      	ands	r3, r1
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	409a      	lsls	r2, r3
 8000c88:	0013      	movs	r3, r2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	08da      	lsrs	r2, r3, #3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3208      	adds	r2, #8
 8000c98:	0092      	lsls	r2, r2, #2
 8000c9a:	6939      	ldr	r1, [r7, #16]
 8000c9c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2203      	movs	r2, #3
 8000caa:	409a      	lsls	r2, r3
 8000cac:	0013      	movs	r3, r2
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2203      	movs	r2, #3
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	409a      	lsls	r2, r3
 8000cc4:	0013      	movs	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	23c0      	movs	r3, #192	; 0xc0
 8000cd8:	029b      	lsls	r3, r3, #10
 8000cda:	4013      	ands	r3, r2
 8000cdc:	d100      	bne.n	8000ce0 <HAL_GPIO_Init+0x174>
 8000cde:	e0a0      	b.n	8000e22 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce0:	4b57      	ldr	r3, [pc, #348]	; (8000e40 <HAL_GPIO_Init+0x2d4>)
 8000ce2:	699a      	ldr	r2, [r3, #24]
 8000ce4:	4b56      	ldr	r3, [pc, #344]	; (8000e40 <HAL_GPIO_Init+0x2d4>)
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	619a      	str	r2, [r3, #24]
 8000cec:	4b54      	ldr	r3, [pc, #336]	; (8000e40 <HAL_GPIO_Init+0x2d4>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cf8:	4a52      	ldr	r2, [pc, #328]	; (8000e44 <HAL_GPIO_Init+0x2d8>)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	089b      	lsrs	r3, r3, #2
 8000cfe:	3302      	adds	r3, #2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	589b      	ldr	r3, [r3, r2]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	2203      	movs	r2, #3
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	220f      	movs	r2, #15
 8000d10:	409a      	lsls	r2, r3
 8000d12:	0013      	movs	r3, r2
 8000d14:	43da      	mvns	r2, r3
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	2390      	movs	r3, #144	; 0x90
 8000d20:	05db      	lsls	r3, r3, #23
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d019      	beq.n	8000d5a <HAL_GPIO_Init+0x1ee>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a47      	ldr	r2, [pc, #284]	; (8000e48 <HAL_GPIO_Init+0x2dc>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d013      	beq.n	8000d56 <HAL_GPIO_Init+0x1ea>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a46      	ldr	r2, [pc, #280]	; (8000e4c <HAL_GPIO_Init+0x2e0>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d00d      	beq.n	8000d52 <HAL_GPIO_Init+0x1e6>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a45      	ldr	r2, [pc, #276]	; (8000e50 <HAL_GPIO_Init+0x2e4>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d007      	beq.n	8000d4e <HAL_GPIO_Init+0x1e2>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a44      	ldr	r2, [pc, #272]	; (8000e54 <HAL_GPIO_Init+0x2e8>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d101      	bne.n	8000d4a <HAL_GPIO_Init+0x1de>
 8000d46:	2304      	movs	r3, #4
 8000d48:	e008      	b.n	8000d5c <HAL_GPIO_Init+0x1f0>
 8000d4a:	2305      	movs	r3, #5
 8000d4c:	e006      	b.n	8000d5c <HAL_GPIO_Init+0x1f0>
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e004      	b.n	8000d5c <HAL_GPIO_Init+0x1f0>
 8000d52:	2302      	movs	r3, #2
 8000d54:	e002      	b.n	8000d5c <HAL_GPIO_Init+0x1f0>
 8000d56:	2301      	movs	r3, #1
 8000d58:	e000      	b.n	8000d5c <HAL_GPIO_Init+0x1f0>
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	2103      	movs	r1, #3
 8000d60:	400a      	ands	r2, r1
 8000d62:	0092      	lsls	r2, r2, #2
 8000d64:	4093      	lsls	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d6c:	4935      	ldr	r1, [pc, #212]	; (8000e44 <HAL_GPIO_Init+0x2d8>)
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	3302      	adds	r3, #2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d7a:	4b37      	ldr	r3, [pc, #220]	; (8000e58 <HAL_GPIO_Init+0x2ec>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	43da      	mvns	r2, r3
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	035b      	lsls	r3, r3, #13
 8000d92:	4013      	ands	r3, r2
 8000d94:	d003      	beq.n	8000d9e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d9e:	4b2e      	ldr	r3, [pc, #184]	; (8000e58 <HAL_GPIO_Init+0x2ec>)
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000da4:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <HAL_GPIO_Init+0x2ec>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	43da      	mvns	r2, r3
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	039b      	lsls	r3, r3, #14
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	d003      	beq.n	8000dc8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dc8:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <HAL_GPIO_Init+0x2ec>)
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000dce:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <HAL_GPIO_Init+0x2ec>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	029b      	lsls	r3, r3, #10
 8000de6:	4013      	ands	r3, r2
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <HAL_GPIO_Init+0x2ec>)
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <HAL_GPIO_Init+0x2ec>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	43da      	mvns	r2, r3
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	025b      	lsls	r3, r3, #9
 8000e10:	4013      	ands	r3, r2
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <HAL_GPIO_Init+0x2ec>)
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	3301      	adds	r3, #1
 8000e26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	40da      	lsrs	r2, r3
 8000e30:	1e13      	subs	r3, r2, #0
 8000e32:	d000      	beq.n	8000e36 <HAL_GPIO_Init+0x2ca>
 8000e34:	e6a2      	b.n	8000b7c <HAL_GPIO_Init+0x10>
  } 
}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b006      	add	sp, #24
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40010000 	.word	0x40010000
 8000e48:	48000400 	.word	0x48000400
 8000e4c:	48000800 	.word	0x48000800
 8000e50:	48000c00 	.word	0x48000c00
 8000e54:	48001000 	.word	0x48001000
 8000e58:	40010400 	.word	0x40010400

08000e5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	000a      	movs	r2, r1
 8000e66:	1cbb      	adds	r3, r7, #2
 8000e68:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	1cba      	adds	r2, r7, #2
 8000e70:	8812      	ldrh	r2, [r2, #0]
 8000e72:	4013      	ands	r3, r2
 8000e74:	d004      	beq.n	8000e80 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000e76:	230f      	movs	r3, #15
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	701a      	strb	r2, [r3, #0]
 8000e7e:	e003      	b.n	8000e88 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e80:	230f      	movs	r3, #15
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000e88:	230f      	movs	r3, #15
 8000e8a:	18fb      	adds	r3, r7, r3
 8000e8c:	781b      	ldrb	r3, [r3, #0]
  }
 8000e8e:	0018      	movs	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b004      	add	sp, #16
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	0008      	movs	r0, r1
 8000ea0:	0011      	movs	r1, r2
 8000ea2:	1cbb      	adds	r3, r7, #2
 8000ea4:	1c02      	adds	r2, r0, #0
 8000ea6:	801a      	strh	r2, [r3, #0]
 8000ea8:	1c7b      	adds	r3, r7, #1
 8000eaa:	1c0a      	adds	r2, r1, #0
 8000eac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eae:	1c7b      	adds	r3, r7, #1
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d004      	beq.n	8000ec0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eb6:	1cbb      	adds	r3, r7, #2
 8000eb8:	881a      	ldrh	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ebe:	e003      	b.n	8000ec8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ec0:	1cbb      	adds	r3, r7, #2
 8000ec2:	881a      	ldrh	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b002      	add	sp, #8
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	0002      	movs	r2, r0
 8000ed8:	1dbb      	adds	r3, r7, #6
 8000eda:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	1dba      	adds	r2, r7, #6
 8000ee2:	8812      	ldrh	r2, [r2, #0]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	d008      	beq.n	8000efa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000eea:	1dba      	adds	r2, r7, #6
 8000eec:	8812      	ldrh	r2, [r2, #0]
 8000eee:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ef0:	1dbb      	adds	r3, r7, #6
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f000 f807 	bl	8000f08 <HAL_GPIO_EXTI_Callback>
  }
}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b002      	add	sp, #8
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	40010400 	.word	0x40010400

08000f08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	0002      	movs	r2, r0
 8000f10:	1dbb      	adds	r3, r7, #6
 8000f12:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b002      	add	sp, #8
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d102      	bne.n	8000f30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	f000 fb76 	bl	800161c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2201      	movs	r2, #1
 8000f36:	4013      	ands	r3, r2
 8000f38:	d100      	bne.n	8000f3c <HAL_RCC_OscConfig+0x20>
 8000f3a:	e08e      	b.n	800105a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f3c:	4bc5      	ldr	r3, [pc, #788]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	220c      	movs	r2, #12
 8000f42:	4013      	ands	r3, r2
 8000f44:	2b04      	cmp	r3, #4
 8000f46:	d00e      	beq.n	8000f66 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f48:	4bc2      	ldr	r3, [pc, #776]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	220c      	movs	r2, #12
 8000f4e:	4013      	ands	r3, r2
 8000f50:	2b08      	cmp	r3, #8
 8000f52:	d117      	bne.n	8000f84 <HAL_RCC_OscConfig+0x68>
 8000f54:	4bbf      	ldr	r3, [pc, #764]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	23c0      	movs	r3, #192	; 0xc0
 8000f5a:	025b      	lsls	r3, r3, #9
 8000f5c:	401a      	ands	r2, r3
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	025b      	lsls	r3, r3, #9
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d10e      	bne.n	8000f84 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f66:	4bbb      	ldr	r3, [pc, #748]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	029b      	lsls	r3, r3, #10
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d100      	bne.n	8000f74 <HAL_RCC_OscConfig+0x58>
 8000f72:	e071      	b.n	8001058 <HAL_RCC_OscConfig+0x13c>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d000      	beq.n	8000f7e <HAL_RCC_OscConfig+0x62>
 8000f7c:	e06c      	b.n	8001058 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	f000 fb4c 	bl	800161c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d107      	bne.n	8000f9c <HAL_RCC_OscConfig+0x80>
 8000f8c:	4bb1      	ldr	r3, [pc, #708]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4bb0      	ldr	r3, [pc, #704]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8000f92:	2180      	movs	r1, #128	; 0x80
 8000f94:	0249      	lsls	r1, r1, #9
 8000f96:	430a      	orrs	r2, r1
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	e02f      	b.n	8000ffc <HAL_RCC_OscConfig+0xe0>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d10c      	bne.n	8000fbe <HAL_RCC_OscConfig+0xa2>
 8000fa4:	4bab      	ldr	r3, [pc, #684]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4baa      	ldr	r3, [pc, #680]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8000faa:	49ab      	ldr	r1, [pc, #684]	; (8001258 <HAL_RCC_OscConfig+0x33c>)
 8000fac:	400a      	ands	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	4ba8      	ldr	r3, [pc, #672]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4ba7      	ldr	r3, [pc, #668]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8000fb6:	49a9      	ldr	r1, [pc, #676]	; (800125c <HAL_RCC_OscConfig+0x340>)
 8000fb8:	400a      	ands	r2, r1
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	e01e      	b.n	8000ffc <HAL_RCC_OscConfig+0xe0>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b05      	cmp	r3, #5
 8000fc4:	d10e      	bne.n	8000fe4 <HAL_RCC_OscConfig+0xc8>
 8000fc6:	4ba3      	ldr	r3, [pc, #652]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	4ba2      	ldr	r3, [pc, #648]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8000fcc:	2180      	movs	r1, #128	; 0x80
 8000fce:	02c9      	lsls	r1, r1, #11
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	4b9f      	ldr	r3, [pc, #636]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b9e      	ldr	r3, [pc, #632]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8000fda:	2180      	movs	r1, #128	; 0x80
 8000fdc:	0249      	lsls	r1, r1, #9
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	e00b      	b.n	8000ffc <HAL_RCC_OscConfig+0xe0>
 8000fe4:	4b9b      	ldr	r3, [pc, #620]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b9a      	ldr	r3, [pc, #616]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8000fea:	499b      	ldr	r1, [pc, #620]	; (8001258 <HAL_RCC_OscConfig+0x33c>)
 8000fec:	400a      	ands	r2, r1
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	4b98      	ldr	r3, [pc, #608]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b97      	ldr	r3, [pc, #604]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8000ff6:	4999      	ldr	r1, [pc, #612]	; (800125c <HAL_RCC_OscConfig+0x340>)
 8000ff8:	400a      	ands	r2, r1
 8000ffa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d014      	beq.n	800102e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001004:	f7ff fcca 	bl	800099c <HAL_GetTick>
 8001008:	0003      	movs	r3, r0
 800100a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800100e:	f7ff fcc5 	bl	800099c <HAL_GetTick>
 8001012:	0002      	movs	r2, r0
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b64      	cmp	r3, #100	; 0x64
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e2fd      	b.n	800161c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001020:	4b8c      	ldr	r3, [pc, #560]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	029b      	lsls	r3, r3, #10
 8001028:	4013      	ands	r3, r2
 800102a:	d0f0      	beq.n	800100e <HAL_RCC_OscConfig+0xf2>
 800102c:	e015      	b.n	800105a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102e:	f7ff fcb5 	bl	800099c <HAL_GetTick>
 8001032:	0003      	movs	r3, r0
 8001034:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001038:	f7ff fcb0 	bl	800099c <HAL_GetTick>
 800103c:	0002      	movs	r2, r0
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b64      	cmp	r3, #100	; 0x64
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e2e8      	b.n	800161c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104a:	4b82      	ldr	r3, [pc, #520]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	029b      	lsls	r3, r3, #10
 8001052:	4013      	ands	r3, r2
 8001054:	d1f0      	bne.n	8001038 <HAL_RCC_OscConfig+0x11c>
 8001056:	e000      	b.n	800105a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001058:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2202      	movs	r2, #2
 8001060:	4013      	ands	r3, r2
 8001062:	d100      	bne.n	8001066 <HAL_RCC_OscConfig+0x14a>
 8001064:	e06c      	b.n	8001140 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001066:	4b7b      	ldr	r3, [pc, #492]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	220c      	movs	r2, #12
 800106c:	4013      	ands	r3, r2
 800106e:	d00e      	beq.n	800108e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001070:	4b78      	ldr	r3, [pc, #480]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	220c      	movs	r2, #12
 8001076:	4013      	ands	r3, r2
 8001078:	2b08      	cmp	r3, #8
 800107a:	d11f      	bne.n	80010bc <HAL_RCC_OscConfig+0x1a0>
 800107c:	4b75      	ldr	r3, [pc, #468]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	23c0      	movs	r3, #192	; 0xc0
 8001082:	025b      	lsls	r3, r3, #9
 8001084:	401a      	ands	r2, r3
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	429a      	cmp	r2, r3
 800108c:	d116      	bne.n	80010bc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108e:	4b71      	ldr	r3, [pc, #452]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2202      	movs	r2, #2
 8001094:	4013      	ands	r3, r2
 8001096:	d005      	beq.n	80010a4 <HAL_RCC_OscConfig+0x188>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d001      	beq.n	80010a4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e2bb      	b.n	800161c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a4:	4b6b      	ldr	r3, [pc, #428]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	22f8      	movs	r2, #248	; 0xf8
 80010aa:	4393      	bics	r3, r2
 80010ac:	0019      	movs	r1, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	00da      	lsls	r2, r3, #3
 80010b4:	4b67      	ldr	r3, [pc, #412]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 80010b6:	430a      	orrs	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ba:	e041      	b.n	8001140 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d024      	beq.n	800110e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010c4:	4b63      	ldr	r3, [pc, #396]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b62      	ldr	r3, [pc, #392]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 80010ca:	2101      	movs	r1, #1
 80010cc:	430a      	orrs	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fc64 	bl	800099c <HAL_GetTick>
 80010d4:	0003      	movs	r3, r0
 80010d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010da:	f7ff fc5f 	bl	800099c <HAL_GetTick>
 80010de:	0002      	movs	r2, r0
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e297      	b.n	800161c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ec:	4b59      	ldr	r3, [pc, #356]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2202      	movs	r2, #2
 80010f2:	4013      	ands	r3, r2
 80010f4:	d0f1      	beq.n	80010da <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f6:	4b57      	ldr	r3, [pc, #348]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	22f8      	movs	r2, #248	; 0xf8
 80010fc:	4393      	bics	r3, r2
 80010fe:	0019      	movs	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	00da      	lsls	r2, r3, #3
 8001106:	4b53      	ldr	r3, [pc, #332]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8001108:	430a      	orrs	r2, r1
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	e018      	b.n	8001140 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800110e:	4b51      	ldr	r3, [pc, #324]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b50      	ldr	r3, [pc, #320]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8001114:	2101      	movs	r1, #1
 8001116:	438a      	bics	r2, r1
 8001118:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111a:	f7ff fc3f 	bl	800099c <HAL_GetTick>
 800111e:	0003      	movs	r3, r0
 8001120:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001124:	f7ff fc3a 	bl	800099c <HAL_GetTick>
 8001128:	0002      	movs	r2, r0
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e272      	b.n	800161c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001136:	4b47      	ldr	r3, [pc, #284]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2202      	movs	r2, #2
 800113c:	4013      	ands	r3, r2
 800113e:	d1f1      	bne.n	8001124 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2208      	movs	r2, #8
 8001146:	4013      	ands	r3, r2
 8001148:	d036      	beq.n	80011b8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d019      	beq.n	8001186 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001152:	4b40      	ldr	r3, [pc, #256]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8001154:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001156:	4b3f      	ldr	r3, [pc, #252]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8001158:	2101      	movs	r1, #1
 800115a:	430a      	orrs	r2, r1
 800115c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115e:	f7ff fc1d 	bl	800099c <HAL_GetTick>
 8001162:	0003      	movs	r3, r0
 8001164:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001168:	f7ff fc18 	bl	800099c <HAL_GetTick>
 800116c:	0002      	movs	r2, r0
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e250      	b.n	800161c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117a:	4b36      	ldr	r3, [pc, #216]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	2202      	movs	r2, #2
 8001180:	4013      	ands	r3, r2
 8001182:	d0f1      	beq.n	8001168 <HAL_RCC_OscConfig+0x24c>
 8001184:	e018      	b.n	80011b8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001186:	4b33      	ldr	r3, [pc, #204]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8001188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800118a:	4b32      	ldr	r3, [pc, #200]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 800118c:	2101      	movs	r1, #1
 800118e:	438a      	bics	r2, r1
 8001190:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001192:	f7ff fc03 	bl	800099c <HAL_GetTick>
 8001196:	0003      	movs	r3, r0
 8001198:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800119c:	f7ff fbfe 	bl	800099c <HAL_GetTick>
 80011a0:	0002      	movs	r2, r0
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e236      	b.n	800161c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ae:	4b29      	ldr	r3, [pc, #164]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	2202      	movs	r2, #2
 80011b4:	4013      	ands	r3, r2
 80011b6:	d1f1      	bne.n	800119c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2204      	movs	r2, #4
 80011be:	4013      	ands	r3, r2
 80011c0:	d100      	bne.n	80011c4 <HAL_RCC_OscConfig+0x2a8>
 80011c2:	e0b5      	b.n	8001330 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011c4:	201f      	movs	r0, #31
 80011c6:	183b      	adds	r3, r7, r0
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011cc:	4b21      	ldr	r3, [pc, #132]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 80011ce:	69da      	ldr	r2, [r3, #28]
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	055b      	lsls	r3, r3, #21
 80011d4:	4013      	ands	r3, r2
 80011d6:	d110      	bne.n	80011fa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011d8:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 80011da:	69da      	ldr	r2, [r3, #28]
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 80011de:	2180      	movs	r1, #128	; 0x80
 80011e0:	0549      	lsls	r1, r1, #21
 80011e2:	430a      	orrs	r2, r1
 80011e4:	61da      	str	r2, [r3, #28]
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 80011e8:	69da      	ldr	r2, [r3, #28]
 80011ea:	2380      	movs	r3, #128	; 0x80
 80011ec:	055b      	lsls	r3, r3, #21
 80011ee:	4013      	ands	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011f4:	183b      	adds	r3, r7, r0
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <HAL_RCC_OscConfig+0x344>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4013      	ands	r3, r2
 8001204:	d11a      	bne.n	800123c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <HAL_RCC_OscConfig+0x344>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_RCC_OscConfig+0x344>)
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	0049      	lsls	r1, r1, #1
 8001210:	430a      	orrs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001214:	f7ff fbc2 	bl	800099c <HAL_GetTick>
 8001218:	0003      	movs	r3, r0
 800121a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800121e:	f7ff fbbd 	bl	800099c <HAL_GetTick>
 8001222:	0002      	movs	r2, r0
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b64      	cmp	r3, #100	; 0x64
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e1f5      	b.n	800161c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <HAL_RCC_OscConfig+0x344>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4013      	ands	r3, r2
 800123a:	d0f0      	beq.n	800121e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d10f      	bne.n	8001264 <HAL_RCC_OscConfig+0x348>
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8001246:	6a1a      	ldr	r2, [r3, #32]
 8001248:	4b02      	ldr	r3, [pc, #8]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 800124a:	2101      	movs	r1, #1
 800124c:	430a      	orrs	r2, r1
 800124e:	621a      	str	r2, [r3, #32]
 8001250:	e036      	b.n	80012c0 <HAL_RCC_OscConfig+0x3a4>
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	40021000 	.word	0x40021000
 8001258:	fffeffff 	.word	0xfffeffff
 800125c:	fffbffff 	.word	0xfffbffff
 8001260:	40007000 	.word	0x40007000
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d10c      	bne.n	8001286 <HAL_RCC_OscConfig+0x36a>
 800126c:	4bca      	ldr	r3, [pc, #808]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 800126e:	6a1a      	ldr	r2, [r3, #32]
 8001270:	4bc9      	ldr	r3, [pc, #804]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001272:	2101      	movs	r1, #1
 8001274:	438a      	bics	r2, r1
 8001276:	621a      	str	r2, [r3, #32]
 8001278:	4bc7      	ldr	r3, [pc, #796]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 800127a:	6a1a      	ldr	r2, [r3, #32]
 800127c:	4bc6      	ldr	r3, [pc, #792]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 800127e:	2104      	movs	r1, #4
 8001280:	438a      	bics	r2, r1
 8001282:	621a      	str	r2, [r3, #32]
 8001284:	e01c      	b.n	80012c0 <HAL_RCC_OscConfig+0x3a4>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	2b05      	cmp	r3, #5
 800128c:	d10c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x38c>
 800128e:	4bc2      	ldr	r3, [pc, #776]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001290:	6a1a      	ldr	r2, [r3, #32]
 8001292:	4bc1      	ldr	r3, [pc, #772]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001294:	2104      	movs	r1, #4
 8001296:	430a      	orrs	r2, r1
 8001298:	621a      	str	r2, [r3, #32]
 800129a:	4bbf      	ldr	r3, [pc, #764]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 800129c:	6a1a      	ldr	r2, [r3, #32]
 800129e:	4bbe      	ldr	r3, [pc, #760]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 80012a0:	2101      	movs	r1, #1
 80012a2:	430a      	orrs	r2, r1
 80012a4:	621a      	str	r2, [r3, #32]
 80012a6:	e00b      	b.n	80012c0 <HAL_RCC_OscConfig+0x3a4>
 80012a8:	4bbb      	ldr	r3, [pc, #748]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 80012aa:	6a1a      	ldr	r2, [r3, #32]
 80012ac:	4bba      	ldr	r3, [pc, #744]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 80012ae:	2101      	movs	r1, #1
 80012b0:	438a      	bics	r2, r1
 80012b2:	621a      	str	r2, [r3, #32]
 80012b4:	4bb8      	ldr	r3, [pc, #736]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 80012b6:	6a1a      	ldr	r2, [r3, #32]
 80012b8:	4bb7      	ldr	r3, [pc, #732]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 80012ba:	2104      	movs	r1, #4
 80012bc:	438a      	bics	r2, r1
 80012be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d014      	beq.n	80012f2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c8:	f7ff fb68 	bl	800099c <HAL_GetTick>
 80012cc:	0003      	movs	r3, r0
 80012ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d0:	e009      	b.n	80012e6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012d2:	f7ff fb63 	bl	800099c <HAL_GetTick>
 80012d6:	0002      	movs	r2, r0
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	4aaf      	ldr	r2, [pc, #700]	; (800159c <HAL_RCC_OscConfig+0x680>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e19a      	b.n	800161c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e6:	4bac      	ldr	r3, [pc, #688]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	2202      	movs	r2, #2
 80012ec:	4013      	ands	r3, r2
 80012ee:	d0f0      	beq.n	80012d2 <HAL_RCC_OscConfig+0x3b6>
 80012f0:	e013      	b.n	800131a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f2:	f7ff fb53 	bl	800099c <HAL_GetTick>
 80012f6:	0003      	movs	r3, r0
 80012f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012fa:	e009      	b.n	8001310 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012fc:	f7ff fb4e 	bl	800099c <HAL_GetTick>
 8001300:	0002      	movs	r2, r0
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	4aa5      	ldr	r2, [pc, #660]	; (800159c <HAL_RCC_OscConfig+0x680>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e185      	b.n	800161c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001310:	4ba1      	ldr	r3, [pc, #644]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	2202      	movs	r2, #2
 8001316:	4013      	ands	r3, r2
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800131a:	231f      	movs	r3, #31
 800131c:	18fb      	adds	r3, r7, r3
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d105      	bne.n	8001330 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001324:	4b9c      	ldr	r3, [pc, #624]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001326:	69da      	ldr	r2, [r3, #28]
 8001328:	4b9b      	ldr	r3, [pc, #620]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 800132a:	499d      	ldr	r1, [pc, #628]	; (80015a0 <HAL_RCC_OscConfig+0x684>)
 800132c:	400a      	ands	r2, r1
 800132e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2210      	movs	r2, #16
 8001336:	4013      	ands	r3, r2
 8001338:	d063      	beq.n	8001402 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d12a      	bne.n	8001398 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001342:	4b95      	ldr	r3, [pc, #596]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001346:	4b94      	ldr	r3, [pc, #592]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001348:	2104      	movs	r1, #4
 800134a:	430a      	orrs	r2, r1
 800134c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800134e:	4b92      	ldr	r3, [pc, #584]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001352:	4b91      	ldr	r3, [pc, #580]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001354:	2101      	movs	r1, #1
 8001356:	430a      	orrs	r2, r1
 8001358:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135a:	f7ff fb1f 	bl	800099c <HAL_GetTick>
 800135e:	0003      	movs	r3, r0
 8001360:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001364:	f7ff fb1a 	bl	800099c <HAL_GetTick>
 8001368:	0002      	movs	r2, r0
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e152      	b.n	800161c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001376:	4b88      	ldr	r3, [pc, #544]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800137a:	2202      	movs	r2, #2
 800137c:	4013      	ands	r3, r2
 800137e:	d0f1      	beq.n	8001364 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001380:	4b85      	ldr	r3, [pc, #532]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001384:	22f8      	movs	r2, #248	; 0xf8
 8001386:	4393      	bics	r3, r2
 8001388:	0019      	movs	r1, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	00da      	lsls	r2, r3, #3
 8001390:	4b81      	ldr	r3, [pc, #516]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001392:	430a      	orrs	r2, r1
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
 8001396:	e034      	b.n	8001402 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	3305      	adds	r3, #5
 800139e:	d111      	bne.n	80013c4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80013a0:	4b7d      	ldr	r3, [pc, #500]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 80013a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013a4:	4b7c      	ldr	r3, [pc, #496]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 80013a6:	2104      	movs	r1, #4
 80013a8:	438a      	bics	r2, r1
 80013aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013ac:	4b7a      	ldr	r3, [pc, #488]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 80013ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b0:	22f8      	movs	r2, #248	; 0xf8
 80013b2:	4393      	bics	r3, r2
 80013b4:	0019      	movs	r1, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	00da      	lsls	r2, r3, #3
 80013bc:	4b76      	ldr	r3, [pc, #472]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 80013be:	430a      	orrs	r2, r1
 80013c0:	635a      	str	r2, [r3, #52]	; 0x34
 80013c2:	e01e      	b.n	8001402 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013c4:	4b74      	ldr	r3, [pc, #464]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 80013c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013c8:	4b73      	ldr	r3, [pc, #460]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 80013ca:	2104      	movs	r1, #4
 80013cc:	430a      	orrs	r2, r1
 80013ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80013d0:	4b71      	ldr	r3, [pc, #452]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 80013d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013d4:	4b70      	ldr	r3, [pc, #448]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 80013d6:	2101      	movs	r1, #1
 80013d8:	438a      	bics	r2, r1
 80013da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013dc:	f7ff fade 	bl	800099c <HAL_GetTick>
 80013e0:	0003      	movs	r3, r0
 80013e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013e6:	f7ff fad9 	bl	800099c <HAL_GetTick>
 80013ea:	0002      	movs	r2, r0
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e111      	b.n	800161c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013f8:	4b67      	ldr	r3, [pc, #412]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 80013fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fc:	2202      	movs	r2, #2
 80013fe:	4013      	ands	r3, r2
 8001400:	d1f1      	bne.n	80013e6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2220      	movs	r2, #32
 8001408:	4013      	ands	r3, r2
 800140a:	d05c      	beq.n	80014c6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800140c:	4b62      	ldr	r3, [pc, #392]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	220c      	movs	r2, #12
 8001412:	4013      	ands	r3, r2
 8001414:	2b0c      	cmp	r3, #12
 8001416:	d00e      	beq.n	8001436 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001418:	4b5f      	ldr	r3, [pc, #380]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	220c      	movs	r2, #12
 800141e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001420:	2b08      	cmp	r3, #8
 8001422:	d114      	bne.n	800144e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001424:	4b5c      	ldr	r3, [pc, #368]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	23c0      	movs	r3, #192	; 0xc0
 800142a:	025b      	lsls	r3, r3, #9
 800142c:	401a      	ands	r2, r3
 800142e:	23c0      	movs	r3, #192	; 0xc0
 8001430:	025b      	lsls	r3, r3, #9
 8001432:	429a      	cmp	r2, r3
 8001434:	d10b      	bne.n	800144e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001436:	4b58      	ldr	r3, [pc, #352]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	029b      	lsls	r3, r3, #10
 800143e:	4013      	ands	r3, r2
 8001440:	d040      	beq.n	80014c4 <HAL_RCC_OscConfig+0x5a8>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d03c      	beq.n	80014c4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e0e6      	b.n	800161c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d01b      	beq.n	800148e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001456:	4b50      	ldr	r3, [pc, #320]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800145a:	4b4f      	ldr	r3, [pc, #316]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 800145c:	2180      	movs	r1, #128	; 0x80
 800145e:	0249      	lsls	r1, r1, #9
 8001460:	430a      	orrs	r2, r1
 8001462:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fa9a 	bl	800099c <HAL_GetTick>
 8001468:	0003      	movs	r3, r0
 800146a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800146e:	f7ff fa95 	bl	800099c <HAL_GetTick>
 8001472:	0002      	movs	r2, r0
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e0cd      	b.n	800161c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001480:	4b45      	ldr	r3, [pc, #276]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	029b      	lsls	r3, r3, #10
 8001488:	4013      	ands	r3, r2
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x552>
 800148c:	e01b      	b.n	80014c6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800148e:	4b42      	ldr	r3, [pc, #264]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001492:	4b41      	ldr	r3, [pc, #260]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001494:	4943      	ldr	r1, [pc, #268]	; (80015a4 <HAL_RCC_OscConfig+0x688>)
 8001496:	400a      	ands	r2, r1
 8001498:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149a:	f7ff fa7f 	bl	800099c <HAL_GetTick>
 800149e:	0003      	movs	r3, r0
 80014a0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014a4:	f7ff fa7a 	bl	800099c <HAL_GetTick>
 80014a8:	0002      	movs	r2, r0
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e0b2      	b.n	800161c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80014b6:	4b38      	ldr	r3, [pc, #224]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 80014b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	029b      	lsls	r3, r3, #10
 80014be:	4013      	ands	r3, r2
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x588>
 80014c2:	e000      	b.n	80014c6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80014c4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d100      	bne.n	80014d0 <HAL_RCC_OscConfig+0x5b4>
 80014ce:	e0a4      	b.n	800161a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014d0:	4b31      	ldr	r3, [pc, #196]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	220c      	movs	r2, #12
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d100      	bne.n	80014de <HAL_RCC_OscConfig+0x5c2>
 80014dc:	e078      	b.n	80015d0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d14c      	bne.n	8001580 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e6:	4b2c      	ldr	r3, [pc, #176]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b2b      	ldr	r3, [pc, #172]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 80014ec:	492e      	ldr	r1, [pc, #184]	; (80015a8 <HAL_RCC_OscConfig+0x68c>)
 80014ee:	400a      	ands	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f2:	f7ff fa53 	bl	800099c <HAL_GetTick>
 80014f6:	0003      	movs	r3, r0
 80014f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014fc:	f7ff fa4e 	bl	800099c <HAL_GetTick>
 8001500:	0002      	movs	r2, r0
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e086      	b.n	800161c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800150e:	4b22      	ldr	r3, [pc, #136]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	049b      	lsls	r3, r3, #18
 8001516:	4013      	ands	r3, r2
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800151a:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 800151c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151e:	220f      	movs	r2, #15
 8001520:	4393      	bics	r3, r2
 8001522:	0019      	movs	r1, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001528:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 800152a:	430a      	orrs	r2, r1
 800152c:	62da      	str	r2, [r3, #44]	; 0x2c
 800152e:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	4a1e      	ldr	r2, [pc, #120]	; (80015ac <HAL_RCC_OscConfig+0x690>)
 8001534:	4013      	ands	r3, r2
 8001536:	0019      	movs	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001540:	431a      	orrs	r2, r3
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001544:	430a      	orrs	r2, r1
 8001546:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001548:	4b13      	ldr	r3, [pc, #76]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 800154e:	2180      	movs	r1, #128	; 0x80
 8001550:	0449      	lsls	r1, r1, #17
 8001552:	430a      	orrs	r2, r1
 8001554:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001556:	f7ff fa21 	bl	800099c <HAL_GetTick>
 800155a:	0003      	movs	r3, r0
 800155c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001560:	f7ff fa1c 	bl	800099c <HAL_GetTick>
 8001564:	0002      	movs	r2, r0
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e054      	b.n	800161c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	049b      	lsls	r3, r3, #18
 800157a:	4013      	ands	r3, r2
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x644>
 800157e:	e04c      	b.n	800161a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <HAL_RCC_OscConfig+0x67c>)
 8001586:	4908      	ldr	r1, [pc, #32]	; (80015a8 <HAL_RCC_OscConfig+0x68c>)
 8001588:	400a      	ands	r2, r1
 800158a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fa06 	bl	800099c <HAL_GetTick>
 8001590:	0003      	movs	r3, r0
 8001592:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001594:	e015      	b.n	80015c2 <HAL_RCC_OscConfig+0x6a6>
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	40021000 	.word	0x40021000
 800159c:	00001388 	.word	0x00001388
 80015a0:	efffffff 	.word	0xefffffff
 80015a4:	fffeffff 	.word	0xfffeffff
 80015a8:	feffffff 	.word	0xfeffffff
 80015ac:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b0:	f7ff f9f4 	bl	800099c <HAL_GetTick>
 80015b4:	0002      	movs	r2, r0
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e02c      	b.n	800161c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <HAL_RCC_OscConfig+0x708>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	049b      	lsls	r3, r3, #18
 80015ca:	4013      	ands	r3, r2
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x694>
 80015ce:	e024      	b.n	800161a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d101      	bne.n	80015dc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e01f      	b.n	800161c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_RCC_OscConfig+0x708>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <HAL_RCC_OscConfig+0x708>)
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	23c0      	movs	r3, #192	; 0xc0
 80015ec:	025b      	lsls	r3, r3, #9
 80015ee:	401a      	ands	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d10e      	bne.n	8001616 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	220f      	movs	r2, #15
 80015fc:	401a      	ands	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001602:	429a      	cmp	r2, r3
 8001604:	d107      	bne.n	8001616 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	23f0      	movs	r3, #240	; 0xf0
 800160a:	039b      	lsls	r3, r3, #14
 800160c:	401a      	ands	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001612:	429a      	cmp	r2, r3
 8001614:	d001      	beq.n	800161a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	0018      	movs	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	b008      	add	sp, #32
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000

08001628 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0bf      	b.n	80017bc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800163c:	4b61      	ldr	r3, [pc, #388]	; (80017c4 <HAL_RCC_ClockConfig+0x19c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2201      	movs	r2, #1
 8001642:	4013      	ands	r3, r2
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d911      	bls.n	800166e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	4b5e      	ldr	r3, [pc, #376]	; (80017c4 <HAL_RCC_ClockConfig+0x19c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2201      	movs	r2, #1
 8001650:	4393      	bics	r3, r2
 8001652:	0019      	movs	r1, r3
 8001654:	4b5b      	ldr	r3, [pc, #364]	; (80017c4 <HAL_RCC_ClockConfig+0x19c>)
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800165c:	4b59      	ldr	r3, [pc, #356]	; (80017c4 <HAL_RCC_ClockConfig+0x19c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2201      	movs	r2, #1
 8001662:	4013      	ands	r3, r2
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d001      	beq.n	800166e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e0a6      	b.n	80017bc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2202      	movs	r2, #2
 8001674:	4013      	ands	r3, r2
 8001676:	d015      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2204      	movs	r2, #4
 800167e:	4013      	ands	r3, r2
 8001680:	d006      	beq.n	8001690 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001682:	4b51      	ldr	r3, [pc, #324]	; (80017c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	4b50      	ldr	r3, [pc, #320]	; (80017c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001688:	21e0      	movs	r1, #224	; 0xe0
 800168a:	00c9      	lsls	r1, r1, #3
 800168c:	430a      	orrs	r2, r1
 800168e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001690:	4b4d      	ldr	r3, [pc, #308]	; (80017c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	22f0      	movs	r2, #240	; 0xf0
 8001696:	4393      	bics	r3, r2
 8001698:	0019      	movs	r1, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	4b4a      	ldr	r3, [pc, #296]	; (80017c8 <HAL_RCC_ClockConfig+0x1a0>)
 80016a0:	430a      	orrs	r2, r1
 80016a2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2201      	movs	r2, #1
 80016aa:	4013      	ands	r3, r2
 80016ac:	d04c      	beq.n	8001748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d107      	bne.n	80016c6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b6:	4b44      	ldr	r3, [pc, #272]	; (80017c8 <HAL_RCC_ClockConfig+0x1a0>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	2380      	movs	r3, #128	; 0x80
 80016bc:	029b      	lsls	r3, r3, #10
 80016be:	4013      	ands	r3, r2
 80016c0:	d120      	bne.n	8001704 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e07a      	b.n	80017bc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d107      	bne.n	80016de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ce:	4b3e      	ldr	r3, [pc, #248]	; (80017c8 <HAL_RCC_ClockConfig+0x1a0>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	049b      	lsls	r3, r3, #18
 80016d6:	4013      	ands	r3, r2
 80016d8:	d114      	bne.n	8001704 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e06e      	b.n	80017bc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d107      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80016e6:	4b38      	ldr	r3, [pc, #224]	; (80017c8 <HAL_RCC_ClockConfig+0x1a0>)
 80016e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	029b      	lsls	r3, r3, #10
 80016ee:	4013      	ands	r3, r2
 80016f0:	d108      	bne.n	8001704 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e062      	b.n	80017bc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f6:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <HAL_RCC_ClockConfig+0x1a0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2202      	movs	r2, #2
 80016fc:	4013      	ands	r3, r2
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e05b      	b.n	80017bc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001704:	4b30      	ldr	r3, [pc, #192]	; (80017c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2203      	movs	r2, #3
 800170a:	4393      	bics	r3, r2
 800170c:	0019      	movs	r1, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001714:	430a      	orrs	r2, r1
 8001716:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001718:	f7ff f940 	bl	800099c <HAL_GetTick>
 800171c:	0003      	movs	r3, r0
 800171e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001720:	e009      	b.n	8001736 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001722:	f7ff f93b 	bl	800099c <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	4a27      	ldr	r2, [pc, #156]	; (80017cc <HAL_RCC_ClockConfig+0x1a4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e042      	b.n	80017bc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001736:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	220c      	movs	r2, #12
 800173c:	401a      	ands	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	429a      	cmp	r2, r3
 8001746:	d1ec      	bne.n	8001722 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001748:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <HAL_RCC_ClockConfig+0x19c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2201      	movs	r2, #1
 800174e:	4013      	ands	r3, r2
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d211      	bcs.n	800177a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_RCC_ClockConfig+0x19c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2201      	movs	r2, #1
 800175c:	4393      	bics	r3, r2
 800175e:	0019      	movs	r1, r3
 8001760:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <HAL_RCC_ClockConfig+0x19c>)
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001768:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <HAL_RCC_ClockConfig+0x19c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2201      	movs	r2, #1
 800176e:	4013      	ands	r3, r2
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d001      	beq.n	800177a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e020      	b.n	80017bc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2204      	movs	r2, #4
 8001780:	4013      	ands	r3, r2
 8001782:	d009      	beq.n	8001798 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001784:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <HAL_RCC_ClockConfig+0x1a8>)
 800178a:	4013      	ands	r3, r2
 800178c:	0019      	movs	r1, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001794:	430a      	orrs	r2, r1
 8001796:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001798:	f000 f820 	bl	80017dc <HAL_RCC_GetSysClockFreq>
 800179c:	0001      	movs	r1, r0
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_RCC_ClockConfig+0x1a0>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	091b      	lsrs	r3, r3, #4
 80017a4:	220f      	movs	r2, #15
 80017a6:	4013      	ands	r3, r2
 80017a8:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <HAL_RCC_ClockConfig+0x1ac>)
 80017aa:	5cd3      	ldrb	r3, [r2, r3]
 80017ac:	000a      	movs	r2, r1
 80017ae:	40da      	lsrs	r2, r3
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_RCC_ClockConfig+0x1b0>)
 80017b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80017b4:	2003      	movs	r0, #3
 80017b6:	f7ff f8ab 	bl	8000910 <HAL_InitTick>
  
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	0018      	movs	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	b004      	add	sp, #16
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40022000 	.word	0x40022000
 80017c8:	40021000 	.word	0x40021000
 80017cc:	00001388 	.word	0x00001388
 80017d0:	fffff8ff 	.word	0xfffff8ff
 80017d4:	0800409c 	.word	0x0800409c
 80017d8:	20000000 	.word	0x20000000

080017dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80017f6:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <HAL_RCC_GetSysClockFreq+0xd0>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	220c      	movs	r2, #12
 8001800:	4013      	ands	r3, r2
 8001802:	2b0c      	cmp	r3, #12
 8001804:	d046      	beq.n	8001894 <HAL_RCC_GetSysClockFreq+0xb8>
 8001806:	d848      	bhi.n	800189a <HAL_RCC_GetSysClockFreq+0xbe>
 8001808:	2b04      	cmp	r3, #4
 800180a:	d002      	beq.n	8001812 <HAL_RCC_GetSysClockFreq+0x36>
 800180c:	2b08      	cmp	r3, #8
 800180e:	d003      	beq.n	8001818 <HAL_RCC_GetSysClockFreq+0x3c>
 8001810:	e043      	b.n	800189a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001812:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001814:	613b      	str	r3, [r7, #16]
      break;
 8001816:	e043      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	0c9b      	lsrs	r3, r3, #18
 800181c:	220f      	movs	r2, #15
 800181e:	4013      	ands	r3, r2
 8001820:	4a24      	ldr	r2, [pc, #144]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001822:	5cd3      	ldrb	r3, [r2, r3]
 8001824:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001826:	4b21      	ldr	r3, [pc, #132]	; (80018ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8001828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182a:	220f      	movs	r2, #15
 800182c:	4013      	ands	r3, r2
 800182e:	4a22      	ldr	r2, [pc, #136]	; (80018b8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001830:	5cd3      	ldrb	r3, [r2, r3]
 8001832:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	23c0      	movs	r3, #192	; 0xc0
 8001838:	025b      	lsls	r3, r3, #9
 800183a:	401a      	ands	r2, r3
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	025b      	lsls	r3, r3, #9
 8001840:	429a      	cmp	r2, r3
 8001842:	d109      	bne.n	8001858 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	481a      	ldr	r0, [pc, #104]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001848:	f7fe fc68 	bl	800011c <__udivsi3>
 800184c:	0003      	movs	r3, r0
 800184e:	001a      	movs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4353      	muls	r3, r2
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	e01a      	b.n	800188e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	23c0      	movs	r3, #192	; 0xc0
 800185c:	025b      	lsls	r3, r3, #9
 800185e:	401a      	ands	r2, r3
 8001860:	23c0      	movs	r3, #192	; 0xc0
 8001862:	025b      	lsls	r3, r3, #9
 8001864:	429a      	cmp	r2, r3
 8001866:	d109      	bne.n	800187c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	4814      	ldr	r0, [pc, #80]	; (80018bc <HAL_RCC_GetSysClockFreq+0xe0>)
 800186c:	f7fe fc56 	bl	800011c <__udivsi3>
 8001870:	0003      	movs	r3, r0
 8001872:	001a      	movs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4353      	muls	r3, r2
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	e008      	b.n	800188e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	480c      	ldr	r0, [pc, #48]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001880:	f7fe fc4c 	bl	800011c <__udivsi3>
 8001884:	0003      	movs	r3, r0
 8001886:	001a      	movs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4353      	muls	r3, r2
 800188c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	613b      	str	r3, [r7, #16]
      break;
 8001892:	e005      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_RCC_GetSysClockFreq+0xe0>)
 8001896:	613b      	str	r3, [r7, #16]
      break;
 8001898:	e002      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800189a:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 800189c:	613b      	str	r3, [r7, #16]
      break;
 800189e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80018a0:	693b      	ldr	r3, [r7, #16]
}
 80018a2:	0018      	movs	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b006      	add	sp, #24
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	40021000 	.word	0x40021000
 80018b0:	007a1200 	.word	0x007a1200
 80018b4:	080040b4 	.word	0x080040b4
 80018b8:	080040c4 	.word	0x080040c4
 80018bc:	02dc6c00 	.word	0x02dc6c00

080018c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018c4:	4b02      	ldr	r3, [pc, #8]	; (80018d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	0018      	movs	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	20000000 	.word	0x20000000

080018d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80018d8:	f7ff fff2 	bl	80018c0 <HAL_RCC_GetHCLKFreq>
 80018dc:	0001      	movs	r1, r0
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	0a1b      	lsrs	r3, r3, #8
 80018e4:	2207      	movs	r2, #7
 80018e6:	4013      	ands	r3, r2
 80018e8:	4a04      	ldr	r2, [pc, #16]	; (80018fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80018ea:	5cd3      	ldrb	r3, [r2, r3]
 80018ec:	40d9      	lsrs	r1, r3
 80018ee:	000b      	movs	r3, r1
}    
 80018f0:	0018      	movs	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	40021000 	.word	0x40021000
 80018fc:	080040ac 	.word	0x080040ac

08001900 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	025b      	lsls	r3, r3, #9
 8001918:	4013      	ands	r3, r2
 800191a:	d100      	bne.n	800191e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800191c:	e08e      	b.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800191e:	2017      	movs	r0, #23
 8001920:	183b      	adds	r3, r7, r0
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001926:	4b6e      	ldr	r3, [pc, #440]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001928:	69da      	ldr	r2, [r3, #28]
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	055b      	lsls	r3, r3, #21
 800192e:	4013      	ands	r3, r2
 8001930:	d110      	bne.n	8001954 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	4b6b      	ldr	r3, [pc, #428]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001934:	69da      	ldr	r2, [r3, #28]
 8001936:	4b6a      	ldr	r3, [pc, #424]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001938:	2180      	movs	r1, #128	; 0x80
 800193a:	0549      	lsls	r1, r1, #21
 800193c:	430a      	orrs	r2, r1
 800193e:	61da      	str	r2, [r3, #28]
 8001940:	4b67      	ldr	r3, [pc, #412]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001942:	69da      	ldr	r2, [r3, #28]
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	055b      	lsls	r3, r3, #21
 8001948:	4013      	ands	r3, r2
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800194e:	183b      	adds	r3, r7, r0
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001954:	4b63      	ldr	r3, [pc, #396]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4013      	ands	r3, r2
 800195e:	d11a      	bne.n	8001996 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001960:	4b60      	ldr	r3, [pc, #384]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b5f      	ldr	r3, [pc, #380]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001966:	2180      	movs	r1, #128	; 0x80
 8001968:	0049      	lsls	r1, r1, #1
 800196a:	430a      	orrs	r2, r1
 800196c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800196e:	f7ff f815 	bl	800099c <HAL_GetTick>
 8001972:	0003      	movs	r3, r0
 8001974:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001976:	e008      	b.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001978:	f7ff f810 	bl	800099c <HAL_GetTick>
 800197c:	0002      	movs	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e0a6      	b.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198a:	4b56      	ldr	r3, [pc, #344]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4013      	ands	r3, r2
 8001994:	d0f0      	beq.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001996:	4b52      	ldr	r3, [pc, #328]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001998:	6a1a      	ldr	r2, [r3, #32]
 800199a:	23c0      	movs	r3, #192	; 0xc0
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4013      	ands	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d034      	beq.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	23c0      	movs	r3, #192	; 0xc0
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4013      	ands	r3, r2
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d02c      	beq.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019b8:	4b49      	ldr	r3, [pc, #292]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	4a4a      	ldr	r2, [pc, #296]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80019be:	4013      	ands	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019c2:	4b47      	ldr	r3, [pc, #284]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019c4:	6a1a      	ldr	r2, [r3, #32]
 80019c6:	4b46      	ldr	r3, [pc, #280]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019c8:	2180      	movs	r1, #128	; 0x80
 80019ca:	0249      	lsls	r1, r1, #9
 80019cc:	430a      	orrs	r2, r1
 80019ce:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019d0:	4b43      	ldr	r3, [pc, #268]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019d2:	6a1a      	ldr	r2, [r3, #32]
 80019d4:	4b42      	ldr	r3, [pc, #264]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019d6:	4945      	ldr	r1, [pc, #276]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80019d8:	400a      	ands	r2, r1
 80019da:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80019dc:	4b40      	ldr	r3, [pc, #256]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2201      	movs	r2, #1
 80019e6:	4013      	ands	r3, r2
 80019e8:	d013      	beq.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ea:	f7fe ffd7 	bl	800099c <HAL_GetTick>
 80019ee:	0003      	movs	r3, r0
 80019f0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f2:	e009      	b.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f4:	f7fe ffd2 	bl	800099c <HAL_GetTick>
 80019f8:	0002      	movs	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	4a3c      	ldr	r2, [pc, #240]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e067      	b.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a08:	4b35      	ldr	r3, [pc, #212]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d0f0      	beq.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a12:	4b33      	ldr	r3, [pc, #204]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4a34      	ldr	r2, [pc, #208]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	4b2f      	ldr	r3, [pc, #188]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a22:	430a      	orrs	r2, r1
 8001a24:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a26:	2317      	movs	r3, #23
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d105      	bne.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a30:	4b2b      	ldr	r3, [pc, #172]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a32:	69da      	ldr	r2, [r3, #28]
 8001a34:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a36:	492f      	ldr	r1, [pc, #188]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001a38:	400a      	ands	r2, r1
 8001a3a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2201      	movs	r2, #1
 8001a42:	4013      	ands	r3, r2
 8001a44:	d009      	beq.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a46:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	4393      	bics	r3, r2
 8001a4e:	0019      	movs	r1, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a56:	430a      	orrs	r2, r1
 8001a58:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	4013      	ands	r3, r2
 8001a62:	d009      	beq.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a64:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a68:	4a23      	ldr	r2, [pc, #140]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	0019      	movs	r1, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a74:	430a      	orrs	r2, r1
 8001a76:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d009      	beq.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a82:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	2210      	movs	r2, #16
 8001a88:	4393      	bics	r3, r2
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691a      	ldr	r2, [r3, #16]
 8001a90:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a92:	430a      	orrs	r2, r1
 8001a94:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	029b      	lsls	r3, r3, #10
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d009      	beq.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	2280      	movs	r2, #128	; 0x80
 8001aa8:	4393      	bics	r3, r2
 8001aaa:	0019      	movs	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699a      	ldr	r2, [r3, #24]
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d009      	beq.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	2240      	movs	r2, #64	; 0x40
 8001ac8:	4393      	bics	r3, r2
 8001aca:	0019      	movs	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	695a      	ldr	r2, [r3, #20]
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b006      	add	sp, #24
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40007000 	.word	0x40007000
 8001ae8:	fffffcff 	.word	0xfffffcff
 8001aec:	fffeffff 	.word	0xfffeffff
 8001af0:	00001388 	.word	0x00001388
 8001af4:	efffffff 	.word	0xefffffff
 8001af8:	fffcffff 	.word	0xfffcffff

08001afc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e044      	b.n	8001b98 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d107      	bne.n	8001b26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2278      	movs	r2, #120	; 0x78
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	0018      	movs	r0, r3
 8001b22:	f7fe fdfd 	bl	8000720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2224      	movs	r2, #36	; 0x24
 8001b2a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2101      	movs	r1, #1
 8001b38:	438a      	bics	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	0018      	movs	r0, r3
 8001b48:	f000 fa54 	bl	8001ff4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f000 f8c8 	bl	8001ce4 <UART_SetConfig>
 8001b54:	0003      	movs	r3, r0
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e01c      	b.n	8001b98 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	490d      	ldr	r1, [pc, #52]	; (8001ba0 <HAL_UART_Init+0xa4>)
 8001b6a:	400a      	ands	r2, r1
 8001b6c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	212a      	movs	r1, #42	; 0x2a
 8001b7a:	438a      	bics	r2, r1
 8001b7c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2101      	movs	r1, #1
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	0018      	movs	r0, r3
 8001b92:	f000 fae3 	bl	800215c <UART_CheckIdleState>
 8001b96:	0003      	movs	r3, r0
}
 8001b98:	0018      	movs	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b002      	add	sp, #8
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	ffffb7ff 	.word	0xffffb7ff

08001ba4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af02      	add	r7, sp, #8
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	1dbb      	adds	r3, r7, #6
 8001bb2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bb8:	2b20      	cmp	r3, #32
 8001bba:	d000      	beq.n	8001bbe <HAL_UART_Transmit+0x1a>
 8001bbc:	e08d      	b.n	8001cda <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_UART_Transmit+0x28>
 8001bc4:	1dbb      	adds	r3, r7, #6
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e085      	b.n	8001cdc <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	015b      	lsls	r3, r3, #5
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d109      	bne.n	8001bf0 <HAL_UART_Transmit+0x4c>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d105      	bne.n	8001bf0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2201      	movs	r2, #1
 8001be8:	4013      	ands	r3, r2
 8001bea:	d001      	beq.n	8001bf0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e075      	b.n	8001cdc <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2284      	movs	r2, #132	; 0x84
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2221      	movs	r2, #33	; 0x21
 8001bfc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bfe:	f7fe fecd 	bl	800099c <HAL_GetTick>
 8001c02:	0003      	movs	r3, r0
 8001c04:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1dba      	adds	r2, r7, #6
 8001c0a:	2150      	movs	r1, #80	; 0x50
 8001c0c:	8812      	ldrh	r2, [r2, #0]
 8001c0e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1dba      	adds	r2, r7, #6
 8001c14:	2152      	movs	r1, #82	; 0x52
 8001c16:	8812      	ldrh	r2, [r2, #0]
 8001c18:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	015b      	lsls	r3, r3, #5
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d108      	bne.n	8001c38 <HAL_UART_Transmit+0x94>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d104      	bne.n	8001c38 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	e003      	b.n	8001c40 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c40:	e030      	b.n	8001ca4 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	0013      	movs	r3, r2
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2180      	movs	r1, #128	; 0x80
 8001c50:	f000 fb2c 	bl	80022ac <UART_WaitOnFlagUntilTimeout>
 8001c54:	1e03      	subs	r3, r0, #0
 8001c56:	d004      	beq.n	8001c62 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e03c      	b.n	8001cdc <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10b      	bne.n	8001c80 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	881a      	ldrh	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	05d2      	lsls	r2, r2, #23
 8001c72:	0dd2      	lsrs	r2, r2, #23
 8001c74:	b292      	uxth	r2, r2
 8001c76:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	61bb      	str	r3, [r7, #24]
 8001c7e:	e008      	b.n	8001c92 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	781a      	ldrb	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	b292      	uxth	r2, r2
 8001c8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2252      	movs	r2, #82	; 0x52
 8001c96:	5a9b      	ldrh	r3, [r3, r2]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b299      	uxth	r1, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2252      	movs	r2, #82	; 0x52
 8001ca2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2252      	movs	r2, #82	; 0x52
 8001ca8:	5a9b      	ldrh	r3, [r3, r2]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1c8      	bne.n	8001c42 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	0013      	movs	r3, r2
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2140      	movs	r1, #64	; 0x40
 8001cbe:	f000 faf5 	bl	80022ac <UART_WaitOnFlagUntilTimeout>
 8001cc2:	1e03      	subs	r3, r0, #0
 8001cc4:	d004      	beq.n	8001cd0 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2220      	movs	r2, #32
 8001cca:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e005      	b.n	8001cdc <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e000      	b.n	8001cdc <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8001cda:	2302      	movs	r3, #2
  }
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b008      	add	sp, #32
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001cec:	231e      	movs	r3, #30
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4aaf      	ldr	r2, [pc, #700]	; (8001fd0 <UART_SetConfig+0x2ec>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	0019      	movs	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4aaa      	ldr	r2, [pc, #680]	; (8001fd4 <UART_SetConfig+0x2f0>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	0019      	movs	r1, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	4aa1      	ldr	r2, [pc, #644]	; (8001fd8 <UART_SetConfig+0x2f4>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	0019      	movs	r1, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a9d      	ldr	r2, [pc, #628]	; (8001fdc <UART_SetConfig+0x2f8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d127      	bne.n	8001dba <UART_SetConfig+0xd6>
 8001d6a:	4b9d      	ldr	r3, [pc, #628]	; (8001fe0 <UART_SetConfig+0x2fc>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	2203      	movs	r2, #3
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d00d      	beq.n	8001d92 <UART_SetConfig+0xae>
 8001d76:	d81b      	bhi.n	8001db0 <UART_SetConfig+0xcc>
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d014      	beq.n	8001da6 <UART_SetConfig+0xc2>
 8001d7c:	d818      	bhi.n	8001db0 <UART_SetConfig+0xcc>
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <UART_SetConfig+0xa4>
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d00a      	beq.n	8001d9c <UART_SetConfig+0xb8>
 8001d86:	e013      	b.n	8001db0 <UART_SetConfig+0xcc>
 8001d88:	231f      	movs	r3, #31
 8001d8a:	18fb      	adds	r3, r7, r3
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
 8001d90:	e065      	b.n	8001e5e <UART_SetConfig+0x17a>
 8001d92:	231f      	movs	r3, #31
 8001d94:	18fb      	adds	r3, r7, r3
 8001d96:	2202      	movs	r2, #2
 8001d98:	701a      	strb	r2, [r3, #0]
 8001d9a:	e060      	b.n	8001e5e <UART_SetConfig+0x17a>
 8001d9c:	231f      	movs	r3, #31
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	2204      	movs	r2, #4
 8001da2:	701a      	strb	r2, [r3, #0]
 8001da4:	e05b      	b.n	8001e5e <UART_SetConfig+0x17a>
 8001da6:	231f      	movs	r3, #31
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	2208      	movs	r2, #8
 8001dac:	701a      	strb	r2, [r3, #0]
 8001dae:	e056      	b.n	8001e5e <UART_SetConfig+0x17a>
 8001db0:	231f      	movs	r3, #31
 8001db2:	18fb      	adds	r3, r7, r3
 8001db4:	2210      	movs	r2, #16
 8001db6:	701a      	strb	r2, [r3, #0]
 8001db8:	e051      	b.n	8001e5e <UART_SetConfig+0x17a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a89      	ldr	r2, [pc, #548]	; (8001fe4 <UART_SetConfig+0x300>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d134      	bne.n	8001e2e <UART_SetConfig+0x14a>
 8001dc4:	4b86      	ldr	r3, [pc, #536]	; (8001fe0 <UART_SetConfig+0x2fc>)
 8001dc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dc8:	23c0      	movs	r3, #192	; 0xc0
 8001dca:	029b      	lsls	r3, r3, #10
 8001dcc:	4013      	ands	r3, r2
 8001dce:	22c0      	movs	r2, #192	; 0xc0
 8001dd0:	0292      	lsls	r2, r2, #10
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d017      	beq.n	8001e06 <UART_SetConfig+0x122>
 8001dd6:	22c0      	movs	r2, #192	; 0xc0
 8001dd8:	0292      	lsls	r2, r2, #10
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d822      	bhi.n	8001e24 <UART_SetConfig+0x140>
 8001dde:	2280      	movs	r2, #128	; 0x80
 8001de0:	0292      	lsls	r2, r2, #10
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d019      	beq.n	8001e1a <UART_SetConfig+0x136>
 8001de6:	2280      	movs	r2, #128	; 0x80
 8001de8:	0292      	lsls	r2, r2, #10
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d81a      	bhi.n	8001e24 <UART_SetConfig+0x140>
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d004      	beq.n	8001dfc <UART_SetConfig+0x118>
 8001df2:	2280      	movs	r2, #128	; 0x80
 8001df4:	0252      	lsls	r2, r2, #9
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00a      	beq.n	8001e10 <UART_SetConfig+0x12c>
 8001dfa:	e013      	b.n	8001e24 <UART_SetConfig+0x140>
 8001dfc:	231f      	movs	r3, #31
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
 8001e04:	e02b      	b.n	8001e5e <UART_SetConfig+0x17a>
 8001e06:	231f      	movs	r3, #31
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	701a      	strb	r2, [r3, #0]
 8001e0e:	e026      	b.n	8001e5e <UART_SetConfig+0x17a>
 8001e10:	231f      	movs	r3, #31
 8001e12:	18fb      	adds	r3, r7, r3
 8001e14:	2204      	movs	r2, #4
 8001e16:	701a      	strb	r2, [r3, #0]
 8001e18:	e021      	b.n	8001e5e <UART_SetConfig+0x17a>
 8001e1a:	231f      	movs	r3, #31
 8001e1c:	18fb      	adds	r3, r7, r3
 8001e1e:	2208      	movs	r2, #8
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	e01c      	b.n	8001e5e <UART_SetConfig+0x17a>
 8001e24:	231f      	movs	r3, #31
 8001e26:	18fb      	adds	r3, r7, r3
 8001e28:	2210      	movs	r2, #16
 8001e2a:	701a      	strb	r2, [r3, #0]
 8001e2c:	e017      	b.n	8001e5e <UART_SetConfig+0x17a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a6d      	ldr	r2, [pc, #436]	; (8001fe8 <UART_SetConfig+0x304>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d104      	bne.n	8001e42 <UART_SetConfig+0x15e>
 8001e38:	231f      	movs	r3, #31
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
 8001e40:	e00d      	b.n	8001e5e <UART_SetConfig+0x17a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a69      	ldr	r2, [pc, #420]	; (8001fec <UART_SetConfig+0x308>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d104      	bne.n	8001e56 <UART_SetConfig+0x172>
 8001e4c:	231f      	movs	r3, #31
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
 8001e54:	e003      	b.n	8001e5e <UART_SetConfig+0x17a>
 8001e56:	231f      	movs	r3, #31
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	2210      	movs	r2, #16
 8001e5c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69da      	ldr	r2, [r3, #28]
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	021b      	lsls	r3, r3, #8
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d15c      	bne.n	8001f24 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8001e6a:	231f      	movs	r3, #31
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d015      	beq.n	8001ea0 <UART_SetConfig+0x1bc>
 8001e74:	dc18      	bgt.n	8001ea8 <UART_SetConfig+0x1c4>
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d00d      	beq.n	8001e96 <UART_SetConfig+0x1b2>
 8001e7a:	dc15      	bgt.n	8001ea8 <UART_SetConfig+0x1c4>
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <UART_SetConfig+0x1a2>
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d005      	beq.n	8001e90 <UART_SetConfig+0x1ac>
 8001e84:	e010      	b.n	8001ea8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e86:	f7ff fd25 	bl	80018d4 <HAL_RCC_GetPCLK1Freq>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	61bb      	str	r3, [r7, #24]
        break;
 8001e8e:	e012      	b.n	8001eb6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e90:	4b57      	ldr	r3, [pc, #348]	; (8001ff0 <UART_SetConfig+0x30c>)
 8001e92:	61bb      	str	r3, [r7, #24]
        break;
 8001e94:	e00f      	b.n	8001eb6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e96:	f7ff fca1 	bl	80017dc <HAL_RCC_GetSysClockFreq>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	61bb      	str	r3, [r7, #24]
        break;
 8001e9e:	e00a      	b.n	8001eb6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	021b      	lsls	r3, r3, #8
 8001ea4:	61bb      	str	r3, [r7, #24]
        break;
 8001ea6:	e006      	b.n	8001eb6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001eac:	231e      	movs	r3, #30
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
        break;
 8001eb4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d100      	bne.n	8001ebe <UART_SetConfig+0x1da>
 8001ebc:	e07a      	b.n	8001fb4 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	005a      	lsls	r2, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	085b      	lsrs	r3, r3, #1
 8001ec8:	18d2      	adds	r2, r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	0019      	movs	r1, r3
 8001ed0:	0010      	movs	r0, r2
 8001ed2:	f7fe f923 	bl	800011c <__udivsi3>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	2b0f      	cmp	r3, #15
 8001ede:	d91c      	bls.n	8001f1a <UART_SetConfig+0x236>
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	025b      	lsls	r3, r3, #9
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d217      	bcs.n	8001f1a <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	200e      	movs	r0, #14
 8001ef0:	183b      	adds	r3, r7, r0
 8001ef2:	210f      	movs	r1, #15
 8001ef4:	438a      	bics	r2, r1
 8001ef6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	085b      	lsrs	r3, r3, #1
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	2207      	movs	r2, #7
 8001f00:	4013      	ands	r3, r2
 8001f02:	b299      	uxth	r1, r3
 8001f04:	183b      	adds	r3, r7, r0
 8001f06:	183a      	adds	r2, r7, r0
 8001f08:	8812      	ldrh	r2, [r2, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	183a      	adds	r2, r7, r0
 8001f14:	8812      	ldrh	r2, [r2, #0]
 8001f16:	60da      	str	r2, [r3, #12]
 8001f18:	e04c      	b.n	8001fb4 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8001f1a:	231e      	movs	r3, #30
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	2201      	movs	r2, #1
 8001f20:	701a      	strb	r2, [r3, #0]
 8001f22:	e047      	b.n	8001fb4 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001f24:	231f      	movs	r3, #31
 8001f26:	18fb      	adds	r3, r7, r3
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d015      	beq.n	8001f5a <UART_SetConfig+0x276>
 8001f2e:	dc18      	bgt.n	8001f62 <UART_SetConfig+0x27e>
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d00d      	beq.n	8001f50 <UART_SetConfig+0x26c>
 8001f34:	dc15      	bgt.n	8001f62 <UART_SetConfig+0x27e>
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <UART_SetConfig+0x25c>
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d005      	beq.n	8001f4a <UART_SetConfig+0x266>
 8001f3e:	e010      	b.n	8001f62 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f40:	f7ff fcc8 	bl	80018d4 <HAL_RCC_GetPCLK1Freq>
 8001f44:	0003      	movs	r3, r0
 8001f46:	61bb      	str	r3, [r7, #24]
        break;
 8001f48:	e012      	b.n	8001f70 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f4a:	4b29      	ldr	r3, [pc, #164]	; (8001ff0 <UART_SetConfig+0x30c>)
 8001f4c:	61bb      	str	r3, [r7, #24]
        break;
 8001f4e:	e00f      	b.n	8001f70 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f50:	f7ff fc44 	bl	80017dc <HAL_RCC_GetSysClockFreq>
 8001f54:	0003      	movs	r3, r0
 8001f56:	61bb      	str	r3, [r7, #24]
        break;
 8001f58:	e00a      	b.n	8001f70 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	61bb      	str	r3, [r7, #24]
        break;
 8001f60:	e006      	b.n	8001f70 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001f66:	231e      	movs	r3, #30
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
        break;
 8001f6e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d01e      	beq.n	8001fb4 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	085a      	lsrs	r2, r3, #1
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	18d2      	adds	r2, r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	0019      	movs	r1, r3
 8001f86:	0010      	movs	r0, r2
 8001f88:	f7fe f8c8 	bl	800011c <__udivsi3>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	2b0f      	cmp	r3, #15
 8001f94:	d90a      	bls.n	8001fac <UART_SetConfig+0x2c8>
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	025b      	lsls	r3, r3, #9
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d205      	bcs.n	8001fac <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	e003      	b.n	8001fb4 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8001fac:	231e      	movs	r3, #30
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8001fc0:	231e      	movs	r3, #30
 8001fc2:	18fb      	adds	r3, r7, r3
 8001fc4:	781b      	ldrb	r3, [r3, #0]
}
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b008      	add	sp, #32
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	efff69f3 	.word	0xefff69f3
 8001fd4:	ffffcfff 	.word	0xffffcfff
 8001fd8:	fffff4ff 	.word	0xfffff4ff
 8001fdc:	40013800 	.word	0x40013800
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40004400 	.word	0x40004400
 8001fe8:	40004800 	.word	0x40004800
 8001fec:	40004c00 	.word	0x40004c00
 8001ff0:	007a1200 	.word	0x007a1200

08001ff4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	2208      	movs	r2, #8
 8002002:	4013      	ands	r3, r2
 8002004:	d00b      	beq.n	800201e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	4a4a      	ldr	r2, [pc, #296]	; (8002138 <UART_AdvFeatureConfig+0x144>)
 800200e:	4013      	ands	r3, r2
 8002010:	0019      	movs	r1, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	2201      	movs	r2, #1
 8002024:	4013      	ands	r3, r2
 8002026:	d00b      	beq.n	8002040 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4a43      	ldr	r2, [pc, #268]	; (800213c <UART_AdvFeatureConfig+0x148>)
 8002030:	4013      	ands	r3, r2
 8002032:	0019      	movs	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	2202      	movs	r2, #2
 8002046:	4013      	ands	r3, r2
 8002048:	d00b      	beq.n	8002062 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4a3b      	ldr	r2, [pc, #236]	; (8002140 <UART_AdvFeatureConfig+0x14c>)
 8002052:	4013      	ands	r3, r2
 8002054:	0019      	movs	r1, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	2204      	movs	r2, #4
 8002068:	4013      	ands	r3, r2
 800206a:	d00b      	beq.n	8002084 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4a34      	ldr	r2, [pc, #208]	; (8002144 <UART_AdvFeatureConfig+0x150>)
 8002074:	4013      	ands	r3, r2
 8002076:	0019      	movs	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	2210      	movs	r2, #16
 800208a:	4013      	ands	r3, r2
 800208c:	d00b      	beq.n	80020a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4a2c      	ldr	r2, [pc, #176]	; (8002148 <UART_AdvFeatureConfig+0x154>)
 8002096:	4013      	ands	r3, r2
 8002098:	0019      	movs	r1, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	2220      	movs	r2, #32
 80020ac:	4013      	ands	r3, r2
 80020ae:	d00b      	beq.n	80020c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	4a25      	ldr	r2, [pc, #148]	; (800214c <UART_AdvFeatureConfig+0x158>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	0019      	movs	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	2240      	movs	r2, #64	; 0x40
 80020ce:	4013      	ands	r3, r2
 80020d0:	d01d      	beq.n	800210e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4a1d      	ldr	r2, [pc, #116]	; (8002150 <UART_AdvFeatureConfig+0x15c>)
 80020da:	4013      	ands	r3, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	035b      	lsls	r3, r3, #13
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d10b      	bne.n	800210e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4a15      	ldr	r2, [pc, #84]	; (8002154 <UART_AdvFeatureConfig+0x160>)
 80020fe:	4013      	ands	r3, r2
 8002100:	0019      	movs	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	2280      	movs	r2, #128	; 0x80
 8002114:	4013      	ands	r3, r2
 8002116:	d00b      	beq.n	8002130 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <UART_AdvFeatureConfig+0x164>)
 8002120:	4013      	ands	r3, r2
 8002122:	0019      	movs	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	605a      	str	r2, [r3, #4]
  }
}
 8002130:	46c0      	nop			; (mov r8, r8)
 8002132:	46bd      	mov	sp, r7
 8002134:	b002      	add	sp, #8
 8002136:	bd80      	pop	{r7, pc}
 8002138:	ffff7fff 	.word	0xffff7fff
 800213c:	fffdffff 	.word	0xfffdffff
 8002140:	fffeffff 	.word	0xfffeffff
 8002144:	fffbffff 	.word	0xfffbffff
 8002148:	ffffefff 	.word	0xffffefff
 800214c:	ffffdfff 	.word	0xffffdfff
 8002150:	ffefffff 	.word	0xffefffff
 8002154:	ff9fffff 	.word	0xff9fffff
 8002158:	fff7ffff 	.word	0xfff7ffff

0800215c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b092      	sub	sp, #72	; 0x48
 8002160:	af02      	add	r7, sp, #8
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2284      	movs	r2, #132	; 0x84
 8002168:	2100      	movs	r1, #0
 800216a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800216c:	f7fe fc16 	bl	800099c <HAL_GetTick>
 8002170:	0003      	movs	r3, r0
 8002172:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2208      	movs	r2, #8
 800217c:	4013      	ands	r3, r2
 800217e:	2b08      	cmp	r3, #8
 8002180:	d12c      	bne.n	80021dc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002184:	2280      	movs	r2, #128	; 0x80
 8002186:	0391      	lsls	r1, r2, #14
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	4a46      	ldr	r2, [pc, #280]	; (80022a4 <UART_CheckIdleState+0x148>)
 800218c:	9200      	str	r2, [sp, #0]
 800218e:	2200      	movs	r2, #0
 8002190:	f000 f88c 	bl	80022ac <UART_WaitOnFlagUntilTimeout>
 8002194:	1e03      	subs	r3, r0, #0
 8002196:	d021      	beq.n	80021dc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002198:	f3ef 8310 	mrs	r3, PRIMASK
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80021a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a2:	2301      	movs	r3, #1
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a8:	f383 8810 	msr	PRIMASK, r3
}
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2180      	movs	r1, #128	; 0x80
 80021ba:	438a      	bics	r2, r1
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c4:	f383 8810 	msr	PRIMASK, r3
}
 80021c8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2220      	movs	r2, #32
 80021ce:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2278      	movs	r2, #120	; 0x78
 80021d4:	2100      	movs	r1, #0
 80021d6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e05f      	b.n	800229c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2204      	movs	r2, #4
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d146      	bne.n	8002278 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ec:	2280      	movs	r2, #128	; 0x80
 80021ee:	03d1      	lsls	r1, r2, #15
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	4a2c      	ldr	r2, [pc, #176]	; (80022a4 <UART_CheckIdleState+0x148>)
 80021f4:	9200      	str	r2, [sp, #0]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f000 f858 	bl	80022ac <UART_WaitOnFlagUntilTimeout>
 80021fc:	1e03      	subs	r3, r0, #0
 80021fe:	d03b      	beq.n	8002278 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002200:	f3ef 8310 	mrs	r3, PRIMASK
 8002204:	60fb      	str	r3, [r7, #12]
  return(result);
 8002206:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002208:	637b      	str	r3, [r7, #52]	; 0x34
 800220a:	2301      	movs	r3, #1
 800220c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	f383 8810 	msr	PRIMASK, r3
}
 8002214:	46c0      	nop			; (mov r8, r8)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4921      	ldr	r1, [pc, #132]	; (80022a8 <UART_CheckIdleState+0x14c>)
 8002222:	400a      	ands	r2, r1
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002228:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f383 8810 	msr	PRIMASK, r3
}
 8002230:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002232:	f3ef 8310 	mrs	r3, PRIMASK
 8002236:	61bb      	str	r3, [r7, #24]
  return(result);
 8002238:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800223a:	633b      	str	r3, [r7, #48]	; 0x30
 800223c:	2301      	movs	r3, #1
 800223e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f383 8810 	msr	PRIMASK, r3
}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2101      	movs	r1, #1
 8002254:	438a      	bics	r2, r1
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	f383 8810 	msr	PRIMASK, r3
}
 8002262:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2280      	movs	r2, #128	; 0x80
 8002268:	2120      	movs	r1, #32
 800226a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2278      	movs	r2, #120	; 0x78
 8002270:	2100      	movs	r1, #0
 8002272:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e011      	b.n	800229c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2220      	movs	r2, #32
 800227c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2280      	movs	r2, #128	; 0x80
 8002282:	2120      	movs	r1, #32
 8002284:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2278      	movs	r2, #120	; 0x78
 8002296:	2100      	movs	r1, #0
 8002298:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	0018      	movs	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	b010      	add	sp, #64	; 0x40
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	01ffffff 	.word	0x01ffffff
 80022a8:	fffffedf 	.word	0xfffffedf

080022ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	1dfb      	adds	r3, r7, #7
 80022ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022bc:	e051      	b.n	8002362 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	3301      	adds	r3, #1
 80022c2:	d04e      	beq.n	8002362 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c4:	f7fe fb6a 	bl	800099c <HAL_GetTick>
 80022c8:	0002      	movs	r2, r0
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d302      	bcc.n	80022da <UART_WaitOnFlagUntilTimeout+0x2e>
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e051      	b.n	8002382 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2204      	movs	r2, #4
 80022e6:	4013      	ands	r3, r2
 80022e8:	d03b      	beq.n	8002362 <UART_WaitOnFlagUntilTimeout+0xb6>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b80      	cmp	r3, #128	; 0x80
 80022ee:	d038      	beq.n	8002362 <UART_WaitOnFlagUntilTimeout+0xb6>
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2b40      	cmp	r3, #64	; 0x40
 80022f4:	d035      	beq.n	8002362 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	2208      	movs	r2, #8
 80022fe:	4013      	ands	r3, r2
 8002300:	2b08      	cmp	r3, #8
 8002302:	d111      	bne.n	8002328 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2208      	movs	r2, #8
 800230a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	0018      	movs	r0, r3
 8002310:	f000 f83c 	bl	800238c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2284      	movs	r2, #132	; 0x84
 8002318:	2108      	movs	r1, #8
 800231a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2278      	movs	r2, #120	; 0x78
 8002320:	2100      	movs	r1, #0
 8002322:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e02c      	b.n	8002382 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	69da      	ldr	r2, [r3, #28]
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	401a      	ands	r2, r3
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	429a      	cmp	r2, r3
 800233a:	d112      	bne.n	8002362 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2280      	movs	r2, #128	; 0x80
 8002342:	0112      	lsls	r2, r2, #4
 8002344:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	0018      	movs	r0, r3
 800234a:	f000 f81f 	bl	800238c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2284      	movs	r2, #132	; 0x84
 8002352:	2120      	movs	r1, #32
 8002354:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2278      	movs	r2, #120	; 0x78
 800235a:	2100      	movs	r1, #0
 800235c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e00f      	b.n	8002382 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	4013      	ands	r3, r2
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	425a      	negs	r2, r3
 8002372:	4153      	adcs	r3, r2
 8002374:	b2db      	uxtb	r3, r3
 8002376:	001a      	movs	r2, r3
 8002378:	1dfb      	adds	r3, r7, #7
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d09e      	beq.n	80022be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	0018      	movs	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	b004      	add	sp, #16
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08e      	sub	sp, #56	; 0x38
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002394:	f3ef 8310 	mrs	r3, PRIMASK
 8002398:	617b      	str	r3, [r7, #20]
  return(result);
 800239a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800239c:	637b      	str	r3, [r7, #52]	; 0x34
 800239e:	2301      	movs	r3, #1
 80023a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	f383 8810 	msr	PRIMASK, r3
}
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4926      	ldr	r1, [pc, #152]	; (8002450 <UART_EndRxTransfer+0xc4>)
 80023b6:	400a      	ands	r2, r1
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f383 8810 	msr	PRIMASK, r3
}
 80023c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023c6:	f3ef 8310 	mrs	r3, PRIMASK
 80023ca:	623b      	str	r3, [r7, #32]
  return(result);
 80023cc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ce:	633b      	str	r3, [r7, #48]	; 0x30
 80023d0:	2301      	movs	r3, #1
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	f383 8810 	msr	PRIMASK, r3
}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2101      	movs	r1, #1
 80023e8:	438a      	bics	r2, r1
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f2:	f383 8810 	msr	PRIMASK, r3
}
 80023f6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d118      	bne.n	8002432 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002400:	f3ef 8310 	mrs	r3, PRIMASK
 8002404:	60bb      	str	r3, [r7, #8]
  return(result);
 8002406:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800240a:	2301      	movs	r3, #1
 800240c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f383 8810 	msr	PRIMASK, r3
}
 8002414:	46c0      	nop			; (mov r8, r8)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2110      	movs	r1, #16
 8002422:	438a      	bics	r2, r1
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002428:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	f383 8810 	msr	PRIMASK, r3
}
 8002430:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2280      	movs	r2, #128	; 0x80
 8002436:	2120      	movs	r1, #32
 8002438:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	46bd      	mov	sp, r7
 800244a:	b00e      	add	sp, #56	; 0x38
 800244c:	bd80      	pop	{r7, pc}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	fffffedf 	.word	0xfffffedf

08002454 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	0002      	movs	r2, r0
 800245c:	1dbb      	adds	r3, r7, #6
 800245e:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002464:	1dbb      	adds	r3, r7, #6
 8002466:	2200      	movs	r2, #0
 8002468:	5e9b      	ldrsh	r3, [r3, r2]
 800246a:	2b84      	cmp	r3, #132	; 0x84
 800246c:	d006      	beq.n	800247c <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800246e:	1dbb      	adds	r3, r7, #6
 8002470:	2200      	movs	r2, #0
 8002472:	5e9a      	ldrsh	r2, [r3, r2]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	18d3      	adds	r3, r2, r3
 8002478:	3303      	adds	r3, #3
 800247a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800247c:	68fb      	ldr	r3, [r7, #12]
}
 800247e:	0018      	movs	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	b004      	add	sp, #16
 8002484:	bd80      	pop	{r7, pc}

08002486 <makeCmsisPriority>:

#if (INCLUDE_uxTaskPriorityGet == 1)
/* Convert from FreeRTOS priority number to CMSIS type osPriority */
static osPriority makeCmsisPriority (unsigned portBASE_TYPE fpriority)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b084      	sub	sp, #16
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  osPriority priority = osPriorityError;
 800248e:	210e      	movs	r1, #14
 8002490:	187b      	adds	r3, r7, r1
 8002492:	2284      	movs	r2, #132	; 0x84
 8002494:	801a      	strh	r2, [r3, #0]
  
  if ((fpriority - tskIDLE_PRIORITY) <= (osPriorityRealtime - osPriorityIdle)) {
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b06      	cmp	r3, #6
 800249a:	d805      	bhi.n	80024a8 <makeCmsisPriority+0x22>
    priority = (osPriority)((int)osPriorityIdle + (int)(fpriority - tskIDLE_PRIORITY));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b03      	subs	r3, #3
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	801a      	strh	r2, [r3, #0]
  }
  
  return priority;
 80024a8:	230e      	movs	r3, #14
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	2200      	movs	r2, #0
 80024ae:	5e9b      	ldrsh	r3, [r3, r2]
}
 80024b0:	0018      	movs	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b004      	add	sp, #16
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024be:	f3ef 8305 	mrs	r3, IPSR
 80024c2:	607b      	str	r3, [r7, #4]
  return(result);
 80024c4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80024c6:	1e5a      	subs	r2, r3, #1
 80024c8:	4193      	sbcs	r3, r2
 80024ca:	b2db      	uxtb	r3, r3
}
 80024cc:	0018      	movs	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b002      	add	sp, #8
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80024d8:	f000 fb32 	bl	8002b40 <vTaskStartScheduler>
  
  return osOK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	0018      	movs	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80024e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e6:	b089      	sub	sp, #36	; 0x24
 80024e8:	af04      	add	r7, sp, #16
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d020      	beq.n	8002538 <osThreadCreate+0x54>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d01c      	beq.n	8002538 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685c      	ldr	r4, [r3, #4]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681d      	ldr	r5, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691e      	ldr	r6, [r3, #16]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2208      	movs	r2, #8
 800250e:	5e9b      	ldrsh	r3, [r3, r2]
 8002510:	0018      	movs	r0, r3
 8002512:	f7ff ff9f 	bl	8002454 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800251e:	6839      	ldr	r1, [r7, #0]
 8002520:	9302      	str	r3, [sp, #8]
 8002522:	9201      	str	r2, [sp, #4]
 8002524:	9000      	str	r0, [sp, #0]
 8002526:	000b      	movs	r3, r1
 8002528:	0032      	movs	r2, r6
 800252a:	0029      	movs	r1, r5
 800252c:	0020      	movs	r0, r4
 800252e:	f000 f8d0 	bl	80026d2 <xTaskCreateStatic>
 8002532:	0003      	movs	r3, r0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	e01d      	b.n	8002574 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685c      	ldr	r4, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002544:	b29e      	uxth	r6, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2208      	movs	r2, #8
 800254a:	5e9b      	ldrsh	r3, [r3, r2]
 800254c:	0018      	movs	r0, r3
 800254e:	f7ff ff81 	bl	8002454 <makeFreeRtosPriority>
 8002552:	0001      	movs	r1, r0
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	230c      	movs	r3, #12
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	9100      	str	r1, [sp, #0]
 800255e:	0013      	movs	r3, r2
 8002560:	0032      	movs	r2, r6
 8002562:	0029      	movs	r1, r5
 8002564:	0020      	movs	r0, r4
 8002566:	f000 f8f7 	bl	8002758 <xTaskCreate>
 800256a:	0003      	movs	r3, r0
 800256c:	2b01      	cmp	r3, #1
 800256e:	d001      	beq.n	8002574 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8002570:	2300      	movs	r3, #0
 8002572:	e000      	b.n	8002576 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002574:	68fb      	ldr	r3, [r7, #12]
}
 8002576:	0018      	movs	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	b005      	add	sp, #20
 800257c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800257e <osThreadSetPriority>:
* @param   priority      new priority value for the thread function.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadSetPriority shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadSetPriority (osThreadId thread_id, osPriority priority)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	000a      	movs	r2, r1
 8002588:	1cbb      	adds	r3, r7, #2
 800258a:	801a      	strh	r2, [r3, #0]
#if (INCLUDE_vTaskPrioritySet == 1)
  vTaskPrioritySet(thread_id, makeFreeRtosPriority(priority));
 800258c:	1cbb      	adds	r3, r7, #2
 800258e:	2200      	movs	r2, #0
 8002590:	5e9b      	ldrsh	r3, [r3, r2]
 8002592:	0018      	movs	r0, r3
 8002594:	f7ff ff5e 	bl	8002454 <makeFreeRtosPriority>
 8002598:	0002      	movs	r2, r0
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	0011      	movs	r1, r2
 800259e:	0018      	movs	r0, r3
 80025a0:	f000 fa3c 	bl	8002a1c <vTaskPrioritySet>
  return osOK;
 80025a4:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80025a6:	0018      	movs	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	b002      	add	sp, #8
 80025ac:	bd80      	pop	{r7, pc}

080025ae <osThreadGetPriority>:
* @param   thread_id     thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  current priority value of the thread function.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetPriority shall be consistent in every CMSIS-RTOS.
*/
osPriority osThreadGetPriority (osThreadId thread_id)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
#if (INCLUDE_uxTaskPriorityGet == 1)
  if (inHandlerMode())
 80025b6:	f7ff ff7f 	bl	80024b8 <inHandlerMode>
 80025ba:	1e03      	subs	r3, r0, #0
 80025bc:	d009      	beq.n	80025d2 <osThreadGetPriority+0x24>
  {
    return makeCmsisPriority(uxTaskPriorityGetFromISR(thread_id));  
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	0018      	movs	r0, r3
 80025c2:	f000 fa0d 	bl	80029e0 <uxTaskPriorityGetFromISR>
 80025c6:	0003      	movs	r3, r0
 80025c8:	0018      	movs	r0, r3
 80025ca:	f7ff ff5c 	bl	8002486 <makeCmsisPriority>
 80025ce:	0003      	movs	r3, r0
 80025d0:	e008      	b.n	80025e4 <osThreadGetPriority+0x36>
  }
  else
  {  
    return makeCmsisPriority(uxTaskPriorityGet(thread_id));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	0018      	movs	r0, r3
 80025d6:	f000 f9e9 	bl	80029ac <uxTaskPriorityGet>
 80025da:	0003      	movs	r3, r0
 80025dc:	0018      	movs	r0, r3
 80025de:	f7ff ff52 	bl	8002486 <makeCmsisPriority>
 80025e2:	0003      	movs	r3, r0
  }
#else
  return osPriorityError;
#endif
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b002      	add	sp, #8
 80025ea:	bd80      	pop	{r7, pc}

080025ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3308      	adds	r3, #8
 80025f8:	001a      	movs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	4252      	negs	r2, r2
 8002604:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3308      	adds	r3, #8
 800260a:	001a      	movs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3308      	adds	r3, #8
 8002614:	001a      	movs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002620:	46c0      	nop			; (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b002      	add	sp, #8
 8002626:	bd80      	pop	{r7, pc}

08002628 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	46bd      	mov	sp, r7
 800263a:	b002      	add	sp, #8
 800263c:	bd80      	pop	{r7, pc}

0800263e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	601a      	str	r2, [r3, #0]
}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	46bd      	mov	sp, r7
 800267e:	b004      	add	sp, #16
 8002680:	bd80      	pop	{r7, pc}

08002682 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6892      	ldr	r2, [r2, #8]
 8002698:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6852      	ldr	r2, [r2, #4]
 80026a2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d103      	bne.n	80026b6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	1e5a      	subs	r2, r3, #1
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b004      	add	sp, #16
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80026d2:	b590      	push	{r4, r7, lr}
 80026d4:	b08d      	sub	sp, #52	; 0x34
 80026d6:	af04      	add	r7, sp, #16
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
 80026de:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80026e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <xTaskCreateStatic+0x18>
 80026e6:	b672      	cpsid	i
 80026e8:	e7fe      	b.n	80026e8 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80026ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <xTaskCreateStatic+0x22>
 80026f0:	b672      	cpsid	i
 80026f2:	e7fe      	b.n	80026f2 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80026f4:	2354      	movs	r3, #84	; 0x54
 80026f6:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2b54      	cmp	r3, #84	; 0x54
 80026fc:	d001      	beq.n	8002702 <xTaskCreateStatic+0x30>
 80026fe:	b672      	cpsid	i
 8002700:	e7fe      	b.n	8002700 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002704:	2b00      	cmp	r3, #0
 8002706:	d020      	beq.n	800274a <xTaskCreateStatic+0x78>
 8002708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270a:	2b00      	cmp	r3, #0
 800270c:	d01d      	beq.n	800274a <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800270e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002710:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002716:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2251      	movs	r2, #81	; 0x51
 800271c:	2102      	movs	r1, #2
 800271e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002720:	683c      	ldr	r4, [r7, #0]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	2300      	movs	r3, #0
 800272a:	9303      	str	r3, [sp, #12]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	9302      	str	r3, [sp, #8]
 8002730:	2318      	movs	r3, #24
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	9301      	str	r3, [sp, #4]
 8002736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	0023      	movs	r3, r4
 800273c:	f000 f858 	bl	80027f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	0018      	movs	r0, r3
 8002744:	f000 f8ce 	bl	80028e4 <prvAddNewTaskToReadyList>
 8002748:	e001      	b.n	800274e <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800274a:	2300      	movs	r3, #0
 800274c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800274e:	69bb      	ldr	r3, [r7, #24]
	}
 8002750:	0018      	movs	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	b009      	add	sp, #36	; 0x24
 8002756:	bd90      	pop	{r4, r7, pc}

08002758 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002758:	b590      	push	{r4, r7, lr}
 800275a:	b08d      	sub	sp, #52	; 0x34
 800275c:	af04      	add	r7, sp, #16
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	1dbb      	adds	r3, r7, #6
 8002766:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002768:	1dbb      	adds	r3, r7, #6
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	0018      	movs	r0, r3
 8002770:	f000 fdee 	bl	8003350 <pvPortMalloc>
 8002774:	0003      	movs	r3, r0
 8002776:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d010      	beq.n	80027a0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800277e:	2054      	movs	r0, #84	; 0x54
 8002780:	f000 fde6 	bl	8003350 <pvPortMalloc>
 8002784:	0003      	movs	r3, r0
 8002786:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	631a      	str	r2, [r3, #48]	; 0x30
 8002794:	e006      	b.n	80027a4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	0018      	movs	r0, r3
 800279a:	f000 fe7f 	bl	800349c <vPortFree>
 800279e:	e001      	b.n	80027a4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d01a      	beq.n	80027e0 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	2251      	movs	r2, #81	; 0x51
 80027ae:	2100      	movs	r1, #0
 80027b0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027b2:	1dbb      	adds	r3, r7, #6
 80027b4:	881a      	ldrh	r2, [r3, #0]
 80027b6:	683c      	ldr	r4, [r7, #0]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	2300      	movs	r3, #0
 80027be:	9303      	str	r3, [sp, #12]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	9302      	str	r3, [sp, #8]
 80027c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c6:	9301      	str	r3, [sp, #4]
 80027c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	0023      	movs	r3, r4
 80027ce:	f000 f80f 	bl	80027f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	0018      	movs	r0, r3
 80027d6:	f000 f885 	bl	80028e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80027da:	2301      	movs	r3, #1
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	e002      	b.n	80027e6 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80027e0:	2301      	movs	r3, #1
 80027e2:	425b      	negs	r3, r3
 80027e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80027e6:	69bb      	ldr	r3, [r7, #24]
	}
 80027e8:	0018      	movs	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b009      	add	sp, #36	; 0x24
 80027ee:	bd90      	pop	{r4, r7, pc}

080027f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80027fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4936      	ldr	r1, [pc, #216]	; (80028e0 <prvInitialiseNewTask+0xf0>)
 8002806:	468c      	mov	ip, r1
 8002808:	4463      	add	r3, ip
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	18d3      	adds	r3, r2, r3
 800280e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	2207      	movs	r2, #7
 8002814:	4393      	bics	r3, r2
 8002816:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	2207      	movs	r2, #7
 800281c:	4013      	ands	r3, r2
 800281e:	d001      	beq.n	8002824 <prvInitialiseNewTask+0x34>
 8002820:	b672      	cpsid	i
 8002822:	e7fe      	b.n	8002822 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	e013      	b.n	8002852 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	18d3      	adds	r3, r2, r3
 8002830:	7818      	ldrb	r0, [r3, #0]
 8002832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002834:	2134      	movs	r1, #52	; 0x34
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	18d3      	adds	r3, r2, r3
 800283a:	185b      	adds	r3, r3, r1
 800283c:	1c02      	adds	r2, r0, #0
 800283e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	18d3      	adds	r3, r2, r3
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d006      	beq.n	800285a <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	3301      	adds	r3, #1
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2b0f      	cmp	r3, #15
 8002856:	d9e8      	bls.n	800282a <prvInitialiseNewTask+0x3a>
 8002858:	e000      	b.n	800285c <prvInitialiseNewTask+0x6c>
		{
			break;
 800285a:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285e:	2243      	movs	r2, #67	; 0x43
 8002860:	2100      	movs	r1, #0
 8002862:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	2b06      	cmp	r3, #6
 8002868:	d901      	bls.n	800286e <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800286a:	2306      	movs	r3, #6
 800286c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	6a3a      	ldr	r2, [r7, #32]
 8002872:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002876:	6a3a      	ldr	r2, [r7, #32]
 8002878:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287c:	2200      	movs	r2, #0
 800287e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002882:	3304      	adds	r3, #4
 8002884:	0018      	movs	r0, r3
 8002886:	f7ff fecf 	bl	8002628 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288c:	3318      	adds	r3, #24
 800288e:	0018      	movs	r0, r3
 8002890:	f7ff feca 	bl	8002628 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002898:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	2207      	movs	r2, #7
 800289e:	1ad2      	subs	r2, r2, r3
 80028a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80028a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80028aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ac:	2200      	movs	r2, #0
 80028ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80028b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b2:	2250      	movs	r2, #80	; 0x50
 80028b4:	2100      	movs	r1, #0
 80028b6:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	68f9      	ldr	r1, [r7, #12]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	0018      	movs	r0, r3
 80028c0:	f000 fc14 	bl	80030ec <pxPortInitialiseStack>
 80028c4:	0002      	movs	r2, r0
 80028c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	46bd      	mov	sp, r7
 80028da:	b006      	add	sp, #24
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	3fffffff 	.word	0x3fffffff

080028e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80028ec:	f000 fc98 	bl	8003220 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80028f0:	4b28      	ldr	r3, [pc, #160]	; (8002994 <prvAddNewTaskToReadyList+0xb0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	4b27      	ldr	r3, [pc, #156]	; (8002994 <prvAddNewTaskToReadyList+0xb0>)
 80028f8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80028fa:	4b27      	ldr	r3, [pc, #156]	; (8002998 <prvAddNewTaskToReadyList+0xb4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002902:	4b25      	ldr	r3, [pc, #148]	; (8002998 <prvAddNewTaskToReadyList+0xb4>)
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002908:	4b22      	ldr	r3, [pc, #136]	; (8002994 <prvAddNewTaskToReadyList+0xb0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d110      	bne.n	8002932 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002910:	f000 fb12 	bl	8002f38 <prvInitialiseTaskLists>
 8002914:	e00d      	b.n	8002932 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002916:	4b21      	ldr	r3, [pc, #132]	; (800299c <prvAddNewTaskToReadyList+0xb8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800291e:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <prvAddNewTaskToReadyList+0xb4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	429a      	cmp	r2, r3
 800292a:	d802      	bhi.n	8002932 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800292c:	4b1a      	ldr	r3, [pc, #104]	; (8002998 <prvAddNewTaskToReadyList+0xb4>)
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002932:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <prvAddNewTaskToReadyList+0xbc>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <prvAddNewTaskToReadyList+0xbc>)
 800293a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002940:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <prvAddNewTaskToReadyList+0xc0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d903      	bls.n	8002950 <prvAddNewTaskToReadyList+0x6c>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800294c:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <prvAddNewTaskToReadyList+0xc0>)
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002954:	0013      	movs	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	189b      	adds	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4a12      	ldr	r2, [pc, #72]	; (80029a8 <prvAddNewTaskToReadyList+0xc4>)
 800295e:	189a      	adds	r2, r3, r2
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3304      	adds	r3, #4
 8002964:	0019      	movs	r1, r3
 8002966:	0010      	movs	r0, r2
 8002968:	f7ff fe69 	bl	800263e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800296c:	f000 fc6a 	bl	8003244 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <prvAddNewTaskToReadyList+0xb8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002978:	4b07      	ldr	r3, [pc, #28]	; (8002998 <prvAddNewTaskToReadyList+0xb4>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	429a      	cmp	r2, r3
 8002984:	d201      	bcs.n	800298a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002986:	f000 fc3b 	bl	8003200 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	46bd      	mov	sp, r7
 800298e:	b002      	add	sp, #8
 8002990:	bd80      	pop	{r7, pc}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	200004b0 	.word	0x200004b0
 8002998:	200003b0 	.word	0x200003b0
 800299c:	200004bc 	.word	0x200004bc
 80029a0:	200004cc 	.word	0x200004cc
 80029a4:	200004b8 	.word	0x200004b8
 80029a8:	200003b4 	.word	0x200003b4

080029ac <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 80029b4:	f000 fc34 	bl	8003220 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d102      	bne.n	80029c4 <uxTaskPriorityGet+0x18>
 80029be:	4b07      	ldr	r3, [pc, #28]	; (80029dc <uxTaskPriorityGet+0x30>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	e000      	b.n	80029c6 <uxTaskPriorityGet+0x1a>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 80029ce:	f000 fc39 	bl	8003244 <vPortExitCritical>

		return uxReturn;
 80029d2:	68bb      	ldr	r3, [r7, #8]
	}
 80029d4:	0018      	movs	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b004      	add	sp, #16
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	200003b0 	.word	0x200003b0

080029e0 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
	{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 80029e8:	f000 fc44 	bl	8003274 <ulSetInterruptMaskFromISR>
 80029ec:	0003      	movs	r3, r0
 80029ee:	617b      	str	r3, [r7, #20]
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d102      	bne.n	80029fc <uxTaskPriorityGetFromISR+0x1c>
 80029f6:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <uxTaskPriorityGetFromISR+0x38>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	e000      	b.n	80029fe <uxTaskPriorityGetFromISR+0x1e>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	613b      	str	r3, [r7, #16]
			uxReturn = pxTCB->uxPriority;
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	60fb      	str	r3, [r7, #12]
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f000 fc39 	bl	8003280 <vClearInterruptMaskFromISR>

		return uxReturn;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
	}
 8002a10:	0018      	movs	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b006      	add	sp, #24
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	200003b0 	.word	0x200003b0

08002a1c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b06      	cmp	r3, #6
 8002a2e:	d901      	bls.n	8002a34 <vTaskPrioritySet+0x18>
 8002a30:	b672      	cpsid	i
 8002a32:	e7fe      	b.n	8002a32 <vTaskPrioritySet+0x16>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d901      	bls.n	8002a3e <vTaskPrioritySet+0x22>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a3a:	2306      	movs	r3, #6
 8002a3c:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8002a3e:	f000 fbef 	bl	8003220 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d102      	bne.n	8002a4e <vTaskPrioritySet+0x32>
 8002a48:	4b3a      	ldr	r3, [pc, #232]	; (8002b34 <vTaskPrioritySet+0x118>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	e000      	b.n	8002a50 <vTaskPrioritySet+0x34>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d062      	beq.n	8002b26 <vTaskPrioritySet+0x10a>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d90d      	bls.n	8002a84 <vTaskPrioritySet+0x68>
				{
					if( pxTCB != pxCurrentTCB )
 8002a68:	4b32      	ldr	r3, [pc, #200]	; (8002b34 <vTaskPrioritySet+0x118>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d00f      	beq.n	8002a92 <vTaskPrioritySet+0x76>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8002a72:	4b30      	ldr	r3, [pc, #192]	; (8002b34 <vTaskPrioritySet+0x118>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d309      	bcc.n	8002a92 <vTaskPrioritySet+0x76>
						{
							xYieldRequired = pdTRUE;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	e006      	b.n	8002a92 <vTaskPrioritySet+0x76>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8002a84:	4b2b      	ldr	r3, [pc, #172]	; (8002b34 <vTaskPrioritySet+0x118>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d101      	bne.n	8002a92 <vTaskPrioritySet+0x76>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d102      	bne.n	8002aaa <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	645a      	str	r2, [r3, #68]	; 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	db04      	blt.n	8002ac2 <vTaskPrioritySet+0xa6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	2207      	movs	r2, #7
 8002abc:	1ad2      	subs	r2, r2, r3
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	6959      	ldr	r1, [r3, #20]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	0013      	movs	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	189b      	adds	r3, r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4a19      	ldr	r2, [pc, #100]	; (8002b38 <vTaskPrioritySet+0x11c>)
 8002ad2:	189b      	adds	r3, r3, r2
 8002ad4:	4299      	cmp	r1, r3
 8002ad6:	d101      	bne.n	8002adc <vTaskPrioritySet+0xc0>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <vTaskPrioritySet+0xc2>
 8002adc:	2300      	movs	r3, #0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d01c      	beq.n	8002b1c <vTaskPrioritySet+0x100>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f7ff fdcb 	bl	8002682 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <vTaskPrioritySet+0x120>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d903      	bls.n	8002b00 <vTaskPrioritySet+0xe4>
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <vTaskPrioritySet+0x120>)
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b04:	0013      	movs	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	189b      	adds	r3, r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4a0a      	ldr	r2, [pc, #40]	; (8002b38 <vTaskPrioritySet+0x11c>)
 8002b0e:	189a      	adds	r2, r3, r2
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	3304      	adds	r3, #4
 8002b14:	0019      	movs	r1, r3
 8002b16:	0010      	movs	r0, r2
 8002b18:	f7ff fd91 	bl	800263e <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <vTaskPrioritySet+0x10a>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8002b22:	f000 fb6d 	bl	8003200 <vPortYield>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8002b26:	f000 fb8d 	bl	8003244 <vPortExitCritical>
	}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b006      	add	sp, #24
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	200003b0 	.word	0x200003b0
 8002b38:	200003b4 	.word	0x200003b4
 8002b3c:	200004b8 	.word	0x200004b8

08002b40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b089      	sub	sp, #36	; 0x24
 8002b44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002b4e:	003a      	movs	r2, r7
 8002b50:	1d39      	adds	r1, r7, #4
 8002b52:	2308      	movs	r3, #8
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	0018      	movs	r0, r3
 8002b58:	f7fd fb6c 	bl	8000234 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002b5c:	683c      	ldr	r4, [r7, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	4918      	ldr	r1, [pc, #96]	; (8002bc4 <vTaskStartScheduler+0x84>)
 8002b64:	4818      	ldr	r0, [pc, #96]	; (8002bc8 <vTaskStartScheduler+0x88>)
 8002b66:	9202      	str	r2, [sp, #8]
 8002b68:	9301      	str	r3, [sp, #4]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	0022      	movs	r2, r4
 8002b72:	f7ff fdae 	bl	80026d2 <xTaskCreateStatic>
 8002b76:	0002      	movs	r2, r0
 8002b78:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <vTaskStartScheduler+0x8c>)
 8002b7a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002b7c:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <vTaskStartScheduler+0x8c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002b84:	2301      	movs	r3, #1
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	e001      	b.n	8002b8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d10d      	bne.n	8002bb0 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8002b94:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b96:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <vTaskStartScheduler+0x90>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	4252      	negs	r2, r2
 8002b9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <vTaskStartScheduler+0x94>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <vTaskStartScheduler+0x98>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002baa:	f000 fb05 	bl	80031b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002bae:	e004      	b.n	8002bba <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	d101      	bne.n	8002bba <vTaskStartScheduler+0x7a>
 8002bb6:	b672      	cpsid	i
 8002bb8:	e7fe      	b.n	8002bb8 <vTaskStartScheduler+0x78>
}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	b005      	add	sp, #20
 8002bc0:	bd90      	pop	{r4, r7, pc}
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	08004094 	.word	0x08004094
 8002bc8:	08002f19 	.word	0x08002f19
 8002bcc:	200004d4 	.word	0x200004d4
 8002bd0:	200004d0 	.word	0x200004d0
 8002bd4:	200004bc 	.word	0x200004bc
 8002bd8:	200004b4 	.word	0x200004b4

08002bdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002be0:	4b03      	ldr	r3, [pc, #12]	; (8002bf0 <vTaskSuspendAll+0x14>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	4b02      	ldr	r3, [pc, #8]	; (8002bf0 <vTaskSuspendAll+0x14>)
 8002be8:	601a      	str	r2, [r3, #0]
}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	200004d8 	.word	0x200004d8

08002bf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002c02:	4b3a      	ldr	r3, [pc, #232]	; (8002cec <xTaskResumeAll+0xf8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <xTaskResumeAll+0x1a>
 8002c0a:	b672      	cpsid	i
 8002c0c:	e7fe      	b.n	8002c0c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002c0e:	f000 fb07 	bl	8003220 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002c12:	4b36      	ldr	r3, [pc, #216]	; (8002cec <xTaskResumeAll+0xf8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	1e5a      	subs	r2, r3, #1
 8002c18:	4b34      	ldr	r3, [pc, #208]	; (8002cec <xTaskResumeAll+0xf8>)
 8002c1a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c1c:	4b33      	ldr	r3, [pc, #204]	; (8002cec <xTaskResumeAll+0xf8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d15b      	bne.n	8002cdc <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c24:	4b32      	ldr	r3, [pc, #200]	; (8002cf0 <xTaskResumeAll+0xfc>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d057      	beq.n	8002cdc <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c2c:	e02f      	b.n	8002c8e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002c2e:	4b31      	ldr	r3, [pc, #196]	; (8002cf4 <xTaskResumeAll+0x100>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3318      	adds	r3, #24
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f7ff fd21 	bl	8002682 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	3304      	adds	r3, #4
 8002c44:	0018      	movs	r0, r3
 8002c46:	f7ff fd1c 	bl	8002682 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c4e:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <xTaskResumeAll+0x104>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d903      	bls.n	8002c5e <xTaskResumeAll+0x6a>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5a:	4b27      	ldr	r3, [pc, #156]	; (8002cf8 <xTaskResumeAll+0x104>)
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c62:	0013      	movs	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	189b      	adds	r3, r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4a24      	ldr	r2, [pc, #144]	; (8002cfc <xTaskResumeAll+0x108>)
 8002c6c:	189a      	adds	r2, r3, r2
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	3304      	adds	r3, #4
 8002c72:	0019      	movs	r1, r3
 8002c74:	0010      	movs	r0, r2
 8002c76:	f7ff fce2 	bl	800263e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7e:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <xTaskResumeAll+0x10c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d302      	bcc.n	8002c8e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8002c88:	4b1e      	ldr	r3, [pc, #120]	; (8002d04 <xTaskResumeAll+0x110>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c8e:	4b19      	ldr	r3, [pc, #100]	; (8002cf4 <xTaskResumeAll+0x100>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1cb      	bne.n	8002c2e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c9c:	f000 f9e6 	bl	800306c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002ca0:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <xTaskResumeAll+0x114>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00f      	beq.n	8002ccc <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002cac:	f000 f82e 	bl	8002d0c <xTaskIncrementTick>
 8002cb0:	1e03      	subs	r3, r0, #0
 8002cb2:	d002      	beq.n	8002cba <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8002cb4:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <xTaskResumeAll+0x110>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f2      	bne.n	8002cac <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <xTaskResumeAll+0x114>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002ccc:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <xTaskResumeAll+0x110>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002cd8:	f000 fa92 	bl	8003200 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002cdc:	f000 fab2 	bl	8003244 <vPortExitCritical>

	return xAlreadyYielded;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
}
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b004      	add	sp, #16
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	200004d8 	.word	0x200004d8
 8002cf0:	200004b0 	.word	0x200004b0
 8002cf4:	20000470 	.word	0x20000470
 8002cf8:	200004b8 	.word	0x200004b8
 8002cfc:	200003b4 	.word	0x200003b4
 8002d00:	200003b0 	.word	0x200003b0
 8002d04:	200004c4 	.word	0x200004c4
 8002d08:	200004c0 	.word	0x200004c0

08002d0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d16:	4b4c      	ldr	r3, [pc, #304]	; (8002e48 <xTaskIncrementTick+0x13c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d000      	beq.n	8002d20 <xTaskIncrementTick+0x14>
 8002d1e:	e083      	b.n	8002e28 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d20:	4b4a      	ldr	r3, [pc, #296]	; (8002e4c <xTaskIncrementTick+0x140>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3301      	adds	r3, #1
 8002d26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d28:	4b48      	ldr	r3, [pc, #288]	; (8002e4c <xTaskIncrementTick+0x140>)
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d117      	bne.n	8002d64 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d34:	4b46      	ldr	r3, [pc, #280]	; (8002e50 <xTaskIncrementTick+0x144>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <xTaskIncrementTick+0x36>
 8002d3e:	b672      	cpsid	i
 8002d40:	e7fe      	b.n	8002d40 <xTaskIncrementTick+0x34>
 8002d42:	4b43      	ldr	r3, [pc, #268]	; (8002e50 <xTaskIncrementTick+0x144>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	4b42      	ldr	r3, [pc, #264]	; (8002e54 <xTaskIncrementTick+0x148>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b40      	ldr	r3, [pc, #256]	; (8002e50 <xTaskIncrementTick+0x144>)
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	4b40      	ldr	r3, [pc, #256]	; (8002e54 <xTaskIncrementTick+0x148>)
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	4b40      	ldr	r3, [pc, #256]	; (8002e58 <xTaskIncrementTick+0x14c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	4b3e      	ldr	r3, [pc, #248]	; (8002e58 <xTaskIncrementTick+0x14c>)
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	f000 f984 	bl	800306c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d64:	4b3d      	ldr	r3, [pc, #244]	; (8002e5c <xTaskIncrementTick+0x150>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d34e      	bcc.n	8002e0c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d6e:	4b38      	ldr	r3, [pc, #224]	; (8002e50 <xTaskIncrementTick+0x144>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <xTaskIncrementTick+0x70>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <xTaskIncrementTick+0x72>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d004      	beq.n	8002d8c <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d82:	4b36      	ldr	r3, [pc, #216]	; (8002e5c <xTaskIncrementTick+0x150>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	4252      	negs	r2, r2
 8002d88:	601a      	str	r2, [r3, #0]
					break;
 8002d8a:	e03f      	b.n	8002e0c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d8c:	4b30      	ldr	r3, [pc, #192]	; (8002e50 <xTaskIncrementTick+0x144>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d203      	bcs.n	8002dac <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002da4:	4b2d      	ldr	r3, [pc, #180]	; (8002e5c <xTaskIncrementTick+0x150>)
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	601a      	str	r2, [r3, #0]
						break;
 8002daa:	e02f      	b.n	8002e0c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	3304      	adds	r3, #4
 8002db0:	0018      	movs	r0, r3
 8002db2:	f7ff fc66 	bl	8002682 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d004      	beq.n	8002dc8 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	3318      	adds	r3, #24
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f7ff fc5d 	bl	8002682 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dcc:	4b24      	ldr	r3, [pc, #144]	; (8002e60 <xTaskIncrementTick+0x154>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d903      	bls.n	8002ddc <xTaskIncrementTick+0xd0>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd8:	4b21      	ldr	r3, [pc, #132]	; (8002e60 <xTaskIncrementTick+0x154>)
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de0:	0013      	movs	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	189b      	adds	r3, r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4a1e      	ldr	r2, [pc, #120]	; (8002e64 <xTaskIncrementTick+0x158>)
 8002dea:	189a      	adds	r2, r3, r2
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	3304      	adds	r3, #4
 8002df0:	0019      	movs	r1, r3
 8002df2:	0010      	movs	r0, r2
 8002df4:	f7ff fc23 	bl	800263e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dfc:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <xTaskIncrementTick+0x15c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d3b3      	bcc.n	8002d6e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8002e06:	2301      	movs	r3, #1
 8002e08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e0a:	e7b0      	b.n	8002d6e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e0c:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <xTaskIncrementTick+0x15c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e12:	4914      	ldr	r1, [pc, #80]	; (8002e64 <xTaskIncrementTick+0x158>)
 8002e14:	0013      	movs	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	189b      	adds	r3, r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	585b      	ldr	r3, [r3, r1]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d907      	bls.n	8002e32 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002e22:	2301      	movs	r3, #1
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	e004      	b.n	8002e32 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002e28:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <xTaskIncrementTick+0x160>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <xTaskIncrementTick+0x160>)
 8002e30:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002e32:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <xTaskIncrementTick+0x164>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002e3e:	697b      	ldr	r3, [r7, #20]
}
 8002e40:	0018      	movs	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b006      	add	sp, #24
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	200004d8 	.word	0x200004d8
 8002e4c:	200004b4 	.word	0x200004b4
 8002e50:	20000468 	.word	0x20000468
 8002e54:	2000046c 	.word	0x2000046c
 8002e58:	200004c8 	.word	0x200004c8
 8002e5c:	200004d0 	.word	0x200004d0
 8002e60:	200004b8 	.word	0x200004b8
 8002e64:	200003b4 	.word	0x200003b4
 8002e68:	200003b0 	.word	0x200003b0
 8002e6c:	200004c0 	.word	0x200004c0
 8002e70:	200004c4 	.word	0x200004c4

08002e74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e7a:	4b22      	ldr	r3, [pc, #136]	; (8002f04 <vTaskSwitchContext+0x90>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e82:	4b21      	ldr	r3, [pc, #132]	; (8002f08 <vTaskSwitchContext+0x94>)
 8002e84:	2201      	movs	r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e88:	e037      	b.n	8002efa <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8002e8a:	4b1f      	ldr	r3, [pc, #124]	; (8002f08 <vTaskSwitchContext+0x94>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002e90:	4b1e      	ldr	r3, [pc, #120]	; (8002f0c <vTaskSwitchContext+0x98>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	607b      	str	r3, [r7, #4]
 8002e96:	e007      	b.n	8002ea8 <vTaskSwitchContext+0x34>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <vTaskSwitchContext+0x2e>
 8002e9e:	b672      	cpsid	i
 8002ea0:	e7fe      	b.n	8002ea0 <vTaskSwitchContext+0x2c>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	607b      	str	r3, [r7, #4]
 8002ea8:	4919      	ldr	r1, [pc, #100]	; (8002f10 <vTaskSwitchContext+0x9c>)
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	0013      	movs	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	189b      	adds	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	585b      	ldr	r3, [r3, r1]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0ee      	beq.n	8002e98 <vTaskSwitchContext+0x24>
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	0013      	movs	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	189b      	adds	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4a12      	ldr	r2, [pc, #72]	; (8002f10 <vTaskSwitchContext+0x9c>)
 8002ec6:	189b      	adds	r3, r3, r2
 8002ec8:	603b      	str	r3, [r7, #0]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	3308      	adds	r3, #8
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d104      	bne.n	8002eea <vTaskSwitchContext+0x76>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <vTaskSwitchContext+0xa0>)
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <vTaskSwitchContext+0x98>)
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	601a      	str	r2, [r3, #0]
}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	46bd      	mov	sp, r7
 8002efe:	b002      	add	sp, #8
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	200004d8 	.word	0x200004d8
 8002f08:	200004c4 	.word	0x200004c4
 8002f0c:	200004b8 	.word	0x200004b8
 8002f10:	200003b4 	.word	0x200003b4
 8002f14:	200003b0 	.word	0x200003b0

08002f18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002f20:	f000 f84e 	bl	8002fc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f24:	4b03      	ldr	r3, [pc, #12]	; (8002f34 <prvIdleTask+0x1c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d9f9      	bls.n	8002f20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002f2c:	f000 f968 	bl	8003200 <vPortYield>
		prvCheckTasksWaitingTermination();
 8002f30:	e7f6      	b.n	8002f20 <prvIdleTask+0x8>
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	200003b4 	.word	0x200003b4

08002f38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f3e:	2300      	movs	r3, #0
 8002f40:	607b      	str	r3, [r7, #4]
 8002f42:	e00c      	b.n	8002f5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	0013      	movs	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	189b      	adds	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4a14      	ldr	r2, [pc, #80]	; (8002fa0 <prvInitialiseTaskLists+0x68>)
 8002f50:	189b      	adds	r3, r3, r2
 8002f52:	0018      	movs	r0, r3
 8002f54:	f7ff fb4a 	bl	80025ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	607b      	str	r3, [r7, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b06      	cmp	r3, #6
 8002f62:	d9ef      	bls.n	8002f44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f64:	4b0f      	ldr	r3, [pc, #60]	; (8002fa4 <prvInitialiseTaskLists+0x6c>)
 8002f66:	0018      	movs	r0, r3
 8002f68:	f7ff fb40 	bl	80025ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <prvInitialiseTaskLists+0x70>)
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f7ff fb3c 	bl	80025ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002f74:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <prvInitialiseTaskLists+0x74>)
 8002f76:	0018      	movs	r0, r3
 8002f78:	f7ff fb38 	bl	80025ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002f7c:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <prvInitialiseTaskLists+0x78>)
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f7ff fb34 	bl	80025ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <prvInitialiseTaskLists+0x7c>)
 8002f86:	0018      	movs	r0, r3
 8002f88:	f7ff fb30 	bl	80025ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <prvInitialiseTaskLists+0x80>)
 8002f8e:	4a05      	ldr	r2, [pc, #20]	; (8002fa4 <prvInitialiseTaskLists+0x6c>)
 8002f90:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f92:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <prvInitialiseTaskLists+0x84>)
 8002f94:	4a04      	ldr	r2, [pc, #16]	; (8002fa8 <prvInitialiseTaskLists+0x70>)
 8002f96:	601a      	str	r2, [r3, #0]
}
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b002      	add	sp, #8
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	200003b4 	.word	0x200003b4
 8002fa4:	20000440 	.word	0x20000440
 8002fa8:	20000454 	.word	0x20000454
 8002fac:	20000470 	.word	0x20000470
 8002fb0:	20000484 	.word	0x20000484
 8002fb4:	2000049c 	.word	0x2000049c
 8002fb8:	20000468 	.word	0x20000468
 8002fbc:	2000046c 	.word	0x2000046c

08002fc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fc6:	e01a      	b.n	8002ffe <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8002fc8:	f000 f92a 	bl	8003220 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002fcc:	4b10      	ldr	r3, [pc, #64]	; (8003010 <prvCheckTasksWaitingTermination+0x50>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f7ff fb52 	bl	8002682 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002fde:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <prvCheckTasksWaitingTermination+0x54>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	1e5a      	subs	r2, r3, #1
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <prvCheckTasksWaitingTermination+0x54>)
 8002fe6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <prvCheckTasksWaitingTermination+0x58>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	1e5a      	subs	r2, r3, #1
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <prvCheckTasksWaitingTermination+0x58>)
 8002ff0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8002ff2:	f000 f927 	bl	8003244 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f000 f80f 	bl	800301c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ffe:	4b06      	ldr	r3, [pc, #24]	; (8003018 <prvCheckTasksWaitingTermination+0x58>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1e0      	bne.n	8002fc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	46c0      	nop			; (mov r8, r8)
 800300a:	46bd      	mov	sp, r7
 800300c:	b002      	add	sp, #8
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20000484 	.word	0x20000484
 8003014:	200004b0 	.word	0x200004b0
 8003018:	20000498 	.word	0x20000498

0800301c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2251      	movs	r2, #81	; 0x51
 8003028:	5c9b      	ldrb	r3, [r3, r2]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	0018      	movs	r0, r3
 8003034:	f000 fa32 	bl	800349c <vPortFree>
				vPortFree( pxTCB );
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	0018      	movs	r0, r3
 800303c:	f000 fa2e 	bl	800349c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003040:	e010      	b.n	8003064 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2251      	movs	r2, #81	; 0x51
 8003046:	5c9b      	ldrb	r3, [r3, r2]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d104      	bne.n	8003056 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	0018      	movs	r0, r3
 8003050:	f000 fa24 	bl	800349c <vPortFree>
	}
 8003054:	e006      	b.n	8003064 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2251      	movs	r2, #81	; 0x51
 800305a:	5c9b      	ldrb	r3, [r3, r2]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d001      	beq.n	8003064 <prvDeleteTCB+0x48>
 8003060:	b672      	cpsid	i
 8003062:	e7fe      	b.n	8003062 <prvDeleteTCB+0x46>
	}
 8003064:	46c0      	nop			; (mov r8, r8)
 8003066:	46bd      	mov	sp, r7
 8003068:	b002      	add	sp, #8
 800306a:	bd80      	pop	{r7, pc}

0800306c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003072:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <prvResetNextTaskUnblockTime+0x40>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <prvResetNextTaskUnblockTime+0x14>
 800307c:	2301      	movs	r3, #1
 800307e:	e000      	b.n	8003082 <prvResetNextTaskUnblockTime+0x16>
 8003080:	2300      	movs	r3, #0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d004      	beq.n	8003090 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <prvResetNextTaskUnblockTime+0x44>)
 8003088:	2201      	movs	r2, #1
 800308a:	4252      	negs	r2, r2
 800308c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800308e:	e008      	b.n	80030a2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <prvResetNextTaskUnblockTime+0x40>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <prvResetNextTaskUnblockTime+0x44>)
 80030a0:	601a      	str	r2, [r3, #0]
}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b002      	add	sp, #8
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	20000468 	.word	0x20000468
 80030b0:	200004d0 	.word	0x200004d0

080030b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <xTaskGetSchedulerState+0x30>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d102      	bne.n	80030c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80030c2:	2301      	movs	r3, #1
 80030c4:	607b      	str	r3, [r7, #4]
 80030c6:	e008      	b.n	80030da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030c8:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <xTaskGetSchedulerState+0x34>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d102      	bne.n	80030d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80030d0:	2302      	movs	r3, #2
 80030d2:	607b      	str	r3, [r7, #4]
 80030d4:	e001      	b.n	80030da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80030d6:	2300      	movs	r3, #0
 80030d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80030da:	687b      	ldr	r3, [r7, #4]
	}
 80030dc:	0018      	movs	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	b002      	add	sp, #8
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	200004bc 	.word	0x200004bc
 80030e8:	200004d8 	.word	0x200004d8

080030ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	3b04      	subs	r3, #4
 80030fc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2280      	movs	r2, #128	; 0x80
 8003102:	0452      	lsls	r2, r2, #17
 8003104:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	3b04      	subs	r3, #4
 800310a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	3b04      	subs	r3, #4
 8003116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003118:	4a08      	ldr	r2, [pc, #32]	; (800313c <pxPortInitialiseStack+0x50>)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	3b14      	subs	r3, #20
 8003122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	3b20      	subs	r3, #32
 800312e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003130:	68fb      	ldr	r3, [r7, #12]
}
 8003132:	0018      	movs	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	b004      	add	sp, #16
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	08003141 	.word	0x08003141

08003140 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003146:	2300      	movs	r3, #0
 8003148:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800314a:	4b08      	ldr	r3, [pc, #32]	; (800316c <prvTaskExitError+0x2c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3301      	adds	r3, #1
 8003150:	d001      	beq.n	8003156 <prvTaskExitError+0x16>
 8003152:	b672      	cpsid	i
 8003154:	e7fe      	b.n	8003154 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8003156:	b672      	cpsid	i
	while( ulDummy == 0 )
 8003158:	46c0      	nop			; (mov r8, r8)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0fc      	beq.n	800315a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003160:	46c0      	nop			; (mov r8, r8)
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	46bd      	mov	sp, r7
 8003166:	b002      	add	sp, #8
 8003168:	bd80      	pop	{r7, pc}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	2000000c 	.word	0x2000000c

08003170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8003174:	46c0      	nop			; (mov r8, r8)
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	0000      	movs	r0, r0
 800317c:	0000      	movs	r0, r0
	...

08003180 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003180:	4a0b      	ldr	r2, [pc, #44]	; (80031b0 <pxCurrentTCBConst2>)
 8003182:	6813      	ldr	r3, [r2, #0]
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	3020      	adds	r0, #32
 8003188:	f380 8809 	msr	PSP, r0
 800318c:	2002      	movs	r0, #2
 800318e:	f380 8814 	msr	CONTROL, r0
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003198:	46ae      	mov	lr, r5
 800319a:	bc08      	pop	{r3}
 800319c:	bc04      	pop	{r2}
 800319e:	b662      	cpsie	i
 80031a0:	4718      	bx	r3
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	46c0      	nop			; (mov r8, r8)
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	46c0      	nop			; (mov r8, r8)
 80031ae:	46c0      	nop			; (mov r8, r8)

080031b0 <pxCurrentTCBConst2>:
 80031b0:	200003b0 	.word	0x200003b0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80031b4:	46c0      	nop			; (mov r8, r8)
 80031b6:	46c0      	nop			; (mov r8, r8)

080031b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80031bc:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <xPortStartScheduler+0x40>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <xPortStartScheduler+0x40>)
 80031c2:	21ff      	movs	r1, #255	; 0xff
 80031c4:	0409      	lsls	r1, r1, #16
 80031c6:	430a      	orrs	r2, r1
 80031c8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80031ca:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <xPortStartScheduler+0x40>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <xPortStartScheduler+0x40>)
 80031d0:	21ff      	movs	r1, #255	; 0xff
 80031d2:	0609      	lsls	r1, r1, #24
 80031d4:	430a      	orrs	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80031d8:	f000 f898 	bl	800330c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80031dc:	4b07      	ldr	r3, [pc, #28]	; (80031fc <xPortStartScheduler+0x44>)
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80031e2:	f7ff ffcd 	bl	8003180 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80031e6:	f7ff fe45 	bl	8002e74 <vTaskSwitchContext>
	prvTaskExitError();
 80031ea:	f7ff ffa9 	bl	8003140 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	0018      	movs	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	e000ed20 	.word	0xe000ed20
 80031fc:	2000000c 	.word	0x2000000c

08003200 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003204:	4b05      	ldr	r3, [pc, #20]	; (800321c <vPortYield+0x1c>)
 8003206:	2280      	movs	r2, #128	; 0x80
 8003208:	0552      	lsls	r2, r2, #21
 800320a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800320c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003210:	f3bf 8f6f 	isb	sy
}
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	e000ed04 	.word	0xe000ed04

08003220 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003224:	b672      	cpsid	i
    uxCriticalNesting++;
 8003226:	4b06      	ldr	r3, [pc, #24]	; (8003240 <vPortEnterCritical+0x20>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	4b04      	ldr	r3, [pc, #16]	; (8003240 <vPortEnterCritical+0x20>)
 800322e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8003230:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003234:	f3bf 8f6f 	isb	sy
}
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	2000000c 	.word	0x2000000c

08003244 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003248:	4b09      	ldr	r3, [pc, #36]	; (8003270 <vPortExitCritical+0x2c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <vPortExitCritical+0x10>
 8003250:	b672      	cpsid	i
 8003252:	e7fe      	b.n	8003252 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <vPortExitCritical+0x2c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	1e5a      	subs	r2, r3, #1
 800325a:	4b05      	ldr	r3, [pc, #20]	; (8003270 <vPortExitCritical+0x2c>)
 800325c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800325e:	4b04      	ldr	r3, [pc, #16]	; (8003270 <vPortExitCritical+0x2c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d100      	bne.n	8003268 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8003266:	b662      	cpsie	i
    }
}
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	2000000c 	.word	0x2000000c

08003274 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8003274:	f3ef 8010 	mrs	r0, PRIMASK
 8003278:	b672      	cpsid	i
 800327a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800327c:	46c0      	nop			; (mov r8, r8)
 800327e:	0018      	movs	r0, r3

08003280 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8003280:	f380 8810 	msr	PRIMASK, r0
 8003284:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8003286:	46c0      	nop			; (mov r8, r8)
	...

08003290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003290:	f3ef 8009 	mrs	r0, PSP
 8003294:	4b0e      	ldr	r3, [pc, #56]	; (80032d0 <pxCurrentTCBConst>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	3820      	subs	r0, #32
 800329a:	6010      	str	r0, [r2, #0]
 800329c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800329e:	4644      	mov	r4, r8
 80032a0:	464d      	mov	r5, r9
 80032a2:	4656      	mov	r6, sl
 80032a4:	465f      	mov	r7, fp
 80032a6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80032a8:	b508      	push	{r3, lr}
 80032aa:	b672      	cpsid	i
 80032ac:	f7ff fde2 	bl	8002e74 <vTaskSwitchContext>
 80032b0:	b662      	cpsie	i
 80032b2:	bc0c      	pop	{r2, r3}
 80032b4:	6811      	ldr	r1, [r2, #0]
 80032b6:	6808      	ldr	r0, [r1, #0]
 80032b8:	3010      	adds	r0, #16
 80032ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80032bc:	46a0      	mov	r8, r4
 80032be:	46a9      	mov	r9, r5
 80032c0:	46b2      	mov	sl, r6
 80032c2:	46bb      	mov	fp, r7
 80032c4:	f380 8809 	msr	PSP, r0
 80032c8:	3820      	subs	r0, #32
 80032ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80032cc:	4718      	bx	r3
 80032ce:	46c0      	nop			; (mov r8, r8)

080032d0 <pxCurrentTCBConst>:
 80032d0:	200003b0 	.word	0x200003b0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80032d4:	46c0      	nop			; (mov r8, r8)
 80032d6:	46c0      	nop			; (mov r8, r8)

080032d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80032de:	f7ff ffc9 	bl	8003274 <ulSetInterruptMaskFromISR>
 80032e2:	0003      	movs	r3, r0
 80032e4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80032e6:	f7ff fd11 	bl	8002d0c <xTaskIncrementTick>
 80032ea:	1e03      	subs	r3, r0, #0
 80032ec:	d003      	beq.n	80032f6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <xPortSysTickHandler+0x30>)
 80032f0:	2280      	movs	r2, #128	; 0x80
 80032f2:	0552      	lsls	r2, r2, #21
 80032f4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	0018      	movs	r0, r3
 80032fa:	f7ff ffc1 	bl	8003280 <vClearInterruptMaskFromISR>
}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	46bd      	mov	sp, r7
 8003302:	b002      	add	sp, #8
 8003304:	bd80      	pop	{r7, pc}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	e000ed04 	.word	0xe000ed04

0800330c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <prvSetupTimerInterrupt+0x34>)
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8003316:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <prvSetupTimerInterrupt+0x38>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800331c:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <prvSetupTimerInterrupt+0x3c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	22fa      	movs	r2, #250	; 0xfa
 8003322:	0091      	lsls	r1, r2, #2
 8003324:	0018      	movs	r0, r3
 8003326:	f7fc fef9 	bl	800011c <__udivsi3>
 800332a:	0003      	movs	r3, r0
 800332c:	001a      	movs	r2, r3
 800332e:	4b07      	ldr	r3, [pc, #28]	; (800334c <prvSetupTimerInterrupt+0x40>)
 8003330:	3a01      	subs	r2, #1
 8003332:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003334:	4b02      	ldr	r3, [pc, #8]	; (8003340 <prvSetupTimerInterrupt+0x34>)
 8003336:	2207      	movs	r2, #7
 8003338:	601a      	str	r2, [r3, #0]
}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	e000e010 	.word	0xe000e010
 8003344:	e000e018 	.word	0xe000e018
 8003348:	20000000 	.word	0x20000000
 800334c:	e000e014 	.word	0xe000e014

08003350 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800335c:	f7ff fc3e 	bl	8002bdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003360:	4b49      	ldr	r3, [pc, #292]	; (8003488 <pvPortMalloc+0x138>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003368:	f000 f8e0 	bl	800352c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800336c:	4b47      	ldr	r3, [pc, #284]	; (800348c <pvPortMalloc+0x13c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	4013      	ands	r3, r2
 8003374:	d000      	beq.n	8003378 <pvPortMalloc+0x28>
 8003376:	e079      	b.n	800346c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d012      	beq.n	80033a4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800337e:	2208      	movs	r2, #8
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	189b      	adds	r3, r3, r2
 8003384:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2207      	movs	r2, #7
 800338a:	4013      	ands	r3, r2
 800338c:	d00a      	beq.n	80033a4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2207      	movs	r2, #7
 8003392:	4393      	bics	r3, r2
 8003394:	3308      	adds	r3, #8
 8003396:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2207      	movs	r2, #7
 800339c:	4013      	ands	r3, r2
 800339e:	d001      	beq.n	80033a4 <pvPortMalloc+0x54>
 80033a0:	b672      	cpsid	i
 80033a2:	e7fe      	b.n	80033a2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d060      	beq.n	800346c <pvPortMalloc+0x11c>
 80033aa:	4b39      	ldr	r3, [pc, #228]	; (8003490 <pvPortMalloc+0x140>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d85b      	bhi.n	800346c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80033b4:	4b37      	ldr	r3, [pc, #220]	; (8003494 <pvPortMalloc+0x144>)
 80033b6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80033b8:	4b36      	ldr	r3, [pc, #216]	; (8003494 <pvPortMalloc+0x144>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033be:	e004      	b.n	80033ca <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d903      	bls.n	80033dc <pvPortMalloc+0x8c>
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f1      	bne.n	80033c0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80033dc:	4b2a      	ldr	r3, [pc, #168]	; (8003488 <pvPortMalloc+0x138>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d042      	beq.n	800346c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2208      	movs	r2, #8
 80033ec:	189b      	adds	r3, r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	1ad2      	subs	r2, r2, r3
 8003400:	2308      	movs	r3, #8
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	429a      	cmp	r2, r3
 8003406:	d916      	bls.n	8003436 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	18d3      	adds	r3, r2, r3
 800340e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2207      	movs	r2, #7
 8003414:	4013      	ands	r3, r2
 8003416:	d001      	beq.n	800341c <pvPortMalloc+0xcc>
 8003418:	b672      	cpsid	i
 800341a:	e7fe      	b.n	800341a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	1ad2      	subs	r2, r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	0018      	movs	r0, r3
 8003432:	f000 f8db 	bl	80035ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003436:	4b16      	ldr	r3, [pc, #88]	; (8003490 <pvPortMalloc+0x140>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	1ad2      	subs	r2, r2, r3
 8003440:	4b13      	ldr	r3, [pc, #76]	; (8003490 <pvPortMalloc+0x140>)
 8003442:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003444:	4b12      	ldr	r3, [pc, #72]	; (8003490 <pvPortMalloc+0x140>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4b13      	ldr	r3, [pc, #76]	; (8003498 <pvPortMalloc+0x148>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d203      	bcs.n	8003458 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003450:	4b0f      	ldr	r3, [pc, #60]	; (8003490 <pvPortMalloc+0x140>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4b10      	ldr	r3, [pc, #64]	; (8003498 <pvPortMalloc+0x148>)
 8003456:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <pvPortMalloc+0x13c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	431a      	orrs	r2, r3
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800346c:	f7ff fbc2 	bl	8002bf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2207      	movs	r2, #7
 8003474:	4013      	ands	r3, r2
 8003476:	d001      	beq.n	800347c <pvPortMalloc+0x12c>
 8003478:	b672      	cpsid	i
 800347a:	e7fe      	b.n	800347a <pvPortMalloc+0x12a>
	return pvReturn;
 800347c:	68fb      	ldr	r3, [r7, #12]
}
 800347e:	0018      	movs	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	b006      	add	sp, #24
 8003484:	bd80      	pop	{r7, pc}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	200010e4 	.word	0x200010e4
 800348c:	200010f0 	.word	0x200010f0
 8003490:	200010e8 	.word	0x200010e8
 8003494:	200010dc 	.word	0x200010dc
 8003498:	200010ec 	.word	0x200010ec

0800349c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d035      	beq.n	800351a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80034ae:	2308      	movs	r3, #8
 80034b0:	425b      	negs	r3, r3
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	18d3      	adds	r3, r2, r3
 80034b6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	4b18      	ldr	r3, [pc, #96]	; (8003524 <vPortFree+0x88>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4013      	ands	r3, r2
 80034c6:	d101      	bne.n	80034cc <vPortFree+0x30>
 80034c8:	b672      	cpsid	i
 80034ca:	e7fe      	b.n	80034ca <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <vPortFree+0x3c>
 80034d4:	b672      	cpsid	i
 80034d6:	e7fe      	b.n	80034d6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <vPortFree+0x88>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4013      	ands	r3, r2
 80034e2:	d01a      	beq.n	800351a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d116      	bne.n	800351a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <vPortFree+0x88>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	43db      	mvns	r3, r3
 80034f6:	401a      	ands	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80034fc:	f7ff fb6e 	bl	8002bdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	4b08      	ldr	r3, [pc, #32]	; (8003528 <vPortFree+0x8c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	18d2      	adds	r2, r2, r3
 800350a:	4b07      	ldr	r3, [pc, #28]	; (8003528 <vPortFree+0x8c>)
 800350c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	0018      	movs	r0, r3
 8003512:	f000 f86b 	bl	80035ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003516:	f7ff fb6d 	bl	8002bf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	46bd      	mov	sp, r7
 800351e:	b004      	add	sp, #16
 8003520:	bd80      	pop	{r7, pc}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	200010f0 	.word	0x200010f0
 8003528:	200010e8 	.word	0x200010e8

0800352c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003532:	23c0      	movs	r3, #192	; 0xc0
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003538:	4b26      	ldr	r3, [pc, #152]	; (80035d4 <prvHeapInit+0xa8>)
 800353a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2207      	movs	r2, #7
 8003540:	4013      	ands	r3, r2
 8003542:	d00c      	beq.n	800355e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	3307      	adds	r3, #7
 8003548:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2207      	movs	r2, #7
 800354e:	4393      	bics	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	1ad2      	subs	r2, r2, r3
 8003558:	4b1e      	ldr	r3, [pc, #120]	; (80035d4 <prvHeapInit+0xa8>)
 800355a:	18d3      	adds	r3, r2, r3
 800355c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003562:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <prvHeapInit+0xac>)
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003568:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <prvHeapInit+0xac>)
 800356a:	2200      	movs	r2, #0
 800356c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	18d3      	adds	r3, r2, r3
 8003574:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003576:	2208      	movs	r2, #8
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2207      	movs	r2, #7
 8003582:	4393      	bics	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4b14      	ldr	r3, [pc, #80]	; (80035dc <prvHeapInit+0xb0>)
 800358a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800358c:	4b13      	ldr	r3, [pc, #76]	; (80035dc <prvHeapInit+0xb0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2200      	movs	r2, #0
 8003592:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003594:	4b11      	ldr	r3, [pc, #68]	; (80035dc <prvHeapInit+0xb0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	1ad2      	subs	r2, r2, r3
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80035aa:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <prvHeapInit+0xb0>)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <prvHeapInit+0xb4>)
 80035b8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <prvHeapInit+0xb8>)
 80035c0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80035c2:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <prvHeapInit+0xbc>)
 80035c4:	2280      	movs	r2, #128	; 0x80
 80035c6:	0612      	lsls	r2, r2, #24
 80035c8:	601a      	str	r2, [r3, #0]
}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b004      	add	sp, #16
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	200004dc 	.word	0x200004dc
 80035d8:	200010dc 	.word	0x200010dc
 80035dc:	200010e4 	.word	0x200010e4
 80035e0:	200010ec 	.word	0x200010ec
 80035e4:	200010e8 	.word	0x200010e8
 80035e8:	200010f0 	.word	0x200010f0

080035ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80035f4:	4b27      	ldr	r3, [pc, #156]	; (8003694 <prvInsertBlockIntoFreeList+0xa8>)
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	e002      	b.n	8003600 <prvInsertBlockIntoFreeList+0x14>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	429a      	cmp	r2, r3
 8003608:	d8f7      	bhi.n	80035fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	18d3      	adds	r3, r2, r3
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	429a      	cmp	r2, r3
 800361a:	d108      	bne.n	800362e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	18d2      	adds	r2, r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	18d2      	adds	r2, r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d118      	bne.n	8003674 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	4b14      	ldr	r3, [pc, #80]	; (8003698 <prvInsertBlockIntoFreeList+0xac>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d00d      	beq.n	800366a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	18d2      	adds	r2, r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	e008      	b.n	800367c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800366a:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <prvInsertBlockIntoFreeList+0xac>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	e003      	b.n	800367c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	429a      	cmp	r2, r3
 8003682:	d002      	beq.n	800368a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	46bd      	mov	sp, r7
 800368e:	b004      	add	sp, #16
 8003690:	bd80      	pop	{r7, pc}
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	200010dc 	.word	0x200010dc
 8003698:	200010e4 	.word	0x200010e4

0800369c <__errno>:
 800369c:	4b01      	ldr	r3, [pc, #4]	; (80036a4 <__errno+0x8>)
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	4770      	bx	lr
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	20000010 	.word	0x20000010

080036a8 <__libc_init_array>:
 80036a8:	b570      	push	{r4, r5, r6, lr}
 80036aa:	2600      	movs	r6, #0
 80036ac:	4d0c      	ldr	r5, [pc, #48]	; (80036e0 <__libc_init_array+0x38>)
 80036ae:	4c0d      	ldr	r4, [pc, #52]	; (80036e4 <__libc_init_array+0x3c>)
 80036b0:	1b64      	subs	r4, r4, r5
 80036b2:	10a4      	asrs	r4, r4, #2
 80036b4:	42a6      	cmp	r6, r4
 80036b6:	d109      	bne.n	80036cc <__libc_init_array+0x24>
 80036b8:	2600      	movs	r6, #0
 80036ba:	f000 fc8b 	bl	8003fd4 <_init>
 80036be:	4d0a      	ldr	r5, [pc, #40]	; (80036e8 <__libc_init_array+0x40>)
 80036c0:	4c0a      	ldr	r4, [pc, #40]	; (80036ec <__libc_init_array+0x44>)
 80036c2:	1b64      	subs	r4, r4, r5
 80036c4:	10a4      	asrs	r4, r4, #2
 80036c6:	42a6      	cmp	r6, r4
 80036c8:	d105      	bne.n	80036d6 <__libc_init_array+0x2e>
 80036ca:	bd70      	pop	{r4, r5, r6, pc}
 80036cc:	00b3      	lsls	r3, r6, #2
 80036ce:	58eb      	ldr	r3, [r5, r3]
 80036d0:	4798      	blx	r3
 80036d2:	3601      	adds	r6, #1
 80036d4:	e7ee      	b.n	80036b4 <__libc_init_array+0xc>
 80036d6:	00b3      	lsls	r3, r6, #2
 80036d8:	58eb      	ldr	r3, [r5, r3]
 80036da:	4798      	blx	r3
 80036dc:	3601      	adds	r6, #1
 80036de:	e7f2      	b.n	80036c6 <__libc_init_array+0x1e>
 80036e0:	08004108 	.word	0x08004108
 80036e4:	08004108 	.word	0x08004108
 80036e8:	08004108 	.word	0x08004108
 80036ec:	0800410c 	.word	0x0800410c

080036f0 <memcpy>:
 80036f0:	2300      	movs	r3, #0
 80036f2:	b510      	push	{r4, lr}
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d100      	bne.n	80036fa <memcpy+0xa>
 80036f8:	bd10      	pop	{r4, pc}
 80036fa:	5ccc      	ldrb	r4, [r1, r3]
 80036fc:	54c4      	strb	r4, [r0, r3]
 80036fe:	3301      	adds	r3, #1
 8003700:	e7f8      	b.n	80036f4 <memcpy+0x4>

08003702 <memset>:
 8003702:	0003      	movs	r3, r0
 8003704:	1882      	adds	r2, r0, r2
 8003706:	4293      	cmp	r3, r2
 8003708:	d100      	bne.n	800370c <memset+0xa>
 800370a:	4770      	bx	lr
 800370c:	7019      	strb	r1, [r3, #0]
 800370e:	3301      	adds	r3, #1
 8003710:	e7f9      	b.n	8003706 <memset+0x4>
	...

08003714 <siprintf>:
 8003714:	b40e      	push	{r1, r2, r3}
 8003716:	b500      	push	{lr}
 8003718:	490b      	ldr	r1, [pc, #44]	; (8003748 <siprintf+0x34>)
 800371a:	b09c      	sub	sp, #112	; 0x70
 800371c:	ab1d      	add	r3, sp, #116	; 0x74
 800371e:	9002      	str	r0, [sp, #8]
 8003720:	9006      	str	r0, [sp, #24]
 8003722:	9107      	str	r1, [sp, #28]
 8003724:	9104      	str	r1, [sp, #16]
 8003726:	4809      	ldr	r0, [pc, #36]	; (800374c <siprintf+0x38>)
 8003728:	4909      	ldr	r1, [pc, #36]	; (8003750 <siprintf+0x3c>)
 800372a:	cb04      	ldmia	r3!, {r2}
 800372c:	9105      	str	r1, [sp, #20]
 800372e:	6800      	ldr	r0, [r0, #0]
 8003730:	a902      	add	r1, sp, #8
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	f000 f870 	bl	8003818 <_svfiprintf_r>
 8003738:	2300      	movs	r3, #0
 800373a:	9a02      	ldr	r2, [sp, #8]
 800373c:	7013      	strb	r3, [r2, #0]
 800373e:	b01c      	add	sp, #112	; 0x70
 8003740:	bc08      	pop	{r3}
 8003742:	b003      	add	sp, #12
 8003744:	4718      	bx	r3
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	7fffffff 	.word	0x7fffffff
 800374c:	20000010 	.word	0x20000010
 8003750:	ffff0208 	.word	0xffff0208

08003754 <__ssputs_r>:
 8003754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003756:	688e      	ldr	r6, [r1, #8]
 8003758:	b085      	sub	sp, #20
 800375a:	0007      	movs	r7, r0
 800375c:	000c      	movs	r4, r1
 800375e:	9203      	str	r2, [sp, #12]
 8003760:	9301      	str	r3, [sp, #4]
 8003762:	429e      	cmp	r6, r3
 8003764:	d83c      	bhi.n	80037e0 <__ssputs_r+0x8c>
 8003766:	2390      	movs	r3, #144	; 0x90
 8003768:	898a      	ldrh	r2, [r1, #12]
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	421a      	tst	r2, r3
 800376e:	d034      	beq.n	80037da <__ssputs_r+0x86>
 8003770:	6909      	ldr	r1, [r1, #16]
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	6960      	ldr	r0, [r4, #20]
 8003776:	1a5b      	subs	r3, r3, r1
 8003778:	9302      	str	r3, [sp, #8]
 800377a:	2303      	movs	r3, #3
 800377c:	4343      	muls	r3, r0
 800377e:	0fdd      	lsrs	r5, r3, #31
 8003780:	18ed      	adds	r5, r5, r3
 8003782:	9b01      	ldr	r3, [sp, #4]
 8003784:	9802      	ldr	r0, [sp, #8]
 8003786:	3301      	adds	r3, #1
 8003788:	181b      	adds	r3, r3, r0
 800378a:	106d      	asrs	r5, r5, #1
 800378c:	42ab      	cmp	r3, r5
 800378e:	d900      	bls.n	8003792 <__ssputs_r+0x3e>
 8003790:	001d      	movs	r5, r3
 8003792:	0553      	lsls	r3, r2, #21
 8003794:	d532      	bpl.n	80037fc <__ssputs_r+0xa8>
 8003796:	0029      	movs	r1, r5
 8003798:	0038      	movs	r0, r7
 800379a:	f000 fb49 	bl	8003e30 <_malloc_r>
 800379e:	1e06      	subs	r6, r0, #0
 80037a0:	d109      	bne.n	80037b6 <__ssputs_r+0x62>
 80037a2:	230c      	movs	r3, #12
 80037a4:	603b      	str	r3, [r7, #0]
 80037a6:	2340      	movs	r3, #64	; 0x40
 80037a8:	2001      	movs	r0, #1
 80037aa:	89a2      	ldrh	r2, [r4, #12]
 80037ac:	4240      	negs	r0, r0
 80037ae:	4313      	orrs	r3, r2
 80037b0:	81a3      	strh	r3, [r4, #12]
 80037b2:	b005      	add	sp, #20
 80037b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037b6:	9a02      	ldr	r2, [sp, #8]
 80037b8:	6921      	ldr	r1, [r4, #16]
 80037ba:	f7ff ff99 	bl	80036f0 <memcpy>
 80037be:	89a3      	ldrh	r3, [r4, #12]
 80037c0:	4a14      	ldr	r2, [pc, #80]	; (8003814 <__ssputs_r+0xc0>)
 80037c2:	401a      	ands	r2, r3
 80037c4:	2380      	movs	r3, #128	; 0x80
 80037c6:	4313      	orrs	r3, r2
 80037c8:	81a3      	strh	r3, [r4, #12]
 80037ca:	9b02      	ldr	r3, [sp, #8]
 80037cc:	6126      	str	r6, [r4, #16]
 80037ce:	18f6      	adds	r6, r6, r3
 80037d0:	6026      	str	r6, [r4, #0]
 80037d2:	6165      	str	r5, [r4, #20]
 80037d4:	9e01      	ldr	r6, [sp, #4]
 80037d6:	1aed      	subs	r5, r5, r3
 80037d8:	60a5      	str	r5, [r4, #8]
 80037da:	9b01      	ldr	r3, [sp, #4]
 80037dc:	429e      	cmp	r6, r3
 80037de:	d900      	bls.n	80037e2 <__ssputs_r+0x8e>
 80037e0:	9e01      	ldr	r6, [sp, #4]
 80037e2:	0032      	movs	r2, r6
 80037e4:	9903      	ldr	r1, [sp, #12]
 80037e6:	6820      	ldr	r0, [r4, #0]
 80037e8:	f000 faa3 	bl	8003d32 <memmove>
 80037ec:	68a3      	ldr	r3, [r4, #8]
 80037ee:	2000      	movs	r0, #0
 80037f0:	1b9b      	subs	r3, r3, r6
 80037f2:	60a3      	str	r3, [r4, #8]
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	199e      	adds	r6, r3, r6
 80037f8:	6026      	str	r6, [r4, #0]
 80037fa:	e7da      	b.n	80037b2 <__ssputs_r+0x5e>
 80037fc:	002a      	movs	r2, r5
 80037fe:	0038      	movs	r0, r7
 8003800:	f000 fb8c 	bl	8003f1c <_realloc_r>
 8003804:	1e06      	subs	r6, r0, #0
 8003806:	d1e0      	bne.n	80037ca <__ssputs_r+0x76>
 8003808:	0038      	movs	r0, r7
 800380a:	6921      	ldr	r1, [r4, #16]
 800380c:	f000 faa4 	bl	8003d58 <_free_r>
 8003810:	e7c7      	b.n	80037a2 <__ssputs_r+0x4e>
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	fffffb7f 	.word	0xfffffb7f

08003818 <_svfiprintf_r>:
 8003818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800381a:	b0a1      	sub	sp, #132	; 0x84
 800381c:	9003      	str	r0, [sp, #12]
 800381e:	001d      	movs	r5, r3
 8003820:	898b      	ldrh	r3, [r1, #12]
 8003822:	000f      	movs	r7, r1
 8003824:	0016      	movs	r6, r2
 8003826:	061b      	lsls	r3, r3, #24
 8003828:	d511      	bpl.n	800384e <_svfiprintf_r+0x36>
 800382a:	690b      	ldr	r3, [r1, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10e      	bne.n	800384e <_svfiprintf_r+0x36>
 8003830:	2140      	movs	r1, #64	; 0x40
 8003832:	f000 fafd 	bl	8003e30 <_malloc_r>
 8003836:	6038      	str	r0, [r7, #0]
 8003838:	6138      	str	r0, [r7, #16]
 800383a:	2800      	cmp	r0, #0
 800383c:	d105      	bne.n	800384a <_svfiprintf_r+0x32>
 800383e:	230c      	movs	r3, #12
 8003840:	9a03      	ldr	r2, [sp, #12]
 8003842:	3801      	subs	r0, #1
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	b021      	add	sp, #132	; 0x84
 8003848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800384a:	2340      	movs	r3, #64	; 0x40
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	2300      	movs	r3, #0
 8003850:	ac08      	add	r4, sp, #32
 8003852:	6163      	str	r3, [r4, #20]
 8003854:	3320      	adds	r3, #32
 8003856:	7663      	strb	r3, [r4, #25]
 8003858:	3310      	adds	r3, #16
 800385a:	76a3      	strb	r3, [r4, #26]
 800385c:	9507      	str	r5, [sp, #28]
 800385e:	0035      	movs	r5, r6
 8003860:	782b      	ldrb	r3, [r5, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <_svfiprintf_r+0x52>
 8003866:	2b25      	cmp	r3, #37	; 0x25
 8003868:	d147      	bne.n	80038fa <_svfiprintf_r+0xe2>
 800386a:	1bab      	subs	r3, r5, r6
 800386c:	9305      	str	r3, [sp, #20]
 800386e:	42b5      	cmp	r5, r6
 8003870:	d00c      	beq.n	800388c <_svfiprintf_r+0x74>
 8003872:	0032      	movs	r2, r6
 8003874:	0039      	movs	r1, r7
 8003876:	9803      	ldr	r0, [sp, #12]
 8003878:	f7ff ff6c 	bl	8003754 <__ssputs_r>
 800387c:	1c43      	adds	r3, r0, #1
 800387e:	d100      	bne.n	8003882 <_svfiprintf_r+0x6a>
 8003880:	e0ae      	b.n	80039e0 <_svfiprintf_r+0x1c8>
 8003882:	6962      	ldr	r2, [r4, #20]
 8003884:	9b05      	ldr	r3, [sp, #20]
 8003886:	4694      	mov	ip, r2
 8003888:	4463      	add	r3, ip
 800388a:	6163      	str	r3, [r4, #20]
 800388c:	782b      	ldrb	r3, [r5, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d100      	bne.n	8003894 <_svfiprintf_r+0x7c>
 8003892:	e0a5      	b.n	80039e0 <_svfiprintf_r+0x1c8>
 8003894:	2201      	movs	r2, #1
 8003896:	2300      	movs	r3, #0
 8003898:	4252      	negs	r2, r2
 800389a:	6062      	str	r2, [r4, #4]
 800389c:	a904      	add	r1, sp, #16
 800389e:	3254      	adds	r2, #84	; 0x54
 80038a0:	1852      	adds	r2, r2, r1
 80038a2:	1c6e      	adds	r6, r5, #1
 80038a4:	6023      	str	r3, [r4, #0]
 80038a6:	60e3      	str	r3, [r4, #12]
 80038a8:	60a3      	str	r3, [r4, #8]
 80038aa:	7013      	strb	r3, [r2, #0]
 80038ac:	65a3      	str	r3, [r4, #88]	; 0x58
 80038ae:	2205      	movs	r2, #5
 80038b0:	7831      	ldrb	r1, [r6, #0]
 80038b2:	4854      	ldr	r0, [pc, #336]	; (8003a04 <_svfiprintf_r+0x1ec>)
 80038b4:	f000 fa32 	bl	8003d1c <memchr>
 80038b8:	1c75      	adds	r5, r6, #1
 80038ba:	2800      	cmp	r0, #0
 80038bc:	d11f      	bne.n	80038fe <_svfiprintf_r+0xe6>
 80038be:	6822      	ldr	r2, [r4, #0]
 80038c0:	06d3      	lsls	r3, r2, #27
 80038c2:	d504      	bpl.n	80038ce <_svfiprintf_r+0xb6>
 80038c4:	2353      	movs	r3, #83	; 0x53
 80038c6:	a904      	add	r1, sp, #16
 80038c8:	185b      	adds	r3, r3, r1
 80038ca:	2120      	movs	r1, #32
 80038cc:	7019      	strb	r1, [r3, #0]
 80038ce:	0713      	lsls	r3, r2, #28
 80038d0:	d504      	bpl.n	80038dc <_svfiprintf_r+0xc4>
 80038d2:	2353      	movs	r3, #83	; 0x53
 80038d4:	a904      	add	r1, sp, #16
 80038d6:	185b      	adds	r3, r3, r1
 80038d8:	212b      	movs	r1, #43	; 0x2b
 80038da:	7019      	strb	r1, [r3, #0]
 80038dc:	7833      	ldrb	r3, [r6, #0]
 80038de:	2b2a      	cmp	r3, #42	; 0x2a
 80038e0:	d016      	beq.n	8003910 <_svfiprintf_r+0xf8>
 80038e2:	0035      	movs	r5, r6
 80038e4:	2100      	movs	r1, #0
 80038e6:	200a      	movs	r0, #10
 80038e8:	68e3      	ldr	r3, [r4, #12]
 80038ea:	782a      	ldrb	r2, [r5, #0]
 80038ec:	1c6e      	adds	r6, r5, #1
 80038ee:	3a30      	subs	r2, #48	; 0x30
 80038f0:	2a09      	cmp	r2, #9
 80038f2:	d94e      	bls.n	8003992 <_svfiprintf_r+0x17a>
 80038f4:	2900      	cmp	r1, #0
 80038f6:	d111      	bne.n	800391c <_svfiprintf_r+0x104>
 80038f8:	e017      	b.n	800392a <_svfiprintf_r+0x112>
 80038fa:	3501      	adds	r5, #1
 80038fc:	e7b0      	b.n	8003860 <_svfiprintf_r+0x48>
 80038fe:	4b41      	ldr	r3, [pc, #260]	; (8003a04 <_svfiprintf_r+0x1ec>)
 8003900:	6822      	ldr	r2, [r4, #0]
 8003902:	1ac0      	subs	r0, r0, r3
 8003904:	2301      	movs	r3, #1
 8003906:	4083      	lsls	r3, r0
 8003908:	4313      	orrs	r3, r2
 800390a:	002e      	movs	r6, r5
 800390c:	6023      	str	r3, [r4, #0]
 800390e:	e7ce      	b.n	80038ae <_svfiprintf_r+0x96>
 8003910:	9b07      	ldr	r3, [sp, #28]
 8003912:	1d19      	adds	r1, r3, #4
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	9107      	str	r1, [sp, #28]
 8003918:	2b00      	cmp	r3, #0
 800391a:	db01      	blt.n	8003920 <_svfiprintf_r+0x108>
 800391c:	930b      	str	r3, [sp, #44]	; 0x2c
 800391e:	e004      	b.n	800392a <_svfiprintf_r+0x112>
 8003920:	425b      	negs	r3, r3
 8003922:	60e3      	str	r3, [r4, #12]
 8003924:	2302      	movs	r3, #2
 8003926:	4313      	orrs	r3, r2
 8003928:	6023      	str	r3, [r4, #0]
 800392a:	782b      	ldrb	r3, [r5, #0]
 800392c:	2b2e      	cmp	r3, #46	; 0x2e
 800392e:	d10a      	bne.n	8003946 <_svfiprintf_r+0x12e>
 8003930:	786b      	ldrb	r3, [r5, #1]
 8003932:	2b2a      	cmp	r3, #42	; 0x2a
 8003934:	d135      	bne.n	80039a2 <_svfiprintf_r+0x18a>
 8003936:	9b07      	ldr	r3, [sp, #28]
 8003938:	3502      	adds	r5, #2
 800393a:	1d1a      	adds	r2, r3, #4
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	9207      	str	r2, [sp, #28]
 8003940:	2b00      	cmp	r3, #0
 8003942:	db2b      	blt.n	800399c <_svfiprintf_r+0x184>
 8003944:	9309      	str	r3, [sp, #36]	; 0x24
 8003946:	4e30      	ldr	r6, [pc, #192]	; (8003a08 <_svfiprintf_r+0x1f0>)
 8003948:	2203      	movs	r2, #3
 800394a:	0030      	movs	r0, r6
 800394c:	7829      	ldrb	r1, [r5, #0]
 800394e:	f000 f9e5 	bl	8003d1c <memchr>
 8003952:	2800      	cmp	r0, #0
 8003954:	d006      	beq.n	8003964 <_svfiprintf_r+0x14c>
 8003956:	2340      	movs	r3, #64	; 0x40
 8003958:	1b80      	subs	r0, r0, r6
 800395a:	4083      	lsls	r3, r0
 800395c:	6822      	ldr	r2, [r4, #0]
 800395e:	3501      	adds	r5, #1
 8003960:	4313      	orrs	r3, r2
 8003962:	6023      	str	r3, [r4, #0]
 8003964:	7829      	ldrb	r1, [r5, #0]
 8003966:	2206      	movs	r2, #6
 8003968:	4828      	ldr	r0, [pc, #160]	; (8003a0c <_svfiprintf_r+0x1f4>)
 800396a:	1c6e      	adds	r6, r5, #1
 800396c:	7621      	strb	r1, [r4, #24]
 800396e:	f000 f9d5 	bl	8003d1c <memchr>
 8003972:	2800      	cmp	r0, #0
 8003974:	d03c      	beq.n	80039f0 <_svfiprintf_r+0x1d8>
 8003976:	4b26      	ldr	r3, [pc, #152]	; (8003a10 <_svfiprintf_r+0x1f8>)
 8003978:	2b00      	cmp	r3, #0
 800397a:	d125      	bne.n	80039c8 <_svfiprintf_r+0x1b0>
 800397c:	2207      	movs	r2, #7
 800397e:	9b07      	ldr	r3, [sp, #28]
 8003980:	3307      	adds	r3, #7
 8003982:	4393      	bics	r3, r2
 8003984:	3308      	adds	r3, #8
 8003986:	9307      	str	r3, [sp, #28]
 8003988:	6963      	ldr	r3, [r4, #20]
 800398a:	9a04      	ldr	r2, [sp, #16]
 800398c:	189b      	adds	r3, r3, r2
 800398e:	6163      	str	r3, [r4, #20]
 8003990:	e765      	b.n	800385e <_svfiprintf_r+0x46>
 8003992:	4343      	muls	r3, r0
 8003994:	0035      	movs	r5, r6
 8003996:	2101      	movs	r1, #1
 8003998:	189b      	adds	r3, r3, r2
 800399a:	e7a6      	b.n	80038ea <_svfiprintf_r+0xd2>
 800399c:	2301      	movs	r3, #1
 800399e:	425b      	negs	r3, r3
 80039a0:	e7d0      	b.n	8003944 <_svfiprintf_r+0x12c>
 80039a2:	2300      	movs	r3, #0
 80039a4:	200a      	movs	r0, #10
 80039a6:	001a      	movs	r2, r3
 80039a8:	3501      	adds	r5, #1
 80039aa:	6063      	str	r3, [r4, #4]
 80039ac:	7829      	ldrb	r1, [r5, #0]
 80039ae:	1c6e      	adds	r6, r5, #1
 80039b0:	3930      	subs	r1, #48	; 0x30
 80039b2:	2909      	cmp	r1, #9
 80039b4:	d903      	bls.n	80039be <_svfiprintf_r+0x1a6>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0c5      	beq.n	8003946 <_svfiprintf_r+0x12e>
 80039ba:	9209      	str	r2, [sp, #36]	; 0x24
 80039bc:	e7c3      	b.n	8003946 <_svfiprintf_r+0x12e>
 80039be:	4342      	muls	r2, r0
 80039c0:	0035      	movs	r5, r6
 80039c2:	2301      	movs	r3, #1
 80039c4:	1852      	adds	r2, r2, r1
 80039c6:	e7f1      	b.n	80039ac <_svfiprintf_r+0x194>
 80039c8:	ab07      	add	r3, sp, #28
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	003a      	movs	r2, r7
 80039ce:	0021      	movs	r1, r4
 80039d0:	4b10      	ldr	r3, [pc, #64]	; (8003a14 <_svfiprintf_r+0x1fc>)
 80039d2:	9803      	ldr	r0, [sp, #12]
 80039d4:	e000      	b.n	80039d8 <_svfiprintf_r+0x1c0>
 80039d6:	bf00      	nop
 80039d8:	9004      	str	r0, [sp, #16]
 80039da:	9b04      	ldr	r3, [sp, #16]
 80039dc:	3301      	adds	r3, #1
 80039de:	d1d3      	bne.n	8003988 <_svfiprintf_r+0x170>
 80039e0:	89bb      	ldrh	r3, [r7, #12]
 80039e2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80039e4:	065b      	lsls	r3, r3, #25
 80039e6:	d400      	bmi.n	80039ea <_svfiprintf_r+0x1d2>
 80039e8:	e72d      	b.n	8003846 <_svfiprintf_r+0x2e>
 80039ea:	2001      	movs	r0, #1
 80039ec:	4240      	negs	r0, r0
 80039ee:	e72a      	b.n	8003846 <_svfiprintf_r+0x2e>
 80039f0:	ab07      	add	r3, sp, #28
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	003a      	movs	r2, r7
 80039f6:	0021      	movs	r1, r4
 80039f8:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <_svfiprintf_r+0x1fc>)
 80039fa:	9803      	ldr	r0, [sp, #12]
 80039fc:	f000 f87c 	bl	8003af8 <_printf_i>
 8003a00:	e7ea      	b.n	80039d8 <_svfiprintf_r+0x1c0>
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	080040d4 	.word	0x080040d4
 8003a08:	080040da 	.word	0x080040da
 8003a0c:	080040de 	.word	0x080040de
 8003a10:	00000000 	.word	0x00000000
 8003a14:	08003755 	.word	0x08003755

08003a18 <_printf_common>:
 8003a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a1a:	0015      	movs	r5, r2
 8003a1c:	9301      	str	r3, [sp, #4]
 8003a1e:	688a      	ldr	r2, [r1, #8]
 8003a20:	690b      	ldr	r3, [r1, #16]
 8003a22:	000c      	movs	r4, r1
 8003a24:	9000      	str	r0, [sp, #0]
 8003a26:	4293      	cmp	r3, r2
 8003a28:	da00      	bge.n	8003a2c <_printf_common+0x14>
 8003a2a:	0013      	movs	r3, r2
 8003a2c:	0022      	movs	r2, r4
 8003a2e:	602b      	str	r3, [r5, #0]
 8003a30:	3243      	adds	r2, #67	; 0x43
 8003a32:	7812      	ldrb	r2, [r2, #0]
 8003a34:	2a00      	cmp	r2, #0
 8003a36:	d001      	beq.n	8003a3c <_printf_common+0x24>
 8003a38:	3301      	adds	r3, #1
 8003a3a:	602b      	str	r3, [r5, #0]
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	069b      	lsls	r3, r3, #26
 8003a40:	d502      	bpl.n	8003a48 <_printf_common+0x30>
 8003a42:	682b      	ldr	r3, [r5, #0]
 8003a44:	3302      	adds	r3, #2
 8003a46:	602b      	str	r3, [r5, #0]
 8003a48:	6822      	ldr	r2, [r4, #0]
 8003a4a:	2306      	movs	r3, #6
 8003a4c:	0017      	movs	r7, r2
 8003a4e:	401f      	ands	r7, r3
 8003a50:	421a      	tst	r2, r3
 8003a52:	d027      	beq.n	8003aa4 <_printf_common+0x8c>
 8003a54:	0023      	movs	r3, r4
 8003a56:	3343      	adds	r3, #67	; 0x43
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	1e5a      	subs	r2, r3, #1
 8003a5c:	4193      	sbcs	r3, r2
 8003a5e:	6822      	ldr	r2, [r4, #0]
 8003a60:	0692      	lsls	r2, r2, #26
 8003a62:	d430      	bmi.n	8003ac6 <_printf_common+0xae>
 8003a64:	0022      	movs	r2, r4
 8003a66:	9901      	ldr	r1, [sp, #4]
 8003a68:	9800      	ldr	r0, [sp, #0]
 8003a6a:	9e08      	ldr	r6, [sp, #32]
 8003a6c:	3243      	adds	r2, #67	; 0x43
 8003a6e:	47b0      	blx	r6
 8003a70:	1c43      	adds	r3, r0, #1
 8003a72:	d025      	beq.n	8003ac0 <_printf_common+0xa8>
 8003a74:	2306      	movs	r3, #6
 8003a76:	6820      	ldr	r0, [r4, #0]
 8003a78:	682a      	ldr	r2, [r5, #0]
 8003a7a:	68e1      	ldr	r1, [r4, #12]
 8003a7c:	2500      	movs	r5, #0
 8003a7e:	4003      	ands	r3, r0
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d103      	bne.n	8003a8c <_printf_common+0x74>
 8003a84:	1a8d      	subs	r5, r1, r2
 8003a86:	43eb      	mvns	r3, r5
 8003a88:	17db      	asrs	r3, r3, #31
 8003a8a:	401d      	ands	r5, r3
 8003a8c:	68a3      	ldr	r3, [r4, #8]
 8003a8e:	6922      	ldr	r2, [r4, #16]
 8003a90:	4293      	cmp	r3, r2
 8003a92:	dd01      	ble.n	8003a98 <_printf_common+0x80>
 8003a94:	1a9b      	subs	r3, r3, r2
 8003a96:	18ed      	adds	r5, r5, r3
 8003a98:	2700      	movs	r7, #0
 8003a9a:	42bd      	cmp	r5, r7
 8003a9c:	d120      	bne.n	8003ae0 <_printf_common+0xc8>
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	e010      	b.n	8003ac4 <_printf_common+0xac>
 8003aa2:	3701      	adds	r7, #1
 8003aa4:	68e3      	ldr	r3, [r4, #12]
 8003aa6:	682a      	ldr	r2, [r5, #0]
 8003aa8:	1a9b      	subs	r3, r3, r2
 8003aaa:	42bb      	cmp	r3, r7
 8003aac:	ddd2      	ble.n	8003a54 <_printf_common+0x3c>
 8003aae:	0022      	movs	r2, r4
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	9901      	ldr	r1, [sp, #4]
 8003ab4:	9800      	ldr	r0, [sp, #0]
 8003ab6:	9e08      	ldr	r6, [sp, #32]
 8003ab8:	3219      	adds	r2, #25
 8003aba:	47b0      	blx	r6
 8003abc:	1c43      	adds	r3, r0, #1
 8003abe:	d1f0      	bne.n	8003aa2 <_printf_common+0x8a>
 8003ac0:	2001      	movs	r0, #1
 8003ac2:	4240      	negs	r0, r0
 8003ac4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ac6:	2030      	movs	r0, #48	; 0x30
 8003ac8:	18e1      	adds	r1, r4, r3
 8003aca:	3143      	adds	r1, #67	; 0x43
 8003acc:	7008      	strb	r0, [r1, #0]
 8003ace:	0021      	movs	r1, r4
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	3145      	adds	r1, #69	; 0x45
 8003ad4:	7809      	ldrb	r1, [r1, #0]
 8003ad6:	18a2      	adds	r2, r4, r2
 8003ad8:	3243      	adds	r2, #67	; 0x43
 8003ada:	3302      	adds	r3, #2
 8003adc:	7011      	strb	r1, [r2, #0]
 8003ade:	e7c1      	b.n	8003a64 <_printf_common+0x4c>
 8003ae0:	0022      	movs	r2, r4
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	9901      	ldr	r1, [sp, #4]
 8003ae6:	9800      	ldr	r0, [sp, #0]
 8003ae8:	9e08      	ldr	r6, [sp, #32]
 8003aea:	321a      	adds	r2, #26
 8003aec:	47b0      	blx	r6
 8003aee:	1c43      	adds	r3, r0, #1
 8003af0:	d0e6      	beq.n	8003ac0 <_printf_common+0xa8>
 8003af2:	3701      	adds	r7, #1
 8003af4:	e7d1      	b.n	8003a9a <_printf_common+0x82>
	...

08003af8 <_printf_i>:
 8003af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003afa:	b08b      	sub	sp, #44	; 0x2c
 8003afc:	9206      	str	r2, [sp, #24]
 8003afe:	000a      	movs	r2, r1
 8003b00:	3243      	adds	r2, #67	; 0x43
 8003b02:	9307      	str	r3, [sp, #28]
 8003b04:	9005      	str	r0, [sp, #20]
 8003b06:	9204      	str	r2, [sp, #16]
 8003b08:	7e0a      	ldrb	r2, [r1, #24]
 8003b0a:	000c      	movs	r4, r1
 8003b0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003b0e:	2a78      	cmp	r2, #120	; 0x78
 8003b10:	d807      	bhi.n	8003b22 <_printf_i+0x2a>
 8003b12:	2a62      	cmp	r2, #98	; 0x62
 8003b14:	d809      	bhi.n	8003b2a <_printf_i+0x32>
 8003b16:	2a00      	cmp	r2, #0
 8003b18:	d100      	bne.n	8003b1c <_printf_i+0x24>
 8003b1a:	e0c1      	b.n	8003ca0 <_printf_i+0x1a8>
 8003b1c:	2a58      	cmp	r2, #88	; 0x58
 8003b1e:	d100      	bne.n	8003b22 <_printf_i+0x2a>
 8003b20:	e08c      	b.n	8003c3c <_printf_i+0x144>
 8003b22:	0026      	movs	r6, r4
 8003b24:	3642      	adds	r6, #66	; 0x42
 8003b26:	7032      	strb	r2, [r6, #0]
 8003b28:	e022      	b.n	8003b70 <_printf_i+0x78>
 8003b2a:	0010      	movs	r0, r2
 8003b2c:	3863      	subs	r0, #99	; 0x63
 8003b2e:	2815      	cmp	r0, #21
 8003b30:	d8f7      	bhi.n	8003b22 <_printf_i+0x2a>
 8003b32:	f7fc fae9 	bl	8000108 <__gnu_thumb1_case_shi>
 8003b36:	0016      	.short	0x0016
 8003b38:	fff6001f 	.word	0xfff6001f
 8003b3c:	fff6fff6 	.word	0xfff6fff6
 8003b40:	001ffff6 	.word	0x001ffff6
 8003b44:	fff6fff6 	.word	0xfff6fff6
 8003b48:	fff6fff6 	.word	0xfff6fff6
 8003b4c:	003600a8 	.word	0x003600a8
 8003b50:	fff6009a 	.word	0xfff6009a
 8003b54:	00b9fff6 	.word	0x00b9fff6
 8003b58:	0036fff6 	.word	0x0036fff6
 8003b5c:	fff6fff6 	.word	0xfff6fff6
 8003b60:	009e      	.short	0x009e
 8003b62:	0026      	movs	r6, r4
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	3642      	adds	r6, #66	; 0x42
 8003b68:	1d11      	adds	r1, r2, #4
 8003b6a:	6019      	str	r1, [r3, #0]
 8003b6c:	6813      	ldr	r3, [r2, #0]
 8003b6e:	7033      	strb	r3, [r6, #0]
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0a7      	b.n	8003cc4 <_printf_i+0x1cc>
 8003b74:	6808      	ldr	r0, [r1, #0]
 8003b76:	6819      	ldr	r1, [r3, #0]
 8003b78:	1d0a      	adds	r2, r1, #4
 8003b7a:	0605      	lsls	r5, r0, #24
 8003b7c:	d50b      	bpl.n	8003b96 <_printf_i+0x9e>
 8003b7e:	680d      	ldr	r5, [r1, #0]
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	2d00      	cmp	r5, #0
 8003b84:	da03      	bge.n	8003b8e <_printf_i+0x96>
 8003b86:	232d      	movs	r3, #45	; 0x2d
 8003b88:	9a04      	ldr	r2, [sp, #16]
 8003b8a:	426d      	negs	r5, r5
 8003b8c:	7013      	strb	r3, [r2, #0]
 8003b8e:	4b61      	ldr	r3, [pc, #388]	; (8003d14 <_printf_i+0x21c>)
 8003b90:	270a      	movs	r7, #10
 8003b92:	9303      	str	r3, [sp, #12]
 8003b94:	e01b      	b.n	8003bce <_printf_i+0xd6>
 8003b96:	680d      	ldr	r5, [r1, #0]
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	0641      	lsls	r1, r0, #25
 8003b9c:	d5f1      	bpl.n	8003b82 <_printf_i+0x8a>
 8003b9e:	b22d      	sxth	r5, r5
 8003ba0:	e7ef      	b.n	8003b82 <_printf_i+0x8a>
 8003ba2:	680d      	ldr	r5, [r1, #0]
 8003ba4:	6819      	ldr	r1, [r3, #0]
 8003ba6:	1d08      	adds	r0, r1, #4
 8003ba8:	6018      	str	r0, [r3, #0]
 8003baa:	062e      	lsls	r6, r5, #24
 8003bac:	d501      	bpl.n	8003bb2 <_printf_i+0xba>
 8003bae:	680d      	ldr	r5, [r1, #0]
 8003bb0:	e003      	b.n	8003bba <_printf_i+0xc2>
 8003bb2:	066d      	lsls	r5, r5, #25
 8003bb4:	d5fb      	bpl.n	8003bae <_printf_i+0xb6>
 8003bb6:	680d      	ldr	r5, [r1, #0]
 8003bb8:	b2ad      	uxth	r5, r5
 8003bba:	4b56      	ldr	r3, [pc, #344]	; (8003d14 <_printf_i+0x21c>)
 8003bbc:	2708      	movs	r7, #8
 8003bbe:	9303      	str	r3, [sp, #12]
 8003bc0:	2a6f      	cmp	r2, #111	; 0x6f
 8003bc2:	d000      	beq.n	8003bc6 <_printf_i+0xce>
 8003bc4:	3702      	adds	r7, #2
 8003bc6:	0023      	movs	r3, r4
 8003bc8:	2200      	movs	r2, #0
 8003bca:	3343      	adds	r3, #67	; 0x43
 8003bcc:	701a      	strb	r2, [r3, #0]
 8003bce:	6863      	ldr	r3, [r4, #4]
 8003bd0:	60a3      	str	r3, [r4, #8]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	db03      	blt.n	8003bde <_printf_i+0xe6>
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	6821      	ldr	r1, [r4, #0]
 8003bda:	4391      	bics	r1, r2
 8003bdc:	6021      	str	r1, [r4, #0]
 8003bde:	2d00      	cmp	r5, #0
 8003be0:	d102      	bne.n	8003be8 <_printf_i+0xf0>
 8003be2:	9e04      	ldr	r6, [sp, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00c      	beq.n	8003c02 <_printf_i+0x10a>
 8003be8:	9e04      	ldr	r6, [sp, #16]
 8003bea:	0028      	movs	r0, r5
 8003bec:	0039      	movs	r1, r7
 8003bee:	f7fc fb1b 	bl	8000228 <__aeabi_uidivmod>
 8003bf2:	9b03      	ldr	r3, [sp, #12]
 8003bf4:	3e01      	subs	r6, #1
 8003bf6:	5c5b      	ldrb	r3, [r3, r1]
 8003bf8:	7033      	strb	r3, [r6, #0]
 8003bfa:	002b      	movs	r3, r5
 8003bfc:	0005      	movs	r5, r0
 8003bfe:	429f      	cmp	r7, r3
 8003c00:	d9f3      	bls.n	8003bea <_printf_i+0xf2>
 8003c02:	2f08      	cmp	r7, #8
 8003c04:	d109      	bne.n	8003c1a <_printf_i+0x122>
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	07db      	lsls	r3, r3, #31
 8003c0a:	d506      	bpl.n	8003c1a <_printf_i+0x122>
 8003c0c:	6863      	ldr	r3, [r4, #4]
 8003c0e:	6922      	ldr	r2, [r4, #16]
 8003c10:	4293      	cmp	r3, r2
 8003c12:	dc02      	bgt.n	8003c1a <_printf_i+0x122>
 8003c14:	2330      	movs	r3, #48	; 0x30
 8003c16:	3e01      	subs	r6, #1
 8003c18:	7033      	strb	r3, [r6, #0]
 8003c1a:	9b04      	ldr	r3, [sp, #16]
 8003c1c:	1b9b      	subs	r3, r3, r6
 8003c1e:	6123      	str	r3, [r4, #16]
 8003c20:	9b07      	ldr	r3, [sp, #28]
 8003c22:	0021      	movs	r1, r4
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	9805      	ldr	r0, [sp, #20]
 8003c28:	9b06      	ldr	r3, [sp, #24]
 8003c2a:	aa09      	add	r2, sp, #36	; 0x24
 8003c2c:	f7ff fef4 	bl	8003a18 <_printf_common>
 8003c30:	1c43      	adds	r3, r0, #1
 8003c32:	d14c      	bne.n	8003cce <_printf_i+0x1d6>
 8003c34:	2001      	movs	r0, #1
 8003c36:	4240      	negs	r0, r0
 8003c38:	b00b      	add	sp, #44	; 0x2c
 8003c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c3c:	3145      	adds	r1, #69	; 0x45
 8003c3e:	700a      	strb	r2, [r1, #0]
 8003c40:	4a34      	ldr	r2, [pc, #208]	; (8003d14 <_printf_i+0x21c>)
 8003c42:	9203      	str	r2, [sp, #12]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	6821      	ldr	r1, [r4, #0]
 8003c48:	ca20      	ldmia	r2!, {r5}
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	0608      	lsls	r0, r1, #24
 8003c4e:	d516      	bpl.n	8003c7e <_printf_i+0x186>
 8003c50:	07cb      	lsls	r3, r1, #31
 8003c52:	d502      	bpl.n	8003c5a <_printf_i+0x162>
 8003c54:	2320      	movs	r3, #32
 8003c56:	4319      	orrs	r1, r3
 8003c58:	6021      	str	r1, [r4, #0]
 8003c5a:	2710      	movs	r7, #16
 8003c5c:	2d00      	cmp	r5, #0
 8003c5e:	d1b2      	bne.n	8003bc6 <_printf_i+0xce>
 8003c60:	2320      	movs	r3, #32
 8003c62:	6822      	ldr	r2, [r4, #0]
 8003c64:	439a      	bics	r2, r3
 8003c66:	6022      	str	r2, [r4, #0]
 8003c68:	e7ad      	b.n	8003bc6 <_printf_i+0xce>
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	6809      	ldr	r1, [r1, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	6022      	str	r2, [r4, #0]
 8003c72:	0022      	movs	r2, r4
 8003c74:	2178      	movs	r1, #120	; 0x78
 8003c76:	3245      	adds	r2, #69	; 0x45
 8003c78:	7011      	strb	r1, [r2, #0]
 8003c7a:	4a27      	ldr	r2, [pc, #156]	; (8003d18 <_printf_i+0x220>)
 8003c7c:	e7e1      	b.n	8003c42 <_printf_i+0x14a>
 8003c7e:	0648      	lsls	r0, r1, #25
 8003c80:	d5e6      	bpl.n	8003c50 <_printf_i+0x158>
 8003c82:	b2ad      	uxth	r5, r5
 8003c84:	e7e4      	b.n	8003c50 <_printf_i+0x158>
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	680d      	ldr	r5, [r1, #0]
 8003c8a:	1d10      	adds	r0, r2, #4
 8003c8c:	6949      	ldr	r1, [r1, #20]
 8003c8e:	6018      	str	r0, [r3, #0]
 8003c90:	6813      	ldr	r3, [r2, #0]
 8003c92:	062e      	lsls	r6, r5, #24
 8003c94:	d501      	bpl.n	8003c9a <_printf_i+0x1a2>
 8003c96:	6019      	str	r1, [r3, #0]
 8003c98:	e002      	b.n	8003ca0 <_printf_i+0x1a8>
 8003c9a:	066d      	lsls	r5, r5, #25
 8003c9c:	d5fb      	bpl.n	8003c96 <_printf_i+0x19e>
 8003c9e:	8019      	strh	r1, [r3, #0]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	9e04      	ldr	r6, [sp, #16]
 8003ca4:	6123      	str	r3, [r4, #16]
 8003ca6:	e7bb      	b.n	8003c20 <_printf_i+0x128>
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	1d11      	adds	r1, r2, #4
 8003cac:	6019      	str	r1, [r3, #0]
 8003cae:	6816      	ldr	r6, [r2, #0]
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	0030      	movs	r0, r6
 8003cb4:	6862      	ldr	r2, [r4, #4]
 8003cb6:	f000 f831 	bl	8003d1c <memchr>
 8003cba:	2800      	cmp	r0, #0
 8003cbc:	d001      	beq.n	8003cc2 <_printf_i+0x1ca>
 8003cbe:	1b80      	subs	r0, r0, r6
 8003cc0:	6060      	str	r0, [r4, #4]
 8003cc2:	6863      	ldr	r3, [r4, #4]
 8003cc4:	6123      	str	r3, [r4, #16]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	9a04      	ldr	r2, [sp, #16]
 8003cca:	7013      	strb	r3, [r2, #0]
 8003ccc:	e7a8      	b.n	8003c20 <_printf_i+0x128>
 8003cce:	6923      	ldr	r3, [r4, #16]
 8003cd0:	0032      	movs	r2, r6
 8003cd2:	9906      	ldr	r1, [sp, #24]
 8003cd4:	9805      	ldr	r0, [sp, #20]
 8003cd6:	9d07      	ldr	r5, [sp, #28]
 8003cd8:	47a8      	blx	r5
 8003cda:	1c43      	adds	r3, r0, #1
 8003cdc:	d0aa      	beq.n	8003c34 <_printf_i+0x13c>
 8003cde:	6823      	ldr	r3, [r4, #0]
 8003ce0:	079b      	lsls	r3, r3, #30
 8003ce2:	d415      	bmi.n	8003d10 <_printf_i+0x218>
 8003ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ce6:	68e0      	ldr	r0, [r4, #12]
 8003ce8:	4298      	cmp	r0, r3
 8003cea:	daa5      	bge.n	8003c38 <_printf_i+0x140>
 8003cec:	0018      	movs	r0, r3
 8003cee:	e7a3      	b.n	8003c38 <_printf_i+0x140>
 8003cf0:	0022      	movs	r2, r4
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	9906      	ldr	r1, [sp, #24]
 8003cf6:	9805      	ldr	r0, [sp, #20]
 8003cf8:	9e07      	ldr	r6, [sp, #28]
 8003cfa:	3219      	adds	r2, #25
 8003cfc:	47b0      	blx	r6
 8003cfe:	1c43      	adds	r3, r0, #1
 8003d00:	d098      	beq.n	8003c34 <_printf_i+0x13c>
 8003d02:	3501      	adds	r5, #1
 8003d04:	68e3      	ldr	r3, [r4, #12]
 8003d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	42ab      	cmp	r3, r5
 8003d0c:	dcf0      	bgt.n	8003cf0 <_printf_i+0x1f8>
 8003d0e:	e7e9      	b.n	8003ce4 <_printf_i+0x1ec>
 8003d10:	2500      	movs	r5, #0
 8003d12:	e7f7      	b.n	8003d04 <_printf_i+0x20c>
 8003d14:	080040e5 	.word	0x080040e5
 8003d18:	080040f6 	.word	0x080040f6

08003d1c <memchr>:
 8003d1c:	b2c9      	uxtb	r1, r1
 8003d1e:	1882      	adds	r2, r0, r2
 8003d20:	4290      	cmp	r0, r2
 8003d22:	d101      	bne.n	8003d28 <memchr+0xc>
 8003d24:	2000      	movs	r0, #0
 8003d26:	4770      	bx	lr
 8003d28:	7803      	ldrb	r3, [r0, #0]
 8003d2a:	428b      	cmp	r3, r1
 8003d2c:	d0fb      	beq.n	8003d26 <memchr+0xa>
 8003d2e:	3001      	adds	r0, #1
 8003d30:	e7f6      	b.n	8003d20 <memchr+0x4>

08003d32 <memmove>:
 8003d32:	b510      	push	{r4, lr}
 8003d34:	4288      	cmp	r0, r1
 8003d36:	d902      	bls.n	8003d3e <memmove+0xc>
 8003d38:	188b      	adds	r3, r1, r2
 8003d3a:	4298      	cmp	r0, r3
 8003d3c:	d303      	bcc.n	8003d46 <memmove+0x14>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	e007      	b.n	8003d52 <memmove+0x20>
 8003d42:	5c8b      	ldrb	r3, [r1, r2]
 8003d44:	5483      	strb	r3, [r0, r2]
 8003d46:	3a01      	subs	r2, #1
 8003d48:	d2fb      	bcs.n	8003d42 <memmove+0x10>
 8003d4a:	bd10      	pop	{r4, pc}
 8003d4c:	5ccc      	ldrb	r4, [r1, r3]
 8003d4e:	54c4      	strb	r4, [r0, r3]
 8003d50:	3301      	adds	r3, #1
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d1fa      	bne.n	8003d4c <memmove+0x1a>
 8003d56:	e7f8      	b.n	8003d4a <memmove+0x18>

08003d58 <_free_r>:
 8003d58:	b570      	push	{r4, r5, r6, lr}
 8003d5a:	0005      	movs	r5, r0
 8003d5c:	2900      	cmp	r1, #0
 8003d5e:	d010      	beq.n	8003d82 <_free_r+0x2a>
 8003d60:	1f0c      	subs	r4, r1, #4
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	da00      	bge.n	8003d6a <_free_r+0x12>
 8003d68:	18e4      	adds	r4, r4, r3
 8003d6a:	0028      	movs	r0, r5
 8003d6c:	f000 f918 	bl	8003fa0 <__malloc_lock>
 8003d70:	4a1d      	ldr	r2, [pc, #116]	; (8003de8 <_free_r+0x90>)
 8003d72:	6813      	ldr	r3, [r2, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d105      	bne.n	8003d84 <_free_r+0x2c>
 8003d78:	6063      	str	r3, [r4, #4]
 8003d7a:	6014      	str	r4, [r2, #0]
 8003d7c:	0028      	movs	r0, r5
 8003d7e:	f000 f917 	bl	8003fb0 <__malloc_unlock>
 8003d82:	bd70      	pop	{r4, r5, r6, pc}
 8003d84:	42a3      	cmp	r3, r4
 8003d86:	d908      	bls.n	8003d9a <_free_r+0x42>
 8003d88:	6821      	ldr	r1, [r4, #0]
 8003d8a:	1860      	adds	r0, r4, r1
 8003d8c:	4283      	cmp	r3, r0
 8003d8e:	d1f3      	bne.n	8003d78 <_free_r+0x20>
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	1841      	adds	r1, r0, r1
 8003d96:	6021      	str	r1, [r4, #0]
 8003d98:	e7ee      	b.n	8003d78 <_free_r+0x20>
 8003d9a:	001a      	movs	r2, r3
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <_free_r+0x4e>
 8003da2:	42a3      	cmp	r3, r4
 8003da4:	d9f9      	bls.n	8003d9a <_free_r+0x42>
 8003da6:	6811      	ldr	r1, [r2, #0]
 8003da8:	1850      	adds	r0, r2, r1
 8003daa:	42a0      	cmp	r0, r4
 8003dac:	d10b      	bne.n	8003dc6 <_free_r+0x6e>
 8003dae:	6820      	ldr	r0, [r4, #0]
 8003db0:	1809      	adds	r1, r1, r0
 8003db2:	1850      	adds	r0, r2, r1
 8003db4:	6011      	str	r1, [r2, #0]
 8003db6:	4283      	cmp	r3, r0
 8003db8:	d1e0      	bne.n	8003d7c <_free_r+0x24>
 8003dba:	6818      	ldr	r0, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	1841      	adds	r1, r0, r1
 8003dc0:	6011      	str	r1, [r2, #0]
 8003dc2:	6053      	str	r3, [r2, #4]
 8003dc4:	e7da      	b.n	8003d7c <_free_r+0x24>
 8003dc6:	42a0      	cmp	r0, r4
 8003dc8:	d902      	bls.n	8003dd0 <_free_r+0x78>
 8003dca:	230c      	movs	r3, #12
 8003dcc:	602b      	str	r3, [r5, #0]
 8003dce:	e7d5      	b.n	8003d7c <_free_r+0x24>
 8003dd0:	6821      	ldr	r1, [r4, #0]
 8003dd2:	1860      	adds	r0, r4, r1
 8003dd4:	4283      	cmp	r3, r0
 8003dd6:	d103      	bne.n	8003de0 <_free_r+0x88>
 8003dd8:	6818      	ldr	r0, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	1841      	adds	r1, r0, r1
 8003dde:	6021      	str	r1, [r4, #0]
 8003de0:	6063      	str	r3, [r4, #4]
 8003de2:	6054      	str	r4, [r2, #4]
 8003de4:	e7ca      	b.n	8003d7c <_free_r+0x24>
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	200010f4 	.word	0x200010f4

08003dec <sbrk_aligned>:
 8003dec:	b570      	push	{r4, r5, r6, lr}
 8003dee:	4e0f      	ldr	r6, [pc, #60]	; (8003e2c <sbrk_aligned+0x40>)
 8003df0:	000d      	movs	r5, r1
 8003df2:	6831      	ldr	r1, [r6, #0]
 8003df4:	0004      	movs	r4, r0
 8003df6:	2900      	cmp	r1, #0
 8003df8:	d102      	bne.n	8003e00 <sbrk_aligned+0x14>
 8003dfa:	f000 f8bf 	bl	8003f7c <_sbrk_r>
 8003dfe:	6030      	str	r0, [r6, #0]
 8003e00:	0029      	movs	r1, r5
 8003e02:	0020      	movs	r0, r4
 8003e04:	f000 f8ba 	bl	8003f7c <_sbrk_r>
 8003e08:	1c43      	adds	r3, r0, #1
 8003e0a:	d00a      	beq.n	8003e22 <sbrk_aligned+0x36>
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	1cc5      	adds	r5, r0, #3
 8003e10:	439d      	bics	r5, r3
 8003e12:	42a8      	cmp	r0, r5
 8003e14:	d007      	beq.n	8003e26 <sbrk_aligned+0x3a>
 8003e16:	1a29      	subs	r1, r5, r0
 8003e18:	0020      	movs	r0, r4
 8003e1a:	f000 f8af 	bl	8003f7c <_sbrk_r>
 8003e1e:	1c43      	adds	r3, r0, #1
 8003e20:	d101      	bne.n	8003e26 <sbrk_aligned+0x3a>
 8003e22:	2501      	movs	r5, #1
 8003e24:	426d      	negs	r5, r5
 8003e26:	0028      	movs	r0, r5
 8003e28:	bd70      	pop	{r4, r5, r6, pc}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	200010f8 	.word	0x200010f8

08003e30 <_malloc_r>:
 8003e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e32:	2203      	movs	r2, #3
 8003e34:	1ccb      	adds	r3, r1, #3
 8003e36:	4393      	bics	r3, r2
 8003e38:	3308      	adds	r3, #8
 8003e3a:	0006      	movs	r6, r0
 8003e3c:	001f      	movs	r7, r3
 8003e3e:	2b0c      	cmp	r3, #12
 8003e40:	d232      	bcs.n	8003ea8 <_malloc_r+0x78>
 8003e42:	270c      	movs	r7, #12
 8003e44:	42b9      	cmp	r1, r7
 8003e46:	d831      	bhi.n	8003eac <_malloc_r+0x7c>
 8003e48:	0030      	movs	r0, r6
 8003e4a:	f000 f8a9 	bl	8003fa0 <__malloc_lock>
 8003e4e:	4d32      	ldr	r5, [pc, #200]	; (8003f18 <_malloc_r+0xe8>)
 8003e50:	682b      	ldr	r3, [r5, #0]
 8003e52:	001c      	movs	r4, r3
 8003e54:	2c00      	cmp	r4, #0
 8003e56:	d12e      	bne.n	8003eb6 <_malloc_r+0x86>
 8003e58:	0039      	movs	r1, r7
 8003e5a:	0030      	movs	r0, r6
 8003e5c:	f7ff ffc6 	bl	8003dec <sbrk_aligned>
 8003e60:	0004      	movs	r4, r0
 8003e62:	1c43      	adds	r3, r0, #1
 8003e64:	d11e      	bne.n	8003ea4 <_malloc_r+0x74>
 8003e66:	682c      	ldr	r4, [r5, #0]
 8003e68:	0025      	movs	r5, r4
 8003e6a:	2d00      	cmp	r5, #0
 8003e6c:	d14a      	bne.n	8003f04 <_malloc_r+0xd4>
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	0029      	movs	r1, r5
 8003e72:	18e3      	adds	r3, r4, r3
 8003e74:	0030      	movs	r0, r6
 8003e76:	9301      	str	r3, [sp, #4]
 8003e78:	f000 f880 	bl	8003f7c <_sbrk_r>
 8003e7c:	9b01      	ldr	r3, [sp, #4]
 8003e7e:	4283      	cmp	r3, r0
 8003e80:	d143      	bne.n	8003f0a <_malloc_r+0xda>
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	3703      	adds	r7, #3
 8003e86:	1aff      	subs	r7, r7, r3
 8003e88:	2303      	movs	r3, #3
 8003e8a:	439f      	bics	r7, r3
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	2f0c      	cmp	r7, #12
 8003e90:	d200      	bcs.n	8003e94 <_malloc_r+0x64>
 8003e92:	270c      	movs	r7, #12
 8003e94:	0039      	movs	r1, r7
 8003e96:	0030      	movs	r0, r6
 8003e98:	f7ff ffa8 	bl	8003dec <sbrk_aligned>
 8003e9c:	1c43      	adds	r3, r0, #1
 8003e9e:	d034      	beq.n	8003f0a <_malloc_r+0xda>
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	19df      	adds	r7, r3, r7
 8003ea4:	6027      	str	r7, [r4, #0]
 8003ea6:	e013      	b.n	8003ed0 <_malloc_r+0xa0>
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	dacb      	bge.n	8003e44 <_malloc_r+0x14>
 8003eac:	230c      	movs	r3, #12
 8003eae:	2500      	movs	r5, #0
 8003eb0:	6033      	str	r3, [r6, #0]
 8003eb2:	0028      	movs	r0, r5
 8003eb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003eb6:	6822      	ldr	r2, [r4, #0]
 8003eb8:	1bd1      	subs	r1, r2, r7
 8003eba:	d420      	bmi.n	8003efe <_malloc_r+0xce>
 8003ebc:	290b      	cmp	r1, #11
 8003ebe:	d917      	bls.n	8003ef0 <_malloc_r+0xc0>
 8003ec0:	19e2      	adds	r2, r4, r7
 8003ec2:	6027      	str	r7, [r4, #0]
 8003ec4:	42a3      	cmp	r3, r4
 8003ec6:	d111      	bne.n	8003eec <_malloc_r+0xbc>
 8003ec8:	602a      	str	r2, [r5, #0]
 8003eca:	6863      	ldr	r3, [r4, #4]
 8003ecc:	6011      	str	r1, [r2, #0]
 8003ece:	6053      	str	r3, [r2, #4]
 8003ed0:	0030      	movs	r0, r6
 8003ed2:	0025      	movs	r5, r4
 8003ed4:	f000 f86c 	bl	8003fb0 <__malloc_unlock>
 8003ed8:	2207      	movs	r2, #7
 8003eda:	350b      	adds	r5, #11
 8003edc:	1d23      	adds	r3, r4, #4
 8003ede:	4395      	bics	r5, r2
 8003ee0:	1aea      	subs	r2, r5, r3
 8003ee2:	429d      	cmp	r5, r3
 8003ee4:	d0e5      	beq.n	8003eb2 <_malloc_r+0x82>
 8003ee6:	1b5b      	subs	r3, r3, r5
 8003ee8:	50a3      	str	r3, [r4, r2]
 8003eea:	e7e2      	b.n	8003eb2 <_malloc_r+0x82>
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	e7ec      	b.n	8003eca <_malloc_r+0x9a>
 8003ef0:	6862      	ldr	r2, [r4, #4]
 8003ef2:	42a3      	cmp	r3, r4
 8003ef4:	d101      	bne.n	8003efa <_malloc_r+0xca>
 8003ef6:	602a      	str	r2, [r5, #0]
 8003ef8:	e7ea      	b.n	8003ed0 <_malloc_r+0xa0>
 8003efa:	605a      	str	r2, [r3, #4]
 8003efc:	e7e8      	b.n	8003ed0 <_malloc_r+0xa0>
 8003efe:	0023      	movs	r3, r4
 8003f00:	6864      	ldr	r4, [r4, #4]
 8003f02:	e7a7      	b.n	8003e54 <_malloc_r+0x24>
 8003f04:	002c      	movs	r4, r5
 8003f06:	686d      	ldr	r5, [r5, #4]
 8003f08:	e7af      	b.n	8003e6a <_malloc_r+0x3a>
 8003f0a:	230c      	movs	r3, #12
 8003f0c:	0030      	movs	r0, r6
 8003f0e:	6033      	str	r3, [r6, #0]
 8003f10:	f000 f84e 	bl	8003fb0 <__malloc_unlock>
 8003f14:	e7cd      	b.n	8003eb2 <_malloc_r+0x82>
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	200010f4 	.word	0x200010f4

08003f1c <_realloc_r>:
 8003f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f1e:	0007      	movs	r7, r0
 8003f20:	000e      	movs	r6, r1
 8003f22:	0014      	movs	r4, r2
 8003f24:	2900      	cmp	r1, #0
 8003f26:	d105      	bne.n	8003f34 <_realloc_r+0x18>
 8003f28:	0011      	movs	r1, r2
 8003f2a:	f7ff ff81 	bl	8003e30 <_malloc_r>
 8003f2e:	0005      	movs	r5, r0
 8003f30:	0028      	movs	r0, r5
 8003f32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f34:	2a00      	cmp	r2, #0
 8003f36:	d103      	bne.n	8003f40 <_realloc_r+0x24>
 8003f38:	f7ff ff0e 	bl	8003d58 <_free_r>
 8003f3c:	0025      	movs	r5, r4
 8003f3e:	e7f7      	b.n	8003f30 <_realloc_r+0x14>
 8003f40:	f000 f83e 	bl	8003fc0 <_malloc_usable_size_r>
 8003f44:	9001      	str	r0, [sp, #4]
 8003f46:	4284      	cmp	r4, r0
 8003f48:	d803      	bhi.n	8003f52 <_realloc_r+0x36>
 8003f4a:	0035      	movs	r5, r6
 8003f4c:	0843      	lsrs	r3, r0, #1
 8003f4e:	42a3      	cmp	r3, r4
 8003f50:	d3ee      	bcc.n	8003f30 <_realloc_r+0x14>
 8003f52:	0021      	movs	r1, r4
 8003f54:	0038      	movs	r0, r7
 8003f56:	f7ff ff6b 	bl	8003e30 <_malloc_r>
 8003f5a:	1e05      	subs	r5, r0, #0
 8003f5c:	d0e8      	beq.n	8003f30 <_realloc_r+0x14>
 8003f5e:	9b01      	ldr	r3, [sp, #4]
 8003f60:	0022      	movs	r2, r4
 8003f62:	429c      	cmp	r4, r3
 8003f64:	d900      	bls.n	8003f68 <_realloc_r+0x4c>
 8003f66:	001a      	movs	r2, r3
 8003f68:	0031      	movs	r1, r6
 8003f6a:	0028      	movs	r0, r5
 8003f6c:	f7ff fbc0 	bl	80036f0 <memcpy>
 8003f70:	0031      	movs	r1, r6
 8003f72:	0038      	movs	r0, r7
 8003f74:	f7ff fef0 	bl	8003d58 <_free_r>
 8003f78:	e7da      	b.n	8003f30 <_realloc_r+0x14>
	...

08003f7c <_sbrk_r>:
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	b570      	push	{r4, r5, r6, lr}
 8003f80:	4d06      	ldr	r5, [pc, #24]	; (8003f9c <_sbrk_r+0x20>)
 8003f82:	0004      	movs	r4, r0
 8003f84:	0008      	movs	r0, r1
 8003f86:	602b      	str	r3, [r5, #0]
 8003f88:	f7fc fc48 	bl	800081c <_sbrk>
 8003f8c:	1c43      	adds	r3, r0, #1
 8003f8e:	d103      	bne.n	8003f98 <_sbrk_r+0x1c>
 8003f90:	682b      	ldr	r3, [r5, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d000      	beq.n	8003f98 <_sbrk_r+0x1c>
 8003f96:	6023      	str	r3, [r4, #0]
 8003f98:	bd70      	pop	{r4, r5, r6, pc}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	200010fc 	.word	0x200010fc

08003fa0 <__malloc_lock>:
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	4802      	ldr	r0, [pc, #8]	; (8003fac <__malloc_lock+0xc>)
 8003fa4:	f000 f814 	bl	8003fd0 <__retarget_lock_acquire_recursive>
 8003fa8:	bd10      	pop	{r4, pc}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	20001100 	.word	0x20001100

08003fb0 <__malloc_unlock>:
 8003fb0:	b510      	push	{r4, lr}
 8003fb2:	4802      	ldr	r0, [pc, #8]	; (8003fbc <__malloc_unlock+0xc>)
 8003fb4:	f000 f80d 	bl	8003fd2 <__retarget_lock_release_recursive>
 8003fb8:	bd10      	pop	{r4, pc}
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	20001100 	.word	0x20001100

08003fc0 <_malloc_usable_size_r>:
 8003fc0:	1f0b      	subs	r3, r1, #4
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	1f18      	subs	r0, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	da01      	bge.n	8003fce <_malloc_usable_size_r+0xe>
 8003fca:	580b      	ldr	r3, [r1, r0]
 8003fcc:	18c0      	adds	r0, r0, r3
 8003fce:	4770      	bx	lr

08003fd0 <__retarget_lock_acquire_recursive>:
 8003fd0:	4770      	bx	lr

08003fd2 <__retarget_lock_release_recursive>:
 8003fd2:	4770      	bx	lr

08003fd4 <_init>:
 8003fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fda:	bc08      	pop	{r3}
 8003fdc:	469e      	mov	lr, r3
 8003fde:	4770      	bx	lr

08003fe0 <_fini>:
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe6:	bc08      	pop	{r3}
 8003fe8:	469e      	mov	lr, r3
 8003fea:	4770      	bx	lr
