
Idle_Hook_Functions.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032f0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080033b0  080033b0  000133b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003430  08003430  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003430  08003430  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003430  08003430  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003430  08003430  00013430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003434  08003434  00013434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b2c  20000014  0800344c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b40  0800344c  00021b40  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007295  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab5  00000000  00000000  000272d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  00028d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  00029608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f3a  00000000  00000000  00029da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b07  00000000  00000000  00042cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000932ca  00000000  00000000  0004c7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dfaab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c90  00000000  00000000  000dfafc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003398 	.word	0x08003398

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08003398 	.word	0x08003398

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <vApplicationIdleHook>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void vApplicationIdleHook()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

	deneme=3;
 8000224:	4b03      	ldr	r3, [pc, #12]	; (8000234 <vApplicationIdleHook+0x14>)
 8000226:	2203      	movs	r2, #3
 8000228:	701a      	strb	r2, [r3, #0]

	__WFI();
 800022a:	bf30      	wfi
	 ... -> #define configUSE_IDLE_HOOK 1 yaptık bundan dolayı hiç bir görev çalışmadığında
	 	 vApplicationIdleHook fonksiyonu çalışacak.

	*/

}
 800022c:	46c0      	nop			; (mov r8, r8)
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	20000038 	.word	0x20000038

08000238 <Task1_Handler>:


void Task1_Handler(void *params)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
	deneme = 1;
 8000240:	4b07      	ldr	r3, [pc, #28]	; (8000260 <Task1_Handler+0x28>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000246:	2390      	movs	r3, #144	; 0x90
 8000248:	05db      	lsls	r3, r3, #23
 800024a:	2120      	movs	r1, #32
 800024c:	0018      	movs	r0, r3
 800024e:	f000 fbe8 	bl	8000a22 <HAL_GPIO_TogglePin>

		vTaskDelay(pdMS_TO_TICKS(1000));
 8000252:	23fa      	movs	r3, #250	; 0xfa
 8000254:	009b      	lsls	r3, r3, #2
 8000256:	0018      	movs	r0, r3
 8000258:	f001 fd88 	bl	8001d6c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800025c:	e7f3      	b.n	8000246 <Task1_Handler+0xe>
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	20000038 	.word	0x20000038

08000264 <Task2_Handler>:
}



void Task2_Handler(void *params)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	deneme = 2 ;
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <Task2_Handler+0x28>)
 800026e:	2202      	movs	r2, #2
 8000270:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000272:	2390      	movs	r3, #144	; 0x90
 8000274:	05db      	lsls	r3, r3, #23
 8000276:	2120      	movs	r1, #32
 8000278:	0018      	movs	r0, r3
 800027a:	f000 fbd2 	bl	8000a22 <HAL_GPIO_TogglePin>

		vTaskDelay(pdMS_TO_TICKS(1000));
 800027e:	23fa      	movs	r3, #250	; 0xfa
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	0018      	movs	r0, r3
 8000284:	f001 fd72 	bl	8001d6c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000288:	e7f3      	b.n	8000272 <Task2_Handler+0xe>
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	20000038 	.word	0x20000038

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000296:	f000 f929 	bl	80004ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029a:	f000 f825 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029e:	f000 f85f 	bl	8000360 <MX_GPIO_Init>





  xTaskCreate(Task1_Handler, "Task_1", 120, NULL, 2, &myTask1Handler);
 80002a2:	490b      	ldr	r1, [pc, #44]	; (80002d0 <main+0x40>)
 80002a4:	480b      	ldr	r0, [pc, #44]	; (80002d4 <main+0x44>)
 80002a6:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <main+0x48>)
 80002a8:	9301      	str	r3, [sp, #4]
 80002aa:	2302      	movs	r3, #2
 80002ac:	9300      	str	r3, [sp, #0]
 80002ae:	2300      	movs	r3, #0
 80002b0:	2278      	movs	r2, #120	; 0x78
 80002b2:	f001 fbfe 	bl	8001ab2 <xTaskCreate>

  xTaskCreate(Task2_Handler, "Task_2", 120, NULL, 2, &myTask2Handler);
 80002b6:	4909      	ldr	r1, [pc, #36]	; (80002dc <main+0x4c>)
 80002b8:	4809      	ldr	r0, [pc, #36]	; (80002e0 <main+0x50>)
 80002ba:	4b0a      	ldr	r3, [pc, #40]	; (80002e4 <main+0x54>)
 80002bc:	9301      	str	r3, [sp, #4]
 80002be:	2302      	movs	r3, #2
 80002c0:	9300      	str	r3, [sp, #0]
 80002c2:	2300      	movs	r3, #0
 80002c4:	2278      	movs	r2, #120	; 0x78
 80002c6:	f001 fbf4 	bl	8001ab2 <xTaskCreate>

  vTaskStartScheduler();
 80002ca:	f001 fd75 	bl	8001db8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ce:	e7fe      	b.n	80002ce <main+0x3e>
 80002d0:	080033b0 	.word	0x080033b0
 80002d4:	08000239 	.word	0x08000239
 80002d8:	20000030 	.word	0x20000030
 80002dc:	080033b8 	.word	0x080033b8
 80002e0:	08000265 	.word	0x08000265
 80002e4:	20000034 	.word	0x20000034

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b093      	sub	sp, #76	; 0x4c
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	2414      	movs	r4, #20
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	0018      	movs	r0, r3
 80002f4:	2334      	movs	r3, #52	; 0x34
 80002f6:	001a      	movs	r2, r3
 80002f8:	2100      	movs	r1, #0
 80002fa:	f003 f844 	bl	8003386 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	0018      	movs	r0, r3
 8000302:	2310      	movs	r3, #16
 8000304:	001a      	movs	r2, r3
 8000306:	2100      	movs	r1, #0
 8000308:	f003 f83d 	bl	8003386 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030c:	193b      	adds	r3, r7, r4
 800030e:	2201      	movs	r2, #1
 8000310:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000312:	193b      	adds	r3, r7, r4
 8000314:	2201      	movs	r2, #1
 8000316:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000318:	193b      	adds	r3, r7, r4
 800031a:	2200      	movs	r2, #0
 800031c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	193b      	adds	r3, r7, r4
 8000320:	0018      	movs	r0, r3
 8000322:	f000 fb99 	bl	8000a58 <HAL_RCC_OscConfig>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800032a:	f000 f883 	bl	8000434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2207      	movs	r2, #7
 8000332:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2201      	movs	r2, #1
 8000338:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	2100      	movs	r1, #0
 800034a:	0018      	movs	r0, r3
 800034c:	f000 ff0a 	bl	8001164 <HAL_RCC_ClockConfig>
 8000350:	1e03      	subs	r3, r0, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000354:	f000 f86e 	bl	8000434 <Error_Handler>
  }
}
 8000358:	46c0      	nop			; (mov r8, r8)
 800035a:	46bd      	mov	sp, r7
 800035c:	b013      	add	sp, #76	; 0x4c
 800035e:	bd90      	pop	{r4, r7, pc}

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b590      	push	{r4, r7, lr}
 8000362:	b089      	sub	sp, #36	; 0x24
 8000364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	240c      	movs	r4, #12
 8000368:	193b      	adds	r3, r7, r4
 800036a:	0018      	movs	r0, r3
 800036c:	2314      	movs	r3, #20
 800036e:	001a      	movs	r2, r3
 8000370:	2100      	movs	r1, #0
 8000372:	f003 f808 	bl	8003386 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000376:	4b2d      	ldr	r3, [pc, #180]	; (800042c <MX_GPIO_Init+0xcc>)
 8000378:	695a      	ldr	r2, [r3, #20]
 800037a:	4b2c      	ldr	r3, [pc, #176]	; (800042c <MX_GPIO_Init+0xcc>)
 800037c:	2180      	movs	r1, #128	; 0x80
 800037e:	0309      	lsls	r1, r1, #12
 8000380:	430a      	orrs	r2, r1
 8000382:	615a      	str	r2, [r3, #20]
 8000384:	4b29      	ldr	r3, [pc, #164]	; (800042c <MX_GPIO_Init+0xcc>)
 8000386:	695a      	ldr	r2, [r3, #20]
 8000388:	2380      	movs	r3, #128	; 0x80
 800038a:	031b      	lsls	r3, r3, #12
 800038c:	4013      	ands	r3, r2
 800038e:	60bb      	str	r3, [r7, #8]
 8000390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000392:	4b26      	ldr	r3, [pc, #152]	; (800042c <MX_GPIO_Init+0xcc>)
 8000394:	695a      	ldr	r2, [r3, #20]
 8000396:	4b25      	ldr	r3, [pc, #148]	; (800042c <MX_GPIO_Init+0xcc>)
 8000398:	2180      	movs	r1, #128	; 0x80
 800039a:	03c9      	lsls	r1, r1, #15
 800039c:	430a      	orrs	r2, r1
 800039e:	615a      	str	r2, [r3, #20]
 80003a0:	4b22      	ldr	r3, [pc, #136]	; (800042c <MX_GPIO_Init+0xcc>)
 80003a2:	695a      	ldr	r2, [r3, #20]
 80003a4:	2380      	movs	r3, #128	; 0x80
 80003a6:	03db      	lsls	r3, r3, #15
 80003a8:	4013      	ands	r3, r2
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ae:	4b1f      	ldr	r3, [pc, #124]	; (800042c <MX_GPIO_Init+0xcc>)
 80003b0:	695a      	ldr	r2, [r3, #20]
 80003b2:	4b1e      	ldr	r3, [pc, #120]	; (800042c <MX_GPIO_Init+0xcc>)
 80003b4:	2180      	movs	r1, #128	; 0x80
 80003b6:	0289      	lsls	r1, r1, #10
 80003b8:	430a      	orrs	r2, r1
 80003ba:	615a      	str	r2, [r3, #20]
 80003bc:	4b1b      	ldr	r3, [pc, #108]	; (800042c <MX_GPIO_Init+0xcc>)
 80003be:	695a      	ldr	r2, [r3, #20]
 80003c0:	2380      	movs	r3, #128	; 0x80
 80003c2:	029b      	lsls	r3, r3, #10
 80003c4:	4013      	ands	r3, r2
 80003c6:	603b      	str	r3, [r7, #0]
 80003c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003ca:	2390      	movs	r3, #144	; 0x90
 80003cc:	05db      	lsls	r3, r3, #23
 80003ce:	2200      	movs	r2, #0
 80003d0:	2120      	movs	r1, #32
 80003d2:	0018      	movs	r0, r3
 80003d4:	f000 fb08 	bl	80009e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	2280      	movs	r2, #128	; 0x80
 80003dc:	0192      	lsls	r2, r2, #6
 80003de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003e0:	193b      	adds	r3, r7, r4
 80003e2:	2284      	movs	r2, #132	; 0x84
 80003e4:	0392      	lsls	r2, r2, #14
 80003e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e8:	193b      	adds	r3, r7, r4
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003ee:	193b      	adds	r3, r7, r4
 80003f0:	4a0f      	ldr	r2, [pc, #60]	; (8000430 <MX_GPIO_Init+0xd0>)
 80003f2:	0019      	movs	r1, r3
 80003f4:	0010      	movs	r0, r2
 80003f6:	f000 f97f 	bl	80006f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003fa:	0021      	movs	r1, r4
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	2220      	movs	r2, #32
 8000400:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000402:	187b      	adds	r3, r7, r1
 8000404:	2201      	movs	r2, #1
 8000406:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	187b      	adds	r3, r7, r1
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040e:	187b      	adds	r3, r7, r1
 8000410:	2200      	movs	r2, #0
 8000412:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000414:	187a      	adds	r2, r7, r1
 8000416:	2390      	movs	r3, #144	; 0x90
 8000418:	05db      	lsls	r3, r3, #23
 800041a:	0011      	movs	r1, r2
 800041c:	0018      	movs	r0, r3
 800041e:	f000 f96b 	bl	80006f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	b009      	add	sp, #36	; 0x24
 8000428:	bd90      	pop	{r4, r7, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	40021000 	.word	0x40021000
 8000430:	48000800 	.word	0x48000800

08000434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000438:	b672      	cpsid	i
}
 800043a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800043c:	e7fe      	b.n	800043c <Error_Handler+0x8>
	...

08000440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <HAL_MspInit+0x44>)
 8000448:	699a      	ldr	r2, [r3, #24]
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <HAL_MspInit+0x44>)
 800044c:	2101      	movs	r1, #1
 800044e:	430a      	orrs	r2, r1
 8000450:	619a      	str	r2, [r3, #24]
 8000452:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <HAL_MspInit+0x44>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	2201      	movs	r2, #1
 8000458:	4013      	ands	r3, r2
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045e:	4b09      	ldr	r3, [pc, #36]	; (8000484 <HAL_MspInit+0x44>)
 8000460:	69da      	ldr	r2, [r3, #28]
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <HAL_MspInit+0x44>)
 8000464:	2180      	movs	r1, #128	; 0x80
 8000466:	0549      	lsls	r1, r1, #21
 8000468:	430a      	orrs	r2, r1
 800046a:	61da      	str	r2, [r3, #28]
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <HAL_MspInit+0x44>)
 800046e:	69da      	ldr	r2, [r3, #28]
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	055b      	lsls	r3, r3, #21
 8000474:	4013      	ands	r3, r2
 8000476:	603b      	str	r3, [r7, #0]
 8000478:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b002      	add	sp, #8
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	40021000 	.word	0x40021000

08000488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800048c:	e7fe      	b.n	800048c <HardFault_Handler+0x4>

0800048e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000498:	480d      	ldr	r0, [pc, #52]	; (80004d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800049a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800049c:	f7ff fff7 	bl	800048e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a0:	480c      	ldr	r0, [pc, #48]	; (80004d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004a2:	490d      	ldr	r1, [pc, #52]	; (80004d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004a4:	4a0d      	ldr	r2, [pc, #52]	; (80004dc <LoopForever+0xe>)
  movs r3, #0
 80004a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a8:	e002      	b.n	80004b0 <LoopCopyDataInit>

080004aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ae:	3304      	adds	r3, #4

080004b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b4:	d3f9      	bcc.n	80004aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004b6:	4a0a      	ldr	r2, [pc, #40]	; (80004e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004b8:	4c0a      	ldr	r4, [pc, #40]	; (80004e4 <LoopForever+0x16>)
  movs r3, #0
 80004ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004bc:	e001      	b.n	80004c2 <LoopFillZerobss>

080004be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c0:	3204      	adds	r2, #4

080004c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c4:	d3fb      	bcc.n	80004be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004c6:	f002 ff31 	bl	800332c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ca:	f7ff fee1 	bl	8000290 <main>

080004ce <LoopForever>:

LoopForever:
    b LoopForever
 80004ce:	e7fe      	b.n	80004ce <LoopForever>
  ldr   r0, =_estack
 80004d0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80004d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80004dc:	08003438 	.word	0x08003438
  ldr r2, =_sbss
 80004e0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80004e4:	20001b40 	.word	0x20001b40

080004e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004e8:	e7fe      	b.n	80004e8 <ADC1_COMP_IRQHandler>
	...

080004ec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <HAL_Init+0x24>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <HAL_Init+0x24>)
 80004f6:	2110      	movs	r1, #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 f809 	bl	8000514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000502:	f7ff ff9d 	bl	8000440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000506:	2300      	movs	r3, #0
}
 8000508:	0018      	movs	r0, r3
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	40022000 	.word	0x40022000

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	4b14      	ldr	r3, [pc, #80]	; (8000570 <HAL_InitTick+0x5c>)
 800051e:	681c      	ldr	r4, [r3, #0]
 8000520:	4b14      	ldr	r3, [pc, #80]	; (8000574 <HAL_InitTick+0x60>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	0019      	movs	r1, r3
 8000526:	23fa      	movs	r3, #250	; 0xfa
 8000528:	0098      	lsls	r0, r3, #2
 800052a:	f7ff fded 	bl	8000108 <__udivsi3>
 800052e:	0003      	movs	r3, r0
 8000530:	0019      	movs	r1, r3
 8000532:	0020      	movs	r0, r4
 8000534:	f7ff fde8 	bl	8000108 <__udivsi3>
 8000538:	0003      	movs	r3, r0
 800053a:	0018      	movs	r0, r3
 800053c:	f000 f8cf 	bl	80006de <HAL_SYSTICK_Config>
 8000540:	1e03      	subs	r3, r0, #0
 8000542:	d001      	beq.n	8000548 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000544:	2301      	movs	r3, #1
 8000546:	e00f      	b.n	8000568 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b03      	cmp	r3, #3
 800054c:	d80b      	bhi.n	8000566 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	2301      	movs	r3, #1
 8000552:	425b      	negs	r3, r3
 8000554:	2200      	movs	r2, #0
 8000556:	0018      	movs	r0, r3
 8000558:	f000 f8ac 	bl	80006b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <HAL_InitTick+0x64>)
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	0018      	movs	r0, r3
 800056a:	46bd      	mov	sp, r7
 800056c:	b003      	add	sp, #12
 800056e:	bd90      	pop	{r4, r7, pc}
 8000570:	20000000 	.word	0x20000000
 8000574:	20000008 	.word	0x20000008
 8000578:	20000004 	.word	0x20000004

0800057c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  return uwTick;
 8000580:	4b02      	ldr	r3, [pc, #8]	; (800058c <HAL_GetTick+0x10>)
 8000582:	681b      	ldr	r3, [r3, #0]
}
 8000584:	0018      	movs	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	2000003c 	.word	0x2000003c

08000590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	0002      	movs	r2, r0
 8000598:	6039      	str	r1, [r7, #0]
 800059a:	1dfb      	adds	r3, r7, #7
 800059c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800059e:	1dfb      	adds	r3, r7, #7
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b7f      	cmp	r3, #127	; 0x7f
 80005a4:	d828      	bhi.n	80005f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005a6:	4a2f      	ldr	r2, [pc, #188]	; (8000664 <__NVIC_SetPriority+0xd4>)
 80005a8:	1dfb      	adds	r3, r7, #7
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b25b      	sxtb	r3, r3
 80005ae:	089b      	lsrs	r3, r3, #2
 80005b0:	33c0      	adds	r3, #192	; 0xc0
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	589b      	ldr	r3, [r3, r2]
 80005b6:	1dfa      	adds	r2, r7, #7
 80005b8:	7812      	ldrb	r2, [r2, #0]
 80005ba:	0011      	movs	r1, r2
 80005bc:	2203      	movs	r2, #3
 80005be:	400a      	ands	r2, r1
 80005c0:	00d2      	lsls	r2, r2, #3
 80005c2:	21ff      	movs	r1, #255	; 0xff
 80005c4:	4091      	lsls	r1, r2
 80005c6:	000a      	movs	r2, r1
 80005c8:	43d2      	mvns	r2, r2
 80005ca:	401a      	ands	r2, r3
 80005cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	019b      	lsls	r3, r3, #6
 80005d2:	22ff      	movs	r2, #255	; 0xff
 80005d4:	401a      	ands	r2, r3
 80005d6:	1dfb      	adds	r3, r7, #7
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	0018      	movs	r0, r3
 80005dc:	2303      	movs	r3, #3
 80005de:	4003      	ands	r3, r0
 80005e0:	00db      	lsls	r3, r3, #3
 80005e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005e4:	481f      	ldr	r0, [pc, #124]	; (8000664 <__NVIC_SetPriority+0xd4>)
 80005e6:	1dfb      	adds	r3, r7, #7
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b25b      	sxtb	r3, r3
 80005ec:	089b      	lsrs	r3, r3, #2
 80005ee:	430a      	orrs	r2, r1
 80005f0:	33c0      	adds	r3, #192	; 0xc0
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80005f6:	e031      	b.n	800065c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005f8:	4a1b      	ldr	r2, [pc, #108]	; (8000668 <__NVIC_SetPriority+0xd8>)
 80005fa:	1dfb      	adds	r3, r7, #7
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	0019      	movs	r1, r3
 8000600:	230f      	movs	r3, #15
 8000602:	400b      	ands	r3, r1
 8000604:	3b08      	subs	r3, #8
 8000606:	089b      	lsrs	r3, r3, #2
 8000608:	3306      	adds	r3, #6
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	18d3      	adds	r3, r2, r3
 800060e:	3304      	adds	r3, #4
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	1dfa      	adds	r2, r7, #7
 8000614:	7812      	ldrb	r2, [r2, #0]
 8000616:	0011      	movs	r1, r2
 8000618:	2203      	movs	r2, #3
 800061a:	400a      	ands	r2, r1
 800061c:	00d2      	lsls	r2, r2, #3
 800061e:	21ff      	movs	r1, #255	; 0xff
 8000620:	4091      	lsls	r1, r2
 8000622:	000a      	movs	r2, r1
 8000624:	43d2      	mvns	r2, r2
 8000626:	401a      	ands	r2, r3
 8000628:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	019b      	lsls	r3, r3, #6
 800062e:	22ff      	movs	r2, #255	; 0xff
 8000630:	401a      	ands	r2, r3
 8000632:	1dfb      	adds	r3, r7, #7
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	0018      	movs	r0, r3
 8000638:	2303      	movs	r3, #3
 800063a:	4003      	ands	r3, r0
 800063c:	00db      	lsls	r3, r3, #3
 800063e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000640:	4809      	ldr	r0, [pc, #36]	; (8000668 <__NVIC_SetPriority+0xd8>)
 8000642:	1dfb      	adds	r3, r7, #7
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	001c      	movs	r4, r3
 8000648:	230f      	movs	r3, #15
 800064a:	4023      	ands	r3, r4
 800064c:	3b08      	subs	r3, #8
 800064e:	089b      	lsrs	r3, r3, #2
 8000650:	430a      	orrs	r2, r1
 8000652:	3306      	adds	r3, #6
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	18c3      	adds	r3, r0, r3
 8000658:	3304      	adds	r3, #4
 800065a:	601a      	str	r2, [r3, #0]
}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b003      	add	sp, #12
 8000662:	bd90      	pop	{r4, r7, pc}
 8000664:	e000e100 	.word	0xe000e100
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	1e5a      	subs	r2, r3, #1
 8000678:	2380      	movs	r3, #128	; 0x80
 800067a:	045b      	lsls	r3, r3, #17
 800067c:	429a      	cmp	r2, r3
 800067e:	d301      	bcc.n	8000684 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000680:	2301      	movs	r3, #1
 8000682:	e010      	b.n	80006a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <SysTick_Config+0x44>)
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	3a01      	subs	r2, #1
 800068a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800068c:	2301      	movs	r3, #1
 800068e:	425b      	negs	r3, r3
 8000690:	2103      	movs	r1, #3
 8000692:	0018      	movs	r0, r3
 8000694:	f7ff ff7c 	bl	8000590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <SysTick_Config+0x44>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <SysTick_Config+0x44>)
 80006a0:	2207      	movs	r2, #7
 80006a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	0018      	movs	r0, r3
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b002      	add	sp, #8
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	e000e010 	.word	0xe000e010

080006b4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60b9      	str	r1, [r7, #8]
 80006bc:	607a      	str	r2, [r7, #4]
 80006be:	210f      	movs	r1, #15
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	1c02      	adds	r2, r0, #0
 80006c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	0011      	movs	r1, r2
 80006d0:	0018      	movs	r0, r3
 80006d2:	f7ff ff5d 	bl	8000590 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b004      	add	sp, #16
 80006dc:	bd80      	pop	{r7, pc}

080006de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	0018      	movs	r0, r3
 80006ea:	f7ff ffbf 	bl	800066c <SysTick_Config>
 80006ee:	0003      	movs	r3, r0
}
 80006f0:	0018      	movs	r0, r3
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b002      	add	sp, #8
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000706:	e155      	b.n	80009b4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2101      	movs	r1, #1
 800070e:	697a      	ldr	r2, [r7, #20]
 8000710:	4091      	lsls	r1, r2
 8000712:	000a      	movs	r2, r1
 8000714:	4013      	ands	r3, r2
 8000716:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d100      	bne.n	8000720 <HAL_GPIO_Init+0x28>
 800071e:	e146      	b.n	80009ae <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	2203      	movs	r2, #3
 8000726:	4013      	ands	r3, r2
 8000728:	2b01      	cmp	r3, #1
 800072a:	d005      	beq.n	8000738 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	2203      	movs	r2, #3
 8000732:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000734:	2b02      	cmp	r3, #2
 8000736:	d130      	bne.n	800079a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	2203      	movs	r2, #3
 8000744:	409a      	lsls	r2, r3
 8000746:	0013      	movs	r3, r2
 8000748:	43da      	mvns	r2, r3
 800074a:	693b      	ldr	r3, [r7, #16]
 800074c:	4013      	ands	r3, r2
 800074e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	68da      	ldr	r2, [r3, #12]
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	409a      	lsls	r2, r3
 800075a:	0013      	movs	r3, r2
 800075c:	693a      	ldr	r2, [r7, #16]
 800075e:	4313      	orrs	r3, r2
 8000760:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	693a      	ldr	r2, [r7, #16]
 8000766:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800076e:	2201      	movs	r2, #1
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	409a      	lsls	r2, r3
 8000774:	0013      	movs	r3, r2
 8000776:	43da      	mvns	r2, r3
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	4013      	ands	r3, r2
 800077c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	091b      	lsrs	r3, r3, #4
 8000784:	2201      	movs	r2, #1
 8000786:	401a      	ands	r2, r3
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	409a      	lsls	r2, r3
 800078c:	0013      	movs	r3, r2
 800078e:	693a      	ldr	r2, [r7, #16]
 8000790:	4313      	orrs	r3, r2
 8000792:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	693a      	ldr	r2, [r7, #16]
 8000798:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	2203      	movs	r2, #3
 80007a0:	4013      	ands	r3, r2
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	d017      	beq.n	80007d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	2203      	movs	r2, #3
 80007b2:	409a      	lsls	r2, r3
 80007b4:	0013      	movs	r3, r2
 80007b6:	43da      	mvns	r2, r3
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	4013      	ands	r3, r2
 80007bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	689a      	ldr	r2, [r3, #8]
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	409a      	lsls	r2, r3
 80007c8:	0013      	movs	r3, r2
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	693a      	ldr	r2, [r7, #16]
 80007d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	2203      	movs	r2, #3
 80007dc:	4013      	ands	r3, r2
 80007de:	2b02      	cmp	r3, #2
 80007e0:	d123      	bne.n	800082a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	08da      	lsrs	r2, r3, #3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	3208      	adds	r2, #8
 80007ea:	0092      	lsls	r2, r2, #2
 80007ec:	58d3      	ldr	r3, [r2, r3]
 80007ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	2207      	movs	r2, #7
 80007f4:	4013      	ands	r3, r2
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	220f      	movs	r2, #15
 80007fa:	409a      	lsls	r2, r3
 80007fc:	0013      	movs	r3, r2
 80007fe:	43da      	mvns	r2, r3
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	4013      	ands	r3, r2
 8000804:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	691a      	ldr	r2, [r3, #16]
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	2107      	movs	r1, #7
 800080e:	400b      	ands	r3, r1
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	409a      	lsls	r2, r3
 8000814:	0013      	movs	r3, r2
 8000816:	693a      	ldr	r2, [r7, #16]
 8000818:	4313      	orrs	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	08da      	lsrs	r2, r3, #3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3208      	adds	r2, #8
 8000824:	0092      	lsls	r2, r2, #2
 8000826:	6939      	ldr	r1, [r7, #16]
 8000828:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	2203      	movs	r2, #3
 8000836:	409a      	lsls	r2, r3
 8000838:	0013      	movs	r3, r2
 800083a:	43da      	mvns	r2, r3
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	4013      	ands	r3, r2
 8000840:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	2203      	movs	r2, #3
 8000848:	401a      	ands	r2, r3
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	409a      	lsls	r2, r3
 8000850:	0013      	movs	r3, r2
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	4313      	orrs	r3, r2
 8000856:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685a      	ldr	r2, [r3, #4]
 8000862:	23c0      	movs	r3, #192	; 0xc0
 8000864:	029b      	lsls	r3, r3, #10
 8000866:	4013      	ands	r3, r2
 8000868:	d100      	bne.n	800086c <HAL_GPIO_Init+0x174>
 800086a:	e0a0      	b.n	80009ae <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086c:	4b57      	ldr	r3, [pc, #348]	; (80009cc <HAL_GPIO_Init+0x2d4>)
 800086e:	699a      	ldr	r2, [r3, #24]
 8000870:	4b56      	ldr	r3, [pc, #344]	; (80009cc <HAL_GPIO_Init+0x2d4>)
 8000872:	2101      	movs	r1, #1
 8000874:	430a      	orrs	r2, r1
 8000876:	619a      	str	r2, [r3, #24]
 8000878:	4b54      	ldr	r3, [pc, #336]	; (80009cc <HAL_GPIO_Init+0x2d4>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	2201      	movs	r2, #1
 800087e:	4013      	ands	r3, r2
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000884:	4a52      	ldr	r2, [pc, #328]	; (80009d0 <HAL_GPIO_Init+0x2d8>)
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	089b      	lsrs	r3, r3, #2
 800088a:	3302      	adds	r3, #2
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	589b      	ldr	r3, [r3, r2]
 8000890:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	2203      	movs	r2, #3
 8000896:	4013      	ands	r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	220f      	movs	r2, #15
 800089c:	409a      	lsls	r2, r3
 800089e:	0013      	movs	r3, r2
 80008a0:	43da      	mvns	r2, r3
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	4013      	ands	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	2390      	movs	r3, #144	; 0x90
 80008ac:	05db      	lsls	r3, r3, #23
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d019      	beq.n	80008e6 <HAL_GPIO_Init+0x1ee>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a47      	ldr	r2, [pc, #284]	; (80009d4 <HAL_GPIO_Init+0x2dc>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d013      	beq.n	80008e2 <HAL_GPIO_Init+0x1ea>
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4a46      	ldr	r2, [pc, #280]	; (80009d8 <HAL_GPIO_Init+0x2e0>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d00d      	beq.n	80008de <HAL_GPIO_Init+0x1e6>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4a45      	ldr	r2, [pc, #276]	; (80009dc <HAL_GPIO_Init+0x2e4>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d007      	beq.n	80008da <HAL_GPIO_Init+0x1e2>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a44      	ldr	r2, [pc, #272]	; (80009e0 <HAL_GPIO_Init+0x2e8>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d101      	bne.n	80008d6 <HAL_GPIO_Init+0x1de>
 80008d2:	2304      	movs	r3, #4
 80008d4:	e008      	b.n	80008e8 <HAL_GPIO_Init+0x1f0>
 80008d6:	2305      	movs	r3, #5
 80008d8:	e006      	b.n	80008e8 <HAL_GPIO_Init+0x1f0>
 80008da:	2303      	movs	r3, #3
 80008dc:	e004      	b.n	80008e8 <HAL_GPIO_Init+0x1f0>
 80008de:	2302      	movs	r3, #2
 80008e0:	e002      	b.n	80008e8 <HAL_GPIO_Init+0x1f0>
 80008e2:	2301      	movs	r3, #1
 80008e4:	e000      	b.n	80008e8 <HAL_GPIO_Init+0x1f0>
 80008e6:	2300      	movs	r3, #0
 80008e8:	697a      	ldr	r2, [r7, #20]
 80008ea:	2103      	movs	r1, #3
 80008ec:	400a      	ands	r2, r1
 80008ee:	0092      	lsls	r2, r2, #2
 80008f0:	4093      	lsls	r3, r2
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80008f8:	4935      	ldr	r1, [pc, #212]	; (80009d0 <HAL_GPIO_Init+0x2d8>)
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	089b      	lsrs	r3, r3, #2
 80008fe:	3302      	adds	r3, #2
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000906:	4b37      	ldr	r3, [pc, #220]	; (80009e4 <HAL_GPIO_Init+0x2ec>)
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	43da      	mvns	r2, r3
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	4013      	ands	r3, r2
 8000914:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685a      	ldr	r2, [r3, #4]
 800091a:	2380      	movs	r3, #128	; 0x80
 800091c:	035b      	lsls	r3, r3, #13
 800091e:	4013      	ands	r3, r2
 8000920:	d003      	beq.n	800092a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	4313      	orrs	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800092a:	4b2e      	ldr	r3, [pc, #184]	; (80009e4 <HAL_GPIO_Init+0x2ec>)
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000930:	4b2c      	ldr	r3, [pc, #176]	; (80009e4 <HAL_GPIO_Init+0x2ec>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	43da      	mvns	r2, r3
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685a      	ldr	r2, [r3, #4]
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	039b      	lsls	r3, r3, #14
 8000948:	4013      	ands	r3, r2
 800094a:	d003      	beq.n	8000954 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	4313      	orrs	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000954:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <HAL_GPIO_Init+0x2ec>)
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800095a:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <HAL_GPIO_Init+0x2ec>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	43da      	mvns	r2, r3
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	4013      	ands	r3, r2
 8000968:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685a      	ldr	r2, [r3, #4]
 800096e:	2380      	movs	r3, #128	; 0x80
 8000970:	029b      	lsls	r3, r3, #10
 8000972:	4013      	ands	r3, r2
 8000974:	d003      	beq.n	800097e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	4313      	orrs	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800097e:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <HAL_GPIO_Init+0x2ec>)
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000984:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <HAL_GPIO_Init+0x2ec>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	43da      	mvns	r2, r3
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	4013      	ands	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685a      	ldr	r2, [r3, #4]
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	025b      	lsls	r3, r3, #9
 800099c:	4013      	ands	r3, r2
 800099e:	d003      	beq.n	80009a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80009a8:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <HAL_GPIO_Init+0x2ec>)
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	3301      	adds	r3, #1
 80009b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	40da      	lsrs	r2, r3
 80009bc:	1e13      	subs	r3, r2, #0
 80009be:	d000      	beq.n	80009c2 <HAL_GPIO_Init+0x2ca>
 80009c0:	e6a2      	b.n	8000708 <HAL_GPIO_Init+0x10>
  } 
}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b006      	add	sp, #24
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40010000 	.word	0x40010000
 80009d4:	48000400 	.word	0x48000400
 80009d8:	48000800 	.word	0x48000800
 80009dc:	48000c00 	.word	0x48000c00
 80009e0:	48001000 	.word	0x48001000
 80009e4:	40010400 	.word	0x40010400

080009e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	0008      	movs	r0, r1
 80009f2:	0011      	movs	r1, r2
 80009f4:	1cbb      	adds	r3, r7, #2
 80009f6:	1c02      	adds	r2, r0, #0
 80009f8:	801a      	strh	r2, [r3, #0]
 80009fa:	1c7b      	adds	r3, r7, #1
 80009fc:	1c0a      	adds	r2, r1, #0
 80009fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a00:	1c7b      	adds	r3, r7, #1
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d004      	beq.n	8000a12 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a08:	1cbb      	adds	r3, r7, #2
 8000a0a:	881a      	ldrh	r2, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a10:	e003      	b.n	8000a1a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a12:	1cbb      	adds	r3, r7, #2
 8000a14:	881a      	ldrh	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b002      	add	sp, #8
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b084      	sub	sp, #16
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
 8000a2a:	000a      	movs	r2, r1
 8000a2c:	1cbb      	adds	r3, r7, #2
 8000a2e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000a36:	1cbb      	adds	r3, r7, #2
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	041a      	lsls	r2, r3, #16
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	43db      	mvns	r3, r3
 8000a44:	1cb9      	adds	r1, r7, #2
 8000a46:	8809      	ldrh	r1, [r1, #0]
 8000a48:	400b      	ands	r3, r1
 8000a4a:	431a      	orrs	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	619a      	str	r2, [r3, #24]
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b004      	add	sp, #16
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d102      	bne.n	8000a6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	f000 fb76 	bl	8001158 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2201      	movs	r2, #1
 8000a72:	4013      	ands	r3, r2
 8000a74:	d100      	bne.n	8000a78 <HAL_RCC_OscConfig+0x20>
 8000a76:	e08e      	b.n	8000b96 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a78:	4bc5      	ldr	r3, [pc, #788]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	220c      	movs	r2, #12
 8000a7e:	4013      	ands	r3, r2
 8000a80:	2b04      	cmp	r3, #4
 8000a82:	d00e      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a84:	4bc2      	ldr	r3, [pc, #776]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	220c      	movs	r2, #12
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	2b08      	cmp	r3, #8
 8000a8e:	d117      	bne.n	8000ac0 <HAL_RCC_OscConfig+0x68>
 8000a90:	4bbf      	ldr	r3, [pc, #764]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000a92:	685a      	ldr	r2, [r3, #4]
 8000a94:	23c0      	movs	r3, #192	; 0xc0
 8000a96:	025b      	lsls	r3, r3, #9
 8000a98:	401a      	ands	r2, r3
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	025b      	lsls	r3, r3, #9
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d10e      	bne.n	8000ac0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aa2:	4bbb      	ldr	r3, [pc, #748]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	029b      	lsls	r3, r3, #10
 8000aaa:	4013      	ands	r3, r2
 8000aac:	d100      	bne.n	8000ab0 <HAL_RCC_OscConfig+0x58>
 8000aae:	e071      	b.n	8000b94 <HAL_RCC_OscConfig+0x13c>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d000      	beq.n	8000aba <HAL_RCC_OscConfig+0x62>
 8000ab8:	e06c      	b.n	8000b94 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	f000 fb4c 	bl	8001158 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d107      	bne.n	8000ad8 <HAL_RCC_OscConfig+0x80>
 8000ac8:	4bb1      	ldr	r3, [pc, #708]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4bb0      	ldr	r3, [pc, #704]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000ace:	2180      	movs	r1, #128	; 0x80
 8000ad0:	0249      	lsls	r1, r1, #9
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	e02f      	b.n	8000b38 <HAL_RCC_OscConfig+0xe0>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d10c      	bne.n	8000afa <HAL_RCC_OscConfig+0xa2>
 8000ae0:	4bab      	ldr	r3, [pc, #684]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4baa      	ldr	r3, [pc, #680]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000ae6:	49ab      	ldr	r1, [pc, #684]	; (8000d94 <HAL_RCC_OscConfig+0x33c>)
 8000ae8:	400a      	ands	r2, r1
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	4ba8      	ldr	r3, [pc, #672]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4ba7      	ldr	r3, [pc, #668]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000af2:	49a9      	ldr	r1, [pc, #676]	; (8000d98 <HAL_RCC_OscConfig+0x340>)
 8000af4:	400a      	ands	r2, r1
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	e01e      	b.n	8000b38 <HAL_RCC_OscConfig+0xe0>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	2b05      	cmp	r3, #5
 8000b00:	d10e      	bne.n	8000b20 <HAL_RCC_OscConfig+0xc8>
 8000b02:	4ba3      	ldr	r3, [pc, #652]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	4ba2      	ldr	r3, [pc, #648]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000b08:	2180      	movs	r1, #128	; 0x80
 8000b0a:	02c9      	lsls	r1, r1, #11
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	4b9f      	ldr	r3, [pc, #636]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	4b9e      	ldr	r3, [pc, #632]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000b16:	2180      	movs	r1, #128	; 0x80
 8000b18:	0249      	lsls	r1, r1, #9
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	e00b      	b.n	8000b38 <HAL_RCC_OscConfig+0xe0>
 8000b20:	4b9b      	ldr	r3, [pc, #620]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b9a      	ldr	r3, [pc, #616]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000b26:	499b      	ldr	r1, [pc, #620]	; (8000d94 <HAL_RCC_OscConfig+0x33c>)
 8000b28:	400a      	ands	r2, r1
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	4b98      	ldr	r3, [pc, #608]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b97      	ldr	r3, [pc, #604]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000b32:	4999      	ldr	r1, [pc, #612]	; (8000d98 <HAL_RCC_OscConfig+0x340>)
 8000b34:	400a      	ands	r2, r1
 8000b36:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d014      	beq.n	8000b6a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b40:	f7ff fd1c 	bl	800057c <HAL_GetTick>
 8000b44:	0003      	movs	r3, r0
 8000b46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b48:	e008      	b.n	8000b5c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b4a:	f7ff fd17 	bl	800057c <HAL_GetTick>
 8000b4e:	0002      	movs	r2, r0
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	2b64      	cmp	r3, #100	; 0x64
 8000b56:	d901      	bls.n	8000b5c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	e2fd      	b.n	8001158 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b5c:	4b8c      	ldr	r3, [pc, #560]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	029b      	lsls	r3, r3, #10
 8000b64:	4013      	ands	r3, r2
 8000b66:	d0f0      	beq.n	8000b4a <HAL_RCC_OscConfig+0xf2>
 8000b68:	e015      	b.n	8000b96 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b6a:	f7ff fd07 	bl	800057c <HAL_GetTick>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b72:	e008      	b.n	8000b86 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b74:	f7ff fd02 	bl	800057c <HAL_GetTick>
 8000b78:	0002      	movs	r2, r0
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	2b64      	cmp	r3, #100	; 0x64
 8000b80:	d901      	bls.n	8000b86 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000b82:	2303      	movs	r3, #3
 8000b84:	e2e8      	b.n	8001158 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b86:	4b82      	ldr	r3, [pc, #520]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	029b      	lsls	r3, r3, #10
 8000b8e:	4013      	ands	r3, r2
 8000b90:	d1f0      	bne.n	8000b74 <HAL_RCC_OscConfig+0x11c>
 8000b92:	e000      	b.n	8000b96 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b94:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	d100      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x14a>
 8000ba0:	e06c      	b.n	8000c7c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ba2:	4b7b      	ldr	r3, [pc, #492]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	4013      	ands	r3, r2
 8000baa:	d00e      	beq.n	8000bca <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bac:	4b78      	ldr	r3, [pc, #480]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	220c      	movs	r2, #12
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	2b08      	cmp	r3, #8
 8000bb6:	d11f      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x1a0>
 8000bb8:	4b75      	ldr	r3, [pc, #468]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000bba:	685a      	ldr	r2, [r3, #4]
 8000bbc:	23c0      	movs	r3, #192	; 0xc0
 8000bbe:	025b      	lsls	r3, r3, #9
 8000bc0:	401a      	ands	r2, r3
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	021b      	lsls	r3, r3, #8
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d116      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bca:	4b71      	ldr	r3, [pc, #452]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2202      	movs	r2, #2
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	d005      	beq.n	8000be0 <HAL_RCC_OscConfig+0x188>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d001      	beq.n	8000be0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e2bb      	b.n	8001158 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000be0:	4b6b      	ldr	r3, [pc, #428]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	22f8      	movs	r2, #248	; 0xf8
 8000be6:	4393      	bics	r3, r2
 8000be8:	0019      	movs	r1, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	691b      	ldr	r3, [r3, #16]
 8000bee:	00da      	lsls	r2, r3, #3
 8000bf0:	4b67      	ldr	r3, [pc, #412]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bf6:	e041      	b.n	8000c7c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d024      	beq.n	8000c4a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c00:	4b63      	ldr	r3, [pc, #396]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b62      	ldr	r3, [pc, #392]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000c06:	2101      	movs	r1, #1
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c0c:	f7ff fcb6 	bl	800057c <HAL_GetTick>
 8000c10:	0003      	movs	r3, r0
 8000c12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c14:	e008      	b.n	8000c28 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c16:	f7ff fcb1 	bl	800057c <HAL_GetTick>
 8000c1a:	0002      	movs	r2, r0
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d901      	bls.n	8000c28 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000c24:	2303      	movs	r3, #3
 8000c26:	e297      	b.n	8001158 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c28:	4b59      	ldr	r3, [pc, #356]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	4013      	ands	r3, r2
 8000c30:	d0f1      	beq.n	8000c16 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c32:	4b57      	ldr	r3, [pc, #348]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	22f8      	movs	r2, #248	; 0xf8
 8000c38:	4393      	bics	r3, r2
 8000c3a:	0019      	movs	r1, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	691b      	ldr	r3, [r3, #16]
 8000c40:	00da      	lsls	r2, r3, #3
 8000c42:	4b53      	ldr	r3, [pc, #332]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000c44:	430a      	orrs	r2, r1
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	e018      	b.n	8000c7c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c4a:	4b51      	ldr	r3, [pc, #324]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b50      	ldr	r3, [pc, #320]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000c50:	2101      	movs	r1, #1
 8000c52:	438a      	bics	r2, r1
 8000c54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c56:	f7ff fc91 	bl	800057c <HAL_GetTick>
 8000c5a:	0003      	movs	r3, r0
 8000c5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c5e:	e008      	b.n	8000c72 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c60:	f7ff fc8c 	bl	800057c <HAL_GetTick>
 8000c64:	0002      	movs	r2, r0
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d901      	bls.n	8000c72 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	e272      	b.n	8001158 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c72:	4b47      	ldr	r3, [pc, #284]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2202      	movs	r2, #2
 8000c78:	4013      	ands	r3, r2
 8000c7a:	d1f1      	bne.n	8000c60 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2208      	movs	r2, #8
 8000c82:	4013      	ands	r3, r2
 8000c84:	d036      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d019      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c8e:	4b40      	ldr	r3, [pc, #256]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c92:	4b3f      	ldr	r3, [pc, #252]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000c94:	2101      	movs	r1, #1
 8000c96:	430a      	orrs	r2, r1
 8000c98:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c9a:	f7ff fc6f 	bl	800057c <HAL_GetTick>
 8000c9e:	0003      	movs	r3, r0
 8000ca0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ca4:	f7ff fc6a 	bl	800057c <HAL_GetTick>
 8000ca8:	0002      	movs	r2, r0
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e250      	b.n	8001158 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cb6:	4b36      	ldr	r3, [pc, #216]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cba:	2202      	movs	r2, #2
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	d0f1      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x24c>
 8000cc0:	e018      	b.n	8000cf4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cc2:	4b33      	ldr	r3, [pc, #204]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cc6:	4b32      	ldr	r3, [pc, #200]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000cc8:	2101      	movs	r1, #1
 8000cca:	438a      	bics	r2, r1
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cce:	f7ff fc55 	bl	800057c <HAL_GetTick>
 8000cd2:	0003      	movs	r3, r0
 8000cd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cd6:	e008      	b.n	8000cea <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cd8:	f7ff fc50 	bl	800057c <HAL_GetTick>
 8000cdc:	0002      	movs	r2, r0
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d901      	bls.n	8000cea <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	e236      	b.n	8001158 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cea:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cee:	2202      	movs	r2, #2
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	d1f1      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2204      	movs	r2, #4
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	d100      	bne.n	8000d00 <HAL_RCC_OscConfig+0x2a8>
 8000cfe:	e0b5      	b.n	8000e6c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d00:	201f      	movs	r0, #31
 8000d02:	183b      	adds	r3, r7, r0
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d08:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000d0a:	69da      	ldr	r2, [r3, #28]
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	055b      	lsls	r3, r3, #21
 8000d10:	4013      	ands	r3, r2
 8000d12:	d110      	bne.n	8000d36 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d14:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000d16:	69da      	ldr	r2, [r3, #28]
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000d1a:	2180      	movs	r1, #128	; 0x80
 8000d1c:	0549      	lsls	r1, r1, #21
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	61da      	str	r2, [r3, #28]
 8000d22:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000d24:	69da      	ldr	r2, [r3, #28]
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	055b      	lsls	r3, r3, #21
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d30:	183b      	adds	r3, r7, r0
 8000d32:	2201      	movs	r2, #1
 8000d34:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d36:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <HAL_RCC_OscConfig+0x344>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	4013      	ands	r3, r2
 8000d40:	d11a      	bne.n	8000d78 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <HAL_RCC_OscConfig+0x344>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <HAL_RCC_OscConfig+0x344>)
 8000d48:	2180      	movs	r1, #128	; 0x80
 8000d4a:	0049      	lsls	r1, r1, #1
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d50:	f7ff fc14 	bl	800057c <HAL_GetTick>
 8000d54:	0003      	movs	r3, r0
 8000d56:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d58:	e008      	b.n	8000d6c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d5a:	f7ff fc0f 	bl	800057c <HAL_GetTick>
 8000d5e:	0002      	movs	r2, r0
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	2b64      	cmp	r3, #100	; 0x64
 8000d66:	d901      	bls.n	8000d6c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e1f5      	b.n	8001158 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <HAL_RCC_OscConfig+0x344>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	4013      	ands	r3, r2
 8000d76:	d0f0      	beq.n	8000d5a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d10f      	bne.n	8000da0 <HAL_RCC_OscConfig+0x348>
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000d82:	6a1a      	ldr	r2, [r3, #32]
 8000d84:	4b02      	ldr	r3, [pc, #8]	; (8000d90 <HAL_RCC_OscConfig+0x338>)
 8000d86:	2101      	movs	r1, #1
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	621a      	str	r2, [r3, #32]
 8000d8c:	e036      	b.n	8000dfc <HAL_RCC_OscConfig+0x3a4>
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	40021000 	.word	0x40021000
 8000d94:	fffeffff 	.word	0xfffeffff
 8000d98:	fffbffff 	.word	0xfffbffff
 8000d9c:	40007000 	.word	0x40007000
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d10c      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x36a>
 8000da8:	4bca      	ldr	r3, [pc, #808]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000daa:	6a1a      	ldr	r2, [r3, #32]
 8000dac:	4bc9      	ldr	r3, [pc, #804]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000dae:	2101      	movs	r1, #1
 8000db0:	438a      	bics	r2, r1
 8000db2:	621a      	str	r2, [r3, #32]
 8000db4:	4bc7      	ldr	r3, [pc, #796]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000db6:	6a1a      	ldr	r2, [r3, #32]
 8000db8:	4bc6      	ldr	r3, [pc, #792]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000dba:	2104      	movs	r1, #4
 8000dbc:	438a      	bics	r2, r1
 8000dbe:	621a      	str	r2, [r3, #32]
 8000dc0:	e01c      	b.n	8000dfc <HAL_RCC_OscConfig+0x3a4>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	2b05      	cmp	r3, #5
 8000dc8:	d10c      	bne.n	8000de4 <HAL_RCC_OscConfig+0x38c>
 8000dca:	4bc2      	ldr	r3, [pc, #776]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000dcc:	6a1a      	ldr	r2, [r3, #32]
 8000dce:	4bc1      	ldr	r3, [pc, #772]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	621a      	str	r2, [r3, #32]
 8000dd6:	4bbf      	ldr	r3, [pc, #764]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000dd8:	6a1a      	ldr	r2, [r3, #32]
 8000dda:	4bbe      	ldr	r3, [pc, #760]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000ddc:	2101      	movs	r1, #1
 8000dde:	430a      	orrs	r2, r1
 8000de0:	621a      	str	r2, [r3, #32]
 8000de2:	e00b      	b.n	8000dfc <HAL_RCC_OscConfig+0x3a4>
 8000de4:	4bbb      	ldr	r3, [pc, #748]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000de6:	6a1a      	ldr	r2, [r3, #32]
 8000de8:	4bba      	ldr	r3, [pc, #744]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000dea:	2101      	movs	r1, #1
 8000dec:	438a      	bics	r2, r1
 8000dee:	621a      	str	r2, [r3, #32]
 8000df0:	4bb8      	ldr	r3, [pc, #736]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000df2:	6a1a      	ldr	r2, [r3, #32]
 8000df4:	4bb7      	ldr	r3, [pc, #732]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000df6:	2104      	movs	r1, #4
 8000df8:	438a      	bics	r2, r1
 8000dfa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d014      	beq.n	8000e2e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e04:	f7ff fbba 	bl	800057c <HAL_GetTick>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e0c:	e009      	b.n	8000e22 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e0e:	f7ff fbb5 	bl	800057c <HAL_GetTick>
 8000e12:	0002      	movs	r2, r0
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	4aaf      	ldr	r2, [pc, #700]	; (80010d8 <HAL_RCC_OscConfig+0x680>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e19a      	b.n	8001158 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e22:	4bac      	ldr	r3, [pc, #688]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000e24:	6a1b      	ldr	r3, [r3, #32]
 8000e26:	2202      	movs	r2, #2
 8000e28:	4013      	ands	r3, r2
 8000e2a:	d0f0      	beq.n	8000e0e <HAL_RCC_OscConfig+0x3b6>
 8000e2c:	e013      	b.n	8000e56 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e2e:	f7ff fba5 	bl	800057c <HAL_GetTick>
 8000e32:	0003      	movs	r3, r0
 8000e34:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e36:	e009      	b.n	8000e4c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e38:	f7ff fba0 	bl	800057c <HAL_GetTick>
 8000e3c:	0002      	movs	r2, r0
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	4aa5      	ldr	r2, [pc, #660]	; (80010d8 <HAL_RCC_OscConfig+0x680>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d901      	bls.n	8000e4c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e185      	b.n	8001158 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e4c:	4ba1      	ldr	r3, [pc, #644]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000e4e:	6a1b      	ldr	r3, [r3, #32]
 8000e50:	2202      	movs	r2, #2
 8000e52:	4013      	ands	r3, r2
 8000e54:	d1f0      	bne.n	8000e38 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e56:	231f      	movs	r3, #31
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d105      	bne.n	8000e6c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e60:	4b9c      	ldr	r3, [pc, #624]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000e62:	69da      	ldr	r2, [r3, #28]
 8000e64:	4b9b      	ldr	r3, [pc, #620]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000e66:	499d      	ldr	r1, [pc, #628]	; (80010dc <HAL_RCC_OscConfig+0x684>)
 8000e68:	400a      	ands	r2, r1
 8000e6a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2210      	movs	r2, #16
 8000e72:	4013      	ands	r3, r2
 8000e74:	d063      	beq.n	8000f3e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d12a      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e7e:	4b95      	ldr	r3, [pc, #596]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e82:	4b94      	ldr	r3, [pc, #592]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000e84:	2104      	movs	r1, #4
 8000e86:	430a      	orrs	r2, r1
 8000e88:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000e8a:	4b92      	ldr	r3, [pc, #584]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e8e:	4b91      	ldr	r3, [pc, #580]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000e90:	2101      	movs	r1, #1
 8000e92:	430a      	orrs	r2, r1
 8000e94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e96:	f7ff fb71 	bl	800057c <HAL_GetTick>
 8000e9a:	0003      	movs	r3, r0
 8000e9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ea0:	f7ff fb6c 	bl	800057c <HAL_GetTick>
 8000ea4:	0002      	movs	r2, r0
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e152      	b.n	8001158 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000eb2:	4b88      	ldr	r3, [pc, #544]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	4013      	ands	r3, r2
 8000eba:	d0f1      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ebc:	4b85      	ldr	r3, [pc, #532]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec0:	22f8      	movs	r2, #248	; 0xf8
 8000ec2:	4393      	bics	r3, r2
 8000ec4:	0019      	movs	r1, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	00da      	lsls	r2, r3, #3
 8000ecc:	4b81      	ldr	r3, [pc, #516]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ed2:	e034      	b.n	8000f3e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	3305      	adds	r3, #5
 8000eda:	d111      	bne.n	8000f00 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000edc:	4b7d      	ldr	r3, [pc, #500]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ee0:	4b7c      	ldr	r3, [pc, #496]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	438a      	bics	r2, r1
 8000ee6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ee8:	4b7a      	ldr	r3, [pc, #488]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eec:	22f8      	movs	r2, #248	; 0xf8
 8000eee:	4393      	bics	r3, r2
 8000ef0:	0019      	movs	r1, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	00da      	lsls	r2, r3, #3
 8000ef8:	4b76      	ldr	r3, [pc, #472]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000efa:	430a      	orrs	r2, r1
 8000efc:	635a      	str	r2, [r3, #52]	; 0x34
 8000efe:	e01e      	b.n	8000f3e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f00:	4b74      	ldr	r3, [pc, #464]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f04:	4b73      	ldr	r3, [pc, #460]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000f06:	2104      	movs	r1, #4
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000f0c:	4b71      	ldr	r3, [pc, #452]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f10:	4b70      	ldr	r3, [pc, #448]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000f12:	2101      	movs	r1, #1
 8000f14:	438a      	bics	r2, r1
 8000f16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f18:	f7ff fb30 	bl	800057c <HAL_GetTick>
 8000f1c:	0003      	movs	r3, r0
 8000f1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f20:	e008      	b.n	8000f34 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f22:	f7ff fb2b 	bl	800057c <HAL_GetTick>
 8000f26:	0002      	movs	r2, r0
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d901      	bls.n	8000f34 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e111      	b.n	8001158 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f34:	4b67      	ldr	r3, [pc, #412]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f38:	2202      	movs	r2, #2
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	d1f1      	bne.n	8000f22 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2220      	movs	r2, #32
 8000f44:	4013      	ands	r3, r2
 8000f46:	d05c      	beq.n	8001002 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000f48:	4b62      	ldr	r3, [pc, #392]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	220c      	movs	r2, #12
 8000f4e:	4013      	ands	r3, r2
 8000f50:	2b0c      	cmp	r3, #12
 8000f52:	d00e      	beq.n	8000f72 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000f54:	4b5f      	ldr	r3, [pc, #380]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	220c      	movs	r2, #12
 8000f5a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000f5c:	2b08      	cmp	r3, #8
 8000f5e:	d114      	bne.n	8000f8a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000f60:	4b5c      	ldr	r3, [pc, #368]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	23c0      	movs	r3, #192	; 0xc0
 8000f66:	025b      	lsls	r3, r3, #9
 8000f68:	401a      	ands	r2, r3
 8000f6a:	23c0      	movs	r3, #192	; 0xc0
 8000f6c:	025b      	lsls	r3, r3, #9
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d10b      	bne.n	8000f8a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000f72:	4b58      	ldr	r3, [pc, #352]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	029b      	lsls	r3, r3, #10
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d040      	beq.n	8001000 <HAL_RCC_OscConfig+0x5a8>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a1b      	ldr	r3, [r3, #32]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d03c      	beq.n	8001000 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e0e6      	b.n	8001158 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a1b      	ldr	r3, [r3, #32]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d01b      	beq.n	8000fca <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8000f92:	4b50      	ldr	r3, [pc, #320]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f96:	4b4f      	ldr	r3, [pc, #316]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000f98:	2180      	movs	r1, #128	; 0x80
 8000f9a:	0249      	lsls	r1, r1, #9
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa0:	f7ff faec 	bl	800057c <HAL_GetTick>
 8000fa4:	0003      	movs	r3, r0
 8000fa6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000fa8:	e008      	b.n	8000fbc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000faa:	f7ff fae7 	bl	800057c <HAL_GetTick>
 8000fae:	0002      	movs	r2, r0
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d901      	bls.n	8000fbc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e0cd      	b.n	8001158 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000fbc:	4b45      	ldr	r3, [pc, #276]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000fbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	029b      	lsls	r3, r3, #10
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	d0f0      	beq.n	8000faa <HAL_RCC_OscConfig+0x552>
 8000fc8:	e01b      	b.n	8001002 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8000fca:	4b42      	ldr	r3, [pc, #264]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fce:	4b41      	ldr	r3, [pc, #260]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000fd0:	4943      	ldr	r1, [pc, #268]	; (80010e0 <HAL_RCC_OscConfig+0x688>)
 8000fd2:	400a      	ands	r2, r1
 8000fd4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd6:	f7ff fad1 	bl	800057c <HAL_GetTick>
 8000fda:	0003      	movs	r3, r0
 8000fdc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000fde:	e008      	b.n	8000ff2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000fe0:	f7ff facc 	bl	800057c <HAL_GetTick>
 8000fe4:	0002      	movs	r2, r0
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d901      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e0b2      	b.n	8001158 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000ff2:	4b38      	ldr	r3, [pc, #224]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8000ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	029b      	lsls	r3, r3, #10
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	d1f0      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x588>
 8000ffe:	e000      	b.n	8001002 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001000:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001006:	2b00      	cmp	r3, #0
 8001008:	d100      	bne.n	800100c <HAL_RCC_OscConfig+0x5b4>
 800100a:	e0a4      	b.n	8001156 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800100c:	4b31      	ldr	r3, [pc, #196]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	220c      	movs	r2, #12
 8001012:	4013      	ands	r3, r2
 8001014:	2b08      	cmp	r3, #8
 8001016:	d100      	bne.n	800101a <HAL_RCC_OscConfig+0x5c2>
 8001018:	e078      	b.n	800110c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101e:	2b02      	cmp	r3, #2
 8001020:	d14c      	bne.n	80010bc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001022:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8001028:	492e      	ldr	r1, [pc, #184]	; (80010e4 <HAL_RCC_OscConfig+0x68c>)
 800102a:	400a      	ands	r2, r1
 800102c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102e:	f7ff faa5 	bl	800057c <HAL_GetTick>
 8001032:	0003      	movs	r3, r0
 8001034:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001038:	f7ff faa0 	bl	800057c <HAL_GetTick>
 800103c:	0002      	movs	r2, r0
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e086      	b.n	8001158 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800104a:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	049b      	lsls	r3, r3, #18
 8001052:	4013      	ands	r3, r2
 8001054:	d1f0      	bne.n	8001038 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001056:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8001058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105a:	220f      	movs	r2, #15
 800105c:	4393      	bics	r3, r2
 800105e:	0019      	movs	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8001066:	430a      	orrs	r2, r1
 8001068:	62da      	str	r2, [r3, #44]	; 0x2c
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	4a1e      	ldr	r2, [pc, #120]	; (80010e8 <HAL_RCC_OscConfig+0x690>)
 8001070:	4013      	ands	r3, r2
 8001072:	0019      	movs	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107c:	431a      	orrs	r2, r3
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8001080:	430a      	orrs	r2, r1
 8001082:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 800108a:	2180      	movs	r1, #128	; 0x80
 800108c:	0449      	lsls	r1, r1, #17
 800108e:	430a      	orrs	r2, r1
 8001090:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001092:	f7ff fa73 	bl	800057c <HAL_GetTick>
 8001096:	0003      	movs	r3, r0
 8001098:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800109c:	f7ff fa6e 	bl	800057c <HAL_GetTick>
 80010a0:	0002      	movs	r2, r0
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e054      	b.n	8001158 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	049b      	lsls	r3, r3, #18
 80010b6:	4013      	ands	r3, r2
 80010b8:	d0f0      	beq.n	800109c <HAL_RCC_OscConfig+0x644>
 80010ba:	e04c      	b.n	8001156 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <HAL_RCC_OscConfig+0x67c>)
 80010c2:	4908      	ldr	r1, [pc, #32]	; (80010e4 <HAL_RCC_OscConfig+0x68c>)
 80010c4:	400a      	ands	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c8:	f7ff fa58 	bl	800057c <HAL_GetTick>
 80010cc:	0003      	movs	r3, r0
 80010ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d0:	e015      	b.n	80010fe <HAL_RCC_OscConfig+0x6a6>
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	40021000 	.word	0x40021000
 80010d8:	00001388 	.word	0x00001388
 80010dc:	efffffff 	.word	0xefffffff
 80010e0:	fffeffff 	.word	0xfffeffff
 80010e4:	feffffff 	.word	0xfeffffff
 80010e8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ec:	f7ff fa46 	bl	800057c <HAL_GetTick>
 80010f0:	0002      	movs	r2, r0
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e02c      	b.n	8001158 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <HAL_RCC_OscConfig+0x708>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	049b      	lsls	r3, r3, #18
 8001106:	4013      	ands	r3, r2
 8001108:	d1f0      	bne.n	80010ec <HAL_RCC_OscConfig+0x694>
 800110a:	e024      	b.n	8001156 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	2b01      	cmp	r3, #1
 8001112:	d101      	bne.n	8001118 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e01f      	b.n	8001158 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <HAL_RCC_OscConfig+0x708>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <HAL_RCC_OscConfig+0x708>)
 8001120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001122:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	23c0      	movs	r3, #192	; 0xc0
 8001128:	025b      	lsls	r3, r3, #9
 800112a:	401a      	ands	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001130:	429a      	cmp	r2, r3
 8001132:	d10e      	bne.n	8001152 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	220f      	movs	r2, #15
 8001138:	401a      	ands	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800113e:	429a      	cmp	r2, r3
 8001140:	d107      	bne.n	8001152 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	23f0      	movs	r3, #240	; 0xf0
 8001146:	039b      	lsls	r3, r3, #14
 8001148:	401a      	ands	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800114e:	429a      	cmp	r2, r3
 8001150:	d001      	beq.n	8001156 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001156:	2300      	movs	r3, #0
}
 8001158:	0018      	movs	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	b008      	add	sp, #32
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40021000 	.word	0x40021000

08001164 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e0bf      	b.n	80012f8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001178:	4b61      	ldr	r3, [pc, #388]	; (8001300 <HAL_RCC_ClockConfig+0x19c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2201      	movs	r2, #1
 800117e:	4013      	ands	r3, r2
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d911      	bls.n	80011aa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001186:	4b5e      	ldr	r3, [pc, #376]	; (8001300 <HAL_RCC_ClockConfig+0x19c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2201      	movs	r2, #1
 800118c:	4393      	bics	r3, r2
 800118e:	0019      	movs	r1, r3
 8001190:	4b5b      	ldr	r3, [pc, #364]	; (8001300 <HAL_RCC_ClockConfig+0x19c>)
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	430a      	orrs	r2, r1
 8001196:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001198:	4b59      	ldr	r3, [pc, #356]	; (8001300 <HAL_RCC_ClockConfig+0x19c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2201      	movs	r2, #1
 800119e:	4013      	ands	r3, r2
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d001      	beq.n	80011aa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e0a6      	b.n	80012f8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2202      	movs	r2, #2
 80011b0:	4013      	ands	r3, r2
 80011b2:	d015      	beq.n	80011e0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2204      	movs	r2, #4
 80011ba:	4013      	ands	r3, r2
 80011bc:	d006      	beq.n	80011cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80011be:	4b51      	ldr	r3, [pc, #324]	; (8001304 <HAL_RCC_ClockConfig+0x1a0>)
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	4b50      	ldr	r3, [pc, #320]	; (8001304 <HAL_RCC_ClockConfig+0x1a0>)
 80011c4:	21e0      	movs	r1, #224	; 0xe0
 80011c6:	00c9      	lsls	r1, r1, #3
 80011c8:	430a      	orrs	r2, r1
 80011ca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011cc:	4b4d      	ldr	r3, [pc, #308]	; (8001304 <HAL_RCC_ClockConfig+0x1a0>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	22f0      	movs	r2, #240	; 0xf0
 80011d2:	4393      	bics	r3, r2
 80011d4:	0019      	movs	r1, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	4b4a      	ldr	r3, [pc, #296]	; (8001304 <HAL_RCC_ClockConfig+0x1a0>)
 80011dc:	430a      	orrs	r2, r1
 80011de:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2201      	movs	r2, #1
 80011e6:	4013      	ands	r3, r2
 80011e8:	d04c      	beq.n	8001284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d107      	bne.n	8001202 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f2:	4b44      	ldr	r3, [pc, #272]	; (8001304 <HAL_RCC_ClockConfig+0x1a0>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	029b      	lsls	r3, r3, #10
 80011fa:	4013      	ands	r3, r2
 80011fc:	d120      	bne.n	8001240 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e07a      	b.n	80012f8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b02      	cmp	r3, #2
 8001208:	d107      	bne.n	800121a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800120a:	4b3e      	ldr	r3, [pc, #248]	; (8001304 <HAL_RCC_ClockConfig+0x1a0>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	049b      	lsls	r3, r3, #18
 8001212:	4013      	ands	r3, r2
 8001214:	d114      	bne.n	8001240 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e06e      	b.n	80012f8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b03      	cmp	r3, #3
 8001220:	d107      	bne.n	8001232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001222:	4b38      	ldr	r3, [pc, #224]	; (8001304 <HAL_RCC_ClockConfig+0x1a0>)
 8001224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	029b      	lsls	r3, r3, #10
 800122a:	4013      	ands	r3, r2
 800122c:	d108      	bne.n	8001240 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e062      	b.n	80012f8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001232:	4b34      	ldr	r3, [pc, #208]	; (8001304 <HAL_RCC_ClockConfig+0x1a0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2202      	movs	r2, #2
 8001238:	4013      	ands	r3, r2
 800123a:	d101      	bne.n	8001240 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e05b      	b.n	80012f8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001240:	4b30      	ldr	r3, [pc, #192]	; (8001304 <HAL_RCC_ClockConfig+0x1a0>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2203      	movs	r2, #3
 8001246:	4393      	bics	r3, r2
 8001248:	0019      	movs	r1, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <HAL_RCC_ClockConfig+0x1a0>)
 8001250:	430a      	orrs	r2, r1
 8001252:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001254:	f7ff f992 	bl	800057c <HAL_GetTick>
 8001258:	0003      	movs	r3, r0
 800125a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800125c:	e009      	b.n	8001272 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800125e:	f7ff f98d 	bl	800057c <HAL_GetTick>
 8001262:	0002      	movs	r2, r0
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	4a27      	ldr	r2, [pc, #156]	; (8001308 <HAL_RCC_ClockConfig+0x1a4>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e042      	b.n	80012f8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001272:	4b24      	ldr	r3, [pc, #144]	; (8001304 <HAL_RCC_ClockConfig+0x1a0>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	220c      	movs	r2, #12
 8001278:	401a      	ands	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	429a      	cmp	r2, r3
 8001282:	d1ec      	bne.n	800125e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001284:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <HAL_RCC_ClockConfig+0x19c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2201      	movs	r2, #1
 800128a:	4013      	ands	r3, r2
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d211      	bcs.n	80012b6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_RCC_ClockConfig+0x19c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2201      	movs	r2, #1
 8001298:	4393      	bics	r3, r2
 800129a:	0019      	movs	r1, r3
 800129c:	4b18      	ldr	r3, [pc, #96]	; (8001300 <HAL_RCC_ClockConfig+0x19c>)
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	430a      	orrs	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <HAL_RCC_ClockConfig+0x19c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2201      	movs	r2, #1
 80012aa:	4013      	ands	r3, r2
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d001      	beq.n	80012b6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e020      	b.n	80012f8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2204      	movs	r2, #4
 80012bc:	4013      	ands	r3, r2
 80012be:	d009      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80012c0:	4b10      	ldr	r3, [pc, #64]	; (8001304 <HAL_RCC_ClockConfig+0x1a0>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4a11      	ldr	r2, [pc, #68]	; (800130c <HAL_RCC_ClockConfig+0x1a8>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	0019      	movs	r1, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68da      	ldr	r2, [r3, #12]
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <HAL_RCC_ClockConfig+0x1a0>)
 80012d0:	430a      	orrs	r2, r1
 80012d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80012d4:	f000 f820 	bl	8001318 <HAL_RCC_GetSysClockFreq>
 80012d8:	0001      	movs	r1, r0
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_RCC_ClockConfig+0x1a0>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	220f      	movs	r2, #15
 80012e2:	4013      	ands	r3, r2
 80012e4:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <HAL_RCC_ClockConfig+0x1ac>)
 80012e6:	5cd3      	ldrb	r3, [r2, r3]
 80012e8:	000a      	movs	r2, r1
 80012ea:	40da      	lsrs	r2, r3
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_RCC_ClockConfig+0x1b0>)
 80012ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80012f0:	2000      	movs	r0, #0
 80012f2:	f7ff f90f 	bl	8000514 <HAL_InitTick>
  
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b004      	add	sp, #16
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40022000 	.word	0x40022000
 8001304:	40021000 	.word	0x40021000
 8001308:	00001388 	.word	0x00001388
 800130c:	fffff8ff 	.word	0xfffff8ff
 8001310:	080033d8 	.word	0x080033d8
 8001314:	20000000 	.word	0x20000000

08001318 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001332:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	220c      	movs	r2, #12
 800133c:	4013      	ands	r3, r2
 800133e:	2b0c      	cmp	r3, #12
 8001340:	d046      	beq.n	80013d0 <HAL_RCC_GetSysClockFreq+0xb8>
 8001342:	d848      	bhi.n	80013d6 <HAL_RCC_GetSysClockFreq+0xbe>
 8001344:	2b04      	cmp	r3, #4
 8001346:	d002      	beq.n	800134e <HAL_RCC_GetSysClockFreq+0x36>
 8001348:	2b08      	cmp	r3, #8
 800134a:	d003      	beq.n	8001354 <HAL_RCC_GetSysClockFreq+0x3c>
 800134c:	e043      	b.n	80013d6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800134e:	4b27      	ldr	r3, [pc, #156]	; (80013ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8001350:	613b      	str	r3, [r7, #16]
      break;
 8001352:	e043      	b.n	80013dc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	0c9b      	lsrs	r3, r3, #18
 8001358:	220f      	movs	r2, #15
 800135a:	4013      	ands	r3, r2
 800135c:	4a24      	ldr	r2, [pc, #144]	; (80013f0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800135e:	5cd3      	ldrb	r3, [r2, r3]
 8001360:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001362:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001366:	220f      	movs	r2, #15
 8001368:	4013      	ands	r3, r2
 800136a:	4a22      	ldr	r2, [pc, #136]	; (80013f4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800136c:	5cd3      	ldrb	r3, [r2, r3]
 800136e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	23c0      	movs	r3, #192	; 0xc0
 8001374:	025b      	lsls	r3, r3, #9
 8001376:	401a      	ands	r2, r3
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	025b      	lsls	r3, r3, #9
 800137c:	429a      	cmp	r2, r3
 800137e:	d109      	bne.n	8001394 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	481a      	ldr	r0, [pc, #104]	; (80013ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8001384:	f7fe fec0 	bl	8000108 <__udivsi3>
 8001388:	0003      	movs	r3, r0
 800138a:	001a      	movs	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4353      	muls	r3, r2
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	e01a      	b.n	80013ca <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	23c0      	movs	r3, #192	; 0xc0
 8001398:	025b      	lsls	r3, r3, #9
 800139a:	401a      	ands	r2, r3
 800139c:	23c0      	movs	r3, #192	; 0xc0
 800139e:	025b      	lsls	r3, r3, #9
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d109      	bne.n	80013b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80013a4:	68b9      	ldr	r1, [r7, #8]
 80013a6:	4814      	ldr	r0, [pc, #80]	; (80013f8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80013a8:	f7fe feae 	bl	8000108 <__udivsi3>
 80013ac:	0003      	movs	r3, r0
 80013ae:	001a      	movs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4353      	muls	r3, r2
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	e008      	b.n	80013ca <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80013b8:	68b9      	ldr	r1, [r7, #8]
 80013ba:	480c      	ldr	r0, [pc, #48]	; (80013ec <HAL_RCC_GetSysClockFreq+0xd4>)
 80013bc:	f7fe fea4 	bl	8000108 <__udivsi3>
 80013c0:	0003      	movs	r3, r0
 80013c2:	001a      	movs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4353      	muls	r3, r2
 80013c8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	613b      	str	r3, [r7, #16]
      break;
 80013ce:	e005      	b.n	80013dc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80013d2:	613b      	str	r3, [r7, #16]
      break;
 80013d4:	e002      	b.n	80013dc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <HAL_RCC_GetSysClockFreq+0xd4>)
 80013d8:	613b      	str	r3, [r7, #16]
      break;
 80013da:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80013dc:	693b      	ldr	r3, [r7, #16]
}
 80013de:	0018      	movs	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b006      	add	sp, #24
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	40021000 	.word	0x40021000
 80013ec:	007a1200 	.word	0x007a1200
 80013f0:	080033e8 	.word	0x080033e8
 80013f4:	080033f8 	.word	0x080033f8
 80013f8:	02dc6c00 	.word	0x02dc6c00

080013fc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3308      	adds	r3, #8
 8001408:	001a      	movs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2201      	movs	r2, #1
 8001412:	4252      	negs	r2, r2
 8001414:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3308      	adds	r3, #8
 800141a:	001a      	movs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3308      	adds	r3, #8
 8001424:	001a      	movs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001430:	46c0      	nop			; (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	b002      	add	sp, #8
 8001436:	bd80      	pop	{r7, pc}

08001438 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	46bd      	mov	sp, r7
 800144a:	b002      	add	sp, #8
 800144c:	bd80      	pop	{r7, pc}

0800144e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b084      	sub	sp, #16
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	3301      	adds	r3, #1
 8001462:	d103      	bne.n	800146c <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	e00c      	b.n	8001486 <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3308      	adds	r3, #8
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	e002      	b.n	800147a <vListInsert+0x2c>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	429a      	cmp	r2, r3
 8001484:	d2f6      	bcs.n	8001474 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	601a      	str	r2, [r3, #0]
}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	46bd      	mov	sp, r7
 80014b6:	b004      	add	sp, #16
 80014b8:	bd80      	pop	{r7, pc}

080014ba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6892      	ldr	r2, [r2, #8]
 80014d0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	6852      	ldr	r2, [r2, #4]
 80014da:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d103      	bne.n	80014ee <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	1e5a      	subs	r2, r3, #1
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
}
 8001502:	0018      	movs	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	b004      	add	sp, #16
 8001508:	bd80      	pop	{r7, pc}

0800150a <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800150a:	b5b0      	push	{r4, r5, r7, lr}
 800150c:	b084      	sub	sp, #16
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001514:	2301      	movs	r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <xQueueGenericReset+0x1c>
 8001522:	b672      	cpsid	i
 8001524:	e7fe      	b.n	8001524 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d100      	bne.n	800152e <xQueueGenericReset+0x24>
 800152c:	e06a      	b.n	8001604 <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001532:	2b00      	cmp	r3, #0
 8001534:	d066      	beq.n	8001604 <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800153e:	2400      	movs	r4, #0
 8001540:	0c15      	lsrs	r5, r2, #16
 8001542:	0c19      	lsrs	r1, r3, #16
 8001544:	b2a8      	uxth	r0, r5
 8001546:	2800      	cmp	r0, #0
 8001548:	d104      	bne.n	8001554 <xQueueGenericReset+0x4a>
 800154a:	b288      	uxth	r0, r1
 800154c:	2800      	cmp	r0, #0
 800154e:	d013      	beq.n	8001578 <xQueueGenericReset+0x6e>
 8001550:	1c10      	adds	r0, r2, #0
 8001552:	e004      	b.n	800155e <xQueueGenericReset+0x54>
 8001554:	b289      	uxth	r1, r1
 8001556:	2900      	cmp	r1, #0
 8001558:	d10d      	bne.n	8001576 <xQueueGenericReset+0x6c>
 800155a:	1c29      	adds	r1, r5, #0
 800155c:	1c18      	adds	r0, r3, #0
 800155e:	b292      	uxth	r2, r2
 8001560:	b29b      	uxth	r3, r3
 8001562:	435a      	muls	r2, r3
 8001564:	b283      	uxth	r3, r0
 8001566:	b289      	uxth	r1, r1
 8001568:	434b      	muls	r3, r1
 800156a:	0c12      	lsrs	r2, r2, #16
 800156c:	189b      	adds	r3, r3, r2
 800156e:	141b      	asrs	r3, r3, #16
 8001570:	b29b      	uxth	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d000      	beq.n	8001578 <xQueueGenericReset+0x6e>
 8001576:	2401      	movs	r4, #1
 8001578:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 800157a:	d143      	bne.n	8001604 <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 800157c:	f001 fc98 	bl	8002eb0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	434b      	muls	r3, r1
 800158e:	18d2      	adds	r2, r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	2200      	movs	r2, #0
 8001598:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015aa:	1e59      	subs	r1, r3, #1
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	434b      	muls	r3, r1
 80015b2:	18d2      	adds	r2, r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2244      	movs	r2, #68	; 0x44
 80015bc:	21ff      	movs	r1, #255	; 0xff
 80015be:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2245      	movs	r2, #69	; 0x45
 80015c4:	21ff      	movs	r1, #255	; 0xff
 80015c6:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10d      	bne.n	80015ea <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d013      	beq.n	80015fe <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	3310      	adds	r3, #16
 80015da:	0018      	movs	r0, r3
 80015dc:	f000 fee8 	bl	80023b0 <xTaskRemoveFromEventList>
 80015e0:	1e03      	subs	r3, r0, #0
 80015e2:	d00c      	beq.n	80015fe <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80015e4:	f001 fc54 	bl	8002e90 <vPortYield>
 80015e8:	e009      	b.n	80015fe <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	3310      	adds	r3, #16
 80015ee:	0018      	movs	r0, r3
 80015f0:	f7ff ff04 	bl	80013fc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	3324      	adds	r3, #36	; 0x24
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7ff feff 	bl	80013fc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80015fe:	f001 fc69 	bl	8002ed4 <vPortExitCritical>
 8001602:	e001      	b.n	8001608 <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <xQueueGenericReset+0x108>
 800160e:	b672      	cpsid	i
 8001610:	e7fe      	b.n	8001610 <xQueueGenericReset+0x106>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001612:	68fb      	ldr	r3, [r7, #12]
}
 8001614:	0018      	movs	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	b004      	add	sp, #16
 800161a:	bdb0      	pop	{r4, r5, r7, pc}

0800161c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800161c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800161e:	b08b      	sub	sp, #44	; 0x2c
 8001620:	af02      	add	r7, sp, #8
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	1dfb      	adds	r3, r7, #7
 8001628:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d047      	beq.n	80016c4 <xQueueGenericCreate+0xa8>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001634:	2000      	movs	r0, #0
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	0c19      	lsrs	r1, r3, #16
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	1c1e      	adds	r6, r3, #0
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	0c1b      	lsrs	r3, r3, #16
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	1c15      	adds	r5, r2, #0
 8001646:	b28a      	uxth	r2, r1
 8001648:	2a00      	cmp	r2, #0
 800164a:	d105      	bne.n	8001658 <xQueueGenericCreate+0x3c>
 800164c:	b29a      	uxth	r2, r3
 800164e:	2a00      	cmp	r2, #0
 8001650:	d013      	beq.n	800167a <xQueueGenericCreate+0x5e>
 8001652:	1c19      	adds	r1, r3, #0
 8001654:	1c34      	adds	r4, r6, #0
 8001656:	e003      	b.n	8001660 <xQueueGenericCreate+0x44>
 8001658:	b29b      	uxth	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10c      	bne.n	8001678 <xQueueGenericCreate+0x5c>
 800165e:	1c2c      	adds	r4, r5, #0
 8001660:	b2b3      	uxth	r3, r6
 8001662:	b2aa      	uxth	r2, r5
 8001664:	435a      	muls	r2, r3
 8001666:	b2a3      	uxth	r3, r4
 8001668:	b289      	uxth	r1, r1
 800166a:	434b      	muls	r3, r1
 800166c:	0c12      	lsrs	r2, r2, #16
 800166e:	189b      	adds	r3, r3, r2
 8001670:	141b      	asrs	r3, r3, #16
 8001672:	b29b      	uxth	r3, r3
 8001674:	2b00      	cmp	r3, #0
 8001676:	d000      	beq.n	800167a <xQueueGenericCreate+0x5e>
 8001678:	2001      	movs	r0, #1
 800167a:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800167c:	d122      	bne.n	80016c4 <xQueueGenericCreate+0xa8>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001684:	3351      	adds	r3, #81	; 0x51
 8001686:	d81d      	bhi.n	80016c4 <xQueueGenericCreate+0xa8>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	4353      	muls	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	3350      	adds	r3, #80	; 0x50
 8001694:	0018      	movs	r0, r3
 8001696:	f001 fca3 	bl	8002fe0 <pvPortMalloc>
 800169a:	0003      	movs	r3, r0
 800169c:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d014      	beq.n	80016ce <xQueueGenericCreate+0xb2>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	3350      	adds	r3, #80	; 0x50
 80016ac:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80016ae:	1dfb      	adds	r3, r7, #7
 80016b0:	781c      	ldrb	r4, [r3, #0]
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	0023      	movs	r3, r4
 80016be:	f000 f80b 	bl	80016d8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80016c2:	e004      	b.n	80016ce <xQueueGenericCreate+0xb2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <xQueueGenericCreate+0xb2>
 80016ca:	b672      	cpsid	i
 80016cc:	e7fe      	b.n	80016cc <xQueueGenericCreate+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80016ce:	69fb      	ldr	r3, [r7, #28]
    }
 80016d0:	0018      	movs	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b009      	add	sp, #36	; 0x24
 80016d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016d8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
 80016e4:	001a      	movs	r2, r3
 80016e6:	1cfb      	adds	r3, r7, #3
 80016e8:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d103      	bne.n	80016f8 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	e002      	b.n	80016fe <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	2101      	movs	r1, #1
 800170e:	0018      	movs	r0, r3
 8001710:	f7ff fefb 	bl	800150a <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	1cfa      	adds	r2, r7, #3
 8001718:	214c      	movs	r1, #76	; 0x4c
 800171a:	7812      	ldrb	r2, [r2, #0]
 800171c:	545a      	strb	r2, [r3, r1]
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	46bd      	mov	sp, r7
 8001722:	b004      	add	sp, #16
 8001724:	bd80      	pop	{r7, pc}

08001726 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b08a      	sub	sp, #40	; 0x28
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <xQueueReceive+0x1e>
 8001740:	b672      	cpsid	i
 8001742:	e7fe      	b.n	8001742 <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d103      	bne.n	8001752 <xQueueReceive+0x2c>
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <xQueueReceive+0x30>
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <xQueueReceive+0x32>
 8001756:	2300      	movs	r3, #0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <xQueueReceive+0x3a>
 800175c:	b672      	cpsid	i
 800175e:	e7fe      	b.n	800175e <xQueueReceive+0x38>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001760:	f001 f812 	bl	8002788 <xTaskGetSchedulerState>
 8001764:	1e03      	subs	r3, r0, #0
 8001766:	d102      	bne.n	800176e <xQueueReceive+0x48>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <xQueueReceive+0x4c>
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <xQueueReceive+0x4e>
 8001772:	2300      	movs	r3, #0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <xQueueReceive+0x56>
 8001778:	b672      	cpsid	i
 800177a:	e7fe      	b.n	800177a <xQueueReceive+0x54>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800177c:	f001 fb98 	bl	8002eb0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001784:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d01a      	beq.n	80017c2 <xQueueReceive+0x9c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	0011      	movs	r1, r2
 8001792:	0018      	movs	r0, r3
 8001794:	f000 f87c 	bl	8001890 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	1e5a      	subs	r2, r3, #1
 800179c:	6a3b      	ldr	r3, [r7, #32]
 800179e:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d008      	beq.n	80017ba <xQueueReceive+0x94>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80017a8:	6a3b      	ldr	r3, [r7, #32]
 80017aa:	3310      	adds	r3, #16
 80017ac:	0018      	movs	r0, r3
 80017ae:	f000 fdff 	bl	80023b0 <xTaskRemoveFromEventList>
 80017b2:	1e03      	subs	r3, r0, #0
 80017b4:	d001      	beq.n	80017ba <xQueueReceive+0x94>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80017b6:	f001 fb6b 	bl	8002e90 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80017ba:	f001 fb8b 	bl	8002ed4 <vPortExitCritical>
                return pdPASS;
 80017be:	2301      	movs	r3, #1
 80017c0:	e062      	b.n	8001888 <xQueueReceive+0x162>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d103      	bne.n	80017d0 <xQueueReceive+0xaa>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80017c8:	f001 fb84 	bl	8002ed4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80017cc:	2300      	movs	r3, #0
 80017ce:	e05b      	b.n	8001888 <xQueueReceive+0x162>
                }
                else if( xEntryTimeSet == pdFALSE )
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d106      	bne.n	80017e4 <xQueueReceive+0xbe>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80017d6:	2314      	movs	r3, #20
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	0018      	movs	r0, r3
 80017dc:	f000 feb2 	bl	8002544 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80017e0:	2301      	movs	r3, #1
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80017e4:	f001 fb76 	bl	8002ed4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80017e8:	f000 fb26 	bl	8001e38 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80017ec:	f001 fb60 	bl	8002eb0 <vPortEnterCritical>
 80017f0:	6a3b      	ldr	r3, [r7, #32]
 80017f2:	2244      	movs	r2, #68	; 0x44
 80017f4:	5c9b      	ldrb	r3, [r3, r2]
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	3301      	adds	r3, #1
 80017fa:	d103      	bne.n	8001804 <xQueueReceive+0xde>
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	2244      	movs	r2, #68	; 0x44
 8001800:	2100      	movs	r1, #0
 8001802:	5499      	strb	r1, [r3, r2]
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	2245      	movs	r2, #69	; 0x45
 8001808:	5c9b      	ldrb	r3, [r3, r2]
 800180a:	b25b      	sxtb	r3, r3
 800180c:	3301      	adds	r3, #1
 800180e:	d103      	bne.n	8001818 <xQueueReceive+0xf2>
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	2245      	movs	r2, #69	; 0x45
 8001814:	2100      	movs	r1, #0
 8001816:	5499      	strb	r1, [r3, r2]
 8001818:	f001 fb5c 	bl	8002ed4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800181c:	1d3a      	adds	r2, r7, #4
 800181e:	2314      	movs	r3, #20
 8001820:	18fb      	adds	r3, r7, r3
 8001822:	0011      	movs	r1, r2
 8001824:	0018      	movs	r0, r3
 8001826:	f000 fea1 	bl	800256c <xTaskCheckForTimeOut>
 800182a:	1e03      	subs	r3, r0, #0
 800182c:	d11e      	bne.n	800186c <xQueueReceive+0x146>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	0018      	movs	r0, r3
 8001832:	f000 f8b1 	bl	8001998 <prvIsQueueEmpty>
 8001836:	1e03      	subs	r3, r0, #0
 8001838:	d011      	beq.n	800185e <xQueueReceive+0x138>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	3324      	adds	r3, #36	; 0x24
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	0011      	movs	r1, r2
 8001842:	0018      	movs	r0, r3
 8001844:	f000 fd58 	bl	80022f8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	0018      	movs	r0, r3
 800184c:	f000 f846 	bl	80018dc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001850:	f000 fafe 	bl	8001e50 <xTaskResumeAll>
 8001854:	1e03      	subs	r3, r0, #0
 8001856:	d191      	bne.n	800177c <xQueueReceive+0x56>
                {
                    portYIELD_WITHIN_API();
 8001858:	f001 fb1a 	bl	8002e90 <vPortYield>
 800185c:	e78e      	b.n	800177c <xQueueReceive+0x56>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	0018      	movs	r0, r3
 8001862:	f000 f83b 	bl	80018dc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001866:	f000 faf3 	bl	8001e50 <xTaskResumeAll>
 800186a:	e787      	b.n	800177c <xQueueReceive+0x56>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	0018      	movs	r0, r3
 8001870:	f000 f834 	bl	80018dc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001874:	f000 faec 	bl	8001e50 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	0018      	movs	r0, r3
 800187c:	f000 f88c 	bl	8001998 <prvIsQueueEmpty>
 8001880:	1e03      	subs	r3, r0, #0
 8001882:	d100      	bne.n	8001886 <xQueueReceive+0x160>
 8001884:	e77a      	b.n	800177c <xQueueReceive+0x56>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001886:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001888:	0018      	movs	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	b00a      	add	sp, #40	; 0x28
 800188e:	bd80      	pop	{r7, pc}

08001890 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d018      	beq.n	80018d4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	18d2      	adds	r2, r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d303      	bcc.n	80018c4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68d9      	ldr	r1, [r3, #12]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	0018      	movs	r0, r3
 80018d0:	f001 fd50 	bl	8003374 <memcpy>
    }
}
 80018d4:	46c0      	nop			; (mov r8, r8)
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b002      	add	sp, #8
 80018da:	bd80      	pop	{r7, pc}

080018dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80018e4:	f001 fae4 	bl	8002eb0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80018e8:	230f      	movs	r3, #15
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	2145      	movs	r1, #69	; 0x45
 80018f0:	5c52      	ldrb	r2, [r2, r1]
 80018f2:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80018f4:	e013      	b.n	800191e <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d016      	beq.n	800192c <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3324      	adds	r3, #36	; 0x24
 8001902:	0018      	movs	r0, r3
 8001904:	f000 fd54 	bl	80023b0 <xTaskRemoveFromEventList>
 8001908:	1e03      	subs	r3, r0, #0
 800190a:	d001      	beq.n	8001910 <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800190c:	f000 fe82 	bl	8002614 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001910:	210f      	movs	r1, #15
 8001912:	187b      	adds	r3, r7, r1
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	3b01      	subs	r3, #1
 8001918:	b2da      	uxtb	r2, r3
 800191a:	187b      	adds	r3, r7, r1
 800191c:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800191e:	230f      	movs	r3, #15
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b25b      	sxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	dce5      	bgt.n	80018f6 <prvUnlockQueue+0x1a>
 800192a:	e000      	b.n	800192e <prvUnlockQueue+0x52>
                    break;
 800192c:	46c0      	nop			; (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2245      	movs	r2, #69	; 0x45
 8001932:	21ff      	movs	r1, #255	; 0xff
 8001934:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8001936:	f001 facd 	bl	8002ed4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800193a:	f001 fab9 	bl	8002eb0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800193e:	230e      	movs	r3, #14
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	2144      	movs	r1, #68	; 0x44
 8001946:	5c52      	ldrb	r2, [r2, r1]
 8001948:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800194a:	e013      	b.n	8001974 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d016      	beq.n	8001982 <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3310      	adds	r3, #16
 8001958:	0018      	movs	r0, r3
 800195a:	f000 fd29 	bl	80023b0 <xTaskRemoveFromEventList>
 800195e:	1e03      	subs	r3, r0, #0
 8001960:	d001      	beq.n	8001966 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8001962:	f000 fe57 	bl	8002614 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001966:	210e      	movs	r1, #14
 8001968:	187b      	adds	r3, r7, r1
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	3b01      	subs	r3, #1
 800196e:	b2da      	uxtb	r2, r3
 8001970:	187b      	adds	r3, r7, r1
 8001972:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001974:	230e      	movs	r3, #14
 8001976:	18fb      	adds	r3, r7, r3
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	b25b      	sxtb	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	dce5      	bgt.n	800194c <prvUnlockQueue+0x70>
 8001980:	e000      	b.n	8001984 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 8001982:	46c0      	nop			; (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2244      	movs	r2, #68	; 0x44
 8001988:	21ff      	movs	r1, #255	; 0xff
 800198a:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 800198c:	f001 faa2 	bl	8002ed4 <vPortExitCritical>
}
 8001990:	46c0      	nop			; (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	b004      	add	sp, #16
 8001996:	bd80      	pop	{r7, pc}

08001998 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80019a0:	f001 fa86 	bl	8002eb0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80019ac:	2301      	movs	r3, #1
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	e001      	b.n	80019b6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80019b6:	f001 fa8d 	bl	8002ed4 <vPortExitCritical>

    return xReturn;
 80019ba:	68fb      	ldr	r3, [r7, #12]
}
 80019bc:	0018      	movs	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	b004      	add	sp, #16
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <vQueueAddToRegistry+0x18>
 80019d8:	b672      	cpsid	i
 80019da:	e7fe      	b.n	80019da <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d025      	beq.n	8001a2e <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	e01f      	b.n	8001a28 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80019e8:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <vQueueAddToRegistry+0x84>)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	18d3      	adds	r3, r2, r3
 80019f0:	3304      	adds	r3, #4
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d105      	bne.n	8001a06 <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	00da      	lsls	r2, r3, #3
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <vQueueAddToRegistry+0x84>)
 8001a00:	18d3      	adds	r3, r2, r3
 8001a02:	60bb      	str	r3, [r7, #8]
                    break;
 8001a04:	e013      	b.n	8001a2e <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10a      	bne.n	8001a22 <vQueueAddToRegistry+0x5e>
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <vQueueAddToRegistry+0x84>)
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	00d2      	lsls	r2, r2, #3
 8001a12:	58d3      	ldr	r3, [r2, r3]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d104      	bne.n	8001a22 <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	00da      	lsls	r2, r3, #3
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <vQueueAddToRegistry+0x84>)
 8001a1e:	18d3      	adds	r3, r2, r3
 8001a20:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3301      	adds	r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b07      	cmp	r3, #7
 8001a2c:	d9dc      	bls.n	80019e8 <vQueueAddToRegistry+0x24>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8001a40:	46c0      	nop			; (mov r8, r8)
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b004      	add	sp, #16
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000040 	.word	0x20000040

08001a4c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001a5c:	f001 fa28 	bl	8002eb0 <vPortEnterCritical>
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2244      	movs	r2, #68	; 0x44
 8001a64:	5c9b      	ldrb	r3, [r3, r2]
 8001a66:	b25b      	sxtb	r3, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	d103      	bne.n	8001a74 <vQueueWaitForMessageRestricted+0x28>
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2244      	movs	r2, #68	; 0x44
 8001a70:	2100      	movs	r1, #0
 8001a72:	5499      	strb	r1, [r3, r2]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	2245      	movs	r2, #69	; 0x45
 8001a78:	5c9b      	ldrb	r3, [r3, r2]
 8001a7a:	b25b      	sxtb	r3, r3
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	d103      	bne.n	8001a88 <vQueueWaitForMessageRestricted+0x3c>
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2245      	movs	r2, #69	; 0x45
 8001a84:	2100      	movs	r1, #0
 8001a86:	5499      	strb	r1, [r3, r2]
 8001a88:	f001 fa24 	bl	8002ed4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d106      	bne.n	8001aa2 <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3324      	adds	r3, #36	; 0x24
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	68b9      	ldr	r1, [r7, #8]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f000 fc49 	bl	8002334 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f7ff ff19 	bl	80018dc <prvUnlockQueue>
    }
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	46bd      	mov	sp, r7
 8001aae:	b006      	add	sp, #24
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001ab2:	b590      	push	{r4, r7, lr}
 8001ab4:	b08d      	sub	sp, #52	; 0x34
 8001ab6:	af04      	add	r7, sp, #16
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	1dbb      	adds	r3, r7, #6
 8001ac0:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001ac2:	1dbb      	adds	r3, r7, #6
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f001 fa89 	bl	8002fe0 <pvPortMalloc>
 8001ace:	0003      	movs	r3, r0
 8001ad0:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d016      	beq.n	8001b06 <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001ad8:	2054      	movs	r0, #84	; 0x54
 8001ada:	f001 fa81 	bl	8002fe0 <pvPortMalloc>
 8001ade:	0003      	movs	r3, r0
 8001ae0:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d009      	beq.n	8001afc <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	2254      	movs	r2, #84	; 0x54
 8001aec:	2100      	movs	r1, #0
 8001aee:	0018      	movs	r0, r3
 8001af0:	f001 fc49 	bl	8003386 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	631a      	str	r2, [r3, #48]	; 0x30
 8001afa:	e006      	b.n	8001b0a <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	0018      	movs	r0, r3
 8001b00:	f001 fb16 	bl	8003130 <vPortFree>
 8001b04:	e001      	b.n	8001b0a <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d016      	beq.n	8001b3e <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001b10:	1dbb      	adds	r3, r7, #6
 8001b12:	881a      	ldrh	r2, [r3, #0]
 8001b14:	683c      	ldr	r4, [r7, #0]
 8001b16:	68b9      	ldr	r1, [r7, #8]
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	9303      	str	r3, [sp, #12]
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	9302      	str	r3, [sp, #8]
 8001b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	0023      	movs	r3, r4
 8001b2c:	f000 f810 	bl	8001b50 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	0018      	movs	r0, r3
 8001b34:	f000 f88c 	bl	8001c50 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	61bb      	str	r3, [r7, #24]
 8001b3c:	e002      	b.n	8001b44 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	425b      	negs	r3, r3
 8001b42:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001b44:	69bb      	ldr	r3, [r7, #24]
    }
 8001b46:	0018      	movs	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b009      	add	sp, #36	; 0x24
 8001b4c:	bd90      	pop	{r4, r7, pc}
	...

08001b50 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
 8001b5c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	001a      	movs	r2, r3
 8001b68:	21a5      	movs	r1, #165	; 0xa5
 8001b6a:	f001 fc0c 	bl	8003386 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4935      	ldr	r1, [pc, #212]	; (8001c4c <prvInitialiseNewTask+0xfc>)
 8001b76:	468c      	mov	ip, r1
 8001b78:	4463      	add	r3, ip
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	18d3      	adds	r3, r2, r3
 8001b7e:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	2207      	movs	r2, #7
 8001b84:	4393      	bics	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	2207      	movs	r2, #7
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d001      	beq.n	8001b94 <prvInitialiseNewTask+0x44>
 8001b90:	b672      	cpsid	i
 8001b92:	e7fe      	b.n	8001b92 <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d01f      	beq.n	8001bda <prvInitialiseNewTask+0x8a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	e013      	b.n	8001bc8 <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	18d3      	adds	r3, r2, r3
 8001ba6:	7818      	ldrb	r0, [r3, #0]
 8001ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001baa:	2134      	movs	r1, #52	; 0x34
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	18d3      	adds	r3, r2, r3
 8001bb0:	185b      	adds	r3, r3, r1
 8001bb2:	1c02      	adds	r2, r0, #0
 8001bb4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	18d3      	adds	r3, r2, r3
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d9e8      	bls.n	8001ba0 <prvInitialiseNewTask+0x50>
 8001bce:	e000      	b.n	8001bd2 <prvInitialiseNewTask+0x82>
            {
                break;
 8001bd0:	46c0      	nop			; (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd4:	2238      	movs	r2, #56	; 0x38
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d901      	bls.n	8001be4 <prvInitialiseNewTask+0x94>
 8001be0:	b672      	cpsid	i
 8001be2:	e7fe      	b.n	8001be2 <prvInitialiseNewTask+0x92>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001be4:	6a3b      	ldr	r3, [r7, #32]
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d901      	bls.n	8001bee <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001bea:	2304      	movs	r3, #4
 8001bec:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf0:	6a3a      	ldr	r2, [r7, #32]
 8001bf2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf6:	6a3a      	ldr	r2, [r7, #32]
 8001bf8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f7ff fc1a 	bl	8001438 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c06:	3318      	adds	r3, #24
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f7ff fc15 	bl	8001438 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c12:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	2205      	movs	r2, #5
 8001c18:	1ad2      	subs	r2, r2, r3
 8001c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	68f9      	ldr	r1, [r7, #12]
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f001 f8a4 	bl	8002d78 <pxPortInitialiseStack>
 8001c30:	0002      	movs	r2, r0
 8001c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c34:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <prvInitialiseNewTask+0xf2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c40:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b006      	add	sp, #24
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	3fffffff 	.word	0x3fffffff

08001c50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001c58:	f001 f92a 	bl	8002eb0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001c5c:	4b3d      	ldr	r3, [pc, #244]	; (8001d54 <prvAddNewTaskToReadyList+0x104>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	4b3c      	ldr	r3, [pc, #240]	; (8001d54 <prvAddNewTaskToReadyList+0x104>)
 8001c64:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 8001c66:	4b3c      	ldr	r3, [pc, #240]	; (8001d58 <prvAddNewTaskToReadyList+0x108>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d109      	bne.n	8001c82 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001c6e:	4b3a      	ldr	r3, [pc, #232]	; (8001d58 <prvAddNewTaskToReadyList+0x108>)
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001c74:	4b37      	ldr	r3, [pc, #220]	; (8001d54 <prvAddNewTaskToReadyList+0x104>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d110      	bne.n	8001c9e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001c7c:	f000 fce6 	bl	800264c <prvInitialiseTaskLists>
 8001c80:	e00d      	b.n	8001c9e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001c82:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <prvAddNewTaskToReadyList+0x10c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d109      	bne.n	8001c9e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001c8a:	4b33      	ldr	r3, [pc, #204]	; (8001d58 <prvAddNewTaskToReadyList+0x108>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d802      	bhi.n	8001c9e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001c98:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <prvAddNewTaskToReadyList+0x108>)
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001c9e:	4b30      	ldr	r3, [pc, #192]	; (8001d60 <prvAddNewTaskToReadyList+0x110>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	4b2e      	ldr	r3, [pc, #184]	; (8001d60 <prvAddNewTaskToReadyList+0x110>)
 8001ca6:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <prvAddNewTaskToReadyList+0x110>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb4:	4b2b      	ldr	r3, [pc, #172]	; (8001d64 <prvAddNewTaskToReadyList+0x114>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d903      	bls.n	8001cc4 <prvAddNewTaskToReadyList+0x74>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cc0:	4b28      	ldr	r3, [pc, #160]	; (8001d64 <prvAddNewTaskToReadyList+0x114>)
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cc8:	4927      	ldr	r1, [pc, #156]	; (8001d68 <prvAddNewTaskToReadyList+0x118>)
 8001cca:	0013      	movs	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	189b      	adds	r3, r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	18cb      	adds	r3, r1, r3
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	60da      	str	r2, [r3, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	3204      	adds	r2, #4
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	1d1a      	adds	r2, r3, #4
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cfe:	0013      	movs	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	189b      	adds	r3, r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4a18      	ldr	r2, [pc, #96]	; (8001d68 <prvAddNewTaskToReadyList+0x118>)
 8001d08:	189a      	adds	r2, r3, r2
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	615a      	str	r2, [r3, #20]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d12:	4915      	ldr	r1, [pc, #84]	; (8001d68 <prvAddNewTaskToReadyList+0x118>)
 8001d14:	0013      	movs	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	189b      	adds	r3, r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	585b      	ldr	r3, [r3, r1]
 8001d1e:	1c58      	adds	r0, r3, #1
 8001d20:	4911      	ldr	r1, [pc, #68]	; (8001d68 <prvAddNewTaskToReadyList+0x118>)
 8001d22:	0013      	movs	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	189b      	adds	r3, r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001d2c:	f001 f8d2 	bl	8002ed4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001d30:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <prvAddNewTaskToReadyList+0x10c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <prvAddNewTaskToReadyList+0x108>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d201      	bcs.n	8001d4a <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001d46:	f001 f8a3 	bl	8002e90 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b004      	add	sp, #16
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	20000158 	.word	0x20000158
 8001d58:	20000080 	.word	0x20000080
 8001d5c:	20000164 	.word	0x20000164
 8001d60:	20000174 	.word	0x20000174
 8001d64:	20000160 	.word	0x20000160
 8001d68:	20000084 	.word	0x20000084

08001d6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d010      	beq.n	8001da0 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <vTaskDelay+0x48>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <vTaskDelay+0x1e>
 8001d86:	b672      	cpsid	i
 8001d88:	e7fe      	b.n	8001d88 <vTaskDelay+0x1c>
            vTaskSuspendAll();
 8001d8a:	f000 f855 	bl	8001e38 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2100      	movs	r1, #0
 8001d92:	0018      	movs	r0, r3
 8001d94:	f000 fd14 	bl	80027c0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001d98:	f000 f85a 	bl	8001e50 <xTaskResumeAll>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 8001da6:	f001 f873 	bl	8002e90 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b004      	add	sp, #16
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	20000180 	.word	0x20000180

08001db8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001dbe:	4917      	ldr	r1, [pc, #92]	; (8001e1c <vTaskStartScheduler+0x64>)
 8001dc0:	4817      	ldr	r0, [pc, #92]	; (8001e20 <vTaskStartScheduler+0x68>)
 8001dc2:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <vTaskStartScheduler+0x6c>)
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	223c      	movs	r2, #60	; 0x3c
 8001dce:	f7ff fe70 	bl	8001ab2 <xTaskCreate>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d103      	bne.n	8001de4 <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 8001ddc:	f000 fd5e 	bl	800289c <xTimerCreateTimerTask>
 8001de0:	0003      	movs	r3, r0
 8001de2:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d10d      	bne.n	8001e06 <vTaskStartScheduler+0x4e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8001dea:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001dec:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <vTaskStartScheduler+0x70>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	4252      	negs	r2, r2
 8001df2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001df4:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <vTaskStartScheduler+0x74>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <vTaskStartScheduler+0x78>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001e00:	f001 f822 	bl	8002e48 <xPortStartScheduler>
 8001e04:	e004      	b.n	8001e10 <vTaskStartScheduler+0x58>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <vTaskStartScheduler+0x58>
 8001e0c:	b672      	cpsid	i
 8001e0e:	e7fe      	b.n	8001e0e <vTaskStartScheduler+0x56>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <vTaskStartScheduler+0x7c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	46c0      	nop			; (mov r8, r8)
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b002      	add	sp, #8
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	080033c0 	.word	0x080033c0
 8001e20:	08002629 	.word	0x08002629
 8001e24:	2000017c 	.word	0x2000017c
 8001e28:	20000178 	.word	0x20000178
 8001e2c:	20000164 	.word	0x20000164
 8001e30:	2000015c 	.word	0x2000015c
 8001e34:	2000000c 	.word	0x2000000c

08001e38 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <vTaskSuspendAll+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	4b02      	ldr	r3, [pc, #8]	; (8001e4c <vTaskSuspendAll+0x14>)
 8001e44:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000180 	.word	0x20000180

08001e50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001e5e:	4b68      	ldr	r3, [pc, #416]	; (8002000 <xTaskResumeAll+0x1b0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <xTaskResumeAll+0x1a>
 8001e66:	b672      	cpsid	i
 8001e68:	e7fe      	b.n	8001e68 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001e6a:	f001 f821 	bl	8002eb0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001e6e:	4b64      	ldr	r3, [pc, #400]	; (8002000 <xTaskResumeAll+0x1b0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	1e5a      	subs	r2, r3, #1
 8001e74:	4b62      	ldr	r3, [pc, #392]	; (8002000 <xTaskResumeAll+0x1b0>)
 8001e76:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e78:	4b61      	ldr	r3, [pc, #388]	; (8002000 <xTaskResumeAll+0x1b0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d000      	beq.n	8001e82 <xTaskResumeAll+0x32>
 8001e80:	e0b7      	b.n	8001ff2 <xTaskResumeAll+0x1a2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e82:	4b60      	ldr	r3, [pc, #384]	; (8002004 <xTaskResumeAll+0x1b4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d100      	bne.n	8001e8c <xTaskResumeAll+0x3c>
 8001e8a:	e0b2      	b.n	8001ff2 <xTaskResumeAll+0x1a2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e8c:	e089      	b.n	8001fa2 <xTaskResumeAll+0x152>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e8e:	4b5e      	ldr	r3, [pc, #376]	; (8002008 <xTaskResumeAll+0x1b8>)
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	6a12      	ldr	r2, [r2, #32]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	69d2      	ldr	r2, [r2, #28]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	3318      	adds	r3, #24
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d103      	bne.n	8001ec4 <xTaskResumeAll+0x74>
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	6a1a      	ldr	r2, [r3, #32]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	629a      	str	r2, [r3, #40]	; 0x28
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	1e5a      	subs	r2, r3, #1
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	68d2      	ldr	r2, [r2, #12]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	6892      	ldr	r2, [r2, #8]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d103      	bne.n	8001f02 <xTaskResumeAll+0xb2>
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2200      	movs	r2, #0
 8001f06:	615a      	str	r2, [r3, #20]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	1e5a      	subs	r2, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f16:	4b3d      	ldr	r3, [pc, #244]	; (800200c <xTaskResumeAll+0x1bc>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d903      	bls.n	8001f26 <xTaskResumeAll+0xd6>
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f22:	4b3a      	ldr	r3, [pc, #232]	; (800200c <xTaskResumeAll+0x1bc>)
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f2a:	4939      	ldr	r1, [pc, #228]	; (8002010 <xTaskResumeAll+0x1c0>)
 8001f2c:	0013      	movs	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	189b      	adds	r3, r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	18cb      	adds	r3, r1, r3
 8001f36:	3304      	adds	r3, #4
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	3204      	adds	r2, #4
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	1d1a      	adds	r2, r3, #4
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f60:	0013      	movs	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	189b      	adds	r3, r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4a29      	ldr	r2, [pc, #164]	; (8002010 <xTaskResumeAll+0x1c0>)
 8001f6a:	189a      	adds	r2, r3, r2
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	615a      	str	r2, [r3, #20]
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f74:	4926      	ldr	r1, [pc, #152]	; (8002010 <xTaskResumeAll+0x1c0>)
 8001f76:	0013      	movs	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	189b      	adds	r3, r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	585b      	ldr	r3, [r3, r1]
 8001f80:	1c58      	adds	r0, r3, #1
 8001f82:	4923      	ldr	r1, [pc, #140]	; (8002010 <xTaskResumeAll+0x1c0>)
 8001f84:	0013      	movs	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	189b      	adds	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <xTaskResumeAll+0x1c4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d302      	bcc.n	8001fa2 <xTaskResumeAll+0x152>
                    {
                        xYieldPending = pdTRUE;
 8001f9c:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <xTaskResumeAll+0x1c8>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001fa2:	4b19      	ldr	r3, [pc, #100]	; (8002008 <xTaskResumeAll+0x1b8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d000      	beq.n	8001fac <xTaskResumeAll+0x15c>
 8001faa:	e770      	b.n	8001e8e <xTaskResumeAll+0x3e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <xTaskResumeAll+0x166>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001fb2:	f000 fbcf 	bl	8002754 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001fb6:	4b19      	ldr	r3, [pc, #100]	; (800201c <xTaskResumeAll+0x1cc>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00f      	beq.n	8001fe2 <xTaskResumeAll+0x192>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001fc2:	f000 f83b 	bl	800203c <xTaskIncrementTick>
 8001fc6:	1e03      	subs	r3, r0, #0
 8001fc8:	d002      	beq.n	8001fd0 <xTaskResumeAll+0x180>
                            {
                                xYieldPending = pdTRUE;
 8001fca:	4b13      	ldr	r3, [pc, #76]	; (8002018 <xTaskResumeAll+0x1c8>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f2      	bne.n	8001fc2 <xTaskResumeAll+0x172>

                        xPendedTicks = 0;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <xTaskResumeAll+0x1cc>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <xTaskResumeAll+0x1c8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <xTaskResumeAll+0x1a2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001fea:	2301      	movs	r3, #1
 8001fec:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001fee:	f000 ff4f 	bl	8002e90 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001ff2:	f000 ff6f 	bl	8002ed4 <vPortExitCritical>

    return xAlreadyYielded;
 8001ff6:	693b      	ldr	r3, [r7, #16]
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b006      	add	sp, #24
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000180 	.word	0x20000180
 8002004:	20000158 	.word	0x20000158
 8002008:	20000118 	.word	0x20000118
 800200c:	20000160 	.word	0x20000160
 8002010:	20000084 	.word	0x20000084
 8002014:	20000080 	.word	0x20000080
 8002018:	2000016c 	.word	0x2000016c
 800201c:	20000168 	.word	0x20000168

08002020 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002026:	4b04      	ldr	r3, [pc, #16]	; (8002038 <xTaskGetTickCount+0x18>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800202c:	687b      	ldr	r3, [r7, #4]
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b002      	add	sp, #8
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	2000015c 	.word	0x2000015c

0800203c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002046:	4b78      	ldr	r3, [pc, #480]	; (8002228 <xTaskIncrementTick+0x1ec>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d000      	beq.n	8002050 <xTaskIncrementTick+0x14>
 800204e:	e0e0      	b.n	8002212 <xTaskIncrementTick+0x1d6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002050:	4b76      	ldr	r3, [pc, #472]	; (800222c <xTaskIncrementTick+0x1f0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	3301      	adds	r3, #1
 8002056:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002058:	4b74      	ldr	r3, [pc, #464]	; (800222c <xTaskIncrementTick+0x1f0>)
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d117      	bne.n	8002094 <xTaskIncrementTick+0x58>
        {
            taskSWITCH_DELAYED_LISTS();
 8002064:	4b72      	ldr	r3, [pc, #456]	; (8002230 <xTaskIncrementTick+0x1f4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <xTaskIncrementTick+0x36>
 800206e:	b672      	cpsid	i
 8002070:	e7fe      	b.n	8002070 <xTaskIncrementTick+0x34>
 8002072:	4b6f      	ldr	r3, [pc, #444]	; (8002230 <xTaskIncrementTick+0x1f4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	4b6e      	ldr	r3, [pc, #440]	; (8002234 <xTaskIncrementTick+0x1f8>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b6c      	ldr	r3, [pc, #432]	; (8002230 <xTaskIncrementTick+0x1f4>)
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	4b6c      	ldr	r3, [pc, #432]	; (8002234 <xTaskIncrementTick+0x1f8>)
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	4b6c      	ldr	r3, [pc, #432]	; (8002238 <xTaskIncrementTick+0x1fc>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	4b6a      	ldr	r3, [pc, #424]	; (8002238 <xTaskIncrementTick+0x1fc>)
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	f000 fb60 	bl	8002754 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002094:	4b69      	ldr	r3, [pc, #420]	; (800223c <xTaskIncrementTick+0x200>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	429a      	cmp	r2, r3
 800209c:	d200      	bcs.n	80020a0 <xTaskIncrementTick+0x64>
 800209e:	e0a4      	b.n	80021ea <xTaskIncrementTick+0x1ae>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020a0:	4b63      	ldr	r3, [pc, #396]	; (8002230 <xTaskIncrementTick+0x1f4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d104      	bne.n	80020b4 <xTaskIncrementTick+0x78>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020aa:	4b64      	ldr	r3, [pc, #400]	; (800223c <xTaskIncrementTick+0x200>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	4252      	negs	r2, r2
 80020b0:	601a      	str	r2, [r3, #0]
                    break;
 80020b2:	e09a      	b.n	80021ea <xTaskIncrementTick+0x1ae>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020b4:	4b5e      	ldr	r3, [pc, #376]	; (8002230 <xTaskIncrementTick+0x1f4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d203      	bcs.n	80020d4 <xTaskIncrementTick+0x98>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80020cc:	4b5b      	ldr	r3, [pc, #364]	; (800223c <xTaskIncrementTick+0x200>)
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80020d2:	e08a      	b.n	80021ea <xTaskIncrementTick+0x1ae>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	68d2      	ldr	r2, [r2, #12]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	6892      	ldr	r2, [r2, #8]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	3304      	adds	r3, #4
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d103      	bne.n	8002102 <xTaskIncrementTick+0xc6>
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	2200      	movs	r2, #0
 8002106:	615a      	str	r2, [r3, #20]
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	1e5a      	subs	r2, r3, #1
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01e      	beq.n	8002158 <xTaskIncrementTick+0x11c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	6a12      	ldr	r2, [r2, #32]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	69d2      	ldr	r2, [r2, #28]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	3318      	adds	r3, #24
 800213c:	429a      	cmp	r2, r3
 800213e:	d103      	bne.n	8002148 <xTaskIncrementTick+0x10c>
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	6a1a      	ldr	r2, [r3, #32]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	2200      	movs	r2, #0
 800214c:	629a      	str	r2, [r3, #40]	; 0x28
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	1e5a      	subs	r2, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800215c:	4b38      	ldr	r3, [pc, #224]	; (8002240 <xTaskIncrementTick+0x204>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d903      	bls.n	800216c <xTaskIncrementTick+0x130>
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002168:	4b35      	ldr	r3, [pc, #212]	; (8002240 <xTaskIncrementTick+0x204>)
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002170:	4934      	ldr	r1, [pc, #208]	; (8002244 <xTaskIncrementTick+0x208>)
 8002172:	0013      	movs	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	189b      	adds	r3, r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	18cb      	adds	r3, r1, r3
 800217c:	3304      	adds	r3, #4
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	60da      	str	r2, [r3, #12]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	3204      	adds	r2, #4
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1d1a      	adds	r2, r3, #4
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a6:	0013      	movs	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	189b      	adds	r3, r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4a25      	ldr	r2, [pc, #148]	; (8002244 <xTaskIncrementTick+0x208>)
 80021b0:	189a      	adds	r2, r3, r2
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	615a      	str	r2, [r3, #20]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ba:	4922      	ldr	r1, [pc, #136]	; (8002244 <xTaskIncrementTick+0x208>)
 80021bc:	0013      	movs	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	189b      	adds	r3, r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	585b      	ldr	r3, [r3, r1]
 80021c6:	1c58      	adds	r0, r3, #1
 80021c8:	491e      	ldr	r1, [pc, #120]	; (8002244 <xTaskIncrementTick+0x208>)
 80021ca:	0013      	movs	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	189b      	adds	r3, r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d8:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <xTaskIncrementTick+0x20c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	429a      	cmp	r2, r3
 80021e0:	d800      	bhi.n	80021e4 <xTaskIncrementTick+0x1a8>
 80021e2:	e75d      	b.n	80020a0 <xTaskIncrementTick+0x64>
                        {
                            xSwitchRequired = pdTRUE;
 80021e4:	2301      	movs	r3, #1
 80021e6:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021e8:	e75a      	b.n	80020a0 <xTaskIncrementTick+0x64>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80021ea:	4b17      	ldr	r3, [pc, #92]	; (8002248 <xTaskIncrementTick+0x20c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f0:	4914      	ldr	r1, [pc, #80]	; (8002244 <xTaskIncrementTick+0x208>)
 80021f2:	0013      	movs	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	189b      	adds	r3, r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	585b      	ldr	r3, [r3, r1]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d901      	bls.n	8002204 <xTaskIncrementTick+0x1c8>
            {
                xSwitchRequired = pdTRUE;
 8002200:	2301      	movs	r3, #1
 8002202:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <xTaskIncrementTick+0x210>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d007      	beq.n	800221c <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 800220c:	2301      	movs	r3, #1
 800220e:	61fb      	str	r3, [r7, #28]
 8002210:	e004      	b.n	800221c <xTaskIncrementTick+0x1e0>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <xTaskIncrementTick+0x214>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <xTaskIncrementTick+0x214>)
 800221a:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800221c:	69fb      	ldr	r3, [r7, #28]
}
 800221e:	0018      	movs	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	b008      	add	sp, #32
 8002224:	bd80      	pop	{r7, pc}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	20000180 	.word	0x20000180
 800222c:	2000015c 	.word	0x2000015c
 8002230:	20000110 	.word	0x20000110
 8002234:	20000114 	.word	0x20000114
 8002238:	20000170 	.word	0x20000170
 800223c:	20000178 	.word	0x20000178
 8002240:	20000160 	.word	0x20000160
 8002244:	20000084 	.word	0x20000084
 8002248:	20000080 	.word	0x20000080
 800224c:	2000016c 	.word	0x2000016c
 8002250:	20000168 	.word	0x20000168

08002254 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800225a:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <vTaskSwitchContext+0x90>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002262:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <vTaskSwitchContext+0x94>)
 8002264:	2201      	movs	r2, #1
 8002266:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002268:	e037      	b.n	80022da <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 800226a:	4b1f      	ldr	r3, [pc, #124]	; (80022e8 <vTaskSwitchContext+0x94>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002270:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <vTaskSwitchContext+0x98>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	607b      	str	r3, [r7, #4]
 8002276:	e007      	b.n	8002288 <vTaskSwitchContext+0x34>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <vTaskSwitchContext+0x2e>
 800227e:	b672      	cpsid	i
 8002280:	e7fe      	b.n	8002280 <vTaskSwitchContext+0x2c>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3b01      	subs	r3, #1
 8002286:	607b      	str	r3, [r7, #4]
 8002288:	4919      	ldr	r1, [pc, #100]	; (80022f0 <vTaskSwitchContext+0x9c>)
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	0013      	movs	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	189b      	adds	r3, r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	585b      	ldr	r3, [r3, r1]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0ee      	beq.n	8002278 <vTaskSwitchContext+0x24>
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	0013      	movs	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	189b      	adds	r3, r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <vTaskSwitchContext+0x9c>)
 80022a6:	189b      	adds	r3, r3, r2
 80022a8:	603b      	str	r3, [r7, #0]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	3308      	adds	r3, #8
 80022bc:	429a      	cmp	r2, r3
 80022be:	d104      	bne.n	80022ca <vTaskSwitchContext+0x76>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <vTaskSwitchContext+0xa0>)
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <vTaskSwitchContext+0x98>)
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	601a      	str	r2, [r3, #0]
}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	46bd      	mov	sp, r7
 80022de:	b002      	add	sp, #8
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	20000180 	.word	0x20000180
 80022e8:	2000016c 	.word	0x2000016c
 80022ec:	20000160 	.word	0x20000160
 80022f0:	20000084 	.word	0x20000084
 80022f4:	20000080 	.word	0x20000080

080022f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <vTaskPlaceOnEventList+0x14>
 8002308:	b672      	cpsid	i
 800230a:	e7fe      	b.n	800230a <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800230c:	4b08      	ldr	r3, [pc, #32]	; (8002330 <vTaskPlaceOnEventList+0x38>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	3318      	adds	r3, #24
 8002312:	001a      	movs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	0011      	movs	r1, r2
 8002318:	0018      	movs	r0, r3
 800231a:	f7ff f898 	bl	800144e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2101      	movs	r1, #1
 8002322:	0018      	movs	r0, r3
 8002324:	f000 fa4c 	bl	80027c0 <prvAddCurrentTaskToDelayedList>
}
 8002328:	46c0      	nop			; (mov r8, r8)
 800232a:	46bd      	mov	sp, r7
 800232c:	b002      	add	sp, #8
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000080 	.word	0x20000080

08002334 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <vTaskPlaceOnEventListRestricted+0x16>
 8002346:	b672      	cpsid	i
 8002348:	e7fe      	b.n	8002348 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	4b16      	ldr	r3, [pc, #88]	; (80023ac <vTaskPlaceOnEventListRestricted+0x78>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	61da      	str	r2, [r3, #28]
 8002358:	4b14      	ldr	r3, [pc, #80]	; (80023ac <vTaskPlaceOnEventListRestricted+0x78>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	6892      	ldr	r2, [r2, #8]
 8002360:	621a      	str	r2, [r3, #32]
 8002362:	4b12      	ldr	r3, [pc, #72]	; (80023ac <vTaskPlaceOnEventListRestricted+0x78>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	3218      	adds	r2, #24
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <vTaskPlaceOnEventListRestricted+0x78>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	3318      	adds	r3, #24
 8002374:	001a      	movs	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <vTaskPlaceOnEventListRestricted+0x78>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	629a      	str	r2, [r3, #40]	; 0x28
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <vTaskPlaceOnEventListRestricted+0x64>
        {
            xTicksToWait = portMAX_DELAY;
 8002392:	2301      	movs	r3, #1
 8002394:	425b      	negs	r3, r3
 8002396:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	0011      	movs	r1, r2
 800239e:	0018      	movs	r0, r3
 80023a0:	f000 fa0e 	bl	80027c0 <prvAddCurrentTaskToDelayedList>
    }
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b006      	add	sp, #24
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000080 	.word	0x20000080

080023b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <xTaskRemoveFromEventList+0x1a>
 80023c6:	b672      	cpsid	i
 80023c8:	e7fe      	b.n	80023c8 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	6a12      	ldr	r2, [r2, #32]
 80023d8:	609a      	str	r2, [r3, #8]
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	69d2      	ldr	r2, [r2, #28]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	3318      	adds	r3, #24
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d103      	bne.n	80023f8 <xTaskRemoveFromEventList+0x48>
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	6a1a      	ldr	r2, [r3, #32]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	2200      	movs	r2, #0
 80023fc:	629a      	str	r2, [r3, #40]	; 0x28
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	1e5a      	subs	r2, r3, #1
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002408:	4b48      	ldr	r3, [pc, #288]	; (800252c <xTaskRemoveFromEventList+0x17c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d15d      	bne.n	80024cc <xTaskRemoveFromEventList+0x11c>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	68d2      	ldr	r2, [r2, #12]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	6892      	ldr	r2, [r2, #8]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	3304      	adds	r3, #4
 8002432:	429a      	cmp	r2, r3
 8002434:	d103      	bne.n	800243e <xTaskRemoveFromEventList+0x8e>
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	2200      	movs	r2, #0
 8002442:	615a      	str	r2, [r3, #20]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	1e5a      	subs	r2, r3, #1
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002452:	4b37      	ldr	r3, [pc, #220]	; (8002530 <xTaskRemoveFromEventList+0x180>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d903      	bls.n	8002462 <xTaskRemoveFromEventList+0xb2>
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245e:	4b34      	ldr	r3, [pc, #208]	; (8002530 <xTaskRemoveFromEventList+0x180>)
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002466:	4933      	ldr	r1, [pc, #204]	; (8002534 <xTaskRemoveFromEventList+0x184>)
 8002468:	0013      	movs	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	189b      	adds	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	18cb      	adds	r3, r1, r3
 8002472:	3304      	adds	r3, #4
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	3204      	adds	r2, #4
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	1d1a      	adds	r2, r3, #4
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800249c:	0013      	movs	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	189b      	adds	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4a23      	ldr	r2, [pc, #140]	; (8002534 <xTaskRemoveFromEventList+0x184>)
 80024a6:	189a      	adds	r2, r3, r2
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	615a      	str	r2, [r3, #20]
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b0:	4920      	ldr	r1, [pc, #128]	; (8002534 <xTaskRemoveFromEventList+0x184>)
 80024b2:	0013      	movs	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	189b      	adds	r3, r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	585b      	ldr	r3, [r3, r1]
 80024bc:	1c58      	adds	r0, r3, #1
 80024be:	491d      	ldr	r1, [pc, #116]	; (8002534 <xTaskRemoveFromEventList+0x184>)
 80024c0:	0013      	movs	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	189b      	adds	r3, r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	5058      	str	r0, [r3, r1]
 80024ca:	e01b      	b.n	8002504 <xTaskRemoveFromEventList+0x154>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80024cc:	4b1a      	ldr	r3, [pc, #104]	; (8002538 <xTaskRemoveFromEventList+0x188>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	61da      	str	r2, [r3, #28]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	621a      	str	r2, [r3, #32]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	3218      	adds	r2, #24
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	3318      	adds	r3, #24
 80024ee:	001a      	movs	r2, r3
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	4a10      	ldr	r2, [pc, #64]	; (8002538 <xTaskRemoveFromEventList+0x188>)
 80024f8:	629a      	str	r2, [r3, #40]	; 0x28
 80024fa:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <xTaskRemoveFromEventList+0x188>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <xTaskRemoveFromEventList+0x188>)
 8002502:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <xTaskRemoveFromEventList+0x18c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250e:	429a      	cmp	r2, r3
 8002510:	d905      	bls.n	800251e <xTaskRemoveFromEventList+0x16e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002512:	2301      	movs	r3, #1
 8002514:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002516:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <xTaskRemoveFromEventList+0x190>)
 8002518:	2201      	movs	r2, #1
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	e001      	b.n	8002522 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        xReturn = pdFALSE;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8002522:	69fb      	ldr	r3, [r7, #28]
}
 8002524:	0018      	movs	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	b008      	add	sp, #32
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000180 	.word	0x20000180
 8002530:	20000160 	.word	0x20000160
 8002534:	20000084 	.word	0x20000084
 8002538:	20000118 	.word	0x20000118
 800253c:	20000080 	.word	0x20000080
 8002540:	2000016c 	.word	0x2000016c

08002544 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <vTaskInternalSetTimeOutState+0x20>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <vTaskInternalSetTimeOutState+0x24>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	605a      	str	r2, [r3, #4]
}
 800255c:	46c0      	nop			; (mov r8, r8)
 800255e:	46bd      	mov	sp, r7
 8002560:	b002      	add	sp, #8
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000170 	.word	0x20000170
 8002568:	2000015c 	.word	0x2000015c

0800256c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <xTaskCheckForTimeOut+0x14>
 800257c:	b672      	cpsid	i
 800257e:	e7fe      	b.n	800257e <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <xTaskCheckForTimeOut+0x1e>
 8002586:	b672      	cpsid	i
 8002588:	e7fe      	b.n	8002588 <xTaskCheckForTimeOut+0x1c>

    taskENTER_CRITICAL();
 800258a:	f000 fc91 	bl	8002eb0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800258e:	4b1f      	ldr	r3, [pc, #124]	; (800260c <xTaskCheckForTimeOut+0xa0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	3301      	adds	r3, #1
 80025a4:	d102      	bne.n	80025ac <xTaskCheckForTimeOut+0x40>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	e027      	b.n	80025fc <xTaskCheckForTimeOut+0x90>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b17      	ldr	r3, [pc, #92]	; (8002610 <xTaskCheckForTimeOut+0xa4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d00a      	beq.n	80025ce <xTaskCheckForTimeOut+0x62>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d305      	bcc.n	80025ce <xTaskCheckForTimeOut+0x62>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80025c2:	2301      	movs	r3, #1
 80025c4:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	e016      	b.n	80025fc <xTaskCheckForTimeOut+0x90>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d20c      	bcs.n	80025f2 <xTaskCheckForTimeOut+0x86>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1ad2      	subs	r2, r2, r3
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	0018      	movs	r0, r3
 80025e8:	f7ff ffac 	bl	8002544 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	e004      	b.n	80025fc <xTaskCheckForTimeOut+0x90>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80025f8:	2301      	movs	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80025fc:	f000 fc6a 	bl	8002ed4 <vPortExitCritical>

    return xReturn;
 8002600:	697b      	ldr	r3, [r7, #20]
}
 8002602:	0018      	movs	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	b006      	add	sp, #24
 8002608:	bd80      	pop	{r7, pc}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	2000015c 	.word	0x2000015c
 8002610:	20000170 	.word	0x20000170

08002614 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002618:	4b02      	ldr	r3, [pc, #8]	; (8002624 <vTaskMissedYield+0x10>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]
}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	2000016c 	.word	0x2000016c

08002628 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002630:	f000 f850 	bl	80026d4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <prvIdleTask+0x20>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d901      	bls.n	8002640 <prvIdleTask+0x18>
            {
                taskYIELD();
 800263c:	f000 fc28 	bl	8002e90 <vPortYield>
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 8002640:	f7fd fdee 	bl	8000220 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8002644:	e7f4      	b.n	8002630 <prvIdleTask+0x8>
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	20000084 	.word	0x20000084

0800264c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	e00c      	b.n	8002672 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	0013      	movs	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	189b      	adds	r3, r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4a14      	ldr	r2, [pc, #80]	; (80026b4 <prvInitialiseTaskLists+0x68>)
 8002664:	189b      	adds	r3, r3, r2
 8002666:	0018      	movs	r0, r3
 8002668:	f7fe fec8 	bl	80013fc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3301      	adds	r3, #1
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b04      	cmp	r3, #4
 8002676:	d9ef      	bls.n	8002658 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <prvInitialiseTaskLists+0x6c>)
 800267a:	0018      	movs	r0, r3
 800267c:	f7fe febe 	bl	80013fc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002680:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <prvInitialiseTaskLists+0x70>)
 8002682:	0018      	movs	r0, r3
 8002684:	f7fe feba 	bl	80013fc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002688:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <prvInitialiseTaskLists+0x74>)
 800268a:	0018      	movs	r0, r3
 800268c:	f7fe feb6 	bl	80013fc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <prvInitialiseTaskLists+0x78>)
 8002692:	0018      	movs	r0, r3
 8002694:	f7fe feb2 	bl	80013fc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <prvInitialiseTaskLists+0x7c>)
 800269a:	0018      	movs	r0, r3
 800269c:	f7fe feae 	bl	80013fc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80026a0:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <prvInitialiseTaskLists+0x80>)
 80026a2:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <prvInitialiseTaskLists+0x6c>)
 80026a4:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80026a6:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <prvInitialiseTaskLists+0x84>)
 80026a8:	4a04      	ldr	r2, [pc, #16]	; (80026bc <prvInitialiseTaskLists+0x70>)
 80026aa:	601a      	str	r2, [r3, #0]
}
 80026ac:	46c0      	nop			; (mov r8, r8)
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b002      	add	sp, #8
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20000084 	.word	0x20000084
 80026b8:	200000e8 	.word	0x200000e8
 80026bc:	200000fc 	.word	0x200000fc
 80026c0:	20000118 	.word	0x20000118
 80026c4:	2000012c 	.word	0x2000012c
 80026c8:	20000144 	.word	0x20000144
 80026cc:	20000110 	.word	0x20000110
 80026d0:	20000114 	.word	0x20000114

080026d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80026da:	e01a      	b.n	8002712 <prvCheckTasksWaitingTermination+0x3e>
        {
            taskENTER_CRITICAL();
 80026dc:	f000 fbe8 	bl	8002eb0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026e0:	4b10      	ldr	r3, [pc, #64]	; (8002724 <prvCheckTasksWaitingTermination+0x50>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3304      	adds	r3, #4
 80026ec:	0018      	movs	r0, r3
 80026ee:	f7fe fee4 	bl	80014ba <uxListRemove>
                --uxCurrentNumberOfTasks;
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <prvCheckTasksWaitingTermination+0x54>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	1e5a      	subs	r2, r3, #1
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <prvCheckTasksWaitingTermination+0x54>)
 80026fa:	601a      	str	r2, [r3, #0]
                --uxDeletedTasksWaitingCleanUp;
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <prvCheckTasksWaitingTermination+0x58>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	1e5a      	subs	r2, r3, #1
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <prvCheckTasksWaitingTermination+0x58>)
 8002704:	601a      	str	r2, [r3, #0]
            }
            taskEXIT_CRITICAL();
 8002706:	f000 fbe5 	bl	8002ed4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	0018      	movs	r0, r3
 800270e:	f000 f80f 	bl	8002730 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <prvCheckTasksWaitingTermination+0x58>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1e0      	bne.n	80026dc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	46c0      	nop			; (mov r8, r8)
 800271e:	46bd      	mov	sp, r7
 8002720:	b002      	add	sp, #8
 8002722:	bd80      	pop	{r7, pc}
 8002724:	2000012c 	.word	0x2000012c
 8002728:	20000158 	.word	0x20000158
 800272c:	20000140 	.word	0x20000140

08002730 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273c:	0018      	movs	r0, r3
 800273e:	f000 fcf7 	bl	8003130 <vPortFree>
            vPortFree( pxTCB );
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	0018      	movs	r0, r3
 8002746:	f000 fcf3 	bl	8003130 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	46bd      	mov	sp, r7
 800274e:	b002      	add	sp, #8
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <prvResetNextTaskUnblockTime+0x2c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d104      	bne.n	800276c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002762:	4b08      	ldr	r3, [pc, #32]	; (8002784 <prvResetNextTaskUnblockTime+0x30>)
 8002764:	2201      	movs	r2, #1
 8002766:	4252      	negs	r2, r2
 8002768:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800276a:	e005      	b.n	8002778 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800276c:	4b04      	ldr	r3, [pc, #16]	; (8002780 <prvResetNextTaskUnblockTime+0x2c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <prvResetNextTaskUnblockTime+0x30>)
 8002776:	601a      	str	r2, [r3, #0]
}
 8002778:	46c0      	nop			; (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	20000110 	.word	0x20000110
 8002784:	20000178 	.word	0x20000178

08002788 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800278e:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <xTaskGetSchedulerState+0x30>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d102      	bne.n	800279c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002796:	2301      	movs	r3, #1
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	e008      	b.n	80027ae <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800279c:	4b07      	ldr	r3, [pc, #28]	; (80027bc <xTaskGetSchedulerState+0x34>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d102      	bne.n	80027aa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80027a4:	2302      	movs	r3, #2
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	e001      	b.n	80027ae <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80027aa:	2300      	movs	r3, #0
 80027ac:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80027ae:	687b      	ldr	r3, [r7, #4]
    }
 80027b0:	0018      	movs	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b002      	add	sp, #8
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000164 	.word	0x20000164
 80027bc:	20000180 	.word	0x20000180

080027c0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80027ca:	4b2e      	ldr	r3, [pc, #184]	; (8002884 <prvAddCurrentTaskToDelayedList+0xc4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80027d0:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <prvAddCurrentTaskToDelayedList+0xc8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3304      	adds	r3, #4
 80027d6:	0018      	movs	r0, r3
 80027d8:	f7fe fe6f 	bl	80014ba <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3301      	adds	r3, #1
 80027e0:	d124      	bne.n	800282c <prvAddCurrentTaskToDelayedList+0x6c>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d021      	beq.n	800282c <prvAddCurrentTaskToDelayedList+0x6c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027e8:	4b28      	ldr	r3, [pc, #160]	; (800288c <prvAddCurrentTaskToDelayedList+0xcc>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	4b26      	ldr	r3, [pc, #152]	; (8002888 <prvAddCurrentTaskToDelayedList+0xc8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	609a      	str	r2, [r3, #8]
 80027f6:	4b24      	ldr	r3, [pc, #144]	; (8002888 <prvAddCurrentTaskToDelayedList+0xc8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	6892      	ldr	r2, [r2, #8]
 80027fe:	60da      	str	r2, [r3, #12]
 8002800:	4b21      	ldr	r3, [pc, #132]	; (8002888 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	3204      	adds	r2, #4
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	4b1e      	ldr	r3, [pc, #120]	; (8002888 <prvAddCurrentTaskToDelayedList+0xc8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	1d1a      	adds	r2, r3, #4
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	609a      	str	r2, [r3, #8]
 8002816:	4b1c      	ldr	r3, [pc, #112]	; (8002888 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a1c      	ldr	r2, [pc, #112]	; (800288c <prvAddCurrentTaskToDelayedList+0xcc>)
 800281c:	615a      	str	r2, [r3, #20]
 800281e:	4b1b      	ldr	r3, [pc, #108]	; (800288c <prvAddCurrentTaskToDelayedList+0xcc>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <prvAddCurrentTaskToDelayedList+0xcc>)
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	46c0      	nop			; (mov r8, r8)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800282a:	e026      	b.n	800287a <prvAddCurrentTaskToDelayedList+0xba>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	18d3      	adds	r3, r2, r3
 8002832:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002834:	4b14      	ldr	r3, [pc, #80]	; (8002888 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	429a      	cmp	r2, r3
 8002842:	d209      	bcs.n	8002858 <prvAddCurrentTaskToDelayedList+0x98>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002844:	4b12      	ldr	r3, [pc, #72]	; (8002890 <prvAddCurrentTaskToDelayedList+0xd0>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <prvAddCurrentTaskToDelayedList+0xc8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	3304      	adds	r3, #4
 800284e:	0019      	movs	r1, r3
 8002850:	0010      	movs	r0, r2
 8002852:	f7fe fdfc 	bl	800144e <vListInsert>
}
 8002856:	e010      	b.n	800287a <prvAddCurrentTaskToDelayedList+0xba>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002858:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <prvAddCurrentTaskToDelayedList+0xd4>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <prvAddCurrentTaskToDelayedList+0xc8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3304      	adds	r3, #4
 8002862:	0019      	movs	r1, r3
 8002864:	0010      	movs	r0, r2
 8002866:	f7fe fdf2 	bl	800144e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800286a:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <prvAddCurrentTaskToDelayedList+0xd8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	429a      	cmp	r2, r3
 8002872:	d202      	bcs.n	800287a <prvAddCurrentTaskToDelayedList+0xba>
                    xNextTaskUnblockTime = xTimeToWake;
 8002874:	4b08      	ldr	r3, [pc, #32]	; (8002898 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	601a      	str	r2, [r3, #0]
}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	46bd      	mov	sp, r7
 800287e:	b006      	add	sp, #24
 8002880:	bd80      	pop	{r7, pc}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	2000015c 	.word	0x2000015c
 8002888:	20000080 	.word	0x20000080
 800288c:	20000144 	.word	0x20000144
 8002890:	20000114 	.word	0x20000114
 8002894:	20000110 	.word	0x20000110
 8002898:	20000178 	.word	0x20000178

0800289c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80028a6:	f000 fa2d 	bl	8002d04 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80028aa:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <xTimerCreateTimerTask+0x44>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00b      	beq.n	80028ca <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80028b2:	490c      	ldr	r1, [pc, #48]	; (80028e4 <xTimerCreateTimerTask+0x48>)
 80028b4:	480c      	ldr	r0, [pc, #48]	; (80028e8 <xTimerCreateTimerTask+0x4c>)
 80028b6:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <xTimerCreateTimerTask+0x50>)
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	2302      	movs	r3, #2
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	2300      	movs	r3, #0
 80028c0:	2250      	movs	r2, #80	; 0x50
 80028c2:	f7ff f8f6 	bl	8001ab2 <xTaskCreate>
 80028c6:	0003      	movs	r3, r0
 80028c8:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <xTimerCreateTimerTask+0x38>
 80028d0:	b672      	cpsid	i
 80028d2:	e7fe      	b.n	80028d2 <xTimerCreateTimerTask+0x36>
        return xReturn;
 80028d4:	687b      	ldr	r3, [r7, #4]
    }
 80028d6:	0018      	movs	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	b002      	add	sp, #8
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	200001b4 	.word	0x200001b4
 80028e4:	080033c8 	.word	0x080033c8
 80028e8:	08002999 	.word	0x08002999
 80028ec:	200001b8 	.word	0x200001b8

080028f0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80028fc:	e009      	b.n	8002912 <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	18d3      	adds	r3, r2, r3
 8002906:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	0010      	movs	r0, r2
 8002910:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	699a      	ldr	r2, [r3, #24]
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	18d1      	adds	r1, r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f8d8 	bl	8002ad4 <prvInsertTimerInActiveList>
 8002924:	1e03      	subs	r3, r0, #0
 8002926:	d1ea      	bne.n	80028fe <prvReloadTimer+0xe>
        }
    }
 8002928:	46c0      	nop			; (mov r8, r8)
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	46bd      	mov	sp, r7
 800292e:	b004      	add	sp, #16
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800293e:	4b15      	ldr	r3, [pc, #84]	; (8002994 <prvProcessExpiredTimer+0x60>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	3304      	adds	r3, #4
 800294c:	0018      	movs	r0, r3
 800294e:	f7fe fdb4 	bl	80014ba <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2228      	movs	r2, #40	; 0x28
 8002956:	5c9b      	ldrb	r3, [r3, r2]
 8002958:	001a      	movs	r2, r3
 800295a:	2304      	movs	r3, #4
 800295c:	4013      	ands	r3, r2
 800295e:	d006      	beq.n	800296e <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	0018      	movs	r0, r3
 8002968:	f7ff ffc2 	bl	80028f0 <prvReloadTimer>
 800296c:	e008      	b.n	8002980 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2228      	movs	r2, #40	; 0x28
 8002972:	5c9b      	ldrb	r3, [r3, r2]
 8002974:	2201      	movs	r2, #1
 8002976:	4393      	bics	r3, r2
 8002978:	b2d9      	uxtb	r1, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2228      	movs	r2, #40	; 0x28
 800297e:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	0010      	movs	r0, r2
 8002988:	4798      	blx	r3
    }
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	46bd      	mov	sp, r7
 800298e:	b004      	add	sp, #16
 8002990:	bd80      	pop	{r7, pc}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	200001ac 	.word	0x200001ac

08002998 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80029a0:	2308      	movs	r3, #8
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	0018      	movs	r0, r3
 80029a6:	f000 f853 	bl	8002a50 <prvGetNextExpireTime>
 80029aa:	0003      	movs	r3, r0
 80029ac:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	0011      	movs	r1, r2
 80029b4:	0018      	movs	r0, r3
 80029b6:	f000 f803 	bl	80029c0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80029ba:	f000 f8cd 	bl	8002b58 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80029be:	e7ef      	b.n	80029a0 <prvTimerTask+0x8>

080029c0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80029ca:	f7ff fa35 	bl	8001e38 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80029ce:	2308      	movs	r3, #8
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 f85e 	bl	8002a94 <prvSampleTimeNow>
 80029d8:	0003      	movs	r3, r0
 80029da:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d12b      	bne.n	8002a3a <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10c      	bne.n	8002a02 <prvProcessTimerOrBlockTask+0x42>
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d808      	bhi.n	8002a02 <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 80029f0:	f7ff fa2e 	bl	8001e50 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	0011      	movs	r1, r2
 80029fa:	0018      	movs	r0, r3
 80029fc:	f7ff ff9a 	bl	8002934 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002a00:	e01d      	b.n	8002a3e <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002a08:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <prvProcessTimerOrBlockTask+0x88>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <prvProcessTimerOrBlockTask+0x56>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <prvProcessTimerOrBlockTask+0x58>
 8002a16:	2300      	movs	r3, #0
 8002a18:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002a1a:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <prvProcessTimerOrBlockTask+0x8c>)
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	0019      	movs	r1, r3
 8002a28:	f7ff f810 	bl	8001a4c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002a2c:	f7ff fa10 	bl	8001e50 <xTaskResumeAll>
 8002a30:	1e03      	subs	r3, r0, #0
 8002a32:	d104      	bne.n	8002a3e <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8002a34:	f000 fa2c 	bl	8002e90 <vPortYield>
    }
 8002a38:	e001      	b.n	8002a3e <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8002a3a:	f7ff fa09 	bl	8001e50 <xTaskResumeAll>
    }
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b004      	add	sp, #16
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	200001b0 	.word	0x200001b0
 8002a4c:	200001b4 	.word	0x200001b4

08002a50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002a58:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <prvGetNextExpireTime+0x40>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <prvGetNextExpireTime+0x16>
 8002a62:	2201      	movs	r2, #1
 8002a64:	e000      	b.n	8002a68 <prvGetNextExpireTime+0x18>
 8002a66:	2200      	movs	r2, #0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d105      	bne.n	8002a80 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <prvGetNextExpireTime+0x40>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	e001      	b.n	8002a84 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002a84:	68fb      	ldr	r3, [r7, #12]
    }
 8002a86:	0018      	movs	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b004      	add	sp, #16
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	200001ac 	.word	0x200001ac

08002a94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002a9c:	f7ff fac0 	bl	8002020 <xTaskGetTickCount>
 8002aa0:	0003      	movs	r3, r0
 8002aa2:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8002aa4:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <prvSampleTimeNow+0x3c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d205      	bcs.n	8002aba <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8002aae:	f000 f901 	bl	8002cb4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	e002      	b.n	8002ac0 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <prvSampleTimeNow+0x3c>)
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
    }
 8002ac8:	0018      	movs	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b004      	add	sp, #16
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	200001bc 	.word	0x200001bc

08002ad4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
 8002ae0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d812      	bhi.n	8002b20 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	1ad2      	subs	r2, r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d302      	bcc.n	8002b0e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	e01b      	b.n	8002b46 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <prvInsertTimerInActiveList+0x7c>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	3304      	adds	r3, #4
 8002b16:	0019      	movs	r1, r3
 8002b18:	0010      	movs	r0, r2
 8002b1a:	f7fe fc98 	bl	800144e <vListInsert>
 8002b1e:	e012      	b.n	8002b46 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d206      	bcs.n	8002b36 <prvInsertTimerInActiveList+0x62>
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d302      	bcc.n	8002b36 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002b30:	2301      	movs	r3, #1
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	e007      	b.n	8002b46 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002b36:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <prvInsertTimerInActiveList+0x80>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	0019      	movs	r1, r3
 8002b40:	0010      	movs	r0, r2
 8002b42:	f7fe fc84 	bl	800144e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002b46:	697b      	ldr	r3, [r7, #20]
    }
 8002b48:	0018      	movs	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b006      	add	sp, #24
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	200001b0 	.word	0x200001b0
 8002b54:	200001ac 	.word	0x200001ac

08002b58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002b5e:	e095      	b.n	8002c8c <prvProcessReceivedCommands+0x134>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002b60:	1d3b      	adds	r3, r7, #4
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	da00      	bge.n	8002b6a <prvProcessReceivedCommands+0x12>
 8002b68:	e08f      	b.n	8002c8a <prvProcessReceivedCommands+0x132>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002b6a:	1d3b      	adds	r3, r7, #4
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d004      	beq.n	8002b82 <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f7fe fc9c 	bl	80014ba <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002b82:	003b      	movs	r3, r7
 8002b84:	0018      	movs	r0, r3
 8002b86:	f7ff ff85 	bl	8002a94 <prvSampleTimeNow>
 8002b8a:	0003      	movs	r3, r0
 8002b8c:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 8002b8e:	1d3b      	adds	r3, r7, #4
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b09      	cmp	r3, #9
 8002b94:	d900      	bls.n	8002b98 <prvProcessReceivedCommands+0x40>
 8002b96:	e079      	b.n	8002c8c <prvProcessReceivedCommands+0x134>
 8002b98:	009a      	lsls	r2, r3, #2
 8002b9a:	4b44      	ldr	r3, [pc, #272]	; (8002cac <prvProcessReceivedCommands+0x154>)
 8002b9c:	18d3      	adds	r3, r2, r3
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2228      	movs	r2, #40	; 0x28
 8002ba6:	5c9b      	ldrb	r3, [r3, r2]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	4313      	orrs	r3, r2
 8002bac:	b2d9      	uxtb	r1, r3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2228      	movs	r2, #40	; 0x28
 8002bb2:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	18d1      	adds	r1, r2, r3
 8002bbe:	1d3b      	adds	r3, r7, #4
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	6978      	ldr	r0, [r7, #20]
 8002bc6:	f7ff ff85 	bl	8002ad4 <prvInsertTimerInActiveList>
 8002bca:	1e03      	subs	r3, r0, #0
 8002bcc:	d05e      	beq.n	8002c8c <prvProcessReceivedCommands+0x134>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2228      	movs	r2, #40	; 0x28
 8002bd2:	5c9b      	ldrb	r3, [r3, r2]
 8002bd4:	001a      	movs	r2, r3
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d00a      	beq.n	8002bf2 <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002bdc:	1d3b      	adds	r3, r7, #4
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	18d1      	adds	r1, r2, r3
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	0018      	movs	r0, r3
 8002bec:	f7ff fe80 	bl	80028f0 <prvReloadTimer>
 8002bf0:	e008      	b.n	8002c04 <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2228      	movs	r2, #40	; 0x28
 8002bf6:	5c9b      	ldrb	r3, [r3, r2]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	4393      	bics	r3, r2
 8002bfc:	b2d9      	uxtb	r1, r3
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2228      	movs	r2, #40	; 0x28
 8002c02:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	0010      	movs	r0, r2
 8002c0c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002c0e:	e03d      	b.n	8002c8c <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2228      	movs	r2, #40	; 0x28
 8002c14:	5c9b      	ldrb	r3, [r3, r2]
 8002c16:	2201      	movs	r2, #1
 8002c18:	4393      	bics	r3, r2
 8002c1a:	b2d9      	uxtb	r1, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	2228      	movs	r2, #40	; 0x28
 8002c20:	5499      	strb	r1, [r3, r2]
                        break;
 8002c22:	e033      	b.n	8002c8c <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	2228      	movs	r2, #40	; 0x28
 8002c28:	5c9b      	ldrb	r3, [r3, r2]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	b2d9      	uxtb	r1, r3
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2228      	movs	r2, #40	; 0x28
 8002c34:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002c36:	1d3b      	adds	r3, r7, #4
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <prvProcessReceivedCommands+0xf2>
 8002c46:	b672      	cpsid	i
 8002c48:	e7fe      	b.n	8002c48 <prvProcessReceivedCommands+0xf0>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	18d1      	adds	r1, r2, r3
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	6978      	ldr	r0, [r7, #20]
 8002c58:	f7ff ff3c 	bl	8002ad4 <prvInsertTimerInActiveList>
                        break;
 8002c5c:	e016      	b.n	8002c8c <prvProcessReceivedCommands+0x134>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2228      	movs	r2, #40	; 0x28
 8002c62:	5c9b      	ldrb	r3, [r3, r2]
 8002c64:	001a      	movs	r2, r3
 8002c66:	2302      	movs	r3, #2
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d104      	bne.n	8002c76 <prvProcessReceivedCommands+0x11e>
                            {
                                vPortFree( pxTimer );
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f000 fa5e 	bl	8003130 <vPortFree>
 8002c74:	e00a      	b.n	8002c8c <prvProcessReceivedCommands+0x134>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2228      	movs	r2, #40	; 0x28
 8002c7a:	5c9b      	ldrb	r3, [r3, r2]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	4393      	bics	r3, r2
 8002c80:	b2d9      	uxtb	r1, r3
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2228      	movs	r2, #40	; 0x28
 8002c86:	5499      	strb	r1, [r3, r2]
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002c88:	e000      	b.n	8002c8c <prvProcessReceivedCommands+0x134>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002c8a:	46c0      	nop			; (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002c8c:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <prvProcessReceivedCommands+0x158>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	1d39      	adds	r1, r7, #4
 8002c92:	2200      	movs	r2, #0
 8002c94:	0018      	movs	r0, r3
 8002c96:	f7fe fd46 	bl	8001726 <xQueueReceive>
 8002c9a:	1e03      	subs	r3, r0, #0
 8002c9c:	d000      	beq.n	8002ca0 <prvProcessReceivedCommands+0x148>
 8002c9e:	e75f      	b.n	8002b60 <prvProcessReceivedCommands+0x8>
        }
    }
 8002ca0:	46c0      	nop			; (mov r8, r8)
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b006      	add	sp, #24
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	08003408 	.word	0x08003408
 8002cb0:	200001b4 	.word	0x200001b4

08002cb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002cba:	e00b      	b.n	8002cd4 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <prvSwitchTimerLists+0x48>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	425a      	negs	r2, r3
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	0011      	movs	r1, r2
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f7ff fe30 	bl	8002934 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <prvSwitchTimerLists+0x48>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1ee      	bne.n	8002cbc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002cde:	4b07      	ldr	r3, [pc, #28]	; (8002cfc <prvSwitchTimerLists+0x48>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <prvSwitchTimerLists+0x4c>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <prvSwitchTimerLists+0x48>)
 8002cea:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8002cec:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <prvSwitchTimerLists+0x4c>)
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	601a      	str	r2, [r3, #0]
    }
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	b002      	add	sp, #8
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	200001ac 	.word	0x200001ac
 8002d00:	200001b0 	.word	0x200001b0

08002d04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002d08:	f000 f8d2 	bl	8002eb0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002d0c:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <prvCheckForValidListAndQueue+0x5c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d120      	bne.n	8002d56 <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8002d14:	4b13      	ldr	r3, [pc, #76]	; (8002d64 <prvCheckForValidListAndQueue+0x60>)
 8002d16:	0018      	movs	r0, r3
 8002d18:	f7fe fb70 	bl	80013fc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002d1c:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <prvCheckForValidListAndQueue+0x64>)
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f7fe fb6c 	bl	80013fc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <prvCheckForValidListAndQueue+0x68>)
 8002d26:	4a0f      	ldr	r2, [pc, #60]	; (8002d64 <prvCheckForValidListAndQueue+0x60>)
 8002d28:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002d2a:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <prvCheckForValidListAndQueue+0x6c>)
 8002d2c:	4a0e      	ldr	r2, [pc, #56]	; (8002d68 <prvCheckForValidListAndQueue+0x64>)
 8002d2e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002d30:	2200      	movs	r2, #0
 8002d32:	210c      	movs	r1, #12
 8002d34:	2005      	movs	r0, #5
 8002d36:	f7fe fc71 	bl	800161c <xQueueGenericCreate>
 8002d3a:	0002      	movs	r2, r0
 8002d3c:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <prvCheckForValidListAndQueue+0x5c>)
 8002d3e:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002d40:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <prvCheckForValidListAndQueue+0x5c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d006      	beq.n	8002d56 <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002d48:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <prvCheckForValidListAndQueue+0x5c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a09      	ldr	r2, [pc, #36]	; (8002d74 <prvCheckForValidListAndQueue+0x70>)
 8002d4e:	0011      	movs	r1, r2
 8002d50:	0018      	movs	r0, r3
 8002d52:	f7fe fe37 	bl	80019c4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002d56:	f000 f8bd 	bl	8002ed4 <vPortExitCritical>
    }
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	200001b4 	.word	0x200001b4
 8002d64:	20000184 	.word	0x20000184
 8002d68:	20000198 	.word	0x20000198
 8002d6c:	200001ac 	.word	0x200001ac
 8002d70:	200001b0 	.word	0x200001b0
 8002d74:	080033d0 	.word	0x080033d0

08002d78 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3b04      	subs	r3, #4
 8002d88:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2280      	movs	r2, #128	; 0x80
 8002d8e:	0452      	lsls	r2, r2, #17
 8002d90:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	3b04      	subs	r3, #4
 8002d96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	3b04      	subs	r3, #4
 8002da2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8002da4:	4a08      	ldr	r2, [pc, #32]	; (8002dc8 <pxPortInitialiseStack+0x50>)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	3b14      	subs	r3, #20
 8002dae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3b20      	subs	r3, #32
 8002dba:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b004      	add	sp, #16
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	08002dcd 	.word	0x08002dcd

08002dcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <prvTaskExitError+0x2c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	d001      	beq.n	8002de2 <prvTaskExitError+0x16>
 8002dde:	b672      	cpsid	i
 8002de0:	e7fe      	b.n	8002de0 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8002de2:	b672      	cpsid	i

    while( ulDummy == 0 )
 8002de4:	46c0      	nop			; (mov r8, r8)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0fc      	beq.n	8002de6 <prvTaskExitError+0x1a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002dec:	46c0      	nop			; (mov r8, r8)
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b002      	add	sp, #8
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	20000010 	.word	0x20000010

08002dfc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8002e00:	46c0      	nop			; (mov r8, r8)
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e10 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8002e10:	4a0b      	ldr	r2, [pc, #44]	; (8002e40 <pxCurrentTCBConst2>)
 8002e12:	6813      	ldr	r3, [r2, #0]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	3020      	adds	r0, #32
 8002e18:	f380 8809 	msr	PSP, r0
 8002e1c:	2002      	movs	r0, #2
 8002e1e:	f380 8814 	msr	CONTROL, r0
 8002e22:	f3bf 8f6f 	isb	sy
 8002e26:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002e28:	46ae      	mov	lr, r5
 8002e2a:	bc08      	pop	{r3}
 8002e2c:	bc04      	pop	{r2}
 8002e2e:	b662      	cpsie	i
 8002e30:	4718      	bx	r3
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	46c0      	nop			; (mov r8, r8)
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	46c0      	nop			; (mov r8, r8)
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	46c0      	nop			; (mov r8, r8)
 8002e3e:	46c0      	nop			; (mov r8, r8)

08002e40 <pxCurrentTCBConst2>:
 8002e40:	20000080 	.word	0x20000080
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8002e44:	46c0      	nop			; (mov r8, r8)
 8002e46:	46c0      	nop			; (mov r8, r8)

08002e48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002e4c:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <xPortStartScheduler+0x40>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <xPortStartScheduler+0x40>)
 8002e52:	21ff      	movs	r1, #255	; 0xff
 8002e54:	0409      	lsls	r1, r1, #16
 8002e56:	430a      	orrs	r2, r1
 8002e58:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <xPortStartScheduler+0x40>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <xPortStartScheduler+0x40>)
 8002e60:	21ff      	movs	r1, #255	; 0xff
 8002e62:	0609      	lsls	r1, r1, #24
 8002e64:	430a      	orrs	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002e68:	f000 f898 	bl	8002f9c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002e6c:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <xPortStartScheduler+0x44>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8002e72:	f7ff ffcd 	bl	8002e10 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002e76:	f7ff f9ed 	bl	8002254 <vTaskSwitchContext>
    prvTaskExitError();
 8002e7a:	f7ff ffa7 	bl	8002dcc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	0018      	movs	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	e000ed20 	.word	0xe000ed20
 8002e8c:	20000010 	.word	0x20000010

08002e90 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <vPortYield+0x1c>)
 8002e96:	2280      	movs	r2, #128	; 0x80
 8002e98:	0552      	lsls	r2, r2, #21
 8002e9a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8002e9c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002ea0:	f3bf 8f6f 	isb	sy
}
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	e000ed04 	.word	0xe000ed04

08002eb0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8002eb4:	b672      	cpsid	i
    uxCriticalNesting++;
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <vPortEnterCritical+0x20>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <vPortEnterCritical+0x20>)
 8002ebe:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8002ec0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002ec4:	f3bf 8f6f 	isb	sy
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	20000010 	.word	0x20000010

08002ed4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002ed8:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <vPortExitCritical+0x2c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <vPortExitCritical+0x10>
 8002ee0:	b672      	cpsid	i
 8002ee2:	e7fe      	b.n	8002ee2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8002ee4:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <vPortExitCritical+0x2c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	1e5a      	subs	r2, r3, #1
 8002eea:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <vPortExitCritical+0x2c>)
 8002eec:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8002eee:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <vPortExitCritical+0x2c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d100      	bne.n	8002ef8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8002ef6:	b662      	cpsie	i
    }
}
 8002ef8:	46c0      	nop			; (mov r8, r8)
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	20000010 	.word	0x20000010

08002f04 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8002f04:	f3ef 8010 	mrs	r0, PRIMASK
 8002f08:	b672      	cpsid	i
 8002f0a:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	0018      	movs	r0, r3

08002f10 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8002f10:	f380 8810 	msr	PRIMASK, r0
 8002f14:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8002f16:	46c0      	nop			; (mov r8, r8)
	...

08002f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002f20:	f3ef 8009 	mrs	r0, PSP
 8002f24:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <pxCurrentTCBConst>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	3820      	subs	r0, #32
 8002f2a:	6010      	str	r0, [r2, #0]
 8002f2c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002f2e:	4644      	mov	r4, r8
 8002f30:	464d      	mov	r5, r9
 8002f32:	4656      	mov	r6, sl
 8002f34:	465f      	mov	r7, fp
 8002f36:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002f38:	b508      	push	{r3, lr}
 8002f3a:	b672      	cpsid	i
 8002f3c:	f7ff f98a 	bl	8002254 <vTaskSwitchContext>
 8002f40:	b662      	cpsie	i
 8002f42:	bc0c      	pop	{r2, r3}
 8002f44:	6811      	ldr	r1, [r2, #0]
 8002f46:	6808      	ldr	r0, [r1, #0]
 8002f48:	3010      	adds	r0, #16
 8002f4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002f4c:	46a0      	mov	r8, r4
 8002f4e:	46a9      	mov	r9, r5
 8002f50:	46b2      	mov	sl, r6
 8002f52:	46bb      	mov	fp, r7
 8002f54:	f380 8809 	msr	PSP, r0
 8002f58:	3820      	subs	r0, #32
 8002f5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002f5c:	4718      	bx	r3
 8002f5e:	46c0      	nop			; (mov r8, r8)

08002f60 <pxCurrentTCBConst>:
 8002f60:	20000080 	.word	0x20000080
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8002f64:	46c0      	nop			; (mov r8, r8)
 8002f66:	46c0      	nop			; (mov r8, r8)

08002f68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f6e:	f7ff ffc9 	bl	8002f04 <ulSetInterruptMaskFromISR>
 8002f72:	0003      	movs	r3, r0
 8002f74:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002f76:	f7ff f861 	bl	800203c <xTaskIncrementTick>
 8002f7a:	1e03      	subs	r3, r0, #0
 8002f7c:	d003      	beq.n	8002f86 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f7e:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <SysTick_Handler+0x30>)
 8002f80:	2280      	movs	r2, #128	; 0x80
 8002f82:	0552      	lsls	r2, r2, #21
 8002f84:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f7ff ffc1 	bl	8002f10 <vClearInterruptMaskFromISR>
}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b002      	add	sp, #8
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	e000ed04 	.word	0xe000ed04

08002f9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <vPortSetupTimerInterrupt+0x34>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <vPortSetupTimerInterrupt+0x38>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002fac:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <vPortSetupTimerInterrupt+0x3c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	22fa      	movs	r2, #250	; 0xfa
 8002fb2:	0091      	lsls	r1, r2, #2
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f7fd f8a7 	bl	8000108 <__udivsi3>
 8002fba:	0003      	movs	r3, r0
 8002fbc:	001a      	movs	r2, r3
 8002fbe:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <vPortSetupTimerInterrupt+0x40>)
 8002fc0:	3a01      	subs	r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002fc4:	4b02      	ldr	r3, [pc, #8]	; (8002fd0 <vPortSetupTimerInterrupt+0x34>)
 8002fc6:	2207      	movs	r2, #7
 8002fc8:	601a      	str	r2, [r3, #0]
}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	e000e010 	.word	0xe000e010
 8002fd4:	e000e018 	.word	0xe000e018
 8002fd8:	20000000 	.word	0x20000000
 8002fdc:	e000e014 	.word	0xe000e014

08002fe0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002fec:	f7fe ff24 	bl	8001e38 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002ff0:	4b4a      	ldr	r3, [pc, #296]	; (800311c <pvPortMalloc+0x13c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002ff8:	f000 f8e6 	bl	80031c8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d012      	beq.n	8003028 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003002:	2208      	movs	r2, #8
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2107      	movs	r1, #7
 8003008:	400b      	ands	r3, r1
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	3308      	adds	r3, #8
 800300e:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	43db      	mvns	r3, r3
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	429a      	cmp	r2, r3
 8003018:	d804      	bhi.n	8003024 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	18d3      	adds	r3, r2, r3
 8003020:	607b      	str	r3, [r7, #4]
 8003022:	e001      	b.n	8003028 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003024:	2300      	movs	r3, #0
 8003026:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	db68      	blt.n	8003100 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d065      	beq.n	8003100 <pvPortMalloc+0x120>
 8003034:	4b3a      	ldr	r3, [pc, #232]	; (8003120 <pvPortMalloc+0x140>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	429a      	cmp	r2, r3
 800303c:	d860      	bhi.n	8003100 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800303e:	4b39      	ldr	r3, [pc, #228]	; (8003124 <pvPortMalloc+0x144>)
 8003040:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8003042:	4b38      	ldr	r3, [pc, #224]	; (8003124 <pvPortMalloc+0x144>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003048:	e004      	b.n	8003054 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	429a      	cmp	r2, r3
 800305c:	d903      	bls.n	8003066 <pvPortMalloc+0x86>
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f1      	bne.n	800304a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003066:	4b2d      	ldr	r3, [pc, #180]	; (800311c <pvPortMalloc+0x13c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69fa      	ldr	r2, [r7, #28]
 800306c:	429a      	cmp	r2, r3
 800306e:	d047      	beq.n	8003100 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2208      	movs	r2, #8
 8003076:	189b      	adds	r3, r3, r2
 8003078:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	1ad2      	subs	r2, r2, r3
 800308a:	2308      	movs	r3, #8
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	429a      	cmp	r2, r3
 8003090:	d916      	bls.n	80030c0 <pvPortMalloc+0xe0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	18d3      	adds	r3, r2, r3
 8003098:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2207      	movs	r2, #7
 800309e:	4013      	ands	r3, r2
 80030a0:	d001      	beq.n	80030a6 <pvPortMalloc+0xc6>
 80030a2:	b672      	cpsid	i
 80030a4:	e7fe      	b.n	80030a4 <pvPortMalloc+0xc4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	1ad2      	subs	r2, r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	0018      	movs	r0, r3
 80030bc:	f000 f8de 	bl	800327c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80030c0:	4b17      	ldr	r3, [pc, #92]	; (8003120 <pvPortMalloc+0x140>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	1ad2      	subs	r2, r2, r3
 80030ca:	4b15      	ldr	r3, [pc, #84]	; (8003120 <pvPortMalloc+0x140>)
 80030cc:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80030ce:	4b14      	ldr	r3, [pc, #80]	; (8003120 <pvPortMalloc+0x140>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	4b15      	ldr	r3, [pc, #84]	; (8003128 <pvPortMalloc+0x148>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d203      	bcs.n	80030e2 <pvPortMalloc+0x102>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80030da:	4b11      	ldr	r3, [pc, #68]	; (8003120 <pvPortMalloc+0x140>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	4b12      	ldr	r3, [pc, #72]	; (8003128 <pvPortMalloc+0x148>)
 80030e0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2280      	movs	r2, #128	; 0x80
 80030e8:	0612      	lsls	r2, r2, #24
 80030ea:	431a      	orrs	r2, r3
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80030f6:	4b0d      	ldr	r3, [pc, #52]	; (800312c <pvPortMalloc+0x14c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <pvPortMalloc+0x14c>)
 80030fe:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003100:	f7fe fea6 	bl	8001e50 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2207      	movs	r2, #7
 8003108:	4013      	ands	r3, r2
 800310a:	d001      	beq.n	8003110 <pvPortMalloc+0x130>
 800310c:	b672      	cpsid	i
 800310e:	e7fe      	b.n	800310e <pvPortMalloc+0x12e>
    return pvReturn;
 8003110:	697b      	ldr	r3, [r7, #20]
}
 8003112:	0018      	movs	r0, r3
 8003114:	46bd      	mov	sp, r7
 8003116:	b008      	add	sp, #32
 8003118:	bd80      	pop	{r7, pc}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	20001b2c 	.word	0x20001b2c
 8003120:	20001b30 	.word	0x20001b30
 8003124:	20001b24 	.word	0x20001b24
 8003128:	20001b34 	.word	0x20001b34
 800312c:	20001b38 	.word	0x20001b38

08003130 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d039      	beq.n	80031b6 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003142:	2308      	movs	r3, #8
 8003144:	425b      	negs	r3, r3
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	18d3      	adds	r3, r2, r3
 800314a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	db01      	blt.n	800315c <vPortFree+0x2c>
 8003158:	b672      	cpsid	i
 800315a:	e7fe      	b.n	800315a <vPortFree+0x2a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <vPortFree+0x38>
 8003164:	b672      	cpsid	i
 8003166:	e7fe      	b.n	8003166 <vPortFree+0x36>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	0fdb      	lsrs	r3, r3, #31
 800316e:	1c1a      	adds	r2, r3, #0
 8003170:	2301      	movs	r3, #1
 8003172:	4013      	ands	r3, r2
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d01d      	beq.n	80031b6 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d119      	bne.n	80031b6 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	085a      	lsrs	r2, r3, #1
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800318e:	f7fe fe53 	bl	8001e38 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <vPortFree+0x90>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	18d2      	adds	r2, r2, r3
 800319c:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <vPortFree+0x90>)
 800319e:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	0018      	movs	r0, r3
 80031a4:	f000 f86a 	bl	800327c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <vPortFree+0x94>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <vPortFree+0x94>)
 80031b0:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 80031b2:	f7fe fe4d 	bl	8001e50 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b004      	add	sp, #16
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	20001b30 	.word	0x20001b30
 80031c4:	20001b3c 	.word	0x20001b3c

080031c8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80031ce:	4b25      	ldr	r3, [pc, #148]	; (8003264 <prvHeapInit+0x9c>)
 80031d0:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80031d2:	4b25      	ldr	r3, [pc, #148]	; (8003268 <prvHeapInit+0xa0>)
 80031d4:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2207      	movs	r2, #7
 80031da:	4013      	ands	r3, r2
 80031dc:	d00c      	beq.n	80031f8 <prvHeapInit+0x30>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	3307      	adds	r3, #7
 80031e2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2207      	movs	r2, #7
 80031e8:	4393      	bics	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1ad2      	subs	r2, r2, r3
 80031f2:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <prvHeapInit+0xa0>)
 80031f4:	18d3      	adds	r3, r2, r3
 80031f6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80031fc:	4b1b      	ldr	r3, [pc, #108]	; (800326c <prvHeapInit+0xa4>)
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003202:	4b1a      	ldr	r3, [pc, #104]	; (800326c <prvHeapInit+0xa4>)
 8003204:	2200      	movs	r2, #0
 8003206:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	18d3      	adds	r3, r2, r3
 800320e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003210:	2208      	movs	r2, #8
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2207      	movs	r2, #7
 800321c:	4393      	bics	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4b13      	ldr	r3, [pc, #76]	; (8003270 <prvHeapInit+0xa8>)
 8003224:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 8003226:	4b12      	ldr	r3, [pc, #72]	; (8003270 <prvHeapInit+0xa8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2200      	movs	r2, #0
 800322c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800322e:	4b10      	ldr	r3, [pc, #64]	; (8003270 <prvHeapInit+0xa8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	1ad2      	subs	r2, r2, r3
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003244:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <prvHeapInit+0xa8>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	4b08      	ldr	r3, [pc, #32]	; (8003274 <prvHeapInit+0xac>)
 8003252:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	4b07      	ldr	r3, [pc, #28]	; (8003278 <prvHeapInit+0xb0>)
 800325a:	601a      	str	r2, [r3, #0]
}
 800325c:	46c0      	nop			; (mov r8, r8)
 800325e:	46bd      	mov	sp, r7
 8003260:	b004      	add	sp, #16
 8003262:	bd80      	pop	{r7, pc}
 8003264:	00001964 	.word	0x00001964
 8003268:	200001c0 	.word	0x200001c0
 800326c:	20001b24 	.word	0x20001b24
 8003270:	20001b2c 	.word	0x20001b2c
 8003274:	20001b34 	.word	0x20001b34
 8003278:	20001b30 	.word	0x20001b30

0800327c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003284:	4b27      	ldr	r3, [pc, #156]	; (8003324 <prvInsertBlockIntoFreeList+0xa8>)
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	e002      	b.n	8003290 <prvInsertBlockIntoFreeList+0x14>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	429a      	cmp	r2, r3
 8003298:	d8f7      	bhi.n	800328a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	18d3      	adds	r3, r2, r3
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d108      	bne.n	80032be <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	18d2      	adds	r2, r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	18d2      	adds	r2, r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d118      	bne.n	8003304 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	4b14      	ldr	r3, [pc, #80]	; (8003328 <prvInsertBlockIntoFreeList+0xac>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d00d      	beq.n	80032fa <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	18d2      	adds	r2, r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	e008      	b.n	800330c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80032fa:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <prvInsertBlockIntoFreeList+0xac>)
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	e003      	b.n	800330c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	429a      	cmp	r2, r3
 8003312:	d002      	beq.n	800331a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	46bd      	mov	sp, r7
 800331e:	b004      	add	sp, #16
 8003320:	bd80      	pop	{r7, pc}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	20001b24 	.word	0x20001b24
 8003328:	20001b2c 	.word	0x20001b2c

0800332c <__libc_init_array>:
 800332c:	b570      	push	{r4, r5, r6, lr}
 800332e:	2600      	movs	r6, #0
 8003330:	4d0c      	ldr	r5, [pc, #48]	; (8003364 <__libc_init_array+0x38>)
 8003332:	4c0d      	ldr	r4, [pc, #52]	; (8003368 <__libc_init_array+0x3c>)
 8003334:	1b64      	subs	r4, r4, r5
 8003336:	10a4      	asrs	r4, r4, #2
 8003338:	42a6      	cmp	r6, r4
 800333a:	d109      	bne.n	8003350 <__libc_init_array+0x24>
 800333c:	2600      	movs	r6, #0
 800333e:	f000 f82b 	bl	8003398 <_init>
 8003342:	4d0a      	ldr	r5, [pc, #40]	; (800336c <__libc_init_array+0x40>)
 8003344:	4c0a      	ldr	r4, [pc, #40]	; (8003370 <__libc_init_array+0x44>)
 8003346:	1b64      	subs	r4, r4, r5
 8003348:	10a4      	asrs	r4, r4, #2
 800334a:	42a6      	cmp	r6, r4
 800334c:	d105      	bne.n	800335a <__libc_init_array+0x2e>
 800334e:	bd70      	pop	{r4, r5, r6, pc}
 8003350:	00b3      	lsls	r3, r6, #2
 8003352:	58eb      	ldr	r3, [r5, r3]
 8003354:	4798      	blx	r3
 8003356:	3601      	adds	r6, #1
 8003358:	e7ee      	b.n	8003338 <__libc_init_array+0xc>
 800335a:	00b3      	lsls	r3, r6, #2
 800335c:	58eb      	ldr	r3, [r5, r3]
 800335e:	4798      	blx	r3
 8003360:	3601      	adds	r6, #1
 8003362:	e7f2      	b.n	800334a <__libc_init_array+0x1e>
 8003364:	08003430 	.word	0x08003430
 8003368:	08003430 	.word	0x08003430
 800336c:	08003430 	.word	0x08003430
 8003370:	08003434 	.word	0x08003434

08003374 <memcpy>:
 8003374:	2300      	movs	r3, #0
 8003376:	b510      	push	{r4, lr}
 8003378:	429a      	cmp	r2, r3
 800337a:	d100      	bne.n	800337e <memcpy+0xa>
 800337c:	bd10      	pop	{r4, pc}
 800337e:	5ccc      	ldrb	r4, [r1, r3]
 8003380:	54c4      	strb	r4, [r0, r3]
 8003382:	3301      	adds	r3, #1
 8003384:	e7f8      	b.n	8003378 <memcpy+0x4>

08003386 <memset>:
 8003386:	0003      	movs	r3, r0
 8003388:	1882      	adds	r2, r0, r2
 800338a:	4293      	cmp	r3, r2
 800338c:	d100      	bne.n	8003390 <memset+0xa>
 800338e:	4770      	bx	lr
 8003390:	7019      	strb	r1, [r3, #0]
 8003392:	3301      	adds	r3, #1
 8003394:	e7f9      	b.n	800338a <memset+0x4>
	...

08003398 <_init>:
 8003398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800339e:	bc08      	pop	{r3}
 80033a0:	469e      	mov	lr, r3
 80033a2:	4770      	bx	lr

080033a4 <_fini>:
 80033a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033aa:	bc08      	pop	{r3}
 80033ac:	469e      	mov	lr, r3
 80033ae:	4770      	bx	lr
