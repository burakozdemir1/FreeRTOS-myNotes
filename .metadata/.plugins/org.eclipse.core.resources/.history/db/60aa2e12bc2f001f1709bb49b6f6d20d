#include "main.h"
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "stdio.h"
#include "string.h"

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;
uint8_t myMessage[100] ;

char menuDisplay[] = {"\r\n LED_ON            -> 1 \
                       \r\n LED_OFF           -> 2 \
                       \r\n LED_TOGGLE        -> 3 \
                       \r\n LED_STATUS        -> 4 \
                       \r\n EXIT_APP          -> 5 \
                       \r\n                     \
                       \r\n Type your option here : "};

uint8_t command_buffer[20];
uint8_t command_length = 0;

uint8_t rxCaracter;
BaseType_t token = pdFALSE;

/* Task handles */
TaskHandle_t task1MenuHandle = NULL;
TaskHandle_t task2CommandHandle = NULL;
TaskHandle_t task3CommandProcessHandle = NULL;
TaskHandle_t task4UartWriteHandle = NULL;

/* Queues */
QueueHandle_t Uart_Write_Queue = NULL;   // UART write queue
QueueHandle_t Command_Queue = NULL;      // Command queue

/* Function prototypes */
void SystemClock_Config(void);
static void MX_USART1_UART_Init(void);
static void MX_GPIO_Init(void);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);

/* Task function prototypes */
void Task1_Menu_Display_Handler(void *params);
void Task2_Command_Handling_Handler(void *params);
void Task3_Command_Process_Handler(void *params);
void Task4_Uart_Write_Handler(void *params);

/* Main function */
int main(void)
{
    /* MCU Configuration--------------------------------------------------------*/
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_USART1_UART_Init();

    /* Initialize UART */

    /* Create queues */
    Uart_Write_Queue = xQueueCreate(10, sizeof(char*));   // Queue for UART write
    Command_Queue = xQueueCreate(10, sizeof(uint8_t));   // Queue for commands

    /* Check if queues were created successfully */
    if (Uart_Write_Queue != NULL && Command_Queue != NULL)
    {
        /* Print success message */
        sprintf((char*)myMessage, "Kuyruk Olusturma Basarili\r\n");
        HAL_UART_Transmit(&huart1, (uint8_t *)myMessage, strlen((char*)myMessage), HAL_MAX_DELAY);

        /* Create tasks */
        xTaskCreate(Task1_Menu_Display_Handler, "Menu Display", configMINIMAL_STACK_SIZE, NULL, 2, &task1MenuHandle);
        xTaskCreate(Task2_Command_Handling_Handler, "Command Handling", configMINIMAL_STACK_SIZE, NULL, 2, &task2CommandHandle);
        xTaskCreate(Task3_Command_Process_Handler, "Command Process", configMINIMAL_STACK_SIZE, NULL, 2, &task3CommandProcessHandle);
        xTaskCreate(Task4_Uart_Write_Handler, "Uart Write", configMINIMAL_STACK_SIZE, NULL, 2, &task4UartWriteHandle);

        /* Start FreeRTOS scheduler */
        vTaskStartScheduler();
    }
    else
    {
        /* Print error message */
        sprintf((char*)myMessage, "Kuyruk Olusturma Hatali!\r\n");
        HAL_UART_Transmit(&huart1, (uint8_t *)myMessage, strlen((char*)myMessage), HAL_MAX_DELAY);

        /* Loop indefinitely */
        while (1);
    }

    /* We should never get here as control is now taken by the scheduler */
    while (1);
}

/* System Clock Configuration */
void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    {
        Error_Handler();
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
    {
        Error_Handler();
    }
}

/* USART1 UART Initialization */
static void MX_USART1_UART_Init(void)
{
    huart1.Instance = USART1;
    huart1.Init.BaudRate = 115200;
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
    huart1.Init.StopBits = UART_STOPBITS_1;
    huart1.Init.Parity = UART_PARITY_NONE;
    huart1.Init.Mode = UART_MODE_TX_RX;
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
    if (HAL_UART_Init(&huart1) != HAL_OK)
    {
        Error_Handler();
    }

    /* Start UART receive interrupt */
    HAL_UART_Receive_IT(&huart1, &rxCaracter, 1);
}

/* GPIO Initialization */
static void MX_GPIO_Init(void)
{
    /* GPIO initialization if any */
}

/* UART receive interrupt callback */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if(huart->Instance == USART1)
    {
        BaseType_t token = pdFALSE;

        // Gelen veriyi tamponda sakla
        command_buffer[command_length++] = rxCaracter;

        // Belirli uzunluğa ulaştığında görevi bildir
        if(command_length == 10)
        {
            command_length = 0;
            xTaskNotifyFromISR(task1MenuHandle, 0, eNoAction, &token);
            xTaskNotifyFromISR(task2CommandHandle, 0, eNoAction, &token);
        }

        // Tekrar alım işlemini başlat
        HAL_UART_Receive_IT(huart, &rxCaracter, 1);

        if(token == pdTRUE)
        {
            portYIELD_FROM_ISR(token);
        }
    }
}

/* Task function implementations */
void Task1_Menu_Display_Handler(void *params)
{
    // UART kuyruğuna veri göndericeğim
    // her bildirim geldiğinde kuyruğa tekrar mesaj yazması lazım

    char *rxData = menuDisplay;

    while (1)
    {
        xQueueSend(Uart_Write_Queue, &rxData, portMAX_DELAY); // Uart_Write_Queue bu kuyruğa veri gödnerceğiz

        sprintf((char*)myMessage, "Menu Display Task: Mesaj Kuyruğa Gönderildi\r\n");
        HAL_UART_Transmit(&huart1, (uint8_t *)myMessage, strlen((char*)myMessage), HAL_MAX_DELAY);

        xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
    }
}

void Task2_Command_Handling_Handler(void *params)
{
    while (1)
    {
        xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
    }
}

void Task3_Command_Process_Handler(void *params)
{
    while (1)
    {

    }
}

void Task4_Uart_Write_Handler(void *params)
{
    char *txData = NULL;

    while (1)
    {
        // Kuyruktan veri alın
        xQueueReceive(Uart_Write_Queue, &txData, portMAX_DELAY);

        // Veriyi UART ile gönder
        if(txData != NULL)
        {
            HAL_StatusTypeDef result;
            do {
                result = HAL_UART_Transmit_IT(&huart1, (uint8_t *)txData, strlen(txData));
                if (result == HAL_BUSY) {
                    // UART meşgulse biraz bekleyin ve tekrar deneyin
                    vTaskDelay(pdMS_TO_TICKS(10));
                }
            } while(result == HAL_BUSY);

            if (result != HAL_OK) {
                sprintf((char*)myMessage, "UART Gönderim Hatası: %d\r\n", result);
                HAL_UART_Transmit(&huart1, (uint8_t *)myMessage, strlen((char*)myMessage), HAL_MAX_DELAY);
            }
        }
    }
}

/* Error Handler */
void Error_Handler(void)
{
    /* Error handler implementation */
    while (1);
}

/* Optional: assert_failed function */
#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t *file, uint32_t line)
{
    /* User can add his own implementation to report the file name and line number */
    while (1);
}
#endif
