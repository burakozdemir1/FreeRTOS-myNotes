
vTaskDelete_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025bc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800267c  0800267c  0001267c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026fc  080026fc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080026fc  080026fc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026fc  080026fc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026fc  080026fc  000126fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002700  08002700  00012700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fc8  20000010  08002714  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fd8  08002714  00020fd8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b14  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000194b  00000000  00000000  00026b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  00028498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000720  00000000  00000000  00028ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fe7  00000000  00000000  000293c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008eb2  00000000  00000000  000423a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009250b  00000000  00000000  0004b259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd764  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a70  00000000  00000000  000dd7b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002664 	.word	0x08002664

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08002664 	.word	0x08002664

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	4a06      	ldr	r2, [pc, #24]	; (8000248 <vApplicationGetIdleTaskMemory+0x28>)
 8000230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	4a05      	ldr	r2, [pc, #20]	; (800024c <vApplicationGetIdleTaskMemory+0x2c>)
 8000236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2280      	movs	r2, #128	; 0x80
 800023c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	46bd      	mov	sp, r7
 8000242:	b004      	add	sp, #16
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	2000002c 	.word	0x2000002c
 800024c:	20000080 	.word	0x20000080

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b5b0      	push	{r4, r5, r7, lr}
 8000252:	b08e      	sub	sp, #56	; 0x38
 8000254:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000256:	f000 f98b 	bl	8000570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025a:	f000 f82f 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025e:	f000 f869 	bl	8000334 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, Task1Handler, osPriorityNormal, 0, 128);
 8000262:	211c      	movs	r1, #28
 8000264:	187b      	adds	r3, r7, r1
 8000266:	4a11      	ldr	r2, [pc, #68]	; (80002ac <main+0x5c>)
 8000268:	ca31      	ldmia	r2!, {r0, r4, r5}
 800026a:	c331      	stmia	r3!, {r0, r4, r5}
 800026c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800026e:	c331      	stmia	r3!, {r0, r4, r5}
 8000270:	6812      	ldr	r2, [r2, #0]
 8000272:	601a      	str	r2, [r3, #0]
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8000274:	187b      	adds	r3, r7, r1
 8000276:	2100      	movs	r1, #0
 8000278:	0018      	movs	r0, r3
 800027a:	f001 f976 	bl	800156a <osThreadCreate>
 800027e:	0002      	movs	r2, r0
 8000280:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <main+0x60>)
 8000282:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2Handler, osPriorityAboveNormal, 0, 128);
 8000284:	003b      	movs	r3, r7
 8000286:	4a0b      	ldr	r2, [pc, #44]	; (80002b4 <main+0x64>)
 8000288:	ca13      	ldmia	r2!, {r0, r1, r4}
 800028a:	c313      	stmia	r3!, {r0, r1, r4}
 800028c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800028e:	c313      	stmia	r3!, {r0, r1, r4}
 8000290:	6812      	ldr	r2, [r2, #0]
 8000292:	601a      	str	r2, [r3, #0]
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000294:	003b      	movs	r3, r7
 8000296:	2100      	movs	r1, #0
 8000298:	0018      	movs	r0, r3
 800029a:	f001 f966 	bl	800156a <osThreadCreate>
 800029e:	0002      	movs	r2, r0
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <main+0x68>)
 80002a2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002a4:	f001 f959 	bl	800155a <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <main+0x58>
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	0800268c 	.word	0x0800268c
 80002b0:	20000288 	.word	0x20000288
 80002b4:	080026a8 	.word	0x080026a8
 80002b8:	2000028c 	.word	0x2000028c

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b590      	push	{r4, r7, lr}
 80002be:	b093      	sub	sp, #76	; 0x4c
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	2414      	movs	r4, #20
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	0018      	movs	r0, r3
 80002c8:	2334      	movs	r3, #52	; 0x34
 80002ca:	001a      	movs	r2, r3
 80002cc:	2100      	movs	r1, #0
 80002ce:	f002 f9c1 	bl	8002654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	0018      	movs	r0, r3
 80002d6:	2310      	movs	r3, #16
 80002d8:	001a      	movs	r2, r3
 80002da:	2100      	movs	r1, #0
 80002dc:	f002 f9ba 	bl	8002654 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	2201      	movs	r2, #1
 80002e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	2201      	movs	r2, #1
 80002ea:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ec:	193b      	adds	r3, r7, r4
 80002ee:	2200      	movs	r2, #0
 80002f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	193b      	adds	r3, r7, r4
 80002f4:	0018      	movs	r0, r3
 80002f6:	f000 fc45 	bl	8000b84 <HAL_RCC_OscConfig>
 80002fa:	1e03      	subs	r3, r0, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002fe:	f000 f8c3 	bl	8000488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2207      	movs	r2, #7
 8000306:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2201      	movs	r2, #1
 800030c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2100      	movs	r1, #0
 800031e:	0018      	movs	r0, r3
 8000320:	f000 ffb6 	bl	8001290 <HAL_RCC_ClockConfig>
 8000324:	1e03      	subs	r3, r0, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000328:	f000 f8ae 	bl	8000488 <Error_Handler>
  }
}
 800032c:	46c0      	nop			; (mov r8, r8)
 800032e:	46bd      	mov	sp, r7
 8000330:	b013      	add	sp, #76	; 0x4c
 8000332:	bd90      	pop	{r4, r7, pc}

08000334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000334:	b590      	push	{r4, r7, lr}
 8000336:	b089      	sub	sp, #36	; 0x24
 8000338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033a:	240c      	movs	r4, #12
 800033c:	193b      	adds	r3, r7, r4
 800033e:	0018      	movs	r0, r3
 8000340:	2314      	movs	r3, #20
 8000342:	001a      	movs	r2, r3
 8000344:	2100      	movs	r1, #0
 8000346:	f002 f985 	bl	8002654 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034a:	4b2c      	ldr	r3, [pc, #176]	; (80003fc <MX_GPIO_Init+0xc8>)
 800034c:	695a      	ldr	r2, [r3, #20]
 800034e:	4b2b      	ldr	r3, [pc, #172]	; (80003fc <MX_GPIO_Init+0xc8>)
 8000350:	2180      	movs	r1, #128	; 0x80
 8000352:	0309      	lsls	r1, r1, #12
 8000354:	430a      	orrs	r2, r1
 8000356:	615a      	str	r2, [r3, #20]
 8000358:	4b28      	ldr	r3, [pc, #160]	; (80003fc <MX_GPIO_Init+0xc8>)
 800035a:	695a      	ldr	r2, [r3, #20]
 800035c:	2380      	movs	r3, #128	; 0x80
 800035e:	031b      	lsls	r3, r3, #12
 8000360:	4013      	ands	r3, r2
 8000362:	60bb      	str	r3, [r7, #8]
 8000364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000366:	4b25      	ldr	r3, [pc, #148]	; (80003fc <MX_GPIO_Init+0xc8>)
 8000368:	695a      	ldr	r2, [r3, #20]
 800036a:	4b24      	ldr	r3, [pc, #144]	; (80003fc <MX_GPIO_Init+0xc8>)
 800036c:	2180      	movs	r1, #128	; 0x80
 800036e:	03c9      	lsls	r1, r1, #15
 8000370:	430a      	orrs	r2, r1
 8000372:	615a      	str	r2, [r3, #20]
 8000374:	4b21      	ldr	r3, [pc, #132]	; (80003fc <MX_GPIO_Init+0xc8>)
 8000376:	695a      	ldr	r2, [r3, #20]
 8000378:	2380      	movs	r3, #128	; 0x80
 800037a:	03db      	lsls	r3, r3, #15
 800037c:	4013      	ands	r3, r2
 800037e:	607b      	str	r3, [r7, #4]
 8000380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000382:	4b1e      	ldr	r3, [pc, #120]	; (80003fc <MX_GPIO_Init+0xc8>)
 8000384:	695a      	ldr	r2, [r3, #20]
 8000386:	4b1d      	ldr	r3, [pc, #116]	; (80003fc <MX_GPIO_Init+0xc8>)
 8000388:	2180      	movs	r1, #128	; 0x80
 800038a:	0289      	lsls	r1, r1, #10
 800038c:	430a      	orrs	r2, r1
 800038e:	615a      	str	r2, [r3, #20]
 8000390:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <MX_GPIO_Init+0xc8>)
 8000392:	695a      	ldr	r2, [r3, #20]
 8000394:	2380      	movs	r3, #128	; 0x80
 8000396:	029b      	lsls	r3, r3, #10
 8000398:	4013      	ands	r3, r2
 800039a:	603b      	str	r3, [r7, #0]
 800039c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800039e:	2390      	movs	r3, #144	; 0x90
 80003a0:	05db      	lsls	r3, r3, #23
 80003a2:	2200      	movs	r2, #0
 80003a4:	2120      	movs	r1, #32
 80003a6:	0018      	movs	r0, r3
 80003a8:	f000 fbb3 	bl	8000b12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003ac:	193b      	adds	r3, r7, r4
 80003ae:	2280      	movs	r2, #128	; 0x80
 80003b0:	0192      	lsls	r2, r2, #6
 80003b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003b4:	193b      	adds	r3, r7, r4
 80003b6:	2200      	movs	r2, #0
 80003b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003ba:	193b      	adds	r3, r7, r4
 80003bc:	2202      	movs	r2, #2
 80003be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c0:	193b      	adds	r3, r7, r4
 80003c2:	4a0f      	ldr	r2, [pc, #60]	; (8000400 <MX_GPIO_Init+0xcc>)
 80003c4:	0019      	movs	r1, r3
 80003c6:	0010      	movs	r0, r2
 80003c8:	f000 fa0e 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003cc:	0021      	movs	r1, r4
 80003ce:	187b      	adds	r3, r7, r1
 80003d0:	2220      	movs	r2, #32
 80003d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d4:	187b      	adds	r3, r7, r1
 80003d6:	2201      	movs	r2, #1
 80003d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003da:	187b      	adds	r3, r7, r1
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003e6:	187a      	adds	r2, r7, r1
 80003e8:	2390      	movs	r3, #144	; 0x90
 80003ea:	05db      	lsls	r3, r3, #23
 80003ec:	0011      	movs	r1, r2
 80003ee:	0018      	movs	r0, r3
 80003f0:	f000 f9fa 	bl	80007e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003f4:	46c0      	nop			; (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	b009      	add	sp, #36	; 0x24
 80003fa:	bd90      	pop	{r4, r7, pc}
 80003fc:	40021000 	.word	0x40021000
 8000400:	48000800 	.word	0x48000800

08000404 <Task1Handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1Handler */
void Task1Handler(void const * argument)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800040c:	2390      	movs	r3, #144	; 0x90
 800040e:	05db      	lsls	r3, r3, #23
 8000410:	2120      	movs	r1, #32
 8000412:	0018      	movs	r0, r3
 8000414:	f000 fb9a 	bl	8000b4c <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000418:	23fa      	movs	r3, #250	; 0xfa
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	0018      	movs	r0, r3
 800041e:	f000 f90b 	bl	8000638 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000422:	e7f3      	b.n	800040c <Task1Handler+0x8>

08000424 <Task2Handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2Handler */
void Task2Handler(void const * argument)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2Handler */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800042c:	2390      	movs	r3, #144	; 0x90
 800042e:	05db      	lsls	r3, r3, #23
 8000430:	2120      	movs	r1, #32
 8000432:	0018      	movs	r0, r3
 8000434:	f000 fb8a 	bl	8000b4c <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 8000438:	23fa      	movs	r3, #250	; 0xfa
 800043a:	00db      	lsls	r3, r3, #3
 800043c:	0018      	movs	r0, r3
 800043e:	f000 f8fb 	bl	8000638 <HAL_Delay>
	 buttonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000442:	2380      	movs	r3, #128	; 0x80
 8000444:	019b      	lsls	r3, r3, #6
 8000446:	4a0c      	ldr	r2, [pc, #48]	; (8000478 <Task2Handler+0x54>)
 8000448:	0019      	movs	r1, r3
 800044a:	0010      	movs	r0, r2
 800044c:	f000 fb44 	bl	8000ad8 <HAL_GPIO_ReadPin>
 8000450:	0003      	movs	r3, r0
 8000452:	001a      	movs	r2, r3
 8000454:	4b09      	ldr	r3, [pc, #36]	; (800047c <Task2Handler+0x58>)
 8000456:	701a      	strb	r2, [r3, #0]
	  	  if(buttonState==GPIO_PIN_SET)
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <Task2Handler+0x58>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2b01      	cmp	r3, #1
 800045e:	d1e5      	bne.n	800042c <Task2Handler+0x8>
	  	  {
	  		 // while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==1);
	  		  count++;
 8000460:	4b07      	ldr	r3, [pc, #28]	; (8000480 <Task2Handler+0x5c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	1c5a      	adds	r2, r3, #1
 8000466:	4b06      	ldr	r3, [pc, #24]	; (8000480 <Task2Handler+0x5c>)
 8000468:	601a      	str	r2, [r3, #0]
	  		  osThreadSuspend(Task2Handle); // görevi askıya alan bir fonksiyon gibi düşün
 800046a:	4b06      	ldr	r3, [pc, #24]	; (8000484 <Task2Handler+0x60>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	0018      	movs	r0, r3
 8000470:	f001 f8c8 	bl	8001604 <osThreadSuspend>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000474:	e7da      	b.n	800042c <Task2Handler+0x8>
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	48000800 	.word	0x48000800
 800047c:	20000284 	.word	0x20000284
 8000480:	20000280 	.word	0x20000280
 8000484:	2000028c 	.word	0x2000028c

08000488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048c:	b672      	cpsid	i
}
 800048e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000490:	e7fe      	b.n	8000490 <Error_Handler+0x8>
	...

08000494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049a:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <HAL_MspInit+0x50>)
 800049c:	699a      	ldr	r2, [r3, #24]
 800049e:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <HAL_MspInit+0x50>)
 80004a0:	2101      	movs	r1, #1
 80004a2:	430a      	orrs	r2, r1
 80004a4:	619a      	str	r2, [r3, #24]
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <HAL_MspInit+0x50>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	2201      	movs	r2, #1
 80004ac:	4013      	ands	r3, r2
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <HAL_MspInit+0x50>)
 80004b4:	69da      	ldr	r2, [r3, #28]
 80004b6:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <HAL_MspInit+0x50>)
 80004b8:	2180      	movs	r1, #128	; 0x80
 80004ba:	0549      	lsls	r1, r1, #21
 80004bc:	430a      	orrs	r2, r1
 80004be:	61da      	str	r2, [r3, #28]
 80004c0:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <HAL_MspInit+0x50>)
 80004c2:	69da      	ldr	r2, [r3, #28]
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	055b      	lsls	r3, r3, #21
 80004c8:	4013      	ands	r3, r2
 80004ca:	603b      	str	r3, [r7, #0]
 80004cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80004ce:	2302      	movs	r3, #2
 80004d0:	425b      	negs	r3, r3
 80004d2:	2200      	movs	r2, #0
 80004d4:	2103      	movs	r1, #3
 80004d6:	0018      	movs	r0, r3
 80004d8:	f000 f964 	bl	80007a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	b002      	add	sp, #8
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40021000 	.word	0x40021000

080004e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <NMI_Handler+0x4>

080004ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <HardFault_Handler+0x4>

080004f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f8:	f000 f882 	bl	8000600 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80004fc:	f001 fd90 	bl	8002020 <xTaskGetSchedulerState>
 8000500:	0003      	movs	r3, r0
 8000502:	2b01      	cmp	r3, #1
 8000504:	d001      	beq.n	800050a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000506:	f001 fe9f 	bl	8002248 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000514:	46c0      	nop			; (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800051c:	480d      	ldr	r0, [pc, #52]	; (8000554 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800051e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000520:	f7ff fff6 	bl	8000510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <LoopForever+0x6>)
  ldr r1, =_edata
 8000526:	490d      	ldr	r1, [pc, #52]	; (800055c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000528:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <LoopForever+0xe>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800052c:	e002      	b.n	8000534 <LoopCopyDataInit>

0800052e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000532:	3304      	adds	r3, #4

08000534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000538:	d3f9      	bcc.n	800052e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800053a:	4a0a      	ldr	r2, [pc, #40]	; (8000564 <LoopForever+0x12>)
  ldr r4, =_ebss
 800053c:	4c0a      	ldr	r4, [pc, #40]	; (8000568 <LoopForever+0x16>)
  movs r3, #0
 800053e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000540:	e001      	b.n	8000546 <LoopFillZerobss>

08000542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000544:	3204      	adds	r2, #4

08000546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000548:	d3fb      	bcc.n	8000542 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800054a:	f002 f85f 	bl	800260c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054e:	f7ff fe7f 	bl	8000250 <main>

08000552 <LoopForever>:

LoopForever:
    b LoopForever
 8000552:	e7fe      	b.n	8000552 <LoopForever>
  ldr   r0, =_estack
 8000554:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800055c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000560:	08002704 	.word	0x08002704
  ldr r2, =_sbss
 8000564:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000568:	20000fd8 	.word	0x20000fd8

0800056c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800056c:	e7fe      	b.n	800056c <ADC1_COMP_IRQHandler>
	...

08000570 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <HAL_Init+0x24>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_Init+0x24>)
 800057a:	2110      	movs	r1, #16
 800057c:	430a      	orrs	r2, r1
 800057e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000580:	2003      	movs	r0, #3
 8000582:	f000 f809 	bl	8000598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000586:	f7ff ff85 	bl	8000494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800058a:	2300      	movs	r3, #0
}
 800058c:	0018      	movs	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	40022000 	.word	0x40022000

08000598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <HAL_InitTick+0x5c>)
 80005a2:	681c      	ldr	r4, [r3, #0]
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <HAL_InitTick+0x60>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	0019      	movs	r1, r3
 80005aa:	23fa      	movs	r3, #250	; 0xfa
 80005ac:	0098      	lsls	r0, r3, #2
 80005ae:	f7ff fdab 	bl	8000108 <__udivsi3>
 80005b2:	0003      	movs	r3, r0
 80005b4:	0019      	movs	r1, r3
 80005b6:	0020      	movs	r0, r4
 80005b8:	f7ff fda6 	bl	8000108 <__udivsi3>
 80005bc:	0003      	movs	r3, r0
 80005be:	0018      	movs	r0, r3
 80005c0:	f000 f905 	bl	80007ce <HAL_SYSTICK_Config>
 80005c4:	1e03      	subs	r3, r0, #0
 80005c6:	d001      	beq.n	80005cc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80005c8:	2301      	movs	r3, #1
 80005ca:	e00f      	b.n	80005ec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2b03      	cmp	r3, #3
 80005d0:	d80b      	bhi.n	80005ea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d2:	6879      	ldr	r1, [r7, #4]
 80005d4:	2301      	movs	r3, #1
 80005d6:	425b      	negs	r3, r3
 80005d8:	2200      	movs	r2, #0
 80005da:	0018      	movs	r0, r3
 80005dc:	f000 f8e2 	bl	80007a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <HAL_InitTick+0x64>)
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80005e6:	2300      	movs	r3, #0
 80005e8:	e000      	b.n	80005ec <HAL_InitTick+0x54>
    return HAL_ERROR;
 80005ea:	2301      	movs	r3, #1
}
 80005ec:	0018      	movs	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b003      	add	sp, #12
 80005f2:	bd90      	pop	{r4, r7, pc}
 80005f4:	20000000 	.word	0x20000000
 80005f8:	20000008 	.word	0x20000008
 80005fc:	20000004 	.word	0x20000004

08000600 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <HAL_IncTick+0x1c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	001a      	movs	r2, r3
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <HAL_IncTick+0x20>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	18d2      	adds	r2, r2, r3
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <HAL_IncTick+0x20>)
 8000612:	601a      	str	r2, [r3, #0]
}
 8000614:	46c0      	nop			; (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	20000008 	.word	0x20000008
 8000620:	20000290 	.word	0x20000290

08000624 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  return uwTick;
 8000628:	4b02      	ldr	r3, [pc, #8]	; (8000634 <HAL_GetTick+0x10>)
 800062a:	681b      	ldr	r3, [r3, #0]
}
 800062c:	0018      	movs	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	20000290 	.word	0x20000290

08000638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000640:	f7ff fff0 	bl	8000624 <HAL_GetTick>
 8000644:	0003      	movs	r3, r0
 8000646:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3301      	adds	r3, #1
 8000650:	d005      	beq.n	800065e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <HAL_Delay+0x44>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	001a      	movs	r2, r3
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	189b      	adds	r3, r3, r2
 800065c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	f7ff ffe0 	bl	8000624 <HAL_GetTick>
 8000664:	0002      	movs	r2, r0
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	68fa      	ldr	r2, [r7, #12]
 800066c:	429a      	cmp	r2, r3
 800066e:	d8f7      	bhi.n	8000660 <HAL_Delay+0x28>
  {
  }
}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b004      	add	sp, #16
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	20000008 	.word	0x20000008

08000680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	0002      	movs	r2, r0
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	1dfb      	adds	r3, r7, #7
 800068c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b7f      	cmp	r3, #127	; 0x7f
 8000694:	d828      	bhi.n	80006e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000696:	4a2f      	ldr	r2, [pc, #188]	; (8000754 <__NVIC_SetPriority+0xd4>)
 8000698:	1dfb      	adds	r3, r7, #7
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b25b      	sxtb	r3, r3
 800069e:	089b      	lsrs	r3, r3, #2
 80006a0:	33c0      	adds	r3, #192	; 0xc0
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	589b      	ldr	r3, [r3, r2]
 80006a6:	1dfa      	adds	r2, r7, #7
 80006a8:	7812      	ldrb	r2, [r2, #0]
 80006aa:	0011      	movs	r1, r2
 80006ac:	2203      	movs	r2, #3
 80006ae:	400a      	ands	r2, r1
 80006b0:	00d2      	lsls	r2, r2, #3
 80006b2:	21ff      	movs	r1, #255	; 0xff
 80006b4:	4091      	lsls	r1, r2
 80006b6:	000a      	movs	r2, r1
 80006b8:	43d2      	mvns	r2, r2
 80006ba:	401a      	ands	r2, r3
 80006bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	019b      	lsls	r3, r3, #6
 80006c2:	22ff      	movs	r2, #255	; 0xff
 80006c4:	401a      	ands	r2, r3
 80006c6:	1dfb      	adds	r3, r7, #7
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	0018      	movs	r0, r3
 80006cc:	2303      	movs	r3, #3
 80006ce:	4003      	ands	r3, r0
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006d4:	481f      	ldr	r0, [pc, #124]	; (8000754 <__NVIC_SetPriority+0xd4>)
 80006d6:	1dfb      	adds	r3, r7, #7
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	089b      	lsrs	r3, r3, #2
 80006de:	430a      	orrs	r2, r1
 80006e0:	33c0      	adds	r3, #192	; 0xc0
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006e6:	e031      	b.n	800074c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006e8:	4a1b      	ldr	r2, [pc, #108]	; (8000758 <__NVIC_SetPriority+0xd8>)
 80006ea:	1dfb      	adds	r3, r7, #7
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	0019      	movs	r1, r3
 80006f0:	230f      	movs	r3, #15
 80006f2:	400b      	ands	r3, r1
 80006f4:	3b08      	subs	r3, #8
 80006f6:	089b      	lsrs	r3, r3, #2
 80006f8:	3306      	adds	r3, #6
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	18d3      	adds	r3, r2, r3
 80006fe:	3304      	adds	r3, #4
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	1dfa      	adds	r2, r7, #7
 8000704:	7812      	ldrb	r2, [r2, #0]
 8000706:	0011      	movs	r1, r2
 8000708:	2203      	movs	r2, #3
 800070a:	400a      	ands	r2, r1
 800070c:	00d2      	lsls	r2, r2, #3
 800070e:	21ff      	movs	r1, #255	; 0xff
 8000710:	4091      	lsls	r1, r2
 8000712:	000a      	movs	r2, r1
 8000714:	43d2      	mvns	r2, r2
 8000716:	401a      	ands	r2, r3
 8000718:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	019b      	lsls	r3, r3, #6
 800071e:	22ff      	movs	r2, #255	; 0xff
 8000720:	401a      	ands	r2, r3
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	0018      	movs	r0, r3
 8000728:	2303      	movs	r3, #3
 800072a:	4003      	ands	r3, r0
 800072c:	00db      	lsls	r3, r3, #3
 800072e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000730:	4809      	ldr	r0, [pc, #36]	; (8000758 <__NVIC_SetPriority+0xd8>)
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	001c      	movs	r4, r3
 8000738:	230f      	movs	r3, #15
 800073a:	4023      	ands	r3, r4
 800073c:	3b08      	subs	r3, #8
 800073e:	089b      	lsrs	r3, r3, #2
 8000740:	430a      	orrs	r2, r1
 8000742:	3306      	adds	r3, #6
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	18c3      	adds	r3, r0, r3
 8000748:	3304      	adds	r3, #4
 800074a:	601a      	str	r2, [r3, #0]
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	b003      	add	sp, #12
 8000752:	bd90      	pop	{r4, r7, pc}
 8000754:	e000e100 	.word	0xe000e100
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	1e5a      	subs	r2, r3, #1
 8000768:	2380      	movs	r3, #128	; 0x80
 800076a:	045b      	lsls	r3, r3, #17
 800076c:	429a      	cmp	r2, r3
 800076e:	d301      	bcc.n	8000774 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000770:	2301      	movs	r3, #1
 8000772:	e010      	b.n	8000796 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <SysTick_Config+0x44>)
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	3a01      	subs	r2, #1
 800077a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800077c:	2301      	movs	r3, #1
 800077e:	425b      	negs	r3, r3
 8000780:	2103      	movs	r1, #3
 8000782:	0018      	movs	r0, r3
 8000784:	f7ff ff7c 	bl	8000680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <SysTick_Config+0x44>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078e:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <SysTick_Config+0x44>)
 8000790:	2207      	movs	r2, #7
 8000792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000794:	2300      	movs	r3, #0
}
 8000796:	0018      	movs	r0, r3
 8000798:	46bd      	mov	sp, r7
 800079a:	b002      	add	sp, #8
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	e000e010 	.word	0xe000e010

080007a4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	210f      	movs	r1, #15
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	1c02      	adds	r2, r0, #0
 80007b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b25b      	sxtb	r3, r3
 80007be:	0011      	movs	r1, r2
 80007c0:	0018      	movs	r0, r3
 80007c2:	f7ff ff5d 	bl	8000680 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b004      	add	sp, #16
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	0018      	movs	r0, r3
 80007da:	f7ff ffbf 	bl	800075c <SysTick_Config>
 80007de:	0003      	movs	r3, r0
}
 80007e0:	0018      	movs	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b002      	add	sp, #8
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007f6:	e155      	b.n	8000aa4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2101      	movs	r1, #1
 80007fe:	697a      	ldr	r2, [r7, #20]
 8000800:	4091      	lsls	r1, r2
 8000802:	000a      	movs	r2, r1
 8000804:	4013      	ands	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d100      	bne.n	8000810 <HAL_GPIO_Init+0x28>
 800080e:	e146      	b.n	8000a9e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	2203      	movs	r2, #3
 8000816:	4013      	ands	r3, r2
 8000818:	2b01      	cmp	r3, #1
 800081a:	d005      	beq.n	8000828 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	2203      	movs	r2, #3
 8000822:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000824:	2b02      	cmp	r3, #2
 8000826:	d130      	bne.n	800088a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	2203      	movs	r2, #3
 8000834:	409a      	lsls	r2, r3
 8000836:	0013      	movs	r3, r2
 8000838:	43da      	mvns	r2, r3
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	4013      	ands	r3, r2
 800083e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	68da      	ldr	r2, [r3, #12]
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	409a      	lsls	r2, r3
 800084a:	0013      	movs	r3, r2
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	4313      	orrs	r3, r2
 8000850:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800085e:	2201      	movs	r2, #1
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	409a      	lsls	r2, r3
 8000864:	0013      	movs	r3, r2
 8000866:	43da      	mvns	r2, r3
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	4013      	ands	r3, r2
 800086c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	091b      	lsrs	r3, r3, #4
 8000874:	2201      	movs	r2, #1
 8000876:	401a      	ands	r2, r3
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	409a      	lsls	r2, r3
 800087c:	0013      	movs	r3, r2
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	4313      	orrs	r3, r2
 8000882:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	2203      	movs	r2, #3
 8000890:	4013      	ands	r3, r2
 8000892:	2b03      	cmp	r3, #3
 8000894:	d017      	beq.n	80008c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	68db      	ldr	r3, [r3, #12]
 800089a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	2203      	movs	r2, #3
 80008a2:	409a      	lsls	r2, r3
 80008a4:	0013      	movs	r3, r2
 80008a6:	43da      	mvns	r2, r3
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	4013      	ands	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	689a      	ldr	r2, [r3, #8]
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	409a      	lsls	r2, r3
 80008b8:	0013      	movs	r3, r2
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4313      	orrs	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	2203      	movs	r2, #3
 80008cc:	4013      	ands	r3, r2
 80008ce:	2b02      	cmp	r3, #2
 80008d0:	d123      	bne.n	800091a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	08da      	lsrs	r2, r3, #3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3208      	adds	r2, #8
 80008da:	0092      	lsls	r2, r2, #2
 80008dc:	58d3      	ldr	r3, [r2, r3]
 80008de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	2207      	movs	r2, #7
 80008e4:	4013      	ands	r3, r2
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	220f      	movs	r2, #15
 80008ea:	409a      	lsls	r2, r3
 80008ec:	0013      	movs	r3, r2
 80008ee:	43da      	mvns	r2, r3
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	4013      	ands	r3, r2
 80008f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	691a      	ldr	r2, [r3, #16]
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	2107      	movs	r1, #7
 80008fe:	400b      	ands	r3, r1
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	409a      	lsls	r2, r3
 8000904:	0013      	movs	r3, r2
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4313      	orrs	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	08da      	lsrs	r2, r3, #3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3208      	adds	r2, #8
 8000914:	0092      	lsls	r2, r2, #2
 8000916:	6939      	ldr	r1, [r7, #16]
 8000918:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	2203      	movs	r2, #3
 8000926:	409a      	lsls	r2, r3
 8000928:	0013      	movs	r3, r2
 800092a:	43da      	mvns	r2, r3
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	4013      	ands	r3, r2
 8000930:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	2203      	movs	r2, #3
 8000938:	401a      	ands	r2, r3
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	409a      	lsls	r2, r3
 8000940:	0013      	movs	r3, r2
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	4313      	orrs	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685a      	ldr	r2, [r3, #4]
 8000952:	23c0      	movs	r3, #192	; 0xc0
 8000954:	029b      	lsls	r3, r3, #10
 8000956:	4013      	ands	r3, r2
 8000958:	d100      	bne.n	800095c <HAL_GPIO_Init+0x174>
 800095a:	e0a0      	b.n	8000a9e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095c:	4b57      	ldr	r3, [pc, #348]	; (8000abc <HAL_GPIO_Init+0x2d4>)
 800095e:	699a      	ldr	r2, [r3, #24]
 8000960:	4b56      	ldr	r3, [pc, #344]	; (8000abc <HAL_GPIO_Init+0x2d4>)
 8000962:	2101      	movs	r1, #1
 8000964:	430a      	orrs	r2, r1
 8000966:	619a      	str	r2, [r3, #24]
 8000968:	4b54      	ldr	r3, [pc, #336]	; (8000abc <HAL_GPIO_Init+0x2d4>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	2201      	movs	r2, #1
 800096e:	4013      	ands	r3, r2
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000974:	4a52      	ldr	r2, [pc, #328]	; (8000ac0 <HAL_GPIO_Init+0x2d8>)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	089b      	lsrs	r3, r3, #2
 800097a:	3302      	adds	r3, #2
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	589b      	ldr	r3, [r3, r2]
 8000980:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	2203      	movs	r2, #3
 8000986:	4013      	ands	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	220f      	movs	r2, #15
 800098c:	409a      	lsls	r2, r3
 800098e:	0013      	movs	r3, r2
 8000990:	43da      	mvns	r2, r3
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4013      	ands	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	2390      	movs	r3, #144	; 0x90
 800099c:	05db      	lsls	r3, r3, #23
 800099e:	429a      	cmp	r2, r3
 80009a0:	d019      	beq.n	80009d6 <HAL_GPIO_Init+0x1ee>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a47      	ldr	r2, [pc, #284]	; (8000ac4 <HAL_GPIO_Init+0x2dc>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d013      	beq.n	80009d2 <HAL_GPIO_Init+0x1ea>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a46      	ldr	r2, [pc, #280]	; (8000ac8 <HAL_GPIO_Init+0x2e0>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d00d      	beq.n	80009ce <HAL_GPIO_Init+0x1e6>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a45      	ldr	r2, [pc, #276]	; (8000acc <HAL_GPIO_Init+0x2e4>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d007      	beq.n	80009ca <HAL_GPIO_Init+0x1e2>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a44      	ldr	r2, [pc, #272]	; (8000ad0 <HAL_GPIO_Init+0x2e8>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d101      	bne.n	80009c6 <HAL_GPIO_Init+0x1de>
 80009c2:	2304      	movs	r3, #4
 80009c4:	e008      	b.n	80009d8 <HAL_GPIO_Init+0x1f0>
 80009c6:	2305      	movs	r3, #5
 80009c8:	e006      	b.n	80009d8 <HAL_GPIO_Init+0x1f0>
 80009ca:	2303      	movs	r3, #3
 80009cc:	e004      	b.n	80009d8 <HAL_GPIO_Init+0x1f0>
 80009ce:	2302      	movs	r3, #2
 80009d0:	e002      	b.n	80009d8 <HAL_GPIO_Init+0x1f0>
 80009d2:	2301      	movs	r3, #1
 80009d4:	e000      	b.n	80009d8 <HAL_GPIO_Init+0x1f0>
 80009d6:	2300      	movs	r3, #0
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	2103      	movs	r1, #3
 80009dc:	400a      	ands	r2, r1
 80009de:	0092      	lsls	r2, r2, #2
 80009e0:	4093      	lsls	r3, r2
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009e8:	4935      	ldr	r1, [pc, #212]	; (8000ac0 <HAL_GPIO_Init+0x2d8>)
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	089b      	lsrs	r3, r3, #2
 80009ee:	3302      	adds	r3, #2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009f6:	4b37      	ldr	r3, [pc, #220]	; (8000ad4 <HAL_GPIO_Init+0x2ec>)
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	43da      	mvns	r2, r3
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	4013      	ands	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685a      	ldr	r2, [r3, #4]
 8000a0a:	2380      	movs	r3, #128	; 0x80
 8000a0c:	035b      	lsls	r3, r3, #13
 8000a0e:	4013      	ands	r3, r2
 8000a10:	d003      	beq.n	8000a1a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ad4 <HAL_GPIO_Init+0x2ec>)
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000a20:	4b2c      	ldr	r3, [pc, #176]	; (8000ad4 <HAL_GPIO_Init+0x2ec>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	43da      	mvns	r2, r3
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685a      	ldr	r2, [r3, #4]
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	039b      	lsls	r3, r3, #14
 8000a38:	4013      	ands	r3, r2
 8000a3a:	d003      	beq.n	8000a44 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a44:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <HAL_GPIO_Init+0x2ec>)
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000a4a:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <HAL_GPIO_Init+0x2ec>)
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	43da      	mvns	r2, r3
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685a      	ldr	r2, [r3, #4]
 8000a5e:	2380      	movs	r3, #128	; 0x80
 8000a60:	029b      	lsls	r3, r3, #10
 8000a62:	4013      	ands	r3, r2
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a6e:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <HAL_GPIO_Init+0x2ec>)
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000a74:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <HAL_GPIO_Init+0x2ec>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	43da      	mvns	r2, r3
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685a      	ldr	r2, [r3, #4]
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	025b      	lsls	r3, r3, #9
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	d003      	beq.n	8000a98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <HAL_GPIO_Init+0x2ec>)
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	40da      	lsrs	r2, r3
 8000aac:	1e13      	subs	r3, r2, #0
 8000aae:	d000      	beq.n	8000ab2 <HAL_GPIO_Init+0x2ca>
 8000ab0:	e6a2      	b.n	80007f8 <HAL_GPIO_Init+0x10>
  } 
}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b006      	add	sp, #24
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40010000 	.word	0x40010000
 8000ac4:	48000400 	.word	0x48000400
 8000ac8:	48000800 	.word	0x48000800
 8000acc:	48000c00 	.word	0x48000c00
 8000ad0:	48001000 	.word	0x48001000
 8000ad4:	40010400 	.word	0x40010400

08000ad8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	000a      	movs	r2, r1
 8000ae2:	1cbb      	adds	r3, r7, #2
 8000ae4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	691b      	ldr	r3, [r3, #16]
 8000aea:	1cba      	adds	r2, r7, #2
 8000aec:	8812      	ldrh	r2, [r2, #0]
 8000aee:	4013      	ands	r3, r2
 8000af0:	d004      	beq.n	8000afc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000af2:	230f      	movs	r3, #15
 8000af4:	18fb      	adds	r3, r7, r3
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	e003      	b.n	8000b04 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000afc:	230f      	movs	r3, #15
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000b04:	230f      	movs	r3, #15
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	781b      	ldrb	r3, [r3, #0]
  }
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b004      	add	sp, #16
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	0008      	movs	r0, r1
 8000b1c:	0011      	movs	r1, r2
 8000b1e:	1cbb      	adds	r3, r7, #2
 8000b20:	1c02      	adds	r2, r0, #0
 8000b22:	801a      	strh	r2, [r3, #0]
 8000b24:	1c7b      	adds	r3, r7, #1
 8000b26:	1c0a      	adds	r2, r1, #0
 8000b28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b2a:	1c7b      	adds	r3, r7, #1
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d004      	beq.n	8000b3c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b32:	1cbb      	adds	r3, r7, #2
 8000b34:	881a      	ldrh	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b3a:	e003      	b.n	8000b44 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b3c:	1cbb      	adds	r3, r7, #2
 8000b3e:	881a      	ldrh	r2, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b002      	add	sp, #8
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	000a      	movs	r2, r1
 8000b56:	1cbb      	adds	r3, r7, #2
 8000b58:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b60:	1cbb      	adds	r3, r7, #2
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	4013      	ands	r3, r2
 8000b68:	041a      	lsls	r2, r3, #16
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	1cb9      	adds	r1, r7, #2
 8000b70:	8809      	ldrh	r1, [r1, #0]
 8000b72:	400b      	ands	r3, r1
 8000b74:	431a      	orrs	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	619a      	str	r2, [r3, #24]
}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b004      	add	sp, #16
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d102      	bne.n	8000b98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	f000 fb76 	bl	8001284 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	d100      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x20>
 8000ba2:	e08e      	b.n	8000cc2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ba4:	4bc5      	ldr	r3, [pc, #788]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	220c      	movs	r2, #12
 8000baa:	4013      	ands	r3, r2
 8000bac:	2b04      	cmp	r3, #4
 8000bae:	d00e      	beq.n	8000bce <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bb0:	4bc2      	ldr	r3, [pc, #776]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	220c      	movs	r2, #12
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	2b08      	cmp	r3, #8
 8000bba:	d117      	bne.n	8000bec <HAL_RCC_OscConfig+0x68>
 8000bbc:	4bbf      	ldr	r3, [pc, #764]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000bbe:	685a      	ldr	r2, [r3, #4]
 8000bc0:	23c0      	movs	r3, #192	; 0xc0
 8000bc2:	025b      	lsls	r3, r3, #9
 8000bc4:	401a      	ands	r2, r3
 8000bc6:	2380      	movs	r3, #128	; 0x80
 8000bc8:	025b      	lsls	r3, r3, #9
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d10e      	bne.n	8000bec <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bce:	4bbb      	ldr	r3, [pc, #748]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	2380      	movs	r3, #128	; 0x80
 8000bd4:	029b      	lsls	r3, r3, #10
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	d100      	bne.n	8000bdc <HAL_RCC_OscConfig+0x58>
 8000bda:	e071      	b.n	8000cc0 <HAL_RCC_OscConfig+0x13c>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d000      	beq.n	8000be6 <HAL_RCC_OscConfig+0x62>
 8000be4:	e06c      	b.n	8000cc0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	f000 fb4c 	bl	8001284 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d107      	bne.n	8000c04 <HAL_RCC_OscConfig+0x80>
 8000bf4:	4bb1      	ldr	r3, [pc, #708]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4bb0      	ldr	r3, [pc, #704]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000bfa:	2180      	movs	r1, #128	; 0x80
 8000bfc:	0249      	lsls	r1, r1, #9
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	e02f      	b.n	8000c64 <HAL_RCC_OscConfig+0xe0>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d10c      	bne.n	8000c26 <HAL_RCC_OscConfig+0xa2>
 8000c0c:	4bab      	ldr	r3, [pc, #684]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4baa      	ldr	r3, [pc, #680]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000c12:	49ab      	ldr	r1, [pc, #684]	; (8000ec0 <HAL_RCC_OscConfig+0x33c>)
 8000c14:	400a      	ands	r2, r1
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	4ba8      	ldr	r3, [pc, #672]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4ba7      	ldr	r3, [pc, #668]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000c1e:	49a9      	ldr	r1, [pc, #676]	; (8000ec4 <HAL_RCC_OscConfig+0x340>)
 8000c20:	400a      	ands	r2, r1
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	e01e      	b.n	8000c64 <HAL_RCC_OscConfig+0xe0>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	2b05      	cmp	r3, #5
 8000c2c:	d10e      	bne.n	8000c4c <HAL_RCC_OscConfig+0xc8>
 8000c2e:	4ba3      	ldr	r3, [pc, #652]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4ba2      	ldr	r3, [pc, #648]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000c34:	2180      	movs	r1, #128	; 0x80
 8000c36:	02c9      	lsls	r1, r1, #11
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	4b9f      	ldr	r3, [pc, #636]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b9e      	ldr	r3, [pc, #632]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000c42:	2180      	movs	r1, #128	; 0x80
 8000c44:	0249      	lsls	r1, r1, #9
 8000c46:	430a      	orrs	r2, r1
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	e00b      	b.n	8000c64 <HAL_RCC_OscConfig+0xe0>
 8000c4c:	4b9b      	ldr	r3, [pc, #620]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b9a      	ldr	r3, [pc, #616]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000c52:	499b      	ldr	r1, [pc, #620]	; (8000ec0 <HAL_RCC_OscConfig+0x33c>)
 8000c54:	400a      	ands	r2, r1
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	4b98      	ldr	r3, [pc, #608]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b97      	ldr	r3, [pc, #604]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000c5e:	4999      	ldr	r1, [pc, #612]	; (8000ec4 <HAL_RCC_OscConfig+0x340>)
 8000c60:	400a      	ands	r2, r1
 8000c62:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d014      	beq.n	8000c96 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c6c:	f7ff fcda 	bl	8000624 <HAL_GetTick>
 8000c70:	0003      	movs	r3, r0
 8000c72:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c74:	e008      	b.n	8000c88 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c76:	f7ff fcd5 	bl	8000624 <HAL_GetTick>
 8000c7a:	0002      	movs	r2, r0
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	2b64      	cmp	r3, #100	; 0x64
 8000c82:	d901      	bls.n	8000c88 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000c84:	2303      	movs	r3, #3
 8000c86:	e2fd      	b.n	8001284 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c88:	4b8c      	ldr	r3, [pc, #560]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	029b      	lsls	r3, r3, #10
 8000c90:	4013      	ands	r3, r2
 8000c92:	d0f0      	beq.n	8000c76 <HAL_RCC_OscConfig+0xf2>
 8000c94:	e015      	b.n	8000cc2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c96:	f7ff fcc5 	bl	8000624 <HAL_GetTick>
 8000c9a:	0003      	movs	r3, r0
 8000c9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9e:	e008      	b.n	8000cb2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ca0:	f7ff fcc0 	bl	8000624 <HAL_GetTick>
 8000ca4:	0002      	movs	r2, r0
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b64      	cmp	r3, #100	; 0x64
 8000cac:	d901      	bls.n	8000cb2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e2e8      	b.n	8001284 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb2:	4b82      	ldr	r3, [pc, #520]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	029b      	lsls	r3, r3, #10
 8000cba:	4013      	ands	r3, r2
 8000cbc:	d1f0      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x11c>
 8000cbe:	e000      	b.n	8000cc2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	4013      	ands	r3, r2
 8000cca:	d100      	bne.n	8000cce <HAL_RCC_OscConfig+0x14a>
 8000ccc:	e06c      	b.n	8000da8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000cce:	4b7b      	ldr	r3, [pc, #492]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	d00e      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000cd8:	4b78      	ldr	r3, [pc, #480]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	220c      	movs	r2, #12
 8000cde:	4013      	ands	r3, r2
 8000ce0:	2b08      	cmp	r3, #8
 8000ce2:	d11f      	bne.n	8000d24 <HAL_RCC_OscConfig+0x1a0>
 8000ce4:	4b75      	ldr	r3, [pc, #468]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	23c0      	movs	r3, #192	; 0xc0
 8000cea:	025b      	lsls	r3, r3, #9
 8000cec:	401a      	ands	r2, r3
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	021b      	lsls	r3, r3, #8
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d116      	bne.n	8000d24 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf6:	4b71      	ldr	r3, [pc, #452]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	d005      	beq.n	8000d0c <HAL_RCC_OscConfig+0x188>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d001      	beq.n	8000d0c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e2bb      	b.n	8001284 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d0c:	4b6b      	ldr	r3, [pc, #428]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	22f8      	movs	r2, #248	; 0xf8
 8000d12:	4393      	bics	r3, r2
 8000d14:	0019      	movs	r1, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	00da      	lsls	r2, r3, #3
 8000d1c:	4b67      	ldr	r3, [pc, #412]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d22:	e041      	b.n	8000da8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d024      	beq.n	8000d76 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d2c:	4b63      	ldr	r3, [pc, #396]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b62      	ldr	r3, [pc, #392]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000d32:	2101      	movs	r1, #1
 8000d34:	430a      	orrs	r2, r1
 8000d36:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d38:	f7ff fc74 	bl	8000624 <HAL_GetTick>
 8000d3c:	0003      	movs	r3, r0
 8000d3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d40:	e008      	b.n	8000d54 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d42:	f7ff fc6f 	bl	8000624 <HAL_GetTick>
 8000d46:	0002      	movs	r2, r0
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d901      	bls.n	8000d54 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000d50:	2303      	movs	r3, #3
 8000d52:	e297      	b.n	8001284 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d54:	4b59      	ldr	r3, [pc, #356]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2202      	movs	r2, #2
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	d0f1      	beq.n	8000d42 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d5e:	4b57      	ldr	r3, [pc, #348]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	22f8      	movs	r2, #248	; 0xf8
 8000d64:	4393      	bics	r3, r2
 8000d66:	0019      	movs	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	691b      	ldr	r3, [r3, #16]
 8000d6c:	00da      	lsls	r2, r3, #3
 8000d6e:	4b53      	ldr	r3, [pc, #332]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000d70:	430a      	orrs	r2, r1
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	e018      	b.n	8000da8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d76:	4b51      	ldr	r3, [pc, #324]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	4b50      	ldr	r3, [pc, #320]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	438a      	bics	r2, r1
 8000d80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d82:	f7ff fc4f 	bl	8000624 <HAL_GetTick>
 8000d86:	0003      	movs	r3, r0
 8000d88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d8a:	e008      	b.n	8000d9e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d8c:	f7ff fc4a 	bl	8000624 <HAL_GetTick>
 8000d90:	0002      	movs	r2, r0
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d901      	bls.n	8000d9e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e272      	b.n	8001284 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d9e:	4b47      	ldr	r3, [pc, #284]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2202      	movs	r2, #2
 8000da4:	4013      	ands	r3, r2
 8000da6:	d1f1      	bne.n	8000d8c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2208      	movs	r2, #8
 8000dae:	4013      	ands	r3, r2
 8000db0:	d036      	beq.n	8000e20 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d019      	beq.n	8000dee <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dba:	4b40      	ldr	r3, [pc, #256]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dbe:	4b3f      	ldr	r3, [pc, #252]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dc6:	f7ff fc2d 	bl	8000624 <HAL_GetTick>
 8000dca:	0003      	movs	r3, r0
 8000dcc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dce:	e008      	b.n	8000de2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dd0:	f7ff fc28 	bl	8000624 <HAL_GetTick>
 8000dd4:	0002      	movs	r2, r0
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e250      	b.n	8001284 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de2:	4b36      	ldr	r3, [pc, #216]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de6:	2202      	movs	r2, #2
 8000de8:	4013      	ands	r3, r2
 8000dea:	d0f1      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x24c>
 8000dec:	e018      	b.n	8000e20 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dee:	4b33      	ldr	r3, [pc, #204]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000df2:	4b32      	ldr	r3, [pc, #200]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000df4:	2101      	movs	r1, #1
 8000df6:	438a      	bics	r2, r1
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dfa:	f7ff fc13 	bl	8000624 <HAL_GetTick>
 8000dfe:	0003      	movs	r3, r0
 8000e00:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e02:	e008      	b.n	8000e16 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e04:	f7ff fc0e 	bl	8000624 <HAL_GetTick>
 8000e08:	0002      	movs	r2, r0
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d901      	bls.n	8000e16 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e236      	b.n	8001284 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e16:	4b29      	ldr	r3, [pc, #164]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	d1f1      	bne.n	8000e04 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2204      	movs	r2, #4
 8000e26:	4013      	ands	r3, r2
 8000e28:	d100      	bne.n	8000e2c <HAL_RCC_OscConfig+0x2a8>
 8000e2a:	e0b5      	b.n	8000f98 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e2c:	201f      	movs	r0, #31
 8000e2e:	183b      	adds	r3, r7, r0
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e34:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000e36:	69da      	ldr	r2, [r3, #28]
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	055b      	lsls	r3, r3, #21
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	d110      	bne.n	8000e62 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e40:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000e42:	69da      	ldr	r2, [r3, #28]
 8000e44:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000e46:	2180      	movs	r1, #128	; 0x80
 8000e48:	0549      	lsls	r1, r1, #21
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	61da      	str	r2, [r3, #28]
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000e50:	69da      	ldr	r2, [r3, #28]
 8000e52:	2380      	movs	r3, #128	; 0x80
 8000e54:	055b      	lsls	r3, r3, #21
 8000e56:	4013      	ands	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e5c:	183b      	adds	r3, r7, r0
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_RCC_OscConfig+0x344>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d11a      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <HAL_RCC_OscConfig+0x344>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <HAL_RCC_OscConfig+0x344>)
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	0049      	lsls	r1, r1, #1
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e7c:	f7ff fbd2 	bl	8000624 <HAL_GetTick>
 8000e80:	0003      	movs	r3, r0
 8000e82:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e84:	e008      	b.n	8000e98 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e86:	f7ff fbcd 	bl	8000624 <HAL_GetTick>
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	2b64      	cmp	r3, #100	; 0x64
 8000e92:	d901      	bls.n	8000e98 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e1f5      	b.n	8001284 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <HAL_RCC_OscConfig+0x344>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	d0f0      	beq.n	8000e86 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d10f      	bne.n	8000ecc <HAL_RCC_OscConfig+0x348>
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000eae:	6a1a      	ldr	r2, [r3, #32]
 8000eb0:	4b02      	ldr	r3, [pc, #8]	; (8000ebc <HAL_RCC_OscConfig+0x338>)
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	621a      	str	r2, [r3, #32]
 8000eb8:	e036      	b.n	8000f28 <HAL_RCC_OscConfig+0x3a4>
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	fffeffff 	.word	0xfffeffff
 8000ec4:	fffbffff 	.word	0xfffbffff
 8000ec8:	40007000 	.word	0x40007000
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d10c      	bne.n	8000eee <HAL_RCC_OscConfig+0x36a>
 8000ed4:	4bca      	ldr	r3, [pc, #808]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8000ed6:	6a1a      	ldr	r2, [r3, #32]
 8000ed8:	4bc9      	ldr	r3, [pc, #804]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8000eda:	2101      	movs	r1, #1
 8000edc:	438a      	bics	r2, r1
 8000ede:	621a      	str	r2, [r3, #32]
 8000ee0:	4bc7      	ldr	r3, [pc, #796]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8000ee2:	6a1a      	ldr	r2, [r3, #32]
 8000ee4:	4bc6      	ldr	r3, [pc, #792]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8000ee6:	2104      	movs	r1, #4
 8000ee8:	438a      	bics	r2, r1
 8000eea:	621a      	str	r2, [r3, #32]
 8000eec:	e01c      	b.n	8000f28 <HAL_RCC_OscConfig+0x3a4>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	2b05      	cmp	r3, #5
 8000ef4:	d10c      	bne.n	8000f10 <HAL_RCC_OscConfig+0x38c>
 8000ef6:	4bc2      	ldr	r3, [pc, #776]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8000ef8:	6a1a      	ldr	r2, [r3, #32]
 8000efa:	4bc1      	ldr	r3, [pc, #772]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8000efc:	2104      	movs	r1, #4
 8000efe:	430a      	orrs	r2, r1
 8000f00:	621a      	str	r2, [r3, #32]
 8000f02:	4bbf      	ldr	r3, [pc, #764]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8000f04:	6a1a      	ldr	r2, [r3, #32]
 8000f06:	4bbe      	ldr	r3, [pc, #760]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8000f08:	2101      	movs	r1, #1
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	621a      	str	r2, [r3, #32]
 8000f0e:	e00b      	b.n	8000f28 <HAL_RCC_OscConfig+0x3a4>
 8000f10:	4bbb      	ldr	r3, [pc, #748]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8000f12:	6a1a      	ldr	r2, [r3, #32]
 8000f14:	4bba      	ldr	r3, [pc, #744]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8000f16:	2101      	movs	r1, #1
 8000f18:	438a      	bics	r2, r1
 8000f1a:	621a      	str	r2, [r3, #32]
 8000f1c:	4bb8      	ldr	r3, [pc, #736]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8000f1e:	6a1a      	ldr	r2, [r3, #32]
 8000f20:	4bb7      	ldr	r3, [pc, #732]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8000f22:	2104      	movs	r1, #4
 8000f24:	438a      	bics	r2, r1
 8000f26:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d014      	beq.n	8000f5a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f30:	f7ff fb78 	bl	8000624 <HAL_GetTick>
 8000f34:	0003      	movs	r3, r0
 8000f36:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f38:	e009      	b.n	8000f4e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f3a:	f7ff fb73 	bl	8000624 <HAL_GetTick>
 8000f3e:	0002      	movs	r2, r0
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	4aaf      	ldr	r2, [pc, #700]	; (8001204 <HAL_RCC_OscConfig+0x680>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e19a      	b.n	8001284 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f4e:	4bac      	ldr	r3, [pc, #688]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8000f50:	6a1b      	ldr	r3, [r3, #32]
 8000f52:	2202      	movs	r2, #2
 8000f54:	4013      	ands	r3, r2
 8000f56:	d0f0      	beq.n	8000f3a <HAL_RCC_OscConfig+0x3b6>
 8000f58:	e013      	b.n	8000f82 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f5a:	f7ff fb63 	bl	8000624 <HAL_GetTick>
 8000f5e:	0003      	movs	r3, r0
 8000f60:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f62:	e009      	b.n	8000f78 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f64:	f7ff fb5e 	bl	8000624 <HAL_GetTick>
 8000f68:	0002      	movs	r2, r0
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	4aa5      	ldr	r2, [pc, #660]	; (8001204 <HAL_RCC_OscConfig+0x680>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e185      	b.n	8001284 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f78:	4ba1      	ldr	r3, [pc, #644]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	4013      	ands	r3, r2
 8000f80:	d1f0      	bne.n	8000f64 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f82:	231f      	movs	r3, #31
 8000f84:	18fb      	adds	r3, r7, r3
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d105      	bne.n	8000f98 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f8c:	4b9c      	ldr	r3, [pc, #624]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8000f8e:	69da      	ldr	r2, [r3, #28]
 8000f90:	4b9b      	ldr	r3, [pc, #620]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8000f92:	499d      	ldr	r1, [pc, #628]	; (8001208 <HAL_RCC_OscConfig+0x684>)
 8000f94:	400a      	ands	r2, r1
 8000f96:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2210      	movs	r2, #16
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	d063      	beq.n	800106a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d12a      	bne.n	8001000 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000faa:	4b95      	ldr	r3, [pc, #596]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8000fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fae:	4b94      	ldr	r3, [pc, #592]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8000fb0:	2104      	movs	r1, #4
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000fb6:	4b92      	ldr	r3, [pc, #584]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8000fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fba:	4b91      	ldr	r3, [pc, #580]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc2:	f7ff fb2f 	bl	8000624 <HAL_GetTick>
 8000fc6:	0003      	movs	r3, r0
 8000fc8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000fcc:	f7ff fb2a 	bl	8000624 <HAL_GetTick>
 8000fd0:	0002      	movs	r2, r0
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e152      	b.n	8001284 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000fde:	4b88      	ldr	r3, [pc, #544]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8000fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	d0f1      	beq.n	8000fcc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000fe8:	4b85      	ldr	r3, [pc, #532]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8000fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fec:	22f8      	movs	r2, #248	; 0xf8
 8000fee:	4393      	bics	r3, r2
 8000ff0:	0019      	movs	r1, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	00da      	lsls	r2, r3, #3
 8000ff8:	4b81      	ldr	r3, [pc, #516]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	635a      	str	r2, [r3, #52]	; 0x34
 8000ffe:	e034      	b.n	800106a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	3305      	adds	r3, #5
 8001006:	d111      	bne.n	800102c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001008:	4b7d      	ldr	r3, [pc, #500]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 800100a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800100c:	4b7c      	ldr	r3, [pc, #496]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 800100e:	2104      	movs	r1, #4
 8001010:	438a      	bics	r2, r1
 8001012:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001014:	4b7a      	ldr	r3, [pc, #488]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8001016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001018:	22f8      	movs	r2, #248	; 0xf8
 800101a:	4393      	bics	r3, r2
 800101c:	0019      	movs	r1, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	00da      	lsls	r2, r3, #3
 8001024:	4b76      	ldr	r3, [pc, #472]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8001026:	430a      	orrs	r2, r1
 8001028:	635a      	str	r2, [r3, #52]	; 0x34
 800102a:	e01e      	b.n	800106a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800102c:	4b74      	ldr	r3, [pc, #464]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 800102e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001030:	4b73      	ldr	r3, [pc, #460]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8001032:	2104      	movs	r1, #4
 8001034:	430a      	orrs	r2, r1
 8001036:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001038:	4b71      	ldr	r3, [pc, #452]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 800103a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800103c:	4b70      	ldr	r3, [pc, #448]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 800103e:	2101      	movs	r1, #1
 8001040:	438a      	bics	r2, r1
 8001042:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001044:	f7ff faee 	bl	8000624 <HAL_GetTick>
 8001048:	0003      	movs	r3, r0
 800104a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800104e:	f7ff fae9 	bl	8000624 <HAL_GetTick>
 8001052:	0002      	movs	r2, r0
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e111      	b.n	8001284 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001060:	4b67      	ldr	r3, [pc, #412]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8001062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001064:	2202      	movs	r2, #2
 8001066:	4013      	ands	r3, r2
 8001068:	d1f1      	bne.n	800104e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2220      	movs	r2, #32
 8001070:	4013      	ands	r3, r2
 8001072:	d05c      	beq.n	800112e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001074:	4b62      	ldr	r3, [pc, #392]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	220c      	movs	r2, #12
 800107a:	4013      	ands	r3, r2
 800107c:	2b0c      	cmp	r3, #12
 800107e:	d00e      	beq.n	800109e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001080:	4b5f      	ldr	r3, [pc, #380]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	220c      	movs	r2, #12
 8001086:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001088:	2b08      	cmp	r3, #8
 800108a:	d114      	bne.n	80010b6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800108c:	4b5c      	ldr	r3, [pc, #368]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	23c0      	movs	r3, #192	; 0xc0
 8001092:	025b      	lsls	r3, r3, #9
 8001094:	401a      	ands	r2, r3
 8001096:	23c0      	movs	r3, #192	; 0xc0
 8001098:	025b      	lsls	r3, r3, #9
 800109a:	429a      	cmp	r2, r3
 800109c:	d10b      	bne.n	80010b6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800109e:	4b58      	ldr	r3, [pc, #352]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 80010a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	029b      	lsls	r3, r3, #10
 80010a6:	4013      	ands	r3, r2
 80010a8:	d040      	beq.n	800112c <HAL_RCC_OscConfig+0x5a8>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d03c      	beq.n	800112c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e0e6      	b.n	8001284 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a1b      	ldr	r3, [r3, #32]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d01b      	beq.n	80010f6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80010be:	4b50      	ldr	r3, [pc, #320]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 80010c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c2:	4b4f      	ldr	r3, [pc, #316]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 80010c4:	2180      	movs	r1, #128	; 0x80
 80010c6:	0249      	lsls	r1, r1, #9
 80010c8:	430a      	orrs	r2, r1
 80010ca:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010cc:	f7ff faaa 	bl	8000624 <HAL_GetTick>
 80010d0:	0003      	movs	r3, r0
 80010d2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010d6:	f7ff faa5 	bl	8000624 <HAL_GetTick>
 80010da:	0002      	movs	r2, r0
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e0cd      	b.n	8001284 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80010e8:	4b45      	ldr	r3, [pc, #276]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 80010ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	029b      	lsls	r3, r3, #10
 80010f0:	4013      	ands	r3, r2
 80010f2:	d0f0      	beq.n	80010d6 <HAL_RCC_OscConfig+0x552>
 80010f4:	e01b      	b.n	800112e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80010f6:	4b42      	ldr	r3, [pc, #264]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 80010f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010fa:	4b41      	ldr	r3, [pc, #260]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 80010fc:	4943      	ldr	r1, [pc, #268]	; (800120c <HAL_RCC_OscConfig+0x688>)
 80010fe:	400a      	ands	r2, r1
 8001100:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001102:	f7ff fa8f 	bl	8000624 <HAL_GetTick>
 8001106:	0003      	movs	r3, r0
 8001108:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800110c:	f7ff fa8a 	bl	8000624 <HAL_GetTick>
 8001110:	0002      	movs	r2, r0
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e0b2      	b.n	8001284 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800111e:	4b38      	ldr	r3, [pc, #224]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8001120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	029b      	lsls	r3, r3, #10
 8001126:	4013      	ands	r3, r2
 8001128:	d1f0      	bne.n	800110c <HAL_RCC_OscConfig+0x588>
 800112a:	e000      	b.n	800112e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800112c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	2b00      	cmp	r3, #0
 8001134:	d100      	bne.n	8001138 <HAL_RCC_OscConfig+0x5b4>
 8001136:	e0a4      	b.n	8001282 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	220c      	movs	r2, #12
 800113e:	4013      	ands	r3, r2
 8001140:	2b08      	cmp	r3, #8
 8001142:	d100      	bne.n	8001146 <HAL_RCC_OscConfig+0x5c2>
 8001144:	e078      	b.n	8001238 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114a:	2b02      	cmp	r3, #2
 800114c:	d14c      	bne.n	80011e8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800114e:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8001154:	492e      	ldr	r1, [pc, #184]	; (8001210 <HAL_RCC_OscConfig+0x68c>)
 8001156:	400a      	ands	r2, r1
 8001158:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115a:	f7ff fa63 	bl	8000624 <HAL_GetTick>
 800115e:	0003      	movs	r3, r0
 8001160:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001164:	f7ff fa5e 	bl	8000624 <HAL_GetTick>
 8001168:	0002      	movs	r2, r0
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e086      	b.n	8001284 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	049b      	lsls	r3, r3, #18
 800117e:	4013      	ands	r3, r2
 8001180:	d1f0      	bne.n	8001164 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001182:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8001184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001186:	220f      	movs	r2, #15
 8001188:	4393      	bics	r3, r2
 800118a:	0019      	movs	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001190:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8001192:	430a      	orrs	r2, r1
 8001194:	62da      	str	r2, [r3, #44]	; 0x2c
 8001196:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <HAL_RCC_OscConfig+0x690>)
 800119c:	4013      	ands	r3, r2
 800119e:	0019      	movs	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	431a      	orrs	r2, r3
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 80011ac:	430a      	orrs	r2, r1
 80011ae:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	0449      	lsls	r1, r1, #17
 80011ba:	430a      	orrs	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff fa31 	bl	8000624 <HAL_GetTick>
 80011c2:	0003      	movs	r3, r0
 80011c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011c8:	f7ff fa2c 	bl	8000624 <HAL_GetTick>
 80011cc:	0002      	movs	r2, r0
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e054      	b.n	8001284 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	049b      	lsls	r3, r3, #18
 80011e2:	4013      	ands	r3, r2
 80011e4:	d0f0      	beq.n	80011c8 <HAL_RCC_OscConfig+0x644>
 80011e6:	e04c      	b.n	8001282 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <HAL_RCC_OscConfig+0x67c>)
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <HAL_RCC_OscConfig+0x68c>)
 80011f0:	400a      	ands	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f4:	f7ff fa16 	bl	8000624 <HAL_GetTick>
 80011f8:	0003      	movs	r3, r0
 80011fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fc:	e015      	b.n	800122a <HAL_RCC_OscConfig+0x6a6>
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	40021000 	.word	0x40021000
 8001204:	00001388 	.word	0x00001388
 8001208:	efffffff 	.word	0xefffffff
 800120c:	fffeffff 	.word	0xfffeffff
 8001210:	feffffff 	.word	0xfeffffff
 8001214:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001218:	f7ff fa04 	bl	8000624 <HAL_GetTick>
 800121c:	0002      	movs	r2, r0
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e02c      	b.n	8001284 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <HAL_RCC_OscConfig+0x708>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	049b      	lsls	r3, r3, #18
 8001232:	4013      	ands	r3, r2
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_OscConfig+0x694>
 8001236:	e024      	b.n	8001282 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	2b01      	cmp	r3, #1
 800123e:	d101      	bne.n	8001244 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e01f      	b.n	8001284 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_RCC_OscConfig+0x708>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <HAL_RCC_OscConfig+0x708>)
 800124c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	23c0      	movs	r3, #192	; 0xc0
 8001254:	025b      	lsls	r3, r3, #9
 8001256:	401a      	ands	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125c:	429a      	cmp	r2, r3
 800125e:	d10e      	bne.n	800127e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	220f      	movs	r2, #15
 8001264:	401a      	ands	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800126a:	429a      	cmp	r2, r3
 800126c:	d107      	bne.n	800127e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	23f0      	movs	r3, #240	; 0xf0
 8001272:	039b      	lsls	r3, r3, #14
 8001274:	401a      	ands	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800127a:	429a      	cmp	r2, r3
 800127c:	d001      	beq.n	8001282 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	0018      	movs	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	b008      	add	sp, #32
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000

08001290 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e0bf      	b.n	8001424 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012a4:	4b61      	ldr	r3, [pc, #388]	; (800142c <HAL_RCC_ClockConfig+0x19c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2201      	movs	r2, #1
 80012aa:	4013      	ands	r3, r2
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d911      	bls.n	80012d6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b2:	4b5e      	ldr	r3, [pc, #376]	; (800142c <HAL_RCC_ClockConfig+0x19c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2201      	movs	r2, #1
 80012b8:	4393      	bics	r3, r2
 80012ba:	0019      	movs	r1, r3
 80012bc:	4b5b      	ldr	r3, [pc, #364]	; (800142c <HAL_RCC_ClockConfig+0x19c>)
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c4:	4b59      	ldr	r3, [pc, #356]	; (800142c <HAL_RCC_ClockConfig+0x19c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2201      	movs	r2, #1
 80012ca:	4013      	ands	r3, r2
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d001      	beq.n	80012d6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e0a6      	b.n	8001424 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2202      	movs	r2, #2
 80012dc:	4013      	ands	r3, r2
 80012de:	d015      	beq.n	800130c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2204      	movs	r2, #4
 80012e6:	4013      	ands	r3, r2
 80012e8:	d006      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012ea:	4b51      	ldr	r3, [pc, #324]	; (8001430 <HAL_RCC_ClockConfig+0x1a0>)
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	4b50      	ldr	r3, [pc, #320]	; (8001430 <HAL_RCC_ClockConfig+0x1a0>)
 80012f0:	21e0      	movs	r1, #224	; 0xe0
 80012f2:	00c9      	lsls	r1, r1, #3
 80012f4:	430a      	orrs	r2, r1
 80012f6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012f8:	4b4d      	ldr	r3, [pc, #308]	; (8001430 <HAL_RCC_ClockConfig+0x1a0>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	22f0      	movs	r2, #240	; 0xf0
 80012fe:	4393      	bics	r3, r2
 8001300:	0019      	movs	r1, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	4b4a      	ldr	r3, [pc, #296]	; (8001430 <HAL_RCC_ClockConfig+0x1a0>)
 8001308:	430a      	orrs	r2, r1
 800130a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2201      	movs	r2, #1
 8001312:	4013      	ands	r3, r2
 8001314:	d04c      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d107      	bne.n	800132e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	4b44      	ldr	r3, [pc, #272]	; (8001430 <HAL_RCC_ClockConfig+0x1a0>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	029b      	lsls	r3, r3, #10
 8001326:	4013      	ands	r3, r2
 8001328:	d120      	bne.n	800136c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e07a      	b.n	8001424 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d107      	bne.n	8001346 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001336:	4b3e      	ldr	r3, [pc, #248]	; (8001430 <HAL_RCC_ClockConfig+0x1a0>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	049b      	lsls	r3, r3, #18
 800133e:	4013      	ands	r3, r2
 8001340:	d114      	bne.n	800136c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e06e      	b.n	8001424 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b03      	cmp	r3, #3
 800134c:	d107      	bne.n	800135e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800134e:	4b38      	ldr	r3, [pc, #224]	; (8001430 <HAL_RCC_ClockConfig+0x1a0>)
 8001350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001352:	2380      	movs	r3, #128	; 0x80
 8001354:	029b      	lsls	r3, r3, #10
 8001356:	4013      	ands	r3, r2
 8001358:	d108      	bne.n	800136c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e062      	b.n	8001424 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135e:	4b34      	ldr	r3, [pc, #208]	; (8001430 <HAL_RCC_ClockConfig+0x1a0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2202      	movs	r2, #2
 8001364:	4013      	ands	r3, r2
 8001366:	d101      	bne.n	800136c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e05b      	b.n	8001424 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800136c:	4b30      	ldr	r3, [pc, #192]	; (8001430 <HAL_RCC_ClockConfig+0x1a0>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2203      	movs	r2, #3
 8001372:	4393      	bics	r3, r2
 8001374:	0019      	movs	r1, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <HAL_RCC_ClockConfig+0x1a0>)
 800137c:	430a      	orrs	r2, r1
 800137e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001380:	f7ff f950 	bl	8000624 <HAL_GetTick>
 8001384:	0003      	movs	r3, r0
 8001386:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001388:	e009      	b.n	800139e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800138a:	f7ff f94b 	bl	8000624 <HAL_GetTick>
 800138e:	0002      	movs	r2, r0
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	4a27      	ldr	r2, [pc, #156]	; (8001434 <HAL_RCC_ClockConfig+0x1a4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d901      	bls.n	800139e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e042      	b.n	8001424 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800139e:	4b24      	ldr	r3, [pc, #144]	; (8001430 <HAL_RCC_ClockConfig+0x1a0>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	220c      	movs	r2, #12
 80013a4:	401a      	ands	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d1ec      	bne.n	800138a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <HAL_RCC_ClockConfig+0x19c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	4013      	ands	r3, r2
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d211      	bcs.n	80013e2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013be:	4b1b      	ldr	r3, [pc, #108]	; (800142c <HAL_RCC_ClockConfig+0x19c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2201      	movs	r2, #1
 80013c4:	4393      	bics	r3, r2
 80013c6:	0019      	movs	r1, r3
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <HAL_RCC_ClockConfig+0x19c>)
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d0:	4b16      	ldr	r3, [pc, #88]	; (800142c <HAL_RCC_ClockConfig+0x19c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2201      	movs	r2, #1
 80013d6:	4013      	ands	r3, r2
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d001      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e020      	b.n	8001424 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2204      	movs	r2, #4
 80013e8:	4013      	ands	r3, r2
 80013ea:	d009      	beq.n	8001400 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <HAL_RCC_ClockConfig+0x1a0>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	4a11      	ldr	r2, [pc, #68]	; (8001438 <HAL_RCC_ClockConfig+0x1a8>)
 80013f2:	4013      	ands	r3, r2
 80013f4:	0019      	movs	r1, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <HAL_RCC_ClockConfig+0x1a0>)
 80013fc:	430a      	orrs	r2, r1
 80013fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001400:	f000 f820 	bl	8001444 <HAL_RCC_GetSysClockFreq>
 8001404:	0001      	movs	r1, r0
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <HAL_RCC_ClockConfig+0x1a0>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	091b      	lsrs	r3, r3, #4
 800140c:	220f      	movs	r2, #15
 800140e:	4013      	ands	r3, r2
 8001410:	4a0a      	ldr	r2, [pc, #40]	; (800143c <HAL_RCC_ClockConfig+0x1ac>)
 8001412:	5cd3      	ldrb	r3, [r2, r3]
 8001414:	000a      	movs	r2, r1
 8001416:	40da      	lsrs	r2, r3
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_RCC_ClockConfig+0x1b0>)
 800141a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800141c:	2003      	movs	r0, #3
 800141e:	f7ff f8bb 	bl	8000598 <HAL_InitTick>
  
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
}
 8001424:	0018      	movs	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	b004      	add	sp, #16
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40022000 	.word	0x40022000
 8001430:	40021000 	.word	0x40021000
 8001434:	00001388 	.word	0x00001388
 8001438:	fffff8ff 	.word	0xfffff8ff
 800143c:	080026cc 	.word	0x080026cc
 8001440:	20000000 	.word	0x20000000

08001444 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800145e:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	220c      	movs	r2, #12
 8001468:	4013      	ands	r3, r2
 800146a:	2b0c      	cmp	r3, #12
 800146c:	d046      	beq.n	80014fc <HAL_RCC_GetSysClockFreq+0xb8>
 800146e:	d848      	bhi.n	8001502 <HAL_RCC_GetSysClockFreq+0xbe>
 8001470:	2b04      	cmp	r3, #4
 8001472:	d002      	beq.n	800147a <HAL_RCC_GetSysClockFreq+0x36>
 8001474:	2b08      	cmp	r3, #8
 8001476:	d003      	beq.n	8001480 <HAL_RCC_GetSysClockFreq+0x3c>
 8001478:	e043      	b.n	8001502 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800147a:	4b27      	ldr	r3, [pc, #156]	; (8001518 <HAL_RCC_GetSysClockFreq+0xd4>)
 800147c:	613b      	str	r3, [r7, #16]
      break;
 800147e:	e043      	b.n	8001508 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	0c9b      	lsrs	r3, r3, #18
 8001484:	220f      	movs	r2, #15
 8001486:	4013      	ands	r3, r2
 8001488:	4a24      	ldr	r2, [pc, #144]	; (800151c <HAL_RCC_GetSysClockFreq+0xd8>)
 800148a:	5cd3      	ldrb	r3, [r2, r3]
 800148c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800148e:	4b21      	ldr	r3, [pc, #132]	; (8001514 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001492:	220f      	movs	r2, #15
 8001494:	4013      	ands	r3, r2
 8001496:	4a22      	ldr	r2, [pc, #136]	; (8001520 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001498:	5cd3      	ldrb	r3, [r2, r3]
 800149a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	23c0      	movs	r3, #192	; 0xc0
 80014a0:	025b      	lsls	r3, r3, #9
 80014a2:	401a      	ands	r2, r3
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	025b      	lsls	r3, r3, #9
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d109      	bne.n	80014c0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	481a      	ldr	r0, [pc, #104]	; (8001518 <HAL_RCC_GetSysClockFreq+0xd4>)
 80014b0:	f7fe fe2a 	bl	8000108 <__udivsi3>
 80014b4:	0003      	movs	r3, r0
 80014b6:	001a      	movs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4353      	muls	r3, r2
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	e01a      	b.n	80014f6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	23c0      	movs	r3, #192	; 0xc0
 80014c4:	025b      	lsls	r3, r3, #9
 80014c6:	401a      	ands	r2, r3
 80014c8:	23c0      	movs	r3, #192	; 0xc0
 80014ca:	025b      	lsls	r3, r3, #9
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d109      	bne.n	80014e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	4814      	ldr	r0, [pc, #80]	; (8001524 <HAL_RCC_GetSysClockFreq+0xe0>)
 80014d4:	f7fe fe18 	bl	8000108 <__udivsi3>
 80014d8:	0003      	movs	r3, r0
 80014da:	001a      	movs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4353      	muls	r3, r2
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	480c      	ldr	r0, [pc, #48]	; (8001518 <HAL_RCC_GetSysClockFreq+0xd4>)
 80014e8:	f7fe fe0e 	bl	8000108 <__udivsi3>
 80014ec:	0003      	movs	r3, r0
 80014ee:	001a      	movs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4353      	muls	r3, r2
 80014f4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	613b      	str	r3, [r7, #16]
      break;
 80014fa:	e005      	b.n	8001508 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_RCC_GetSysClockFreq+0xe0>)
 80014fe:	613b      	str	r3, [r7, #16]
      break;
 8001500:	e002      	b.n	8001508 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001504:	613b      	str	r3, [r7, #16]
      break;
 8001506:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001508:	693b      	ldr	r3, [r7, #16]
}
 800150a:	0018      	movs	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	b006      	add	sp, #24
 8001510:	bd80      	pop	{r7, pc}
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	40021000 	.word	0x40021000
 8001518:	007a1200 	.word	0x007a1200
 800151c:	080026dc 	.word	0x080026dc
 8001520:	080026ec 	.word	0x080026ec
 8001524:	02dc6c00 	.word	0x02dc6c00

08001528 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	0002      	movs	r2, r0
 8001530:	1dbb      	adds	r3, r7, #6
 8001532:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001538:	1dbb      	adds	r3, r7, #6
 800153a:	2200      	movs	r2, #0
 800153c:	5e9b      	ldrsh	r3, [r3, r2]
 800153e:	2b84      	cmp	r3, #132	; 0x84
 8001540:	d006      	beq.n	8001550 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8001542:	1dbb      	adds	r3, r7, #6
 8001544:	2200      	movs	r2, #0
 8001546:	5e9a      	ldrsh	r2, [r3, r2]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	18d3      	adds	r3, r2, r3
 800154c:	3303      	adds	r3, #3
 800154e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001550:	68fb      	ldr	r3, [r7, #12]
}
 8001552:	0018      	movs	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	b004      	add	sp, #16
 8001558:	bd80      	pop	{r7, pc}

0800155a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800155e:	f000 faa5 	bl	8001aac <vTaskStartScheduler>
  
  return osOK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	0018      	movs	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800156a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156c:	b089      	sub	sp, #36	; 0x24
 800156e:	af04      	add	r7, sp, #16
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d020      	beq.n	80015be <osThreadCreate+0x54>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d01c      	beq.n	80015be <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685c      	ldr	r4, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681d      	ldr	r5, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691e      	ldr	r6, [r3, #16]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2208      	movs	r2, #8
 8001594:	5e9b      	ldrsh	r3, [r3, r2]
 8001596:	0018      	movs	r0, r3
 8001598:	f7ff ffc6 	bl	8001528 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	695a      	ldr	r2, [r3, #20]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80015a4:	6839      	ldr	r1, [r7, #0]
 80015a6:	9302      	str	r3, [sp, #8]
 80015a8:	9201      	str	r2, [sp, #4]
 80015aa:	9000      	str	r0, [sp, #0]
 80015ac:	000b      	movs	r3, r1
 80015ae:	0032      	movs	r2, r6
 80015b0:	0029      	movs	r1, r5
 80015b2:	0020      	movs	r0, r4
 80015b4:	f000 f8a6 	bl	8001704 <xTaskCreateStatic>
 80015b8:	0003      	movs	r3, r0
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	e01d      	b.n	80015fa <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685c      	ldr	r4, [r3, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80015ca:	b29e      	uxth	r6, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2208      	movs	r2, #8
 80015d0:	5e9b      	ldrsh	r3, [r3, r2]
 80015d2:	0018      	movs	r0, r3
 80015d4:	f7ff ffa8 	bl	8001528 <makeFreeRtosPriority>
 80015d8:	0001      	movs	r1, r0
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	230c      	movs	r3, #12
 80015de:	18fb      	adds	r3, r7, r3
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	9100      	str	r1, [sp, #0]
 80015e4:	0013      	movs	r3, r2
 80015e6:	0032      	movs	r2, r6
 80015e8:	0029      	movs	r1, r5
 80015ea:	0020      	movs	r0, r4
 80015ec:	f000 f8cd 	bl	800178a <xTaskCreate>
 80015f0:	0003      	movs	r3, r0
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d001      	beq.n	80015fa <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e000      	b.n	80015fc <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80015fa:	68fb      	ldr	r3, [r7, #12]
}
 80015fc:	0018      	movs	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	b005      	add	sp, #20
 8001602:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001604 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	0018      	movs	r0, r3
 8001610:	f000 f9e6 	bl	80019e0 <vTaskSuspend>
  
  return osOK;
 8001614:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8001616:	0018      	movs	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	b002      	add	sp, #8
 800161c:	bd80      	pop	{r7, pc}

0800161e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3308      	adds	r3, #8
 800162a:	001a      	movs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	4252      	negs	r2, r2
 8001636:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3308      	adds	r3, #8
 800163c:	001a      	movs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3308      	adds	r3, #8
 8001646:	001a      	movs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	46bd      	mov	sp, r7
 8001656:	b002      	add	sp, #8
 8001658:	bd80      	pop	{r7, pc}

0800165a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001668:	46c0      	nop			; (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	b002      	add	sp, #8
 800166e:	bd80      	pop	{r7, pc}

08001670 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	601a      	str	r2, [r3, #0]
}
 80016ac:	46c0      	nop			; (mov r8, r8)
 80016ae:	46bd      	mov	sp, r7
 80016b0:	b004      	add	sp, #16
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6892      	ldr	r2, [r2, #8]
 80016ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6852      	ldr	r2, [r2, #4]
 80016d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d103      	bne.n	80016e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	1e5a      	subs	r2, r3, #1
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	0018      	movs	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	b004      	add	sp, #16
 8001702:	bd80      	pop	{r7, pc}

08001704 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b08d      	sub	sp, #52	; 0x34
 8001708:	af04      	add	r7, sp, #16
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
 8001710:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <xTaskCreateStatic+0x18>
 8001718:	b672      	cpsid	i
 800171a:	e7fe      	b.n	800171a <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800171c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <xTaskCreateStatic+0x22>
 8001722:	b672      	cpsid	i
 8001724:	e7fe      	b.n	8001724 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001726:	2354      	movs	r3, #84	; 0x54
 8001728:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2b54      	cmp	r3, #84	; 0x54
 800172e:	d001      	beq.n	8001734 <xTaskCreateStatic+0x30>
 8001730:	b672      	cpsid	i
 8001732:	e7fe      	b.n	8001732 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001736:	2b00      	cmp	r3, #0
 8001738:	d020      	beq.n	800177c <xTaskCreateStatic+0x78>
 800173a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173c:	2b00      	cmp	r3, #0
 800173e:	d01d      	beq.n	800177c <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001742:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001748:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	2251      	movs	r2, #81	; 0x51
 800174e:	2102      	movs	r1, #2
 8001750:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001752:	683c      	ldr	r4, [r7, #0]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	68b9      	ldr	r1, [r7, #8]
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	2300      	movs	r3, #0
 800175c:	9303      	str	r3, [sp, #12]
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	9302      	str	r3, [sp, #8]
 8001762:	2318      	movs	r3, #24
 8001764:	18fb      	adds	r3, r7, r3
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	0023      	movs	r3, r4
 800176e:	f000 f859 	bl	8001824 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	0018      	movs	r0, r3
 8001776:	f000 f8cf 	bl	8001918 <prvAddNewTaskToReadyList>
 800177a:	e001      	b.n	8001780 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001780:	69bb      	ldr	r3, [r7, #24]
	}
 8001782:	0018      	movs	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	b009      	add	sp, #36	; 0x24
 8001788:	bd90      	pop	{r4, r7, pc}

0800178a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800178a:	b590      	push	{r4, r7, lr}
 800178c:	b08d      	sub	sp, #52	; 0x34
 800178e:	af04      	add	r7, sp, #16
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	1dbb      	adds	r3, r7, #6
 8001798:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800179a:	1dbb      	adds	r3, r7, #6
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	0018      	movs	r0, r3
 80017a2:	f000 fd8d 	bl	80022c0 <pvPortMalloc>
 80017a6:	0003      	movs	r3, r0
 80017a8:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d010      	beq.n	80017d2 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80017b0:	2054      	movs	r0, #84	; 0x54
 80017b2:	f000 fd85 	bl	80022c0 <pvPortMalloc>
 80017b6:	0003      	movs	r3, r0
 80017b8:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	631a      	str	r2, [r3, #48]	; 0x30
 80017c6:	e006      	b.n	80017d6 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	0018      	movs	r0, r3
 80017cc:	f000 fe1e 	bl	800240c <vPortFree>
 80017d0:	e001      	b.n	80017d6 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d01a      	beq.n	8001812 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	2251      	movs	r2, #81	; 0x51
 80017e0:	2100      	movs	r1, #0
 80017e2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80017e4:	1dbb      	adds	r3, r7, #6
 80017e6:	881a      	ldrh	r2, [r3, #0]
 80017e8:	683c      	ldr	r4, [r7, #0]
 80017ea:	68b9      	ldr	r1, [r7, #8]
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	2300      	movs	r3, #0
 80017f0:	9303      	str	r3, [sp, #12]
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	9302      	str	r3, [sp, #8]
 80017f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f8:	9301      	str	r3, [sp, #4]
 80017fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	0023      	movs	r3, r4
 8001800:	f000 f810 	bl	8001824 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	0018      	movs	r0, r3
 8001808:	f000 f886 	bl	8001918 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800180c:	2301      	movs	r3, #1
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	e002      	b.n	8001818 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001812:	2301      	movs	r3, #1
 8001814:	425b      	negs	r3, r3
 8001816:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001818:	69bb      	ldr	r3, [r7, #24]
	}
 800181a:	0018      	movs	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	b009      	add	sp, #36	; 0x24
 8001820:	bd90      	pop	{r4, r7, pc}
	...

08001824 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4936      	ldr	r1, [pc, #216]	; (8001914 <prvInitialiseNewTask+0xf0>)
 800183a:	468c      	mov	ip, r1
 800183c:	4463      	add	r3, ip
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	18d3      	adds	r3, r2, r3
 8001842:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	2207      	movs	r2, #7
 8001848:	4393      	bics	r3, r2
 800184a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	2207      	movs	r2, #7
 8001850:	4013      	ands	r3, r2
 8001852:	d001      	beq.n	8001858 <prvInitialiseNewTask+0x34>
 8001854:	b672      	cpsid	i
 8001856:	e7fe      	b.n	8001856 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	e013      	b.n	8001886 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	18d3      	adds	r3, r2, r3
 8001864:	7818      	ldrb	r0, [r3, #0]
 8001866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001868:	2134      	movs	r1, #52	; 0x34
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	18d3      	adds	r3, r2, r3
 800186e:	185b      	adds	r3, r3, r1
 8001870:	1c02      	adds	r2, r0, #0
 8001872:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	18d3      	adds	r3, r2, r3
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d006      	beq.n	800188e <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3301      	adds	r3, #1
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d9e8      	bls.n	800185e <prvInitialiseNewTask+0x3a>
 800188c:	e000      	b.n	8001890 <prvInitialiseNewTask+0x6c>
		{
			break;
 800188e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001892:	2243      	movs	r2, #67	; 0x43
 8001894:	2100      	movs	r1, #0
 8001896:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001898:	6a3b      	ldr	r3, [r7, #32]
 800189a:	2b06      	cmp	r3, #6
 800189c:	d901      	bls.n	80018a2 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800189e:	2306      	movs	r3, #6
 80018a0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80018a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a4:	6a3a      	ldr	r2, [r7, #32]
 80018a6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80018a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018aa:	6a3a      	ldr	r2, [r7, #32]
 80018ac:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80018ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b0:	2200      	movs	r2, #0
 80018b2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80018b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b6:	3304      	adds	r3, #4
 80018b8:	0018      	movs	r0, r3
 80018ba:	f7ff fece 	bl	800165a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80018be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c0:	3318      	adds	r3, #24
 80018c2:	0018      	movs	r0, r3
 80018c4:	f7ff fec9 	bl	800165a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80018c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018ce:	6a3b      	ldr	r3, [r7, #32]
 80018d0:	2207      	movs	r2, #7
 80018d2:	1ad2      	subs	r2, r2, r3
 80018d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80018d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018dc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80018de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e0:	2200      	movs	r2, #0
 80018e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80018e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e6:	2250      	movs	r2, #80	; 0x50
 80018e8:	2100      	movs	r1, #0
 80018ea:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	68f9      	ldr	r1, [r7, #12]
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	0018      	movs	r0, r3
 80018f4:	f000 fbb0 	bl	8002058 <pxPortInitialiseStack>
 80018f8:	0002      	movs	r2, r0
 80018fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018fc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001908:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	46bd      	mov	sp, r7
 800190e:	b006      	add	sp, #24
 8001910:	bd80      	pop	{r7, pc}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	3fffffff 	.word	0x3fffffff

08001918 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001920:	f000 fc36 	bl	8002190 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001924:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <prvAddNewTaskToReadyList+0xb0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <prvAddNewTaskToReadyList+0xb0>)
 800192c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800192e:	4b27      	ldr	r3, [pc, #156]	; (80019cc <prvAddNewTaskToReadyList+0xb4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d109      	bne.n	800194a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001936:	4b25      	ldr	r3, [pc, #148]	; (80019cc <prvAddNewTaskToReadyList+0xb4>)
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800193c:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <prvAddNewTaskToReadyList+0xb0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d110      	bne.n	8001966 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001944:	f000 faae 	bl	8001ea4 <prvInitialiseTaskLists>
 8001948:	e00d      	b.n	8001966 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800194a:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <prvAddNewTaskToReadyList+0xb8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001952:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <prvAddNewTaskToReadyList+0xb4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	429a      	cmp	r2, r3
 800195e:	d802      	bhi.n	8001966 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001960:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <prvAddNewTaskToReadyList+0xb4>)
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <prvAddNewTaskToReadyList+0xbc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <prvAddNewTaskToReadyList+0xbc>)
 800196e:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001974:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <prvAddNewTaskToReadyList+0xc0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d903      	bls.n	8001984 <prvAddNewTaskToReadyList+0x6c>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001980:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <prvAddNewTaskToReadyList+0xc0>)
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001988:	0013      	movs	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	189b      	adds	r3, r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4a12      	ldr	r2, [pc, #72]	; (80019dc <prvAddNewTaskToReadyList+0xc4>)
 8001992:	189a      	adds	r2, r3, r2
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3304      	adds	r3, #4
 8001998:	0019      	movs	r1, r3
 800199a:	0010      	movs	r0, r2
 800199c:	f7ff fe68 	bl	8001670 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80019a0:	f000 fc08 	bl	80021b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <prvAddNewTaskToReadyList+0xb8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d008      	beq.n	80019be <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80019ac:	4b07      	ldr	r3, [pc, #28]	; (80019cc <prvAddNewTaskToReadyList+0xb4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d201      	bcs.n	80019be <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80019ba:	f000 fbd9 	bl	8002170 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b002      	add	sp, #8
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	20000394 	.word	0x20000394
 80019cc:	20000294 	.word	0x20000294
 80019d0:	200003a0 	.word	0x200003a0
 80019d4:	200003b0 	.word	0x200003b0
 80019d8:	2000039c 	.word	0x2000039c
 80019dc:	20000298 	.word	0x20000298

080019e0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80019e8:	f000 fbd2 	bl	8002190 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d102      	bne.n	80019f8 <vTaskSuspend+0x18>
 80019f2:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <vTaskSuspend+0xb8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	e000      	b.n	80019fa <vTaskSuspend+0x1a>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3304      	adds	r3, #4
 8001a00:	0018      	movs	r0, r3
 8001a02:	f7ff fe57 	bl	80016b4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d004      	beq.n	8001a18 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	3318      	adds	r3, #24
 8001a12:	0018      	movs	r0, r3
 8001a14:	f7ff fe4e 	bl	80016b4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	1d1a      	adds	r2, r3, #4
 8001a1c:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <vTaskSuspend+0xbc>)
 8001a1e:	0011      	movs	r1, r2
 8001a20:	0018      	movs	r0, r3
 8001a22:	f7ff fe25 	bl	8001670 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2250      	movs	r2, #80	; 0x50
 8001a2a:	5c9b      	ldrb	r3, [r3, r2]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d103      	bne.n	8001a3a <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2250      	movs	r2, #80	; 0x50
 8001a36:	2100      	movs	r1, #0
 8001a38:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8001a3a:	f000 fbbb 	bl	80021b4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <vTaskSuspend+0xc0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8001a46:	f000 fba3 	bl	8002190 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8001a4a:	f000 fac5 	bl	8001fd8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8001a4e:	f000 fbb1 	bl	80021b4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <vTaskSuspend+0xb8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d118      	bne.n	8001a8e <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 8001a5c:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <vTaskSuspend+0xc0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d008      	beq.n	8001a76 <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <vTaskSuspend+0xc4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <vTaskSuspend+0x90>
 8001a6c:	b672      	cpsid	i
 8001a6e:	e7fe      	b.n	8001a6e <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 8001a70:	f000 fb7e 	bl	8002170 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001a74:	e00b      	b.n	8001a8e <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <vTaskSuspend+0xbc>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <vTaskSuspend+0xc8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d103      	bne.n	8001a8a <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <vTaskSuspend+0xb8>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
	}
 8001a88:	e001      	b.n	8001a8e <vTaskSuspend+0xae>
					vTaskSwitchContext();
 8001a8a:	f000 f9a9 	bl	8001de0 <vTaskSwitchContext>
	}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b004      	add	sp, #16
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	20000294 	.word	0x20000294
 8001a9c:	20000380 	.word	0x20000380
 8001aa0:	200003a0 	.word	0x200003a0
 8001aa4:	200003bc 	.word	0x200003bc
 8001aa8:	20000394 	.word	0x20000394

08001aac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b089      	sub	sp, #36	; 0x24
 8001ab0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001aba:	003a      	movs	r2, r7
 8001abc:	1d39      	adds	r1, r7, #4
 8001abe:	2308      	movs	r3, #8
 8001ac0:	18fb      	adds	r3, r7, r3
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f7fe fbac 	bl	8000220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001ac8:	683c      	ldr	r4, [r7, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	4918      	ldr	r1, [pc, #96]	; (8001b30 <vTaskStartScheduler+0x84>)
 8001ad0:	4818      	ldr	r0, [pc, #96]	; (8001b34 <vTaskStartScheduler+0x88>)
 8001ad2:	9202      	str	r2, [sp, #8]
 8001ad4:	9301      	str	r3, [sp, #4]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2300      	movs	r3, #0
 8001adc:	0022      	movs	r2, r4
 8001ade:	f7ff fe11 	bl	8001704 <xTaskCreateStatic>
 8001ae2:	0002      	movs	r2, r0
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <vTaskStartScheduler+0x8c>)
 8001ae6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <vTaskStartScheduler+0x8c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d002      	beq.n	8001af6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001af0:	2301      	movs	r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	e001      	b.n	8001afa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d10d      	bne.n	8001b1c <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8001b00:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <vTaskStartScheduler+0x90>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	4252      	negs	r2, r2
 8001b08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <vTaskStartScheduler+0x94>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <vTaskStartScheduler+0x98>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001b16:	f000 fb07 	bl	8002128 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001b1a:	e004      	b.n	8001b26 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	d101      	bne.n	8001b26 <vTaskStartScheduler+0x7a>
 8001b22:	b672      	cpsid	i
 8001b24:	e7fe      	b.n	8001b24 <vTaskStartScheduler+0x78>
}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b005      	add	sp, #20
 8001b2c:	bd90      	pop	{r4, r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	080026c4 	.word	0x080026c4
 8001b34:	08001e85 	.word	0x08001e85
 8001b38:	200003b8 	.word	0x200003b8
 8001b3c:	200003b4 	.word	0x200003b4
 8001b40:	200003a0 	.word	0x200003a0
 8001b44:	20000398 	.word	0x20000398

08001b48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001b4c:	4b03      	ldr	r3, [pc, #12]	; (8001b5c <vTaskSuspendAll+0x14>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	4b02      	ldr	r3, [pc, #8]	; (8001b5c <vTaskSuspendAll+0x14>)
 8001b54:	601a      	str	r2, [r3, #0]
}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200003bc 	.word	0x200003bc

08001b60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001b6e:	4b3a      	ldr	r3, [pc, #232]	; (8001c58 <xTaskResumeAll+0xf8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <xTaskResumeAll+0x1a>
 8001b76:	b672      	cpsid	i
 8001b78:	e7fe      	b.n	8001b78 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001b7a:	f000 fb09 	bl	8002190 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001b7e:	4b36      	ldr	r3, [pc, #216]	; (8001c58 <xTaskResumeAll+0xf8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	1e5a      	subs	r2, r3, #1
 8001b84:	4b34      	ldr	r3, [pc, #208]	; (8001c58 <xTaskResumeAll+0xf8>)
 8001b86:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b88:	4b33      	ldr	r3, [pc, #204]	; (8001c58 <xTaskResumeAll+0xf8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d15b      	bne.n	8001c48 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001b90:	4b32      	ldr	r3, [pc, #200]	; (8001c5c <xTaskResumeAll+0xfc>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d057      	beq.n	8001c48 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b98:	e02f      	b.n	8001bfa <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001b9a:	4b31      	ldr	r3, [pc, #196]	; (8001c60 <xTaskResumeAll+0x100>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	3318      	adds	r3, #24
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f7ff fd84 	bl	80016b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	3304      	adds	r3, #4
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f7ff fd7f 	bl	80016b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bba:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <xTaskResumeAll+0x104>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d903      	bls.n	8001bca <xTaskResumeAll+0x6a>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc6:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <xTaskResumeAll+0x104>)
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bce:	0013      	movs	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	189b      	adds	r3, r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4a24      	ldr	r2, [pc, #144]	; (8001c68 <xTaskResumeAll+0x108>)
 8001bd8:	189a      	adds	r2, r3, r2
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	0019      	movs	r1, r3
 8001be0:	0010      	movs	r0, r2
 8001be2:	f7ff fd45 	bl	8001670 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bea:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <xTaskResumeAll+0x10c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d302      	bcc.n	8001bfa <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8001bf4:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <xTaskResumeAll+0x110>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <xTaskResumeAll+0x100>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1cb      	bne.n	8001b9a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001c08:	f000 f9e6 	bl	8001fd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <xTaskResumeAll+0x114>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00f      	beq.n	8001c38 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001c18:	f000 f82e 	bl	8001c78 <xTaskIncrementTick>
 8001c1c:	1e03      	subs	r3, r0, #0
 8001c1e:	d002      	beq.n	8001c26 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <xTaskResumeAll+0x110>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f2      	bne.n	8001c18 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <xTaskResumeAll+0x114>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001c38:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <xTaskResumeAll+0x110>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001c40:	2301      	movs	r3, #1
 8001c42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001c44:	f000 fa94 	bl	8002170 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001c48:	f000 fab4 	bl	80021b4 <vPortExitCritical>

	return xAlreadyYielded;
 8001c4c:	68bb      	ldr	r3, [r7, #8]
}
 8001c4e:	0018      	movs	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b004      	add	sp, #16
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	200003bc 	.word	0x200003bc
 8001c5c:	20000394 	.word	0x20000394
 8001c60:	20000354 	.word	0x20000354
 8001c64:	2000039c 	.word	0x2000039c
 8001c68:	20000298 	.word	0x20000298
 8001c6c:	20000294 	.word	0x20000294
 8001c70:	200003a8 	.word	0x200003a8
 8001c74:	200003a4 	.word	0x200003a4

08001c78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c82:	4b4c      	ldr	r3, [pc, #304]	; (8001db4 <xTaskIncrementTick+0x13c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d000      	beq.n	8001c8c <xTaskIncrementTick+0x14>
 8001c8a:	e083      	b.n	8001d94 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001c8c:	4b4a      	ldr	r3, [pc, #296]	; (8001db8 <xTaskIncrementTick+0x140>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	3301      	adds	r3, #1
 8001c92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001c94:	4b48      	ldr	r3, [pc, #288]	; (8001db8 <xTaskIncrementTick+0x140>)
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d117      	bne.n	8001cd0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8001ca0:	4b46      	ldr	r3, [pc, #280]	; (8001dbc <xTaskIncrementTick+0x144>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <xTaskIncrementTick+0x36>
 8001caa:	b672      	cpsid	i
 8001cac:	e7fe      	b.n	8001cac <xTaskIncrementTick+0x34>
 8001cae:	4b43      	ldr	r3, [pc, #268]	; (8001dbc <xTaskIncrementTick+0x144>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	4b42      	ldr	r3, [pc, #264]	; (8001dc0 <xTaskIncrementTick+0x148>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b40      	ldr	r3, [pc, #256]	; (8001dbc <xTaskIncrementTick+0x144>)
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	4b40      	ldr	r3, [pc, #256]	; (8001dc0 <xTaskIncrementTick+0x148>)
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	4b40      	ldr	r3, [pc, #256]	; (8001dc4 <xTaskIncrementTick+0x14c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	4b3e      	ldr	r3, [pc, #248]	; (8001dc4 <xTaskIncrementTick+0x14c>)
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	f000 f984 	bl	8001fd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001cd0:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <xTaskIncrementTick+0x150>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d34e      	bcc.n	8001d78 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cda:	4b38      	ldr	r3, [pc, #224]	; (8001dbc <xTaskIncrementTick+0x144>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <xTaskIncrementTick+0x70>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <xTaskIncrementTick+0x72>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d004      	beq.n	8001cf8 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cee:	4b36      	ldr	r3, [pc, #216]	; (8001dc8 <xTaskIncrementTick+0x150>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4252      	negs	r2, r2
 8001cf4:	601a      	str	r2, [r3, #0]
					break;
 8001cf6:	e03f      	b.n	8001d78 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001cf8:	4b30      	ldr	r3, [pc, #192]	; (8001dbc <xTaskIncrementTick+0x144>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d203      	bcs.n	8001d18 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001d10:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <xTaskIncrementTick+0x150>)
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	601a      	str	r2, [r3, #0]
						break;
 8001d16:	e02f      	b.n	8001d78 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f7ff fcc9 	bl	80016b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d004      	beq.n	8001d34 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	3318      	adds	r3, #24
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f7ff fcc0 	bl	80016b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d38:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <xTaskIncrementTick+0x154>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d903      	bls.n	8001d48 <xTaskIncrementTick+0xd0>
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d44:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <xTaskIncrementTick+0x154>)
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d4c:	0013      	movs	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	189b      	adds	r3, r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4a1e      	ldr	r2, [pc, #120]	; (8001dd0 <xTaskIncrementTick+0x158>)
 8001d56:	189a      	adds	r2, r3, r2
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	0010      	movs	r0, r2
 8001d60:	f7ff fc86 	bl	8001670 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d68:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <xTaskIncrementTick+0x15c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d3b3      	bcc.n	8001cda <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8001d72:	2301      	movs	r3, #1
 8001d74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d76:	e7b0      	b.n	8001cda <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001d78:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <xTaskIncrementTick+0x15c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d7e:	4914      	ldr	r1, [pc, #80]	; (8001dd0 <xTaskIncrementTick+0x158>)
 8001d80:	0013      	movs	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	189b      	adds	r3, r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	585b      	ldr	r3, [r3, r1]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d907      	bls.n	8001d9e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	e004      	b.n	8001d9e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001d94:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <xTaskIncrementTick+0x160>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	1c5a      	adds	r2, r3, #1
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <xTaskIncrementTick+0x160>)
 8001d9c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <xTaskIncrementTick+0x164>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8001da6:	2301      	movs	r3, #1
 8001da8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001daa:	697b      	ldr	r3, [r7, #20]
}
 8001dac:	0018      	movs	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b006      	add	sp, #24
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200003bc 	.word	0x200003bc
 8001db8:	20000398 	.word	0x20000398
 8001dbc:	2000034c 	.word	0x2000034c
 8001dc0:	20000350 	.word	0x20000350
 8001dc4:	200003ac 	.word	0x200003ac
 8001dc8:	200003b4 	.word	0x200003b4
 8001dcc:	2000039c 	.word	0x2000039c
 8001dd0:	20000298 	.word	0x20000298
 8001dd4:	20000294 	.word	0x20000294
 8001dd8:	200003a4 	.word	0x200003a4
 8001ddc:	200003a8 	.word	0x200003a8

08001de0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001de6:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <vTaskSwitchContext+0x90>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001dee:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <vTaskSwitchContext+0x94>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001df4:	e037      	b.n	8001e66 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8001df6:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <vTaskSwitchContext+0x94>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001dfc:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <vTaskSwitchContext+0x98>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	e007      	b.n	8001e14 <vTaskSwitchContext+0x34>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <vTaskSwitchContext+0x2e>
 8001e0a:	b672      	cpsid	i
 8001e0c:	e7fe      	b.n	8001e0c <vTaskSwitchContext+0x2c>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	4919      	ldr	r1, [pc, #100]	; (8001e7c <vTaskSwitchContext+0x9c>)
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	0013      	movs	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	189b      	adds	r3, r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	585b      	ldr	r3, [r3, r1]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0ee      	beq.n	8001e04 <vTaskSwitchContext+0x24>
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	0013      	movs	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	189b      	adds	r3, r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <vTaskSwitchContext+0x9c>)
 8001e32:	189b      	adds	r3, r3, r2
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	3308      	adds	r3, #8
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d104      	bne.n	8001e56 <vTaskSwitchContext+0x76>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <vTaskSwitchContext+0xa0>)
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <vTaskSwitchContext+0x98>)
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	601a      	str	r2, [r3, #0]
}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	b002      	add	sp, #8
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	200003bc 	.word	0x200003bc
 8001e74:	200003a8 	.word	0x200003a8
 8001e78:	2000039c 	.word	0x2000039c
 8001e7c:	20000298 	.word	0x20000298
 8001e80:	20000294 	.word	0x20000294

08001e84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001e8c:	f000 f84e 	bl	8001f2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <prvIdleTask+0x1c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d9f9      	bls.n	8001e8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8001e98:	f000 f96a 	bl	8002170 <vPortYield>
		prvCheckTasksWaitingTermination();
 8001e9c:	e7f6      	b.n	8001e8c <prvIdleTask+0x8>
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	20000298 	.word	0x20000298

08001ea4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	e00c      	b.n	8001eca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	0013      	movs	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	189b      	adds	r3, r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <prvInitialiseTaskLists+0x68>)
 8001ebc:	189b      	adds	r3, r3, r2
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f7ff fbad 	bl	800161e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b06      	cmp	r3, #6
 8001ece:	d9ef      	bls.n	8001eb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <prvInitialiseTaskLists+0x6c>)
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f7ff fba3 	bl	800161e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <prvInitialiseTaskLists+0x70>)
 8001eda:	0018      	movs	r0, r3
 8001edc:	f7ff fb9f 	bl	800161e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001ee0:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <prvInitialiseTaskLists+0x74>)
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f7ff fb9b 	bl	800161e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <prvInitialiseTaskLists+0x78>)
 8001eea:	0018      	movs	r0, r3
 8001eec:	f7ff fb97 	bl	800161e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <prvInitialiseTaskLists+0x7c>)
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f7ff fb93 	bl	800161e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <prvInitialiseTaskLists+0x80>)
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <prvInitialiseTaskLists+0x6c>)
 8001efc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <prvInitialiseTaskLists+0x84>)
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <prvInitialiseTaskLists+0x70>)
 8001f02:	601a      	str	r2, [r3, #0]
}
 8001f04:	46c0      	nop			; (mov r8, r8)
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b002      	add	sp, #8
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000298 	.word	0x20000298
 8001f10:	20000324 	.word	0x20000324
 8001f14:	20000338 	.word	0x20000338
 8001f18:	20000354 	.word	0x20000354
 8001f1c:	20000368 	.word	0x20000368
 8001f20:	20000380 	.word	0x20000380
 8001f24:	2000034c 	.word	0x2000034c
 8001f28:	20000350 	.word	0x20000350

08001f2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f32:	e01a      	b.n	8001f6a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8001f34:	f000 f92c 	bl	8002190 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001f38:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <prvCheckTasksWaitingTermination+0x50>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3304      	adds	r3, #4
 8001f44:	0018      	movs	r0, r3
 8001f46:	f7ff fbb5 	bl	80016b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <prvCheckTasksWaitingTermination+0x54>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	1e5a      	subs	r2, r3, #1
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <prvCheckTasksWaitingTermination+0x54>)
 8001f52:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <prvCheckTasksWaitingTermination+0x58>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	1e5a      	subs	r2, r3, #1
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <prvCheckTasksWaitingTermination+0x58>)
 8001f5c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8001f5e:	f000 f929 	bl	80021b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	0018      	movs	r0, r3
 8001f66:	f000 f80f 	bl	8001f88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <prvCheckTasksWaitingTermination+0x58>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1e0      	bne.n	8001f34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	46c0      	nop			; (mov r8, r8)
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b002      	add	sp, #8
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000368 	.word	0x20000368
 8001f80:	20000394 	.word	0x20000394
 8001f84:	2000037c 	.word	0x2000037c

08001f88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2251      	movs	r2, #81	; 0x51
 8001f94:	5c9b      	ldrb	r3, [r3, r2]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f000 fa34 	bl	800240c <vPortFree>
				vPortFree( pxTCB );
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f000 fa30 	bl	800240c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001fac:	e010      	b.n	8001fd0 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2251      	movs	r2, #81	; 0x51
 8001fb2:	5c9b      	ldrb	r3, [r3, r2]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d104      	bne.n	8001fc2 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f000 fa26 	bl	800240c <vPortFree>
	}
 8001fc0:	e006      	b.n	8001fd0 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2251      	movs	r2, #81	; 0x51
 8001fc6:	5c9b      	ldrb	r3, [r3, r2]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d001      	beq.n	8001fd0 <prvDeleteTCB+0x48>
 8001fcc:	b672      	cpsid	i
 8001fce:	e7fe      	b.n	8001fce <prvDeleteTCB+0x46>
	}
 8001fd0:	46c0      	nop			; (mov r8, r8)
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b002      	add	sp, #8
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <prvResetNextTaskUnblockTime+0x40>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <prvResetNextTaskUnblockTime+0x14>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <prvResetNextTaskUnblockTime+0x16>
 8001fec:	2300      	movs	r3, #0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d004      	beq.n	8001ffc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	; (800201c <prvResetNextTaskUnblockTime+0x44>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	4252      	negs	r2, r2
 8001ff8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001ffa:	e008      	b.n	800200e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <prvResetNextTaskUnblockTime+0x40>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	4b04      	ldr	r3, [pc, #16]	; (800201c <prvResetNextTaskUnblockTime+0x44>)
 800200c:	601a      	str	r2, [r3, #0]
}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	46bd      	mov	sp, r7
 8002012:	b002      	add	sp, #8
 8002014:	bd80      	pop	{r7, pc}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	2000034c 	.word	0x2000034c
 800201c:	200003b4 	.word	0x200003b4

08002020 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <xTaskGetSchedulerState+0x30>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d102      	bne.n	8002034 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800202e:	2301      	movs	r3, #1
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	e008      	b.n	8002046 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002034:	4b07      	ldr	r3, [pc, #28]	; (8002054 <xTaskGetSchedulerState+0x34>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d102      	bne.n	8002042 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800203c:	2302      	movs	r3, #2
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	e001      	b.n	8002046 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002042:	2300      	movs	r3, #0
 8002044:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002046:	687b      	ldr	r3, [r7, #4]
	}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b002      	add	sp, #8
 800204e:	bd80      	pop	{r7, pc}
 8002050:	200003a0 	.word	0x200003a0
 8002054:	200003bc 	.word	0x200003bc

08002058 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	3b04      	subs	r3, #4
 8002068:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2280      	movs	r2, #128	; 0x80
 800206e:	0452      	lsls	r2, r2, #17
 8002070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	3b04      	subs	r3, #4
 8002076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	3b04      	subs	r3, #4
 8002082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002084:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <pxPortInitialiseStack+0x50>)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	3b14      	subs	r3, #20
 800208e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3b20      	subs	r3, #32
 800209a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800209c:	68fb      	ldr	r3, [r7, #12]
}
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b004      	add	sp, #16
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	080020ad 	.word	0x080020ad

080020ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <prvTaskExitError+0x2c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3301      	adds	r3, #1
 80020bc:	d001      	beq.n	80020c2 <prvTaskExitError+0x16>
 80020be:	b672      	cpsid	i
 80020c0:	e7fe      	b.n	80020c0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80020c2:	b672      	cpsid	i
	while( ulDummy == 0 )
 80020c4:	46c0      	nop			; (mov r8, r8)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0fc      	beq.n	80020c6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80020cc:	46c0      	nop			; (mov r8, r8)
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	46bd      	mov	sp, r7
 80020d2:	b002      	add	sp, #8
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	2000000c 	.word	0x2000000c

080020dc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80020e0:	46c0      	nop			; (mov r8, r8)
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020f0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80020f0:	4a0b      	ldr	r2, [pc, #44]	; (8002120 <pxCurrentTCBConst2>)
 80020f2:	6813      	ldr	r3, [r2, #0]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	3020      	adds	r0, #32
 80020f8:	f380 8809 	msr	PSP, r0
 80020fc:	2002      	movs	r0, #2
 80020fe:	f380 8814 	msr	CONTROL, r0
 8002102:	f3bf 8f6f 	isb	sy
 8002106:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002108:	46ae      	mov	lr, r5
 800210a:	bc08      	pop	{r3}
 800210c:	bc04      	pop	{r2}
 800210e:	b662      	cpsie	i
 8002110:	4718      	bx	r3
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	46c0      	nop			; (mov r8, r8)
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	46c0      	nop			; (mov r8, r8)
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	46c0      	nop			; (mov r8, r8)
 800211e:	46c0      	nop			; (mov r8, r8)

08002120 <pxCurrentTCBConst2>:
 8002120:	20000294 	.word	0x20000294
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8002124:	46c0      	nop			; (mov r8, r8)
 8002126:	46c0      	nop			; (mov r8, r8)

08002128 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800212c:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <xPortStartScheduler+0x40>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <xPortStartScheduler+0x40>)
 8002132:	21ff      	movs	r1, #255	; 0xff
 8002134:	0409      	lsls	r1, r1, #16
 8002136:	430a      	orrs	r2, r1
 8002138:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <xPortStartScheduler+0x40>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <xPortStartScheduler+0x40>)
 8002140:	21ff      	movs	r1, #255	; 0xff
 8002142:	0609      	lsls	r1, r1, #24
 8002144:	430a      	orrs	r2, r1
 8002146:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8002148:	f000 f898 	bl	800227c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800214c:	4b07      	ldr	r3, [pc, #28]	; (800216c <xPortStartScheduler+0x44>)
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8002152:	f7ff ffcd 	bl	80020f0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002156:	f7ff fe43 	bl	8001de0 <vTaskSwitchContext>
	prvTaskExitError();
 800215a:	f7ff ffa7 	bl	80020ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800215e:	2300      	movs	r3, #0
}
 8002160:	0018      	movs	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	e000ed20 	.word	0xe000ed20
 800216c:	2000000c 	.word	0x2000000c

08002170 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <vPortYield+0x1c>)
 8002176:	2280      	movs	r2, #128	; 0x80
 8002178:	0552      	lsls	r2, r2, #21
 800217a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800217c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002180:	f3bf 8f6f 	isb	sy
}
 8002184:	46c0      	nop			; (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	e000ed04 	.word	0xe000ed04

08002190 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8002194:	b672      	cpsid	i
    uxCriticalNesting++;
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <vPortEnterCritical+0x20>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <vPortEnterCritical+0x20>)
 800219e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80021a0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80021a4:	f3bf 8f6f 	isb	sy
}
 80021a8:	46c0      	nop			; (mov r8, r8)
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	2000000c 	.word	0x2000000c

080021b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <vPortExitCritical+0x2c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <vPortExitCritical+0x10>
 80021c0:	b672      	cpsid	i
 80021c2:	e7fe      	b.n	80021c2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <vPortExitCritical+0x2c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	1e5a      	subs	r2, r3, #1
 80021ca:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <vPortExitCritical+0x2c>)
 80021cc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80021ce:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <vPortExitCritical+0x2c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d100      	bne.n	80021d8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80021d6:	b662      	cpsie	i
    }
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	2000000c 	.word	0x2000000c

080021e4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80021e4:	f3ef 8010 	mrs	r0, PRIMASK
 80021e8:	b672      	cpsid	i
 80021ea:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80021ec:	46c0      	nop			; (mov r8, r8)
 80021ee:	0018      	movs	r0, r3

080021f0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80021f0:	f380 8810 	msr	PRIMASK, r0
 80021f4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80021f6:	46c0      	nop			; (mov r8, r8)
	...

08002200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002200:	f3ef 8009 	mrs	r0, PSP
 8002204:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <pxCurrentTCBConst>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	3820      	subs	r0, #32
 800220a:	6010      	str	r0, [r2, #0]
 800220c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800220e:	4644      	mov	r4, r8
 8002210:	464d      	mov	r5, r9
 8002212:	4656      	mov	r6, sl
 8002214:	465f      	mov	r7, fp
 8002216:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002218:	b508      	push	{r3, lr}
 800221a:	b672      	cpsid	i
 800221c:	f7ff fde0 	bl	8001de0 <vTaskSwitchContext>
 8002220:	b662      	cpsie	i
 8002222:	bc0c      	pop	{r2, r3}
 8002224:	6811      	ldr	r1, [r2, #0]
 8002226:	6808      	ldr	r0, [r1, #0]
 8002228:	3010      	adds	r0, #16
 800222a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800222c:	46a0      	mov	r8, r4
 800222e:	46a9      	mov	r9, r5
 8002230:	46b2      	mov	sl, r6
 8002232:	46bb      	mov	fp, r7
 8002234:	f380 8809 	msr	PSP, r0
 8002238:	3820      	subs	r0, #32
 800223a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800223c:	4718      	bx	r3
 800223e:	46c0      	nop			; (mov r8, r8)

08002240 <pxCurrentTCBConst>:
 8002240:	20000294 	.word	0x20000294
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8002244:	46c0      	nop			; (mov r8, r8)
 8002246:	46c0      	nop			; (mov r8, r8)

08002248 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800224e:	f7ff ffc9 	bl	80021e4 <ulSetInterruptMaskFromISR>
 8002252:	0003      	movs	r3, r0
 8002254:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002256:	f7ff fd0f 	bl	8001c78 <xTaskIncrementTick>
 800225a:	1e03      	subs	r3, r0, #0
 800225c:	d003      	beq.n	8002266 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <xPortSysTickHandler+0x30>)
 8002260:	2280      	movs	r2, #128	; 0x80
 8002262:	0552      	lsls	r2, r2, #21
 8002264:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	0018      	movs	r0, r3
 800226a:	f7ff ffc1 	bl	80021f0 <vClearInterruptMaskFromISR>
}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	46bd      	mov	sp, r7
 8002272:	b002      	add	sp, #8
 8002274:	bd80      	pop	{r7, pc}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	e000ed04 	.word	0xe000ed04

0800227c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <prvSetupTimerInterrupt+0x34>)
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <prvSetupTimerInterrupt+0x38>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800228c:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <prvSetupTimerInterrupt+0x3c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	22fa      	movs	r2, #250	; 0xfa
 8002292:	0091      	lsls	r1, r2, #2
 8002294:	0018      	movs	r0, r3
 8002296:	f7fd ff37 	bl	8000108 <__udivsi3>
 800229a:	0003      	movs	r3, r0
 800229c:	001a      	movs	r2, r3
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <prvSetupTimerInterrupt+0x40>)
 80022a0:	3a01      	subs	r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80022a4:	4b02      	ldr	r3, [pc, #8]	; (80022b0 <prvSetupTimerInterrupt+0x34>)
 80022a6:	2207      	movs	r2, #7
 80022a8:	601a      	str	r2, [r3, #0]
}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	e000e010 	.word	0xe000e010
 80022b4:	e000e018 	.word	0xe000e018
 80022b8:	20000000 	.word	0x20000000
 80022bc:	e000e014 	.word	0xe000e014

080022c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80022cc:	f7ff fc3c 	bl	8001b48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80022d0:	4b49      	ldr	r3, [pc, #292]	; (80023f8 <pvPortMalloc+0x138>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80022d8:	f000 f8e0 	bl	800249c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80022dc:	4b47      	ldr	r3, [pc, #284]	; (80023fc <pvPortMalloc+0x13c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	4013      	ands	r3, r2
 80022e4:	d000      	beq.n	80022e8 <pvPortMalloc+0x28>
 80022e6:	e079      	b.n	80023dc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d012      	beq.n	8002314 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80022ee:	2208      	movs	r2, #8
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	189b      	adds	r3, r3, r2
 80022f4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2207      	movs	r2, #7
 80022fa:	4013      	ands	r3, r2
 80022fc:	d00a      	beq.n	8002314 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2207      	movs	r2, #7
 8002302:	4393      	bics	r3, r2
 8002304:	3308      	adds	r3, #8
 8002306:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2207      	movs	r2, #7
 800230c:	4013      	ands	r3, r2
 800230e:	d001      	beq.n	8002314 <pvPortMalloc+0x54>
 8002310:	b672      	cpsid	i
 8002312:	e7fe      	b.n	8002312 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d060      	beq.n	80023dc <pvPortMalloc+0x11c>
 800231a:	4b39      	ldr	r3, [pc, #228]	; (8002400 <pvPortMalloc+0x140>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	429a      	cmp	r2, r3
 8002322:	d85b      	bhi.n	80023dc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002324:	4b37      	ldr	r3, [pc, #220]	; (8002404 <pvPortMalloc+0x144>)
 8002326:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8002328:	4b36      	ldr	r3, [pc, #216]	; (8002404 <pvPortMalloc+0x144>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800232e:	e004      	b.n	800233a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	429a      	cmp	r2, r3
 8002342:	d903      	bls.n	800234c <pvPortMalloc+0x8c>
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f1      	bne.n	8002330 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800234c:	4b2a      	ldr	r3, [pc, #168]	; (80023f8 <pvPortMalloc+0x138>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	429a      	cmp	r2, r3
 8002354:	d042      	beq.n	80023dc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2208      	movs	r2, #8
 800235c:	189b      	adds	r3, r3, r2
 800235e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	1ad2      	subs	r2, r2, r3
 8002370:	2308      	movs	r3, #8
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	429a      	cmp	r2, r3
 8002376:	d916      	bls.n	80023a6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	18d3      	adds	r3, r2, r3
 800237e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2207      	movs	r2, #7
 8002384:	4013      	ands	r3, r2
 8002386:	d001      	beq.n	800238c <pvPortMalloc+0xcc>
 8002388:	b672      	cpsid	i
 800238a:	e7fe      	b.n	800238a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	1ad2      	subs	r2, r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	0018      	movs	r0, r3
 80023a2:	f000 f8db 	bl	800255c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80023a6:	4b16      	ldr	r3, [pc, #88]	; (8002400 <pvPortMalloc+0x140>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	1ad2      	subs	r2, r2, r3
 80023b0:	4b13      	ldr	r3, [pc, #76]	; (8002400 <pvPortMalloc+0x140>)
 80023b2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80023b4:	4b12      	ldr	r3, [pc, #72]	; (8002400 <pvPortMalloc+0x140>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b13      	ldr	r3, [pc, #76]	; (8002408 <pvPortMalloc+0x148>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d203      	bcs.n	80023c8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80023c0:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <pvPortMalloc+0x140>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4b10      	ldr	r3, [pc, #64]	; (8002408 <pvPortMalloc+0x148>)
 80023c6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <pvPortMalloc+0x13c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	431a      	orrs	r2, r3
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80023dc:	f7ff fbc0 	bl	8001b60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2207      	movs	r2, #7
 80023e4:	4013      	ands	r3, r2
 80023e6:	d001      	beq.n	80023ec <pvPortMalloc+0x12c>
 80023e8:	b672      	cpsid	i
 80023ea:	e7fe      	b.n	80023ea <pvPortMalloc+0x12a>
	return pvReturn;
 80023ec:	68fb      	ldr	r3, [r7, #12]
}
 80023ee:	0018      	movs	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b006      	add	sp, #24
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	20000fc8 	.word	0x20000fc8
 80023fc:	20000fd4 	.word	0x20000fd4
 8002400:	20000fcc 	.word	0x20000fcc
 8002404:	20000fc0 	.word	0x20000fc0
 8002408:	20000fd0 	.word	0x20000fd0

0800240c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d035      	beq.n	800248a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800241e:	2308      	movs	r3, #8
 8002420:	425b      	negs	r3, r3
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	18d3      	adds	r3, r2, r3
 8002426:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	4b18      	ldr	r3, [pc, #96]	; (8002494 <vPortFree+0x88>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4013      	ands	r3, r2
 8002436:	d101      	bne.n	800243c <vPortFree+0x30>
 8002438:	b672      	cpsid	i
 800243a:	e7fe      	b.n	800243a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <vPortFree+0x3c>
 8002444:	b672      	cpsid	i
 8002446:	e7fe      	b.n	8002446 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <vPortFree+0x88>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4013      	ands	r3, r2
 8002452:	d01a      	beq.n	800248a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d116      	bne.n	800248a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <vPortFree+0x88>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	43db      	mvns	r3, r3
 8002466:	401a      	ands	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800246c:	f7ff fb6c 	bl	8001b48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <vPortFree+0x8c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	18d2      	adds	r2, r2, r3
 800247a:	4b07      	ldr	r3, [pc, #28]	; (8002498 <vPortFree+0x8c>)
 800247c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	0018      	movs	r0, r3
 8002482:	f000 f86b 	bl	800255c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002486:	f7ff fb6b 	bl	8001b60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	46bd      	mov	sp, r7
 800248e:	b004      	add	sp, #16
 8002490:	bd80      	pop	{r7, pc}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	20000fd4 	.word	0x20000fd4
 8002498:	20000fcc 	.word	0x20000fcc

0800249c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80024a2:	23c0      	movs	r3, #192	; 0xc0
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80024a8:	4b26      	ldr	r3, [pc, #152]	; (8002544 <prvHeapInit+0xa8>)
 80024aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2207      	movs	r2, #7
 80024b0:	4013      	ands	r3, r2
 80024b2:	d00c      	beq.n	80024ce <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	3307      	adds	r3, #7
 80024b8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2207      	movs	r2, #7
 80024be:	4393      	bics	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1ad2      	subs	r2, r2, r3
 80024c8:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <prvHeapInit+0xa8>)
 80024ca:	18d3      	adds	r3, r2, r3
 80024cc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80024d2:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <prvHeapInit+0xac>)
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80024d8:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <prvHeapInit+0xac>)
 80024da:	2200      	movs	r2, #0
 80024dc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	18d3      	adds	r3, r2, r3
 80024e4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80024e6:	2208      	movs	r2, #8
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2207      	movs	r2, #7
 80024f2:	4393      	bics	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	4b14      	ldr	r3, [pc, #80]	; (800254c <prvHeapInit+0xb0>)
 80024fa:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80024fc:	4b13      	ldr	r3, [pc, #76]	; (800254c <prvHeapInit+0xb0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2200      	movs	r2, #0
 8002502:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <prvHeapInit+0xb0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	1ad2      	subs	r2, r2, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800251a:	4b0c      	ldr	r3, [pc, #48]	; (800254c <prvHeapInit+0xb0>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <prvHeapInit+0xb4>)
 8002528:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <prvHeapInit+0xb8>)
 8002530:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <prvHeapInit+0xbc>)
 8002534:	2280      	movs	r2, #128	; 0x80
 8002536:	0612      	lsls	r2, r2, #24
 8002538:	601a      	str	r2, [r3, #0]
}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	46bd      	mov	sp, r7
 800253e:	b004      	add	sp, #16
 8002540:	bd80      	pop	{r7, pc}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	200003c0 	.word	0x200003c0
 8002548:	20000fc0 	.word	0x20000fc0
 800254c:	20000fc8 	.word	0x20000fc8
 8002550:	20000fd0 	.word	0x20000fd0
 8002554:	20000fcc 	.word	0x20000fcc
 8002558:	20000fd4 	.word	0x20000fd4

0800255c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002564:	4b27      	ldr	r3, [pc, #156]	; (8002604 <prvInsertBlockIntoFreeList+0xa8>)
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	e002      	b.n	8002570 <prvInsertBlockIntoFreeList+0x14>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	429a      	cmp	r2, r3
 8002578:	d8f7      	bhi.n	800256a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	18d3      	adds	r3, r2, r3
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	429a      	cmp	r2, r3
 800258a:	d108      	bne.n	800259e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	18d2      	adds	r2, r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	18d2      	adds	r2, r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d118      	bne.n	80025e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	4b14      	ldr	r3, [pc, #80]	; (8002608 <prvInsertBlockIntoFreeList+0xac>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d00d      	beq.n	80025da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	18d2      	adds	r2, r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	e008      	b.n	80025ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80025da:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <prvInsertBlockIntoFreeList+0xac>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	e003      	b.n	80025ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d002      	beq.n	80025fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b004      	add	sp, #16
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	20000fc0 	.word	0x20000fc0
 8002608:	20000fc8 	.word	0x20000fc8

0800260c <__libc_init_array>:
 800260c:	b570      	push	{r4, r5, r6, lr}
 800260e:	2600      	movs	r6, #0
 8002610:	4d0c      	ldr	r5, [pc, #48]	; (8002644 <__libc_init_array+0x38>)
 8002612:	4c0d      	ldr	r4, [pc, #52]	; (8002648 <__libc_init_array+0x3c>)
 8002614:	1b64      	subs	r4, r4, r5
 8002616:	10a4      	asrs	r4, r4, #2
 8002618:	42a6      	cmp	r6, r4
 800261a:	d109      	bne.n	8002630 <__libc_init_array+0x24>
 800261c:	2600      	movs	r6, #0
 800261e:	f000 f821 	bl	8002664 <_init>
 8002622:	4d0a      	ldr	r5, [pc, #40]	; (800264c <__libc_init_array+0x40>)
 8002624:	4c0a      	ldr	r4, [pc, #40]	; (8002650 <__libc_init_array+0x44>)
 8002626:	1b64      	subs	r4, r4, r5
 8002628:	10a4      	asrs	r4, r4, #2
 800262a:	42a6      	cmp	r6, r4
 800262c:	d105      	bne.n	800263a <__libc_init_array+0x2e>
 800262e:	bd70      	pop	{r4, r5, r6, pc}
 8002630:	00b3      	lsls	r3, r6, #2
 8002632:	58eb      	ldr	r3, [r5, r3]
 8002634:	4798      	blx	r3
 8002636:	3601      	adds	r6, #1
 8002638:	e7ee      	b.n	8002618 <__libc_init_array+0xc>
 800263a:	00b3      	lsls	r3, r6, #2
 800263c:	58eb      	ldr	r3, [r5, r3]
 800263e:	4798      	blx	r3
 8002640:	3601      	adds	r6, #1
 8002642:	e7f2      	b.n	800262a <__libc_init_array+0x1e>
 8002644:	080026fc 	.word	0x080026fc
 8002648:	080026fc 	.word	0x080026fc
 800264c:	080026fc 	.word	0x080026fc
 8002650:	08002700 	.word	0x08002700

08002654 <memset>:
 8002654:	0003      	movs	r3, r0
 8002656:	1882      	adds	r2, r0, r2
 8002658:	4293      	cmp	r3, r2
 800265a:	d100      	bne.n	800265e <memset+0xa>
 800265c:	4770      	bx	lr
 800265e:	7019      	strb	r1, [r3, #0]
 8002660:	3301      	adds	r3, #1
 8002662:	e7f9      	b.n	8002658 <memset+0x4>

08002664 <_init>:
 8002664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800266a:	bc08      	pop	{r3}
 800266c:	469e      	mov	lr, r3
 800266e:	4770      	bx	lr

08002670 <_fini>:
 8002670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002676:	bc08      	pop	{r3}
 8002678:	469e      	mov	lr, r3
 800267a:	4770      	bx	lr
