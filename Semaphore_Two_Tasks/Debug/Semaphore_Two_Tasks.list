
Semaphore_Two_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006510  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  080065d0  080065d0  000165d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006894  08006894  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006894  08006894  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006894  08006894  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006894  08006894  00016894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006898  08006898  00016898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800689c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c70  20000078  08006914  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ce8  08006914  00021ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122cf  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad1  00000000  00000000  0003236f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00034e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  00035fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c334  00000000  00000000  00037008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d66  00000000  00000000  0005333c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a333e  00000000  00000000  000670a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010a3e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049a8  00000000  00000000  0010a430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080065b8 	.word	0x080065b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	080065b8 	.word	0x080065b8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_lmul>:
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	46ce      	mov	lr, r9
 8000248:	4647      	mov	r7, r8
 800024a:	b580      	push	{r7, lr}
 800024c:	0007      	movs	r7, r0
 800024e:	4699      	mov	r9, r3
 8000250:	0c3b      	lsrs	r3, r7, #16
 8000252:	469c      	mov	ip, r3
 8000254:	0413      	lsls	r3, r2, #16
 8000256:	0c1b      	lsrs	r3, r3, #16
 8000258:	001d      	movs	r5, r3
 800025a:	000e      	movs	r6, r1
 800025c:	4661      	mov	r1, ip
 800025e:	0400      	lsls	r0, r0, #16
 8000260:	0c14      	lsrs	r4, r2, #16
 8000262:	0c00      	lsrs	r0, r0, #16
 8000264:	4345      	muls	r5, r0
 8000266:	434b      	muls	r3, r1
 8000268:	4360      	muls	r0, r4
 800026a:	4361      	muls	r1, r4
 800026c:	18c0      	adds	r0, r0, r3
 800026e:	0c2c      	lsrs	r4, r5, #16
 8000270:	1820      	adds	r0, r4, r0
 8000272:	468c      	mov	ip, r1
 8000274:	4283      	cmp	r3, r0
 8000276:	d903      	bls.n	8000280 <__aeabi_lmul+0x3c>
 8000278:	2380      	movs	r3, #128	; 0x80
 800027a:	025b      	lsls	r3, r3, #9
 800027c:	4698      	mov	r8, r3
 800027e:	44c4      	add	ip, r8
 8000280:	4649      	mov	r1, r9
 8000282:	4379      	muls	r1, r7
 8000284:	4372      	muls	r2, r6
 8000286:	0c03      	lsrs	r3, r0, #16
 8000288:	4463      	add	r3, ip
 800028a:	042d      	lsls	r5, r5, #16
 800028c:	0c2d      	lsrs	r5, r5, #16
 800028e:	18c9      	adds	r1, r1, r3
 8000290:	0400      	lsls	r0, r0, #16
 8000292:	1940      	adds	r0, r0, r5
 8000294:	1889      	adds	r1, r1, r2
 8000296:	bcc0      	pop	{r6, r7}
 8000298:	46b9      	mov	r9, r7
 800029a:	46b0      	mov	r8, r6
 800029c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800029e:	46c0      	nop			; (mov r8, r8)

080002a0 <Master_Task_Handler>:




void Master_Task_Handler(void *params)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]


	while(1)
	{

		xMasterPassId = (rand() & 0x1FF); // xMasterPassId nesnesine bu oluşturduğum random değer gelir
 80002a8:	f004 ff34 	bl	8005114 <rand>
 80002ac:	0003      	movs	r3, r0
 80002ae:	05db      	lsls	r3, r3, #23
 80002b0:	0ddb      	lsrs	r3, r3, #23
 80002b2:	60bb      	str	r3, [r7, #8]
		// bu random değerini kuyruğa yazarız

		xStatus = xQueueSend(xQueue,&xMasterPassId,portMAX_DELAY);
 80002b4:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <Master_Task_Handler+0x58>)
 80002b6:	6818      	ldr	r0, [r3, #0]
 80002b8:	2301      	movs	r3, #1
 80002ba:	425a      	negs	r2, r3
 80002bc:	2308      	movs	r3, #8
 80002be:	18f9      	adds	r1, r7, r3
 80002c0:	2300      	movs	r3, #0
 80002c2:	f002 fd28 	bl	8002d16 <xQueueGenericSend>
 80002c6:	0003      	movs	r3, r0
 80002c8:	60fb      	str	r3, [r7, #12]
		 	 xMasterPassId -> Kuyruğa göndermek istediğiniz veri
		 	 portMAX_DELAY -> Kuyruk doluysa, görev kuyruğa mesaj göndermek için ne kadar süre bekleyecek,kuyruk dolana kadar beklemeyi seçiyoruz

		 */

		if(xStatus != pdPASS) // kuyruğa veri yazılmamıştır demek -> pdPASS, işlem başarılı demektir
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d0eb      	beq.n	80002a8 <Master_Task_Handler+0x8>
		{
			sprintf((char*)myMessage,"Could not sent to the Queue!\r\n");
 80002d0:	4a0a      	ldr	r2, [pc, #40]	; (80002fc <Master_Task_Handler+0x5c>)
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <Master_Task_Handler+0x60>)
 80002d4:	0011      	movs	r1, r2
 80002d6:	0018      	movs	r0, r3
 80002d8:	f004 ff5a 	bl	8005190 <siprintf>
			HAL_UART_Transmit(&huart1, myMessage, strlen((char*)myMessage), 1000);
 80002dc:	4b08      	ldr	r3, [pc, #32]	; (8000300 <Master_Task_Handler+0x60>)
 80002de:	0018      	movs	r0, r3
 80002e0:	f7ff ff12 	bl	8000108 <strlen>
 80002e4:	0003      	movs	r3, r0
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	23fa      	movs	r3, #250	; 0xfa
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	4904      	ldr	r1, [pc, #16]	; (8000300 <Master_Task_Handler+0x60>)
 80002ee:	4805      	ldr	r0, [pc, #20]	; (8000304 <Master_Task_Handler+0x64>)
 80002f0:	f001 ff24 	bl	800213c <HAL_UART_Transmit>
		xMasterPassId = (rand() & 0x1FF); // xMasterPassId nesnesine bu oluşturduğum random değer gelir
 80002f4:	e7d8      	b.n	80002a8 <Master_Task_Handler+0x8>
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	200000fc 	.word	0x200000fc
 80002fc:	080065f8 	.word	0x080065f8
 8000300:	20000094 	.word	0x20000094
 8000304:	20000100 	.word	0x20000100

08000308 <Slave_Task_Handler>:

}


void Slave_Task_Handler(void *params)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]


	while(1)
	{

		xSemaphoreTake(xSemaphore,0);
 8000310:	4b15      	ldr	r3, [pc, #84]	; (8000368 <Slave_Task_Handler+0x60>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2100      	movs	r1, #0
 8000316:	0018      	movs	r0, r3
 8000318:	f002 fe76 	bl	8003008 <xQueueSemaphoreTake>

			İlk çocuk salıncaktan çıktığında,
			diğer çocuk xSemaphoreTake() ile anahtarı alır ve salıncakta oynamaya başlar.
		 */

		xStatus = xQueueReceive(xQueue, &xSlavePassId, 0);
 800031c:	4b13      	ldr	r3, [pc, #76]	; (800036c <Slave_Task_Handler+0x64>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2208      	movs	r2, #8
 8000322:	18b9      	adds	r1, r7, r2
 8000324:	2200      	movs	r2, #0
 8000326:	0018      	movs	r0, r3
 8000328:	f002 fdb9 	bl	8002e9e <xQueueReceive>
 800032c:	0003      	movs	r3, r0
 800032e:	60fb      	str	r3, [r7, #12]

		if(xStatus != pdPASS)
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	2b01      	cmp	r3, #1
 8000334:	d012      	beq.n	800035c <Slave_Task_Handler+0x54>
		{
			sprintf((char*)myMessage,"Slave Task: Queue is empty,nothing to do!\r\n");
 8000336:	4a0e      	ldr	r2, [pc, #56]	; (8000370 <Slave_Task_Handler+0x68>)
 8000338:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <Slave_Task_Handler+0x6c>)
 800033a:	0011      	movs	r1, r2
 800033c:	0018      	movs	r0, r3
 800033e:	f004 ff27 	bl	8005190 <siprintf>
			HAL_UART_Transmit(&huart1, myMessage, strlen((char*)myMessage), 1000);
 8000342:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <Slave_Task_Handler+0x6c>)
 8000344:	0018      	movs	r0, r3
 8000346:	f7ff fedf 	bl	8000108 <strlen>
 800034a:	0003      	movs	r3, r0
 800034c:	b29a      	uxth	r2, r3
 800034e:	23fa      	movs	r3, #250	; 0xfa
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	4908      	ldr	r1, [pc, #32]	; (8000374 <Slave_Task_Handler+0x6c>)
 8000354:	4808      	ldr	r0, [pc, #32]	; (8000378 <Slave_Task_Handler+0x70>)
 8000356:	f001 fef1 	bl	800213c <HAL_UART_Transmit>
 800035a:	e7d9      	b.n	8000310 <Slave_Task_Handler+0x8>
		}
		else
		{
			SlaveDoWork(xSlavePassId);
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	0018      	movs	r0, r3
 8000360:	f000 f80c 	bl	800037c <SlaveDoWork>
		xSemaphoreTake(xSemaphore,0);
 8000364:	e7d4      	b.n	8000310 <Slave_Task_Handler+0x8>
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	200000f8 	.word	0x200000f8
 800036c:	200000fc 	.word	0x200000fc
 8000370:	08006618 	.word	0x08006618
 8000374:	20000094 	.word	0x20000094
 8000378:	20000100 	.word	0x20000100

0800037c <SlaveDoWork>:


}

void SlaveDoWork(unsigned int passId)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
	sprintf((char*)myMessage,"Slave task working on Passed Id: %d \r\n",passId);
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	490a      	ldr	r1, [pc, #40]	; (80003b0 <SlaveDoWork+0x34>)
 8000388:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <SlaveDoWork+0x38>)
 800038a:	0018      	movs	r0, r3
 800038c:	f004 ff00 	bl	8005190 <siprintf>
	HAL_UART_Transmit(&huart1, myMessage, strlen((char*)myMessage), 1000);
 8000390:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <SlaveDoWork+0x38>)
 8000392:	0018      	movs	r0, r3
 8000394:	f7ff feb8 	bl	8000108 <strlen>
 8000398:	0003      	movs	r3, r0
 800039a:	b29a      	uxth	r2, r3
 800039c:	23fa      	movs	r3, #250	; 0xfa
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	4904      	ldr	r1, [pc, #16]	; (80003b4 <SlaveDoWork+0x38>)
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <SlaveDoWork+0x3c>)
 80003a4:	f001 feca 	bl	800213c <HAL_UART_Transmit>
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	08006644 	.word	0x08006644
 80003b4:	20000094 	.word	0x20000094
 80003b8:	20000100 	.word	0x20000100

080003bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c2:	f000 fb83 	bl	8000acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c6:	f000 f887 	bl	80004d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ca:	f000 f909 	bl	80005e0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80003ce:	f000 f8d7 	bl	8000580 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	sprintf((char*)myMessage,"Demo of binary semaphore usage between two tasks.\r\n");
 80003d2:	4a36      	ldr	r2, [pc, #216]	; (80004ac <main+0xf0>)
 80003d4:	4b36      	ldr	r3, [pc, #216]	; (80004b0 <main+0xf4>)
 80003d6:	0011      	movs	r1, r2
 80003d8:	0018      	movs	r0, r3
 80003da:	f004 fed9 	bl	8005190 <siprintf>


	HAL_UART_Transmit(&huart1, (uint8_t *)myMessage, strlen((char*)myMessage), 1000);
 80003de:	4b34      	ldr	r3, [pc, #208]	; (80004b0 <main+0xf4>)
 80003e0:	0018      	movs	r0, r3
 80003e2:	f7ff fe91 	bl	8000108 <strlen>
 80003e6:	0003      	movs	r3, r0
 80003e8:	b29a      	uxth	r2, r3
 80003ea:	23fa      	movs	r3, #250	; 0xfa
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	4930      	ldr	r1, [pc, #192]	; (80004b0 <main+0xf4>)
 80003f0:	4830      	ldr	r0, [pc, #192]	; (80004b4 <main+0xf8>)
 80003f2:	f001 fea3 	bl	800213c <HAL_UART_Transmit>


    xQueue = xQueueCreate(1,sizeof(unsigned int)) ; // kuyruk oluşturduk her seferinde 1 tane veri koyacağız
 80003f6:	2200      	movs	r2, #0
 80003f8:	2104      	movs	r1, #4
 80003fa:	2001      	movs	r0, #1
 80003fc:	f002 fc06 	bl	8002c0c <xQueueGenericCreate>
 8000400:	0002      	movs	r2, r0
 8000402:	4b2d      	ldr	r3, [pc, #180]	; (80004b8 <main+0xfc>)
 8000404:	601a      	str	r2, [r3, #0]
  	  	  	  	  	  	  	  	  	  	  	  	  // ve görev bu veriyi alıp tekrar 1 tane daha veri koyulacak

    vSemaphoreCreateBinary(xSemaphore); // semafor oluşturduk
 8000406:	2203      	movs	r2, #3
 8000408:	2100      	movs	r1, #0
 800040a:	2001      	movs	r0, #1
 800040c:	f002 fbfe 	bl	8002c0c <xQueueGenericCreate>
 8000410:	0002      	movs	r2, r0
 8000412:	4b2a      	ldr	r3, [pc, #168]	; (80004bc <main+0x100>)
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	4b29      	ldr	r3, [pc, #164]	; (80004bc <main+0x100>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d006      	beq.n	800042c <main+0x70>
 800041e:	4b27      	ldr	r3, [pc, #156]	; (80004bc <main+0x100>)
 8000420:	6818      	ldr	r0, [r3, #0]
 8000422:	2300      	movs	r3, #0
 8000424:	2200      	movs	r2, #0
 8000426:	2100      	movs	r1, #0
 8000428:	f002 fc75 	bl	8002d16 <xQueueGenericSend>

 if( (xQueue!=NULL) && (xSemaphore!=NULL) )
 800042c:	4b22      	ldr	r3, [pc, #136]	; (80004b8 <main+0xfc>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d02c      	beq.n	800048e <main+0xd2>
 8000434:	4b21      	ldr	r3, [pc, #132]	; (80004bc <main+0x100>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d028      	beq.n	800048e <main+0xd2>
  {
	  sprintf((char*)myMessage,"Semaphore,Queue and Task Created...\r\n");
 800043c:	4a20      	ldr	r2, [pc, #128]	; (80004c0 <main+0x104>)
 800043e:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <main+0xf4>)
 8000440:	0011      	movs	r1, r2
 8000442:	0018      	movs	r0, r3
 8000444:	f004 fea4 	bl	8005190 <siprintf>
	  HAL_UART_Transmit(&huart1, myMessage, strlen((char*)myMessage), 1000);
 8000448:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <main+0xf4>)
 800044a:	0018      	movs	r0, r3
 800044c:	f7ff fe5c 	bl	8000108 <strlen>
 8000450:	0003      	movs	r3, r0
 8000452:	b29a      	uxth	r2, r3
 8000454:	23fa      	movs	r3, #250	; 0xfa
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	4915      	ldr	r1, [pc, #84]	; (80004b0 <main+0xf4>)
 800045a:	4816      	ldr	r0, [pc, #88]	; (80004b4 <main+0xf8>)
 800045c:	f001 fe6e 	bl	800213c <HAL_UART_Transmit>
	  // semafor ve kuyruk sağlıklı bir şekilde oluştu mu diye kontrol ediyoruz


	  xTaskCreate(Master_Task_Handler, "Master_Task", 200, NULL, 3, NULL);
 8000460:	4918      	ldr	r1, [pc, #96]	; (80004c4 <main+0x108>)
 8000462:	4819      	ldr	r0, [pc, #100]	; (80004c8 <main+0x10c>)
 8000464:	2300      	movs	r3, #0
 8000466:	9301      	str	r3, [sp, #4]
 8000468:	2303      	movs	r3, #3
 800046a:	9300      	str	r3, [sp, #0]
 800046c:	2300      	movs	r3, #0
 800046e:	22c8      	movs	r2, #200	; 0xc8
 8000470:	f003 f849 	bl	8003506 <xTaskCreate>
	  xTaskCreate(Slave_Task_Handler, "Slave_Task", 200, NULL, 2, NULL);
 8000474:	4915      	ldr	r1, [pc, #84]	; (80004cc <main+0x110>)
 8000476:	4816      	ldr	r0, [pc, #88]	; (80004d0 <main+0x114>)
 8000478:	2300      	movs	r3, #0
 800047a:	9301      	str	r3, [sp, #4]
 800047c:	2302      	movs	r3, #2
 800047e:	9300      	str	r3, [sp, #0]
 8000480:	2300      	movs	r3, #0
 8000482:	22c8      	movs	r2, #200	; 0xc8
 8000484:	f003 f83f 	bl	8003506 <xTaskCreate>

	  vTaskStartScheduler();
 8000488:	f003 f99a 	bl	80037c0 <vTaskStartScheduler>
 800048c:	e00c      	b.n	80004a8 <main+0xec>
  }

  else
  {
	  sprintf((char*)myMessage,"Tasks are not created!\r\n");
 800048e:	4a11      	ldr	r2, [pc, #68]	; (80004d4 <main+0x118>)
 8000490:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <main+0xf4>)
 8000492:	0011      	movs	r1, r2
 8000494:	0018      	movs	r0, r3
 8000496:	f004 fe7b 	bl	8005190 <siprintf>
	  HAL_UART_Transmit(&huart1, myMessage, sizeof((char*)myMessage), 1000);
 800049a:	23fa      	movs	r3, #250	; 0xfa
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	4904      	ldr	r1, [pc, #16]	; (80004b0 <main+0xf4>)
 80004a0:	4804      	ldr	r0, [pc, #16]	; (80004b4 <main+0xf8>)
 80004a2:	2204      	movs	r2, #4
 80004a4:	f001 fe4a 	bl	800213c <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <main+0xec>
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	0800666c 	.word	0x0800666c
 80004b0:	20000094 	.word	0x20000094
 80004b4:	20000100 	.word	0x20000100
 80004b8:	200000fc 	.word	0x200000fc
 80004bc:	200000f8 	.word	0x200000f8
 80004c0:	080065d0 	.word	0x080065d0
 80004c4:	080066a0 	.word	0x080066a0
 80004c8:	080002a1 	.word	0x080002a1
 80004cc:	080066ac 	.word	0x080066ac
 80004d0:	08000309 	.word	0x08000309
 80004d4:	080066b8 	.word	0x080066b8

080004d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b099      	sub	sp, #100	; 0x64
 80004dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004de:	242c      	movs	r4, #44	; 0x2c
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	0018      	movs	r0, r3
 80004e4:	2334      	movs	r3, #52	; 0x34
 80004e6:	001a      	movs	r2, r3
 80004e8:	2100      	movs	r1, #0
 80004ea:	f004 fe0a 	bl	8005102 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ee:	231c      	movs	r3, #28
 80004f0:	18fb      	adds	r3, r7, r3
 80004f2:	0018      	movs	r0, r3
 80004f4:	2310      	movs	r3, #16
 80004f6:	001a      	movs	r2, r3
 80004f8:	2100      	movs	r1, #0
 80004fa:	f004 fe02 	bl	8005102 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004fe:	003b      	movs	r3, r7
 8000500:	0018      	movs	r0, r3
 8000502:	231c      	movs	r3, #28
 8000504:	001a      	movs	r2, r3
 8000506:	2100      	movs	r1, #0
 8000508:	f004 fdfb 	bl	8005102 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800050c:	193b      	adds	r3, r7, r4
 800050e:	2201      	movs	r2, #1
 8000510:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	2201      	movs	r2, #1
 8000516:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000518:	193b      	adds	r3, r7, r4
 800051a:	2200      	movs	r2, #0
 800051c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051e:	193b      	adds	r3, r7, r4
 8000520:	0018      	movs	r0, r3
 8000522:	f000 fd47 	bl	8000fb4 <HAL_RCC_OscConfig>
 8000526:	1e03      	subs	r3, r0, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800052a:	f000 f8d5 	bl	80006d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052e:	211c      	movs	r1, #28
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2207      	movs	r2, #7
 8000534:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2201      	movs	r2, #1
 800053a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2200      	movs	r2, #0
 8000546:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2100      	movs	r1, #0
 800054c:	0018      	movs	r0, r3
 800054e:	f001 f8b7 	bl	80016c0 <HAL_RCC_ClockConfig>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000556:	f000 f8bf 	bl	80006d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800055a:	003b      	movs	r3, r7
 800055c:	2201      	movs	r2, #1
 800055e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000560:	003b      	movs	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000566:	003b      	movs	r3, r7
 8000568:	0018      	movs	r0, r3
 800056a:	f001 fa3f 	bl	80019ec <HAL_RCCEx_PeriphCLKConfig>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000572:	f000 f8b1 	bl	80006d8 <Error_Handler>
  }
}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	b019      	add	sp, #100	; 0x64
 800057c:	bd90      	pop	{r4, r7, pc}
	...

08000580 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 8000586:	4a15      	ldr	r2, [pc, #84]	; (80005dc <MX_USART1_UART_Init+0x5c>)
 8000588:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800058a:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 800058c:	22e1      	movs	r2, #225	; 0xe1
 800058e:	0252      	lsls	r2, r2, #9
 8000590:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000598:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 80005a6:	220c      	movs	r2, #12
 80005a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 80005be:	2200      	movs	r2, #0
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 80005c4:	0018      	movs	r0, r3
 80005c6:	f001 fd65 	bl	8002094 <HAL_UART_Init>
 80005ca:	1e03      	subs	r3, r0, #0
 80005cc:	d001      	beq.n	80005d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005ce:	f000 f883 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000100 	.word	0x20000100
 80005dc:	40013800 	.word	0x40013800

080005e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b089      	sub	sp, #36	; 0x24
 80005e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	240c      	movs	r4, #12
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	0018      	movs	r0, r3
 80005ec:	2314      	movs	r3, #20
 80005ee:	001a      	movs	r2, r3
 80005f0:	2100      	movs	r1, #0
 80005f2:	f004 fd86 	bl	8005102 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	4b2d      	ldr	r3, [pc, #180]	; (80006ac <MX_GPIO_Init+0xcc>)
 80005f8:	695a      	ldr	r2, [r3, #20]
 80005fa:	4b2c      	ldr	r3, [pc, #176]	; (80006ac <MX_GPIO_Init+0xcc>)
 80005fc:	2180      	movs	r1, #128	; 0x80
 80005fe:	0309      	lsls	r1, r1, #12
 8000600:	430a      	orrs	r2, r1
 8000602:	615a      	str	r2, [r3, #20]
 8000604:	4b29      	ldr	r3, [pc, #164]	; (80006ac <MX_GPIO_Init+0xcc>)
 8000606:	695a      	ldr	r2, [r3, #20]
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	031b      	lsls	r3, r3, #12
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000612:	4b26      	ldr	r3, [pc, #152]	; (80006ac <MX_GPIO_Init+0xcc>)
 8000614:	695a      	ldr	r2, [r3, #20]
 8000616:	4b25      	ldr	r3, [pc, #148]	; (80006ac <MX_GPIO_Init+0xcc>)
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	03c9      	lsls	r1, r1, #15
 800061c:	430a      	orrs	r2, r1
 800061e:	615a      	str	r2, [r3, #20]
 8000620:	4b22      	ldr	r3, [pc, #136]	; (80006ac <MX_GPIO_Init+0xcc>)
 8000622:	695a      	ldr	r2, [r3, #20]
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	03db      	lsls	r3, r3, #15
 8000628:	4013      	ands	r3, r2
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <MX_GPIO_Init+0xcc>)
 8000630:	695a      	ldr	r2, [r3, #20]
 8000632:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <MX_GPIO_Init+0xcc>)
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	0289      	lsls	r1, r1, #10
 8000638:	430a      	orrs	r2, r1
 800063a:	615a      	str	r2, [r3, #20]
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <MX_GPIO_Init+0xcc>)
 800063e:	695a      	ldr	r2, [r3, #20]
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	029b      	lsls	r3, r3, #10
 8000644:	4013      	ands	r3, r2
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800064a:	2390      	movs	r3, #144	; 0x90
 800064c:	05db      	lsls	r3, r3, #23
 800064e:	2200      	movs	r2, #0
 8000650:	2120      	movs	r1, #32
 8000652:	0018      	movs	r0, r3
 8000654:	f000 fc90 	bl	8000f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000658:	193b      	adds	r3, r7, r4
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	0192      	lsls	r2, r2, #6
 800065e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000660:	193b      	adds	r3, r7, r4
 8000662:	2284      	movs	r2, #132	; 0x84
 8000664:	0392      	lsls	r2, r2, #14
 8000666:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	193b      	adds	r3, r7, r4
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800066e:	193b      	adds	r3, r7, r4
 8000670:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <MX_GPIO_Init+0xd0>)
 8000672:	0019      	movs	r1, r3
 8000674:	0010      	movs	r0, r2
 8000676:	f000 fb07 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800067a:	0021      	movs	r1, r4
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2220      	movs	r2, #32
 8000680:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2201      	movs	r2, #1
 8000686:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000694:	187a      	adds	r2, r7, r1
 8000696:	2390      	movs	r3, #144	; 0x90
 8000698:	05db      	lsls	r3, r3, #23
 800069a:	0011      	movs	r1, r2
 800069c:	0018      	movs	r0, r3
 800069e:	f000 faf3 	bl	8000c88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b009      	add	sp, #36	; 0x24
 80006a8:	bd90      	pop	{r4, r7, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	40021000 	.word	0x40021000
 80006b0:	48000800 	.word	0x48000800

080006b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a04      	ldr	r2, [pc, #16]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d101      	bne.n	80006ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006c6:	f000 fa15 	bl	8000af4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b002      	add	sp, #8
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	40001000 	.word	0x40001000

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <Error_Handler+0x8>
	...

080006e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <HAL_MspInit+0x44>)
 80006ec:	699a      	ldr	r2, [r3, #24]
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <HAL_MspInit+0x44>)
 80006f0:	2101      	movs	r1, #1
 80006f2:	430a      	orrs	r2, r1
 80006f4:	619a      	str	r2, [r3, #24]
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <HAL_MspInit+0x44>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	2201      	movs	r2, #1
 80006fc:	4013      	ands	r3, r2
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_MspInit+0x44>)
 8000704:	69da      	ldr	r2, [r3, #28]
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <HAL_MspInit+0x44>)
 8000708:	2180      	movs	r1, #128	; 0x80
 800070a:	0549      	lsls	r1, r1, #21
 800070c:	430a      	orrs	r2, r1
 800070e:	61da      	str	r2, [r3, #28]
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <HAL_MspInit+0x44>)
 8000712:	69da      	ldr	r2, [r3, #28]
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	055b      	lsls	r3, r3, #21
 8000718:	4013      	ands	r3, r2
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b002      	add	sp, #8
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	40021000 	.word	0x40021000

0800072c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b08b      	sub	sp, #44	; 0x2c
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	2414      	movs	r4, #20
 8000736:	193b      	adds	r3, r7, r4
 8000738:	0018      	movs	r0, r3
 800073a:	2314      	movs	r3, #20
 800073c:	001a      	movs	r2, r3
 800073e:	2100      	movs	r1, #0
 8000740:	f004 fcdf 	bl	8005102 <memset>
  if(huart->Instance==USART1)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a1d      	ldr	r2, [pc, #116]	; (80007c0 <HAL_UART_MspInit+0x94>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d133      	bne.n	80007b6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800074e:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <HAL_UART_MspInit+0x98>)
 8000750:	699a      	ldr	r2, [r3, #24]
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <HAL_UART_MspInit+0x98>)
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	01c9      	lsls	r1, r1, #7
 8000758:	430a      	orrs	r2, r1
 800075a:	619a      	str	r2, [r3, #24]
 800075c:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <HAL_UART_MspInit+0x98>)
 800075e:	699a      	ldr	r2, [r3, #24]
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	01db      	lsls	r3, r3, #7
 8000764:	4013      	ands	r3, r2
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <HAL_UART_MspInit+0x98>)
 800076c:	695a      	ldr	r2, [r3, #20]
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <HAL_UART_MspInit+0x98>)
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	0289      	lsls	r1, r1, #10
 8000774:	430a      	orrs	r2, r1
 8000776:	615a      	str	r2, [r3, #20]
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_UART_MspInit+0x98>)
 800077a:	695a      	ldr	r2, [r3, #20]
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	029b      	lsls	r3, r3, #10
 8000780:	4013      	ands	r3, r2
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	22c0      	movs	r2, #192	; 0xc0
 800078a:	00d2      	lsls	r2, r2, #3
 800078c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	0021      	movs	r1, r4
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2202      	movs	r2, #2
 8000794:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2203      	movs	r2, #3
 80007a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2201      	movs	r2, #1
 80007a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a8:	187a      	adds	r2, r7, r1
 80007aa:	2390      	movs	r3, #144	; 0x90
 80007ac:	05db      	lsls	r3, r3, #23
 80007ae:	0011      	movs	r1, r2
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 fa69 	bl	8000c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b00b      	add	sp, #44	; 0x2c
 80007bc:	bd90      	pop	{r4, r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	40013800 	.word	0x40013800
 80007c4:	40021000 	.word	0x40021000

080007c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b5b0      	push	{r4, r5, r7, lr}
 80007ca:	b08c      	sub	sp, #48	; 0x30
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80007d8:	4b37      	ldr	r3, [pc, #220]	; (80008b8 <HAL_InitTick+0xf0>)
 80007da:	69da      	ldr	r2, [r3, #28]
 80007dc:	4b36      	ldr	r3, [pc, #216]	; (80008b8 <HAL_InitTick+0xf0>)
 80007de:	2110      	movs	r1, #16
 80007e0:	430a      	orrs	r2, r1
 80007e2:	61da      	str	r2, [r3, #28]
 80007e4:	4b34      	ldr	r3, [pc, #208]	; (80008b8 <HAL_InitTick+0xf0>)
 80007e6:	69db      	ldr	r3, [r3, #28]
 80007e8:	2210      	movs	r2, #16
 80007ea:	4013      	ands	r3, r2
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007f0:	230c      	movs	r3, #12
 80007f2:	18fa      	adds	r2, r7, r3
 80007f4:	2410      	movs	r4, #16
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	0011      	movs	r1, r2
 80007fa:	0018      	movs	r0, r3
 80007fc:	f001 f8cc 	bl	8001998 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000808:	2b00      	cmp	r3, #0
 800080a:	d104      	bne.n	8000816 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800080c:	f001 f8ae 	bl	800196c <HAL_RCC_GetPCLK1Freq>
 8000810:	0003      	movs	r3, r0
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000814:	e004      	b.n	8000820 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000816:	f001 f8a9 	bl	800196c <HAL_RCC_GetPCLK1Freq>
 800081a:	0003      	movs	r3, r0
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000822:	4926      	ldr	r1, [pc, #152]	; (80008bc <HAL_InitTick+0xf4>)
 8000824:	0018      	movs	r0, r3
 8000826:	f7ff fc81 	bl	800012c <__udivsi3>
 800082a:	0003      	movs	r3, r0
 800082c:	3b01      	subs	r3, #1
 800082e:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000830:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <HAL_InitTick+0xf8>)
 8000832:	4a24      	ldr	r2, [pc, #144]	; (80008c4 <HAL_InitTick+0xfc>)
 8000834:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000836:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <HAL_InitTick+0xf8>)
 8000838:	4a23      	ldr	r2, [pc, #140]	; (80008c8 <HAL_InitTick+0x100>)
 800083a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800083c:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <HAL_InitTick+0xf8>)
 800083e:	6a3a      	ldr	r2, [r7, #32]
 8000840:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000842:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <HAL_InitTick+0xf8>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000848:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <HAL_InitTick+0xf8>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084e:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <HAL_InitTick+0xf8>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000854:	252b      	movs	r5, #43	; 0x2b
 8000856:	197c      	adds	r4, r7, r5
 8000858:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <HAL_InitTick+0xf8>)
 800085a:	0018      	movs	r0, r3
 800085c:	f001 f9c4 	bl	8001be8 <HAL_TIM_Base_Init>
 8000860:	0003      	movs	r3, r0
 8000862:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000864:	197b      	adds	r3, r7, r5
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d11e      	bne.n	80008aa <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800086c:	197c      	adds	r4, r7, r5
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <HAL_InitTick+0xf8>)
 8000870:	0018      	movs	r0, r3
 8000872:	f001 fa11 	bl	8001c98 <HAL_TIM_Base_Start_IT>
 8000876:	0003      	movs	r3, r0
 8000878:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800087a:	197b      	adds	r3, r7, r5
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d113      	bne.n	80008aa <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000882:	2011      	movs	r0, #17
 8000884:	f000 f9ef 	bl	8000c66 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b03      	cmp	r3, #3
 800088c:	d809      	bhi.n	80008a2 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2200      	movs	r2, #0
 8000892:	0019      	movs	r1, r3
 8000894:	2011      	movs	r0, #17
 8000896:	f000 f9d1 	bl	8000c3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <HAL_InitTick+0x104>)
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	e003      	b.n	80008aa <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 80008a2:	232b      	movs	r3, #43	; 0x2b
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	2201      	movs	r2, #1
 80008a8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80008aa:	232b      	movs	r3, #43	; 0x2b
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	781b      	ldrb	r3, [r3, #0]
}
 80008b0:	0018      	movs	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b00c      	add	sp, #48	; 0x30
 80008b6:	bdb0      	pop	{r4, r5, r7, pc}
 80008b8:	40021000 	.word	0x40021000
 80008bc:	000f4240 	.word	0x000f4240
 80008c0:	20000188 	.word	0x20000188
 80008c4:	40001000 	.word	0x40001000
 80008c8:	000003e7 	.word	0x000003e7
 80008cc:	20000004 	.word	0x20000004

080008d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <HardFault_Handler+0x4>
	...

080008d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008dc:	4b03      	ldr	r3, [pc, #12]	; (80008ec <TIM6_DAC_IRQHandler+0x14>)
 80008de:	0018      	movs	r0, r3
 80008e0:	f001 fa2c 	bl	8001d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	20000188 	.word	0x20000188

080008f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  return 1;
 80008f4:	2301      	movs	r3, #1
}
 80008f6:	0018      	movs	r0, r3
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <_kill>:

int _kill(int pid, int sig)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000906:	f004 fbc9 	bl	800509c <__errno>
 800090a:	0003      	movs	r3, r0
 800090c:	2216      	movs	r2, #22
 800090e:	601a      	str	r2, [r3, #0]
  return -1;
 8000910:	2301      	movs	r3, #1
 8000912:	425b      	negs	r3, r3
}
 8000914:	0018      	movs	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	b002      	add	sp, #8
 800091a:	bd80      	pop	{r7, pc}

0800091c <_exit>:

void _exit (int status)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000924:	2301      	movs	r3, #1
 8000926:	425a      	negs	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	0011      	movs	r1, r2
 800092c:	0018      	movs	r0, r3
 800092e:	f7ff ffe5 	bl	80008fc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000932:	e7fe      	b.n	8000932 <_exit+0x16>

08000934 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	e00a      	b.n	800095c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000946:	e000      	b.n	800094a <_read+0x16>
 8000948:	bf00      	nop
 800094a:	0001      	movs	r1, r0
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	60ba      	str	r2, [r7, #8]
 8000952:	b2ca      	uxtb	r2, r1
 8000954:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	3301      	adds	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697a      	ldr	r2, [r7, #20]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	429a      	cmp	r2, r3
 8000962:	dbf0      	blt.n	8000946 <_read+0x12>
  }

  return len;
 8000964:	687b      	ldr	r3, [r7, #4]
}
 8000966:	0018      	movs	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	b006      	add	sp, #24
 800096c:	bd80      	pop	{r7, pc}

0800096e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b086      	sub	sp, #24
 8000972:	af00      	add	r7, sp, #0
 8000974:	60f8      	str	r0, [r7, #12]
 8000976:	60b9      	str	r1, [r7, #8]
 8000978:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	e009      	b.n	8000994 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	1c5a      	adds	r2, r3, #1
 8000984:	60ba      	str	r2, [r7, #8]
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	0018      	movs	r0, r3
 800098a:	e000      	b.n	800098e <_write+0x20>
 800098c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	3301      	adds	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	697a      	ldr	r2, [r7, #20]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	429a      	cmp	r2, r3
 800099a:	dbf1      	blt.n	8000980 <_write+0x12>
  }
  return len;
 800099c:	687b      	ldr	r3, [r7, #4]
}
 800099e:	0018      	movs	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b006      	add	sp, #24
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <_close>:

int _close(int file)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	425b      	negs	r3, r3
}
 80009b2:	0018      	movs	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b002      	add	sp, #8
 80009b8:	bd80      	pop	{r7, pc}

080009ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	2280      	movs	r2, #128	; 0x80
 80009c8:	0192      	lsls	r2, r2, #6
 80009ca:	605a      	str	r2, [r3, #4]
  return 0;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	0018      	movs	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b002      	add	sp, #8
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <_isatty>:

int _isatty(int file)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	0018      	movs	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b002      	add	sp, #8
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	0018      	movs	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b004      	add	sp, #16
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a08:	4a14      	ldr	r2, [pc, #80]	; (8000a5c <_sbrk+0x5c>)
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <_sbrk+0x60>)
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a14:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <_sbrk+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d102      	bne.n	8000a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <_sbrk+0x64>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <_sbrk+0x68>)
 8000a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	18d3      	adds	r3, r2, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d207      	bcs.n	8000a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a30:	f004 fb34 	bl	800509c <__errno>
 8000a34:	0003      	movs	r3, r0
 8000a36:	220c      	movs	r2, #12
 8000a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	425b      	negs	r3, r3
 8000a3e:	e009      	b.n	8000a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <_sbrk+0x64>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <_sbrk+0x64>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	18d2      	adds	r2, r2, r3
 8000a4e:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <_sbrk+0x64>)
 8000a50:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a52:	68fb      	ldr	r3, [r7, #12]
}
 8000a54:	0018      	movs	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b006      	add	sp, #24
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20004000 	.word	0x20004000
 8000a60:	00000400 	.word	0x00000400
 8000a64:	200001d0 	.word	0x200001d0
 8000a68:	20001ce8 	.word	0x20001ce8

08000a6c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a78:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a7a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a7c:	f7ff fff6 	bl	8000a6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a80:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a82:	490d      	ldr	r1, [pc, #52]	; (8000ab8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a84:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <LoopForever+0xe>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a88:	e002      	b.n	8000a90 <LoopCopyDataInit>

08000a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8e:	3304      	adds	r3, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a94:	d3f9      	bcc.n	8000a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a98:	4c0a      	ldr	r4, [pc, #40]	; (8000ac4 <LoopForever+0x16>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a9c:	e001      	b.n	8000aa2 <LoopFillZerobss>

08000a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa0:	3204      	adds	r2, #4

08000aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa4:	d3fb      	bcc.n	8000a9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aa6:	f004 faff 	bl	80050a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aaa:	f7ff fc87 	bl	80003bc <main>

08000aae <LoopForever>:

LoopForever:
    b LoopForever
 8000aae:	e7fe      	b.n	8000aae <LoopForever>
  ldr   r0, =_estack
 8000ab0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000abc:	0800689c 	.word	0x0800689c
  ldr r2, =_sbss
 8000ac0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ac4:	20001ce8 	.word	0x20001ce8

08000ac8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC1_COMP_IRQHandler>
	...

08000acc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <HAL_Init+0x24>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_Init+0x24>)
 8000ad6:	2110      	movs	r1, #16
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f7ff fe73 	bl	80007c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae2:	f7ff fdff 	bl	80006e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae6:	2300      	movs	r3, #0
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	40022000 	.word	0x40022000

08000af4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_IncTick+0x1c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	001a      	movs	r2, r3
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <HAL_IncTick+0x20>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	18d2      	adds	r2, r2, r3
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <HAL_IncTick+0x20>)
 8000b06:	601a      	str	r2, [r3, #0]
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	20000008 	.word	0x20000008
 8000b14:	200001d4 	.word	0x200001d4

08000b18 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b1c:	4b02      	ldr	r3, [pc, #8]	; (8000b28 <HAL_GetTick+0x10>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
}
 8000b20:	0018      	movs	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	200001d4 	.word	0x200001d4

08000b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	0002      	movs	r2, r0
 8000b34:	1dfb      	adds	r3, r7, #7
 8000b36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b38:	1dfb      	adds	r3, r7, #7
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b3e:	d809      	bhi.n	8000b54 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	001a      	movs	r2, r3
 8000b46:	231f      	movs	r3, #31
 8000b48:	401a      	ands	r2, r3
 8000b4a:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <__NVIC_EnableIRQ+0x30>)
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	4091      	lsls	r1, r2
 8000b50:	000a      	movs	r2, r1
 8000b52:	601a      	str	r2, [r3, #0]
  }
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b002      	add	sp, #8
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	e000e100 	.word	0xe000e100

08000b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	0002      	movs	r2, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b7f      	cmp	r3, #127	; 0x7f
 8000b74:	d828      	bhi.n	8000bc8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b76:	4a2f      	ldr	r2, [pc, #188]	; (8000c34 <__NVIC_SetPriority+0xd4>)
 8000b78:	1dfb      	adds	r3, r7, #7
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	089b      	lsrs	r3, r3, #2
 8000b80:	33c0      	adds	r3, #192	; 0xc0
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	589b      	ldr	r3, [r3, r2]
 8000b86:	1dfa      	adds	r2, r7, #7
 8000b88:	7812      	ldrb	r2, [r2, #0]
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	400a      	ands	r2, r1
 8000b90:	00d2      	lsls	r2, r2, #3
 8000b92:	21ff      	movs	r1, #255	; 0xff
 8000b94:	4091      	lsls	r1, r2
 8000b96:	000a      	movs	r2, r1
 8000b98:	43d2      	mvns	r2, r2
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	019b      	lsls	r3, r3, #6
 8000ba2:	22ff      	movs	r2, #255	; 0xff
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	0018      	movs	r0, r3
 8000bac:	2303      	movs	r3, #3
 8000bae:	4003      	ands	r3, r0
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb4:	481f      	ldr	r0, [pc, #124]	; (8000c34 <__NVIC_SetPriority+0xd4>)
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	b25b      	sxtb	r3, r3
 8000bbc:	089b      	lsrs	r3, r3, #2
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	33c0      	adds	r3, #192	; 0xc0
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bc6:	e031      	b.n	8000c2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc8:	4a1b      	ldr	r2, [pc, #108]	; (8000c38 <__NVIC_SetPriority+0xd8>)
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	0019      	movs	r1, r3
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	400b      	ands	r3, r1
 8000bd4:	3b08      	subs	r3, #8
 8000bd6:	089b      	lsrs	r3, r3, #2
 8000bd8:	3306      	adds	r3, #6
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	18d3      	adds	r3, r2, r3
 8000bde:	3304      	adds	r3, #4
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	1dfa      	adds	r2, r7, #7
 8000be4:	7812      	ldrb	r2, [r2, #0]
 8000be6:	0011      	movs	r1, r2
 8000be8:	2203      	movs	r2, #3
 8000bea:	400a      	ands	r2, r1
 8000bec:	00d2      	lsls	r2, r2, #3
 8000bee:	21ff      	movs	r1, #255	; 0xff
 8000bf0:	4091      	lsls	r1, r2
 8000bf2:	000a      	movs	r2, r1
 8000bf4:	43d2      	mvns	r2, r2
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	22ff      	movs	r2, #255	; 0xff
 8000c00:	401a      	ands	r2, r3
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	0018      	movs	r0, r3
 8000c08:	2303      	movs	r3, #3
 8000c0a:	4003      	ands	r3, r0
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c10:	4809      	ldr	r0, [pc, #36]	; (8000c38 <__NVIC_SetPriority+0xd8>)
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	001c      	movs	r4, r3
 8000c18:	230f      	movs	r3, #15
 8000c1a:	4023      	ands	r3, r4
 8000c1c:	3b08      	subs	r3, #8
 8000c1e:	089b      	lsrs	r3, r3, #2
 8000c20:	430a      	orrs	r2, r1
 8000c22:	3306      	adds	r3, #6
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	18c3      	adds	r3, r0, r3
 8000c28:	3304      	adds	r3, #4
 8000c2a:	601a      	str	r2, [r3, #0]
}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b003      	add	sp, #12
 8000c32:	bd90      	pop	{r4, r7, pc}
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
 8000c46:	210f      	movs	r1, #15
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	1c02      	adds	r2, r0, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	b25b      	sxtb	r3, r3
 8000c56:	0011      	movs	r1, r2
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f7ff ff81 	bl	8000b60 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b004      	add	sp, #16
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	0002      	movs	r2, r0
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	b25b      	sxtb	r3, r3
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f7ff ff57 	bl	8000b2c <__NVIC_EnableIRQ>
}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c96:	e155      	b.n	8000f44 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	4091      	lsls	r1, r2
 8000ca2:	000a      	movs	r2, r1
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d100      	bne.n	8000cb0 <HAL_GPIO_Init+0x28>
 8000cae:	e146      	b.n	8000f3e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d005      	beq.n	8000cc8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d130      	bne.n	8000d2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	409a      	lsls	r2, r3
 8000cd6:	0013      	movs	r3, r2
 8000cd8:	43da      	mvns	r2, r3
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	409a      	lsls	r2, r3
 8000cea:	0013      	movs	r3, r2
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cfe:	2201      	movs	r2, #1
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	409a      	lsls	r2, r3
 8000d04:	0013      	movs	r3, r2
 8000d06:	43da      	mvns	r2, r3
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	091b      	lsrs	r3, r3, #4
 8000d14:	2201      	movs	r2, #1
 8000d16:	401a      	ands	r2, r3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	409a      	lsls	r2, r3
 8000d1c:	0013      	movs	r3, r2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2203      	movs	r2, #3
 8000d30:	4013      	ands	r3, r2
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d017      	beq.n	8000d66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	2203      	movs	r2, #3
 8000d42:	409a      	lsls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	43da      	mvns	r2, r3
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	409a      	lsls	r2, r3
 8000d58:	0013      	movs	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d123      	bne.n	8000dba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	08da      	lsrs	r2, r3, #3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3208      	adds	r2, #8
 8000d7a:	0092      	lsls	r2, r2, #2
 8000d7c:	58d3      	ldr	r3, [r2, r3]
 8000d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	2207      	movs	r2, #7
 8000d84:	4013      	ands	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	220f      	movs	r2, #15
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	691a      	ldr	r2, [r3, #16]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	2107      	movs	r1, #7
 8000d9e:	400b      	ands	r3, r1
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	409a      	lsls	r2, r3
 8000da4:	0013      	movs	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	08da      	lsrs	r2, r3, #3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3208      	adds	r2, #8
 8000db4:	0092      	lsls	r2, r2, #2
 8000db6:	6939      	ldr	r1, [r7, #16]
 8000db8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	0013      	movs	r3, r2
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	401a      	ands	r2, r3
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	409a      	lsls	r2, r3
 8000de0:	0013      	movs	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	23c0      	movs	r3, #192	; 0xc0
 8000df4:	029b      	lsls	r3, r3, #10
 8000df6:	4013      	ands	r3, r2
 8000df8:	d100      	bne.n	8000dfc <HAL_GPIO_Init+0x174>
 8000dfa:	e0a0      	b.n	8000f3e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfc:	4b57      	ldr	r3, [pc, #348]	; (8000f5c <HAL_GPIO_Init+0x2d4>)
 8000dfe:	699a      	ldr	r2, [r3, #24]
 8000e00:	4b56      	ldr	r3, [pc, #344]	; (8000f5c <HAL_GPIO_Init+0x2d4>)
 8000e02:	2101      	movs	r1, #1
 8000e04:	430a      	orrs	r2, r1
 8000e06:	619a      	str	r2, [r3, #24]
 8000e08:	4b54      	ldr	r3, [pc, #336]	; (8000f5c <HAL_GPIO_Init+0x2d4>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4013      	ands	r3, r2
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e14:	4a52      	ldr	r2, [pc, #328]	; (8000f60 <HAL_GPIO_Init+0x2d8>)
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	589b      	ldr	r3, [r3, r2]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	2203      	movs	r2, #3
 8000e26:	4013      	ands	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	220f      	movs	r2, #15
 8000e2c:	409a      	lsls	r2, r3
 8000e2e:	0013      	movs	r3, r2
 8000e30:	43da      	mvns	r2, r3
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	2390      	movs	r3, #144	; 0x90
 8000e3c:	05db      	lsls	r3, r3, #23
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d019      	beq.n	8000e76 <HAL_GPIO_Init+0x1ee>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a47      	ldr	r2, [pc, #284]	; (8000f64 <HAL_GPIO_Init+0x2dc>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d013      	beq.n	8000e72 <HAL_GPIO_Init+0x1ea>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a46      	ldr	r2, [pc, #280]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d00d      	beq.n	8000e6e <HAL_GPIO_Init+0x1e6>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a45      	ldr	r2, [pc, #276]	; (8000f6c <HAL_GPIO_Init+0x2e4>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d007      	beq.n	8000e6a <HAL_GPIO_Init+0x1e2>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a44      	ldr	r2, [pc, #272]	; (8000f70 <HAL_GPIO_Init+0x2e8>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d101      	bne.n	8000e66 <HAL_GPIO_Init+0x1de>
 8000e62:	2304      	movs	r3, #4
 8000e64:	e008      	b.n	8000e78 <HAL_GPIO_Init+0x1f0>
 8000e66:	2305      	movs	r3, #5
 8000e68:	e006      	b.n	8000e78 <HAL_GPIO_Init+0x1f0>
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e004      	b.n	8000e78 <HAL_GPIO_Init+0x1f0>
 8000e6e:	2302      	movs	r3, #2
 8000e70:	e002      	b.n	8000e78 <HAL_GPIO_Init+0x1f0>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <HAL_GPIO_Init+0x1f0>
 8000e76:	2300      	movs	r3, #0
 8000e78:	697a      	ldr	r2, [r7, #20]
 8000e7a:	2103      	movs	r1, #3
 8000e7c:	400a      	ands	r2, r1
 8000e7e:	0092      	lsls	r2, r2, #2
 8000e80:	4093      	lsls	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e88:	4935      	ldr	r1, [pc, #212]	; (8000f60 <HAL_GPIO_Init+0x2d8>)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e96:	4b37      	ldr	r3, [pc, #220]	; (8000f74 <HAL_GPIO_Init+0x2ec>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	2380      	movs	r3, #128	; 0x80
 8000eac:	035b      	lsls	r3, r3, #13
 8000eae:	4013      	ands	r3, r2
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000eba:	4b2e      	ldr	r3, [pc, #184]	; (8000f74 <HAL_GPIO_Init+0x2ec>)
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ec0:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <HAL_GPIO_Init+0x2ec>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	43da      	mvns	r2, r3
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	039b      	lsls	r3, r3, #14
 8000ed8:	4013      	ands	r3, r2
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <HAL_GPIO_Init+0x2ec>)
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000eea:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <HAL_GPIO_Init+0x2ec>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	029b      	lsls	r3, r3, #10
 8000f02:	4013      	ands	r3, r2
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_GPIO_Init+0x2ec>)
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_GPIO_Init+0x2ec>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	43da      	mvns	r2, r3
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	025b      	lsls	r3, r3, #9
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <HAL_GPIO_Init+0x2ec>)
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3301      	adds	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	40da      	lsrs	r2, r3
 8000f4c:	1e13      	subs	r3, r2, #0
 8000f4e:	d000      	beq.n	8000f52 <HAL_GPIO_Init+0x2ca>
 8000f50:	e6a2      	b.n	8000c98 <HAL_GPIO_Init+0x10>
  } 
}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b006      	add	sp, #24
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40010000 	.word	0x40010000
 8000f64:	48000400 	.word	0x48000400
 8000f68:	48000800 	.word	0x48000800
 8000f6c:	48000c00 	.word	0x48000c00
 8000f70:	48001000 	.word	0x48001000
 8000f74:	40010400 	.word	0x40010400

08000f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	0008      	movs	r0, r1
 8000f82:	0011      	movs	r1, r2
 8000f84:	1cbb      	adds	r3, r7, #2
 8000f86:	1c02      	adds	r2, r0, #0
 8000f88:	801a      	strh	r2, [r3, #0]
 8000f8a:	1c7b      	adds	r3, r7, #1
 8000f8c:	1c0a      	adds	r2, r1, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f90:	1c7b      	adds	r3, r7, #1
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d004      	beq.n	8000fa2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f98:	1cbb      	adds	r3, r7, #2
 8000f9a:	881a      	ldrh	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fa0:	e003      	b.n	8000faa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fa2:	1cbb      	adds	r3, r7, #2
 8000fa4:	881a      	ldrh	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b002      	add	sp, #8
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d102      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	f000 fb76 	bl	80016b4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d100      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x20>
 8000fd2:	e08e      	b.n	80010f2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fd4:	4bc5      	ldr	r3, [pc, #788]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	220c      	movs	r2, #12
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d00e      	beq.n	8000ffe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fe0:	4bc2      	ldr	r3, [pc, #776]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	220c      	movs	r2, #12
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b08      	cmp	r3, #8
 8000fea:	d117      	bne.n	800101c <HAL_RCC_OscConfig+0x68>
 8000fec:	4bbf      	ldr	r3, [pc, #764]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	23c0      	movs	r3, #192	; 0xc0
 8000ff2:	025b      	lsls	r3, r3, #9
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	025b      	lsls	r3, r3, #9
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d10e      	bne.n	800101c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffe:	4bbb      	ldr	r3, [pc, #748]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	029b      	lsls	r3, r3, #10
 8001006:	4013      	ands	r3, r2
 8001008:	d100      	bne.n	800100c <HAL_RCC_OscConfig+0x58>
 800100a:	e071      	b.n	80010f0 <HAL_RCC_OscConfig+0x13c>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d000      	beq.n	8001016 <HAL_RCC_OscConfig+0x62>
 8001014:	e06c      	b.n	80010f0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	f000 fb4c 	bl	80016b4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d107      	bne.n	8001034 <HAL_RCC_OscConfig+0x80>
 8001024:	4bb1      	ldr	r3, [pc, #708]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4bb0      	ldr	r3, [pc, #704]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800102a:	2180      	movs	r1, #128	; 0x80
 800102c:	0249      	lsls	r1, r1, #9
 800102e:	430a      	orrs	r2, r1
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	e02f      	b.n	8001094 <HAL_RCC_OscConfig+0xe0>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10c      	bne.n	8001056 <HAL_RCC_OscConfig+0xa2>
 800103c:	4bab      	ldr	r3, [pc, #684]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4baa      	ldr	r3, [pc, #680]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001042:	49ab      	ldr	r1, [pc, #684]	; (80012f0 <HAL_RCC_OscConfig+0x33c>)
 8001044:	400a      	ands	r2, r1
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	4ba8      	ldr	r3, [pc, #672]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4ba7      	ldr	r3, [pc, #668]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800104e:	49a9      	ldr	r1, [pc, #676]	; (80012f4 <HAL_RCC_OscConfig+0x340>)
 8001050:	400a      	ands	r2, r1
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	e01e      	b.n	8001094 <HAL_RCC_OscConfig+0xe0>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b05      	cmp	r3, #5
 800105c:	d10e      	bne.n	800107c <HAL_RCC_OscConfig+0xc8>
 800105e:	4ba3      	ldr	r3, [pc, #652]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4ba2      	ldr	r3, [pc, #648]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	02c9      	lsls	r1, r1, #11
 8001068:	430a      	orrs	r2, r1
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	4b9f      	ldr	r3, [pc, #636]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b9e      	ldr	r3, [pc, #632]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001072:	2180      	movs	r1, #128	; 0x80
 8001074:	0249      	lsls	r1, r1, #9
 8001076:	430a      	orrs	r2, r1
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e00b      	b.n	8001094 <HAL_RCC_OscConfig+0xe0>
 800107c:	4b9b      	ldr	r3, [pc, #620]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b9a      	ldr	r3, [pc, #616]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001082:	499b      	ldr	r1, [pc, #620]	; (80012f0 <HAL_RCC_OscConfig+0x33c>)
 8001084:	400a      	ands	r2, r1
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	4b98      	ldr	r3, [pc, #608]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b97      	ldr	r3, [pc, #604]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800108e:	4999      	ldr	r1, [pc, #612]	; (80012f4 <HAL_RCC_OscConfig+0x340>)
 8001090:	400a      	ands	r2, r1
 8001092:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d014      	beq.n	80010c6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff fd3c 	bl	8000b18 <HAL_GetTick>
 80010a0:	0003      	movs	r3, r0
 80010a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a4:	e008      	b.n	80010b8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a6:	f7ff fd37 	bl	8000b18 <HAL_GetTick>
 80010aa:	0002      	movs	r2, r0
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b64      	cmp	r3, #100	; 0x64
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e2fd      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b8:	4b8c      	ldr	r3, [pc, #560]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	029b      	lsls	r3, r3, #10
 80010c0:	4013      	ands	r3, r2
 80010c2:	d0f0      	beq.n	80010a6 <HAL_RCC_OscConfig+0xf2>
 80010c4:	e015      	b.n	80010f2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c6:	f7ff fd27 	bl	8000b18 <HAL_GetTick>
 80010ca:	0003      	movs	r3, r0
 80010cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d0:	f7ff fd22 	bl	8000b18 <HAL_GetTick>
 80010d4:	0002      	movs	r2, r0
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b64      	cmp	r3, #100	; 0x64
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e2e8      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e2:	4b82      	ldr	r3, [pc, #520]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	029b      	lsls	r3, r3, #10
 80010ea:	4013      	ands	r3, r2
 80010ec:	d1f0      	bne.n	80010d0 <HAL_RCC_OscConfig+0x11c>
 80010ee:	e000      	b.n	80010f2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2202      	movs	r2, #2
 80010f8:	4013      	ands	r3, r2
 80010fa:	d100      	bne.n	80010fe <HAL_RCC_OscConfig+0x14a>
 80010fc:	e06c      	b.n	80011d8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010fe:	4b7b      	ldr	r3, [pc, #492]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	220c      	movs	r2, #12
 8001104:	4013      	ands	r3, r2
 8001106:	d00e      	beq.n	8001126 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001108:	4b78      	ldr	r3, [pc, #480]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	220c      	movs	r2, #12
 800110e:	4013      	ands	r3, r2
 8001110:	2b08      	cmp	r3, #8
 8001112:	d11f      	bne.n	8001154 <HAL_RCC_OscConfig+0x1a0>
 8001114:	4b75      	ldr	r3, [pc, #468]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	23c0      	movs	r3, #192	; 0xc0
 800111a:	025b      	lsls	r3, r3, #9
 800111c:	401a      	ands	r2, r3
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	429a      	cmp	r2, r3
 8001124:	d116      	bne.n	8001154 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001126:	4b71      	ldr	r3, [pc, #452]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2202      	movs	r2, #2
 800112c:	4013      	ands	r3, r2
 800112e:	d005      	beq.n	800113c <HAL_RCC_OscConfig+0x188>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d001      	beq.n	800113c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e2bb      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113c:	4b6b      	ldr	r3, [pc, #428]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	22f8      	movs	r2, #248	; 0xf8
 8001142:	4393      	bics	r3, r2
 8001144:	0019      	movs	r1, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	00da      	lsls	r2, r3, #3
 800114c:	4b67      	ldr	r3, [pc, #412]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800114e:	430a      	orrs	r2, r1
 8001150:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001152:	e041      	b.n	80011d8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d024      	beq.n	80011a6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800115c:	4b63      	ldr	r3, [pc, #396]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b62      	ldr	r3, [pc, #392]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001162:	2101      	movs	r1, #1
 8001164:	430a      	orrs	r2, r1
 8001166:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff fcd6 	bl	8000b18 <HAL_GetTick>
 800116c:	0003      	movs	r3, r0
 800116e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001172:	f7ff fcd1 	bl	8000b18 <HAL_GetTick>
 8001176:	0002      	movs	r2, r0
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e297      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001184:	4b59      	ldr	r3, [pc, #356]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2202      	movs	r2, #2
 800118a:	4013      	ands	r3, r2
 800118c:	d0f1      	beq.n	8001172 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118e:	4b57      	ldr	r3, [pc, #348]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	22f8      	movs	r2, #248	; 0xf8
 8001194:	4393      	bics	r3, r2
 8001196:	0019      	movs	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	00da      	lsls	r2, r3, #3
 800119e:	4b53      	ldr	r3, [pc, #332]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80011a0:	430a      	orrs	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	e018      	b.n	80011d8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011a6:	4b51      	ldr	r3, [pc, #324]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4b50      	ldr	r3, [pc, #320]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80011ac:	2101      	movs	r1, #1
 80011ae:	438a      	bics	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b2:	f7ff fcb1 	bl	8000b18 <HAL_GetTick>
 80011b6:	0003      	movs	r3, r0
 80011b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011bc:	f7ff fcac 	bl	8000b18 <HAL_GetTick>
 80011c0:	0002      	movs	r2, r0
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e272      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ce:	4b47      	ldr	r3, [pc, #284]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2202      	movs	r2, #2
 80011d4:	4013      	ands	r3, r2
 80011d6:	d1f1      	bne.n	80011bc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2208      	movs	r2, #8
 80011de:	4013      	ands	r3, r2
 80011e0:	d036      	beq.n	8001250 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d019      	beq.n	800121e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ea:	4b40      	ldr	r3, [pc, #256]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80011ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011ee:	4b3f      	ldr	r3, [pc, #252]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80011f0:	2101      	movs	r1, #1
 80011f2:	430a      	orrs	r2, r1
 80011f4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f6:	f7ff fc8f 	bl	8000b18 <HAL_GetTick>
 80011fa:	0003      	movs	r3, r0
 80011fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001200:	f7ff fc8a 	bl	8000b18 <HAL_GetTick>
 8001204:	0002      	movs	r2, r0
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e250      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001212:	4b36      	ldr	r3, [pc, #216]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	2202      	movs	r2, #2
 8001218:	4013      	ands	r3, r2
 800121a:	d0f1      	beq.n	8001200 <HAL_RCC_OscConfig+0x24c>
 800121c:	e018      	b.n	8001250 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800121e:	4b33      	ldr	r3, [pc, #204]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001222:	4b32      	ldr	r3, [pc, #200]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001224:	2101      	movs	r1, #1
 8001226:	438a      	bics	r2, r1
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122a:	f7ff fc75 	bl	8000b18 <HAL_GetTick>
 800122e:	0003      	movs	r3, r0
 8001230:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001234:	f7ff fc70 	bl	8000b18 <HAL_GetTick>
 8001238:	0002      	movs	r2, r0
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e236      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001246:	4b29      	ldr	r3, [pc, #164]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	2202      	movs	r2, #2
 800124c:	4013      	ands	r3, r2
 800124e:	d1f1      	bne.n	8001234 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2204      	movs	r2, #4
 8001256:	4013      	ands	r3, r2
 8001258:	d100      	bne.n	800125c <HAL_RCC_OscConfig+0x2a8>
 800125a:	e0b5      	b.n	80013c8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800125c:	201f      	movs	r0, #31
 800125e:	183b      	adds	r3, r7, r0
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001264:	4b21      	ldr	r3, [pc, #132]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001266:	69da      	ldr	r2, [r3, #28]
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	055b      	lsls	r3, r3, #21
 800126c:	4013      	ands	r3, r2
 800126e:	d110      	bne.n	8001292 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001272:	69da      	ldr	r2, [r3, #28]
 8001274:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001276:	2180      	movs	r1, #128	; 0x80
 8001278:	0549      	lsls	r1, r1, #21
 800127a:	430a      	orrs	r2, r1
 800127c:	61da      	str	r2, [r3, #28]
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001280:	69da      	ldr	r2, [r3, #28]
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	055b      	lsls	r3, r3, #21
 8001286:	4013      	ands	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800128c:	183b      	adds	r3, r7, r0
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <HAL_RCC_OscConfig+0x344>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4013      	ands	r3, r2
 800129c:	d11a      	bne.n	80012d4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <HAL_RCC_OscConfig+0x344>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <HAL_RCC_OscConfig+0x344>)
 80012a4:	2180      	movs	r1, #128	; 0x80
 80012a6:	0049      	lsls	r1, r1, #1
 80012a8:	430a      	orrs	r2, r1
 80012aa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ac:	f7ff fc34 	bl	8000b18 <HAL_GetTick>
 80012b0:	0003      	movs	r3, r0
 80012b2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012b6:	f7ff fc2f 	bl	8000b18 <HAL_GetTick>
 80012ba:	0002      	movs	r2, r0
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b64      	cmp	r3, #100	; 0x64
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e1f5      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_RCC_OscConfig+0x344>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4013      	ands	r3, r2
 80012d2:	d0f0      	beq.n	80012b6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d10f      	bne.n	80012fc <HAL_RCC_OscConfig+0x348>
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80012de:	6a1a      	ldr	r2, [r3, #32]
 80012e0:	4b02      	ldr	r3, [pc, #8]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80012e2:	2101      	movs	r1, #1
 80012e4:	430a      	orrs	r2, r1
 80012e6:	621a      	str	r2, [r3, #32]
 80012e8:	e036      	b.n	8001358 <HAL_RCC_OscConfig+0x3a4>
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	40021000 	.word	0x40021000
 80012f0:	fffeffff 	.word	0xfffeffff
 80012f4:	fffbffff 	.word	0xfffbffff
 80012f8:	40007000 	.word	0x40007000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d10c      	bne.n	800131e <HAL_RCC_OscConfig+0x36a>
 8001304:	4bca      	ldr	r3, [pc, #808]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001306:	6a1a      	ldr	r2, [r3, #32]
 8001308:	4bc9      	ldr	r3, [pc, #804]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800130a:	2101      	movs	r1, #1
 800130c:	438a      	bics	r2, r1
 800130e:	621a      	str	r2, [r3, #32]
 8001310:	4bc7      	ldr	r3, [pc, #796]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001312:	6a1a      	ldr	r2, [r3, #32]
 8001314:	4bc6      	ldr	r3, [pc, #792]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001316:	2104      	movs	r1, #4
 8001318:	438a      	bics	r2, r1
 800131a:	621a      	str	r2, [r3, #32]
 800131c:	e01c      	b.n	8001358 <HAL_RCC_OscConfig+0x3a4>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	2b05      	cmp	r3, #5
 8001324:	d10c      	bne.n	8001340 <HAL_RCC_OscConfig+0x38c>
 8001326:	4bc2      	ldr	r3, [pc, #776]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001328:	6a1a      	ldr	r2, [r3, #32]
 800132a:	4bc1      	ldr	r3, [pc, #772]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800132c:	2104      	movs	r1, #4
 800132e:	430a      	orrs	r2, r1
 8001330:	621a      	str	r2, [r3, #32]
 8001332:	4bbf      	ldr	r3, [pc, #764]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001334:	6a1a      	ldr	r2, [r3, #32]
 8001336:	4bbe      	ldr	r3, [pc, #760]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001338:	2101      	movs	r1, #1
 800133a:	430a      	orrs	r2, r1
 800133c:	621a      	str	r2, [r3, #32]
 800133e:	e00b      	b.n	8001358 <HAL_RCC_OscConfig+0x3a4>
 8001340:	4bbb      	ldr	r3, [pc, #748]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001342:	6a1a      	ldr	r2, [r3, #32]
 8001344:	4bba      	ldr	r3, [pc, #744]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001346:	2101      	movs	r1, #1
 8001348:	438a      	bics	r2, r1
 800134a:	621a      	str	r2, [r3, #32]
 800134c:	4bb8      	ldr	r3, [pc, #736]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800134e:	6a1a      	ldr	r2, [r3, #32]
 8001350:	4bb7      	ldr	r3, [pc, #732]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001352:	2104      	movs	r1, #4
 8001354:	438a      	bics	r2, r1
 8001356:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d014      	beq.n	800138a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001360:	f7ff fbda 	bl	8000b18 <HAL_GetTick>
 8001364:	0003      	movs	r3, r0
 8001366:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001368:	e009      	b.n	800137e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800136a:	f7ff fbd5 	bl	8000b18 <HAL_GetTick>
 800136e:	0002      	movs	r2, r0
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	4aaf      	ldr	r2, [pc, #700]	; (8001634 <HAL_RCC_OscConfig+0x680>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e19a      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800137e:	4bac      	ldr	r3, [pc, #688]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	2202      	movs	r2, #2
 8001384:	4013      	ands	r3, r2
 8001386:	d0f0      	beq.n	800136a <HAL_RCC_OscConfig+0x3b6>
 8001388:	e013      	b.n	80013b2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138a:	f7ff fbc5 	bl	8000b18 <HAL_GetTick>
 800138e:	0003      	movs	r3, r0
 8001390:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001392:	e009      	b.n	80013a8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001394:	f7ff fbc0 	bl	8000b18 <HAL_GetTick>
 8001398:	0002      	movs	r2, r0
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	4aa5      	ldr	r2, [pc, #660]	; (8001634 <HAL_RCC_OscConfig+0x680>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e185      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a8:	4ba1      	ldr	r3, [pc, #644]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	2202      	movs	r2, #2
 80013ae:	4013      	ands	r3, r2
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013b2:	231f      	movs	r3, #31
 80013b4:	18fb      	adds	r3, r7, r3
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d105      	bne.n	80013c8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013bc:	4b9c      	ldr	r3, [pc, #624]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80013be:	69da      	ldr	r2, [r3, #28]
 80013c0:	4b9b      	ldr	r3, [pc, #620]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80013c2:	499d      	ldr	r1, [pc, #628]	; (8001638 <HAL_RCC_OscConfig+0x684>)
 80013c4:	400a      	ands	r2, r1
 80013c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2210      	movs	r2, #16
 80013ce:	4013      	ands	r3, r2
 80013d0:	d063      	beq.n	800149a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d12a      	bne.n	8001430 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013da:	4b95      	ldr	r3, [pc, #596]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80013dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013de:	4b94      	ldr	r3, [pc, #592]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80013e0:	2104      	movs	r1, #4
 80013e2:	430a      	orrs	r2, r1
 80013e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80013e6:	4b92      	ldr	r3, [pc, #584]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80013e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ea:	4b91      	ldr	r3, [pc, #580]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80013ec:	2101      	movs	r1, #1
 80013ee:	430a      	orrs	r2, r1
 80013f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f2:	f7ff fb91 	bl	8000b18 <HAL_GetTick>
 80013f6:	0003      	movs	r3, r0
 80013f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013fc:	f7ff fb8c 	bl	8000b18 <HAL_GetTick>
 8001400:	0002      	movs	r2, r0
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e152      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800140e:	4b88      	ldr	r3, [pc, #544]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001412:	2202      	movs	r2, #2
 8001414:	4013      	ands	r3, r2
 8001416:	d0f1      	beq.n	80013fc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001418:	4b85      	ldr	r3, [pc, #532]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800141a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800141c:	22f8      	movs	r2, #248	; 0xf8
 800141e:	4393      	bics	r3, r2
 8001420:	0019      	movs	r1, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	00da      	lsls	r2, r3, #3
 8001428:	4b81      	ldr	r3, [pc, #516]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800142a:	430a      	orrs	r2, r1
 800142c:	635a      	str	r2, [r3, #52]	; 0x34
 800142e:	e034      	b.n	800149a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	3305      	adds	r3, #5
 8001436:	d111      	bne.n	800145c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001438:	4b7d      	ldr	r3, [pc, #500]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800143a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800143c:	4b7c      	ldr	r3, [pc, #496]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800143e:	2104      	movs	r1, #4
 8001440:	438a      	bics	r2, r1
 8001442:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001444:	4b7a      	ldr	r3, [pc, #488]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001448:	22f8      	movs	r2, #248	; 0xf8
 800144a:	4393      	bics	r3, r2
 800144c:	0019      	movs	r1, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	00da      	lsls	r2, r3, #3
 8001454:	4b76      	ldr	r3, [pc, #472]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001456:	430a      	orrs	r2, r1
 8001458:	635a      	str	r2, [r3, #52]	; 0x34
 800145a:	e01e      	b.n	800149a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800145c:	4b74      	ldr	r3, [pc, #464]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800145e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001460:	4b73      	ldr	r3, [pc, #460]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001462:	2104      	movs	r1, #4
 8001464:	430a      	orrs	r2, r1
 8001466:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001468:	4b71      	ldr	r3, [pc, #452]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800146a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800146c:	4b70      	ldr	r3, [pc, #448]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800146e:	2101      	movs	r1, #1
 8001470:	438a      	bics	r2, r1
 8001472:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001474:	f7ff fb50 	bl	8000b18 <HAL_GetTick>
 8001478:	0003      	movs	r3, r0
 800147a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800147e:	f7ff fb4b 	bl	8000b18 <HAL_GetTick>
 8001482:	0002      	movs	r2, r0
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e111      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001490:	4b67      	ldr	r3, [pc, #412]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001494:	2202      	movs	r2, #2
 8001496:	4013      	ands	r3, r2
 8001498:	d1f1      	bne.n	800147e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2220      	movs	r2, #32
 80014a0:	4013      	ands	r3, r2
 80014a2:	d05c      	beq.n	800155e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014a4:	4b62      	ldr	r3, [pc, #392]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	220c      	movs	r2, #12
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d00e      	beq.n	80014ce <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014b0:	4b5f      	ldr	r3, [pc, #380]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	220c      	movs	r2, #12
 80014b6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014b8:	2b08      	cmp	r3, #8
 80014ba:	d114      	bne.n	80014e6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014bc:	4b5c      	ldr	r3, [pc, #368]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	23c0      	movs	r3, #192	; 0xc0
 80014c2:	025b      	lsls	r3, r3, #9
 80014c4:	401a      	ands	r2, r3
 80014c6:	23c0      	movs	r3, #192	; 0xc0
 80014c8:	025b      	lsls	r3, r3, #9
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d10b      	bne.n	80014e6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80014ce:	4b58      	ldr	r3, [pc, #352]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80014d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	029b      	lsls	r3, r3, #10
 80014d6:	4013      	ands	r3, r2
 80014d8:	d040      	beq.n	800155c <HAL_RCC_OscConfig+0x5a8>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d03c      	beq.n	800155c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e0e6      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d01b      	beq.n	8001526 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80014ee:	4b50      	ldr	r3, [pc, #320]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80014f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f2:	4b4f      	ldr	r3, [pc, #316]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80014f4:	2180      	movs	r1, #128	; 0x80
 80014f6:	0249      	lsls	r1, r1, #9
 80014f8:	430a      	orrs	r2, r1
 80014fa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fb0c 	bl	8000b18 <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001506:	f7ff fb07 	bl	8000b18 <HAL_GetTick>
 800150a:	0002      	movs	r2, r0
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e0cd      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001518:	4b45      	ldr	r3, [pc, #276]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800151a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	029b      	lsls	r3, r3, #10
 8001520:	4013      	ands	r3, r2
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x552>
 8001524:	e01b      	b.n	800155e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001526:	4b42      	ldr	r3, [pc, #264]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800152a:	4b41      	ldr	r3, [pc, #260]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800152c:	4943      	ldr	r1, [pc, #268]	; (800163c <HAL_RCC_OscConfig+0x688>)
 800152e:	400a      	ands	r2, r1
 8001530:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7ff faf1 	bl	8000b18 <HAL_GetTick>
 8001536:	0003      	movs	r3, r0
 8001538:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800153c:	f7ff faec 	bl	8000b18 <HAL_GetTick>
 8001540:	0002      	movs	r2, r0
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e0b2      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800154e:	4b38      	ldr	r3, [pc, #224]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	029b      	lsls	r3, r3, #10
 8001556:	4013      	ands	r3, r2
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x588>
 800155a:	e000      	b.n	800155e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800155c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	2b00      	cmp	r3, #0
 8001564:	d100      	bne.n	8001568 <HAL_RCC_OscConfig+0x5b4>
 8001566:	e0a4      	b.n	80016b2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001568:	4b31      	ldr	r3, [pc, #196]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	220c      	movs	r2, #12
 800156e:	4013      	ands	r3, r2
 8001570:	2b08      	cmp	r3, #8
 8001572:	d100      	bne.n	8001576 <HAL_RCC_OscConfig+0x5c2>
 8001574:	e078      	b.n	8001668 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	2b02      	cmp	r3, #2
 800157c:	d14c      	bne.n	8001618 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157e:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4b2b      	ldr	r3, [pc, #172]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001584:	492e      	ldr	r1, [pc, #184]	; (8001640 <HAL_RCC_OscConfig+0x68c>)
 8001586:	400a      	ands	r2, r1
 8001588:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158a:	f7ff fac5 	bl	8000b18 <HAL_GetTick>
 800158e:	0003      	movs	r3, r0
 8001590:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001594:	f7ff fac0 	bl	8000b18 <HAL_GetTick>
 8001598:	0002      	movs	r2, r0
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e086      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a6:	4b22      	ldr	r3, [pc, #136]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	049b      	lsls	r3, r3, #18
 80015ae:	4013      	ands	r3, r2
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b2:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	220f      	movs	r2, #15
 80015b8:	4393      	bics	r3, r2
 80015ba:	0019      	movs	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80015c2:	430a      	orrs	r2, r1
 80015c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4a1e      	ldr	r2, [pc, #120]	; (8001644 <HAL_RCC_OscConfig+0x690>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	0019      	movs	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	431a      	orrs	r2, r3
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80015dc:	430a      	orrs	r2, r1
 80015de:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80015e6:	2180      	movs	r1, #128	; 0x80
 80015e8:	0449      	lsls	r1, r1, #17
 80015ea:	430a      	orrs	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ee:	f7ff fa93 	bl	8000b18 <HAL_GetTick>
 80015f2:	0003      	movs	r3, r0
 80015f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff fa8e 	bl	8000b18 <HAL_GetTick>
 80015fc:	0002      	movs	r2, r0
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e054      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	049b      	lsls	r3, r3, #18
 8001612:	4013      	ands	r3, r2
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x644>
 8001616:	e04c      	b.n	80016b2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800161e:	4908      	ldr	r1, [pc, #32]	; (8001640 <HAL_RCC_OscConfig+0x68c>)
 8001620:	400a      	ands	r2, r1
 8001622:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff fa78 	bl	8000b18 <HAL_GetTick>
 8001628:	0003      	movs	r3, r0
 800162a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800162c:	e015      	b.n	800165a <HAL_RCC_OscConfig+0x6a6>
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	40021000 	.word	0x40021000
 8001634:	00001388 	.word	0x00001388
 8001638:	efffffff 	.word	0xefffffff
 800163c:	fffeffff 	.word	0xfffeffff
 8001640:	feffffff 	.word	0xfeffffff
 8001644:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff fa66 	bl	8000b18 <HAL_GetTick>
 800164c:	0002      	movs	r2, r0
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e02c      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_RCC_OscConfig+0x708>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	049b      	lsls	r3, r3, #18
 8001662:	4013      	ands	r3, r2
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x694>
 8001666:	e024      	b.n	80016b2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	2b01      	cmp	r3, #1
 800166e:	d101      	bne.n	8001674 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e01f      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_RCC_OscConfig+0x708>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <HAL_RCC_OscConfig+0x708>)
 800167c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	23c0      	movs	r3, #192	; 0xc0
 8001684:	025b      	lsls	r3, r3, #9
 8001686:	401a      	ands	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168c:	429a      	cmp	r2, r3
 800168e:	d10e      	bne.n	80016ae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	220f      	movs	r2, #15
 8001694:	401a      	ands	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800169a:	429a      	cmp	r2, r3
 800169c:	d107      	bne.n	80016ae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	23f0      	movs	r3, #240	; 0xf0
 80016a2:	039b      	lsls	r3, r3, #14
 80016a4:	401a      	ands	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d001      	beq.n	80016b2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	0018      	movs	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b008      	add	sp, #32
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000

080016c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0bf      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d4:	4b61      	ldr	r3, [pc, #388]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2201      	movs	r2, #1
 80016da:	4013      	ands	r3, r2
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d911      	bls.n	8001706 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b5e      	ldr	r3, [pc, #376]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2201      	movs	r2, #1
 80016e8:	4393      	bics	r3, r2
 80016ea:	0019      	movs	r1, r3
 80016ec:	4b5b      	ldr	r3, [pc, #364]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f4:	4b59      	ldr	r3, [pc, #356]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2201      	movs	r2, #1
 80016fa:	4013      	ands	r3, r2
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d001      	beq.n	8001706 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e0a6      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2202      	movs	r2, #2
 800170c:	4013      	ands	r3, r2
 800170e:	d015      	beq.n	800173c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2204      	movs	r2, #4
 8001716:	4013      	ands	r3, r2
 8001718:	d006      	beq.n	8001728 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800171a:	4b51      	ldr	r3, [pc, #324]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	4b50      	ldr	r3, [pc, #320]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 8001720:	21e0      	movs	r1, #224	; 0xe0
 8001722:	00c9      	lsls	r1, r1, #3
 8001724:	430a      	orrs	r2, r1
 8001726:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001728:	4b4d      	ldr	r3, [pc, #308]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	22f0      	movs	r2, #240	; 0xf0
 800172e:	4393      	bics	r3, r2
 8001730:	0019      	movs	r1, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 8001738:	430a      	orrs	r2, r1
 800173a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2201      	movs	r2, #1
 8001742:	4013      	ands	r3, r2
 8001744:	d04c      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d107      	bne.n	800175e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174e:	4b44      	ldr	r3, [pc, #272]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	029b      	lsls	r3, r3, #10
 8001756:	4013      	ands	r3, r2
 8001758:	d120      	bne.n	800179c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e07a      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001766:	4b3e      	ldr	r3, [pc, #248]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	049b      	lsls	r3, r3, #18
 800176e:	4013      	ands	r3, r2
 8001770:	d114      	bne.n	800179c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e06e      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800177e:	4b38      	ldr	r3, [pc, #224]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 8001780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	029b      	lsls	r3, r3, #10
 8001786:	4013      	ands	r3, r2
 8001788:	d108      	bne.n	800179c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e062      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178e:	4b34      	ldr	r3, [pc, #208]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2202      	movs	r2, #2
 8001794:	4013      	ands	r3, r2
 8001796:	d101      	bne.n	800179c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e05b      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179c:	4b30      	ldr	r3, [pc, #192]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2203      	movs	r2, #3
 80017a2:	4393      	bics	r3, r2
 80017a4:	0019      	movs	r1, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 80017ac:	430a      	orrs	r2, r1
 80017ae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b0:	f7ff f9b2 	bl	8000b18 <HAL_GetTick>
 80017b4:	0003      	movs	r3, r0
 80017b6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b8:	e009      	b.n	80017ce <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ba:	f7ff f9ad 	bl	8000b18 <HAL_GetTick>
 80017be:	0002      	movs	r2, r0
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	4a27      	ldr	r2, [pc, #156]	; (8001864 <HAL_RCC_ClockConfig+0x1a4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e042      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ce:	4b24      	ldr	r3, [pc, #144]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	220c      	movs	r2, #12
 80017d4:	401a      	ands	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	429a      	cmp	r2, r3
 80017de:	d1ec      	bne.n	80017ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e0:	4b1e      	ldr	r3, [pc, #120]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2201      	movs	r2, #1
 80017e6:	4013      	ands	r3, r2
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d211      	bcs.n	8001812 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2201      	movs	r2, #1
 80017f4:	4393      	bics	r3, r2
 80017f6:	0019      	movs	r1, r3
 80017f8:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2201      	movs	r2, #1
 8001806:	4013      	ands	r3, r2
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d001      	beq.n	8001812 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e020      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2204      	movs	r2, #4
 8001818:	4013      	ands	r3, r2
 800181a:	d009      	beq.n	8001830 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	4a11      	ldr	r2, [pc, #68]	; (8001868 <HAL_RCC_ClockConfig+0x1a8>)
 8001822:	4013      	ands	r3, r2
 8001824:	0019      	movs	r1, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 800182c:	430a      	orrs	r2, r1
 800182e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001830:	f000 f820 	bl	8001874 <HAL_RCC_GetSysClockFreq>
 8001834:	0001      	movs	r1, r0
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	220f      	movs	r2, #15
 800183e:	4013      	ands	r3, r2
 8001840:	4a0a      	ldr	r2, [pc, #40]	; (800186c <HAL_RCC_ClockConfig+0x1ac>)
 8001842:	5cd3      	ldrb	r3, [r2, r3]
 8001844:	000a      	movs	r2, r1
 8001846:	40da      	lsrs	r2, r3
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_RCC_ClockConfig+0x1b0>)
 800184a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800184c:	2003      	movs	r0, #3
 800184e:	f7fe ffbb 	bl	80007c8 <HAL_InitTick>
  
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	0018      	movs	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	b004      	add	sp, #16
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40022000 	.word	0x40022000
 8001860:	40021000 	.word	0x40021000
 8001864:	00001388 	.word	0x00001388
 8001868:	fffff8ff 	.word	0xfffff8ff
 800186c:	080066ec 	.word	0x080066ec
 8001870:	20000000 	.word	0x20000000

08001874 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800188e:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	220c      	movs	r2, #12
 8001898:	4013      	ands	r3, r2
 800189a:	2b0c      	cmp	r3, #12
 800189c:	d046      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0xb8>
 800189e:	d848      	bhi.n	8001932 <HAL_RCC_GetSysClockFreq+0xbe>
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d002      	beq.n	80018aa <HAL_RCC_GetSysClockFreq+0x36>
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d003      	beq.n	80018b0 <HAL_RCC_GetSysClockFreq+0x3c>
 80018a8:	e043      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018aa:	4b27      	ldr	r3, [pc, #156]	; (8001948 <HAL_RCC_GetSysClockFreq+0xd4>)
 80018ac:	613b      	str	r3, [r7, #16]
      break;
 80018ae:	e043      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	0c9b      	lsrs	r3, r3, #18
 80018b4:	220f      	movs	r2, #15
 80018b6:	4013      	ands	r3, r2
 80018b8:	4a24      	ldr	r2, [pc, #144]	; (800194c <HAL_RCC_GetSysClockFreq+0xd8>)
 80018ba:	5cd3      	ldrb	r3, [r2, r3]
 80018bc:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80018be:	4b21      	ldr	r3, [pc, #132]	; (8001944 <HAL_RCC_GetSysClockFreq+0xd0>)
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	220f      	movs	r2, #15
 80018c4:	4013      	ands	r3, r2
 80018c6:	4a22      	ldr	r2, [pc, #136]	; (8001950 <HAL_RCC_GetSysClockFreq+0xdc>)
 80018c8:	5cd3      	ldrb	r3, [r2, r3]
 80018ca:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	23c0      	movs	r3, #192	; 0xc0
 80018d0:	025b      	lsls	r3, r3, #9
 80018d2:	401a      	ands	r2, r3
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	025b      	lsls	r3, r3, #9
 80018d8:	429a      	cmp	r2, r3
 80018da:	d109      	bne.n	80018f0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	481a      	ldr	r0, [pc, #104]	; (8001948 <HAL_RCC_GetSysClockFreq+0xd4>)
 80018e0:	f7fe fc24 	bl	800012c <__udivsi3>
 80018e4:	0003      	movs	r3, r0
 80018e6:	001a      	movs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4353      	muls	r3, r2
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e01a      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	23c0      	movs	r3, #192	; 0xc0
 80018f4:	025b      	lsls	r3, r3, #9
 80018f6:	401a      	ands	r2, r3
 80018f8:	23c0      	movs	r3, #192	; 0xc0
 80018fa:	025b      	lsls	r3, r3, #9
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d109      	bne.n	8001914 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	4814      	ldr	r0, [pc, #80]	; (8001954 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001904:	f7fe fc12 	bl	800012c <__udivsi3>
 8001908:	0003      	movs	r3, r0
 800190a:	001a      	movs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4353      	muls	r3, r2
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	e008      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	480c      	ldr	r0, [pc, #48]	; (8001948 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001918:	f7fe fc08 	bl	800012c <__udivsi3>
 800191c:	0003      	movs	r3, r0
 800191e:	001a      	movs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4353      	muls	r3, r2
 8001924:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	613b      	str	r3, [r7, #16]
      break;
 800192a:	e005      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_RCC_GetSysClockFreq+0xe0>)
 800192e:	613b      	str	r3, [r7, #16]
      break;
 8001930:	e002      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001934:	613b      	str	r3, [r7, #16]
      break;
 8001936:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001938:	693b      	ldr	r3, [r7, #16]
}
 800193a:	0018      	movs	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	b006      	add	sp, #24
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	40021000 	.word	0x40021000
 8001948:	007a1200 	.word	0x007a1200
 800194c:	08006704 	.word	0x08006704
 8001950:	08006714 	.word	0x08006714
 8001954:	02dc6c00 	.word	0x02dc6c00

08001958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800195c:	4b02      	ldr	r3, [pc, #8]	; (8001968 <HAL_RCC_GetHCLKFreq+0x10>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	0018      	movs	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	20000000 	.word	0x20000000

0800196c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001970:	f7ff fff2 	bl	8001958 <HAL_RCC_GetHCLKFreq>
 8001974:	0001      	movs	r1, r0
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	2207      	movs	r2, #7
 800197e:	4013      	ands	r3, r2
 8001980:	4a04      	ldr	r2, [pc, #16]	; (8001994 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001982:	5cd3      	ldrb	r3, [r2, r3]
 8001984:	40d9      	lsrs	r1, r3
 8001986:	000b      	movs	r3, r1
}    
 8001988:	0018      	movs	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	40021000 	.word	0x40021000
 8001994:	080066fc 	.word	0x080066fc

08001998 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2207      	movs	r2, #7
 80019a6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019a8:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <HAL_RCC_GetClockConfig+0x4c>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2203      	movs	r2, #3
 80019ae:	401a      	ands	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_RCC_GetClockConfig+0x4c>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	22f0      	movs	r2, #240	; 0xf0
 80019ba:	401a      	ands	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <HAL_RCC_GetClockConfig+0x4c>)
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	23e0      	movs	r3, #224	; 0xe0
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	401a      	ands	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_RCC_GetClockConfig+0x50>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2201      	movs	r2, #1
 80019d4:	401a      	ands	r2, r3
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	601a      	str	r2, [r3, #0]
}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	46bd      	mov	sp, r7
 80019de:	b002      	add	sp, #8
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40022000 	.word	0x40022000

080019ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	025b      	lsls	r3, r3, #9
 8001a04:	4013      	ands	r3, r2
 8001a06:	d100      	bne.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001a08:	e08e      	b.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001a0a:	2017      	movs	r0, #23
 8001a0c:	183b      	adds	r3, r7, r0
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a12:	4b6e      	ldr	r3, [pc, #440]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a14:	69da      	ldr	r2, [r3, #28]
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	055b      	lsls	r3, r3, #21
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d110      	bne.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	4b6b      	ldr	r3, [pc, #428]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a20:	69da      	ldr	r2, [r3, #28]
 8001a22:	4b6a      	ldr	r3, [pc, #424]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a24:	2180      	movs	r1, #128	; 0x80
 8001a26:	0549      	lsls	r1, r1, #21
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	61da      	str	r2, [r3, #28]
 8001a2c:	4b67      	ldr	r3, [pc, #412]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a2e:	69da      	ldr	r2, [r3, #28]
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	055b      	lsls	r3, r3, #21
 8001a34:	4013      	ands	r3, r2
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a3a:	183b      	adds	r3, r7, r0
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a40:	4b63      	ldr	r3, [pc, #396]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d11a      	bne.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a4c:	4b60      	ldr	r3, [pc, #384]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b5f      	ldr	r3, [pc, #380]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a52:	2180      	movs	r1, #128	; 0x80
 8001a54:	0049      	lsls	r1, r1, #1
 8001a56:	430a      	orrs	r2, r1
 8001a58:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5a:	f7ff f85d 	bl	8000b18 <HAL_GetTick>
 8001a5e:	0003      	movs	r3, r0
 8001a60:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a62:	e008      	b.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a64:	f7ff f858 	bl	8000b18 <HAL_GetTick>
 8001a68:	0002      	movs	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	; 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e0a6      	b.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a76:	4b56      	ldr	r3, [pc, #344]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a82:	4b52      	ldr	r3, [pc, #328]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a84:	6a1a      	ldr	r2, [r3, #32]
 8001a86:	23c0      	movs	r3, #192	; 0xc0
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d034      	beq.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	23c0      	movs	r3, #192	; 0xc0
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d02c      	beq.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001aa4:	4b49      	ldr	r3, [pc, #292]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	4a4a      	ldr	r2, [pc, #296]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001aae:	4b47      	ldr	r3, [pc, #284]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ab0:	6a1a      	ldr	r2, [r3, #32]
 8001ab2:	4b46      	ldr	r3, [pc, #280]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ab4:	2180      	movs	r1, #128	; 0x80
 8001ab6:	0249      	lsls	r1, r1, #9
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001abc:	4b43      	ldr	r3, [pc, #268]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001abe:	6a1a      	ldr	r2, [r3, #32]
 8001ac0:	4b42      	ldr	r3, [pc, #264]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ac2:	4945      	ldr	r1, [pc, #276]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ac8:	4b40      	ldr	r3, [pc, #256]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d013      	beq.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad6:	f7ff f81f 	bl	8000b18 <HAL_GetTick>
 8001ada:	0003      	movs	r3, r0
 8001adc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ade:	e009      	b.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae0:	f7ff f81a 	bl	8000b18 <HAL_GetTick>
 8001ae4:	0002      	movs	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	4a3c      	ldr	r2, [pc, #240]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e067      	b.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af4:	4b35      	ldr	r3, [pc, #212]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	2202      	movs	r2, #2
 8001afa:	4013      	ands	r3, r2
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001afe:	4b33      	ldr	r3, [pc, #204]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	4a34      	ldr	r2, [pc, #208]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	0019      	movs	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b12:	2317      	movs	r3, #23
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d105      	bne.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b1c:	4b2b      	ldr	r3, [pc, #172]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b1e:	69da      	ldr	r2, [r3, #28]
 8001b20:	4b2a      	ldr	r3, [pc, #168]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b22:	492f      	ldr	r1, [pc, #188]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001b24:	400a      	ands	r2, r1
 8001b26:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d009      	beq.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b32:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	2203      	movs	r2, #3
 8001b38:	4393      	bics	r3, r2
 8001b3a:	0019      	movs	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b42:	430a      	orrs	r2, r1
 8001b44:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d009      	beq.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b50:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	4a23      	ldr	r2, [pc, #140]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	0019      	movs	r1, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b60:	430a      	orrs	r2, r1
 8001b62:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d009      	beq.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b6e:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	2210      	movs	r2, #16
 8001b74:	4393      	bics	r3, r2
 8001b76:	0019      	movs	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	029b      	lsls	r3, r3, #10
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d009      	beq.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	2280      	movs	r2, #128	; 0x80
 8001b94:	4393      	bics	r3, r2
 8001b96:	0019      	movs	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	699a      	ldr	r2, [r3, #24]
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4013      	ands	r3, r2
 8001bac:	d009      	beq.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	2240      	movs	r2, #64	; 0x40
 8001bb4:	4393      	bics	r3, r2
 8001bb6:	0019      	movs	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	b006      	add	sp, #24
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40007000 	.word	0x40007000
 8001bd4:	fffffcff 	.word	0xfffffcff
 8001bd8:	fffeffff 	.word	0xfffeffff
 8001bdc:	00001388 	.word	0x00001388
 8001be0:	efffffff 	.word	0xefffffff
 8001be4:	fffcffff 	.word	0xfffcffff

08001be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e042      	b.n	8001c80 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	223d      	movs	r2, #61	; 0x3d
 8001bfe:	5c9b      	ldrb	r3, [r3, r2]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d107      	bne.n	8001c16 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	223c      	movs	r2, #60	; 0x3c
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	0018      	movs	r0, r3
 8001c12:	f000 f839 	bl	8001c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	223d      	movs	r2, #61	; 0x3d
 8001c1a:	2102      	movs	r1, #2
 8001c1c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3304      	adds	r3, #4
 8001c26:	0019      	movs	r1, r3
 8001c28:	0010      	movs	r0, r2
 8001c2a:	f000 f995 	bl	8001f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2246      	movs	r2, #70	; 0x46
 8001c32:	2101      	movs	r1, #1
 8001c34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	223e      	movs	r2, #62	; 0x3e
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	5499      	strb	r1, [r3, r2]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	223f      	movs	r2, #63	; 0x3f
 8001c42:	2101      	movs	r1, #1
 8001c44:	5499      	strb	r1, [r3, r2]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2240      	movs	r2, #64	; 0x40
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	5499      	strb	r1, [r3, r2]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2241      	movs	r2, #65	; 0x41
 8001c52:	2101      	movs	r1, #1
 8001c54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2242      	movs	r2, #66	; 0x42
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	5499      	strb	r1, [r3, r2]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2243      	movs	r2, #67	; 0x43
 8001c62:	2101      	movs	r1, #1
 8001c64:	5499      	strb	r1, [r3, r2]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2244      	movs	r2, #68	; 0x44
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	5499      	strb	r1, [r3, r2]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2245      	movs	r2, #69	; 0x45
 8001c72:	2101      	movs	r1, #1
 8001c74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	223d      	movs	r2, #61	; 0x3d
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	0018      	movs	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b002      	add	sp, #8
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c90:	46c0      	nop			; (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b002      	add	sp, #8
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	223d      	movs	r2, #61	; 0x3d
 8001ca4:	5c9b      	ldrb	r3, [r3, r2]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d001      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e03b      	b.n	8001d28 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	223d      	movs	r2, #61	; 0x3d
 8001cb4:	2102      	movs	r1, #2
 8001cb6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a18      	ldr	r2, [pc, #96]	; (8001d30 <HAL_TIM_Base_Start_IT+0x98>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00f      	beq.n	8001cf2 <HAL_TIM_Base_Start_IT+0x5a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	05db      	lsls	r3, r3, #23
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d009      	beq.n	8001cf2 <HAL_TIM_Base_Start_IT+0x5a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a14      	ldr	r2, [pc, #80]	; (8001d34 <HAL_TIM_Base_Start_IT+0x9c>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d004      	beq.n	8001cf2 <HAL_TIM_Base_Start_IT+0x5a>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <HAL_TIM_Base_Start_IT+0xa0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d111      	bne.n	8001d16 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2b06      	cmp	r3, #6
 8001d02:	d010      	beq.n	8001d26 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2101      	movs	r1, #1
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d14:	e007      	b.n	8001d26 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2101      	movs	r1, #1
 8001d22:	430a      	orrs	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	0018      	movs	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b004      	add	sp, #16
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40012c00 	.word	0x40012c00
 8001d34:	40000400 	.word	0x40000400
 8001d38:	40014000 	.word	0x40014000

08001d3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2202      	movs	r2, #2
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d021      	beq.n	8001da0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	4013      	ands	r3, r2
 8001d62:	d01d      	beq.n	8001da0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2203      	movs	r2, #3
 8001d6a:	4252      	negs	r2, r2
 8001d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d004      	beq.n	8001d8a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	0018      	movs	r0, r3
 8001d84:	f000 f8d0 	bl	8001f28 <HAL_TIM_IC_CaptureCallback>
 8001d88:	e007      	b.n	8001d9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f000 f8c3 	bl	8001f18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	0018      	movs	r0, r3
 8001d96:	f000 f8cf 	bl	8001f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2204      	movs	r2, #4
 8001da4:	4013      	ands	r3, r2
 8001da6:	d022      	beq.n	8001dee <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2204      	movs	r2, #4
 8001dac:	4013      	ands	r3, r2
 8001dae:	d01e      	beq.n	8001dee <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2205      	movs	r2, #5
 8001db6:	4252      	negs	r2, r2
 8001db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699a      	ldr	r2, [r3, #24]
 8001dc6:	23c0      	movs	r3, #192	; 0xc0
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d004      	beq.n	8001dd8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f000 f8a9 	bl	8001f28 <HAL_TIM_IC_CaptureCallback>
 8001dd6:	e007      	b.n	8001de8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f000 f89c 	bl	8001f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	0018      	movs	r0, r3
 8001de4:	f000 f8a8 	bl	8001f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2208      	movs	r2, #8
 8001df2:	4013      	ands	r3, r2
 8001df4:	d021      	beq.n	8001e3a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2208      	movs	r2, #8
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d01d      	beq.n	8001e3a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2209      	movs	r2, #9
 8001e04:	4252      	negs	r2, r2
 8001e06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2204      	movs	r2, #4
 8001e0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	2203      	movs	r2, #3
 8001e16:	4013      	ands	r3, r2
 8001e18:	d004      	beq.n	8001e24 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f000 f883 	bl	8001f28 <HAL_TIM_IC_CaptureCallback>
 8001e22:	e007      	b.n	8001e34 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	0018      	movs	r0, r3
 8001e28:	f000 f876 	bl	8001f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f000 f882 	bl	8001f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2210      	movs	r2, #16
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d022      	beq.n	8001e88 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2210      	movs	r2, #16
 8001e46:	4013      	ands	r3, r2
 8001e48:	d01e      	beq.n	8001e88 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2211      	movs	r2, #17
 8001e50:	4252      	negs	r2, r2
 8001e52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2208      	movs	r2, #8
 8001e58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	69da      	ldr	r2, [r3, #28]
 8001e60:	23c0      	movs	r3, #192	; 0xc0
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4013      	ands	r3, r2
 8001e66:	d004      	beq.n	8001e72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f000 f85c 	bl	8001f28 <HAL_TIM_IC_CaptureCallback>
 8001e70:	e007      	b.n	8001e82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	0018      	movs	r0, r3
 8001e76:	f000 f84f 	bl	8001f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f000 f85b 	bl	8001f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d00c      	beq.n	8001eaa <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	4013      	ands	r3, r2
 8001e96:	d008      	beq.n	8001eaa <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4252      	negs	r2, r2
 8001ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f7fe fc05 	bl	80006b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2280      	movs	r2, #128	; 0x80
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d00c      	beq.n	8001ecc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2280      	movs	r2, #128	; 0x80
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d008      	beq.n	8001ecc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2281      	movs	r2, #129	; 0x81
 8001ec0:	4252      	negs	r2, r2
 8001ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f000 f8dc 	bl	8002084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2240      	movs	r2, #64	; 0x40
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d00c      	beq.n	8001eee <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2240      	movs	r2, #64	; 0x40
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d008      	beq.n	8001eee <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2241      	movs	r2, #65	; 0x41
 8001ee2:	4252      	negs	r2, r2
 8001ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f000 f82d 	bl	8001f48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d00c      	beq.n	8001f10 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	4013      	ands	r3, r2
 8001efc:	d008      	beq.n	8001f10 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2221      	movs	r2, #33	; 0x21
 8001f04:	4252      	negs	r2, r2
 8001f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f000 f8b2 	bl	8002074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f10:	46c0      	nop			; (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b004      	add	sp, #16
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f20:	46c0      	nop			; (mov r8, r8)
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b002      	add	sp, #8
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f30:	46c0      	nop			; (mov r8, r8)
 8001f32:	46bd      	mov	sp, r7
 8001f34:	b002      	add	sp, #8
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f40:	46c0      	nop			; (mov r8, r8)
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b002      	add	sp, #8
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f50:	46c0      	nop			; (mov r8, r8)
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b002      	add	sp, #8
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a3b      	ldr	r2, [pc, #236]	; (8002058 <TIM_Base_SetConfig+0x100>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d008      	beq.n	8001f82 <TIM_Base_SetConfig+0x2a>
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	05db      	lsls	r3, r3, #23
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d003      	beq.n	8001f82 <TIM_Base_SetConfig+0x2a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a37      	ldr	r2, [pc, #220]	; (800205c <TIM_Base_SetConfig+0x104>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d108      	bne.n	8001f94 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2270      	movs	r2, #112	; 0x70
 8001f86:	4393      	bics	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a30      	ldr	r2, [pc, #192]	; (8002058 <TIM_Base_SetConfig+0x100>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d018      	beq.n	8001fce <TIM_Base_SetConfig+0x76>
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	05db      	lsls	r3, r3, #23
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d013      	beq.n	8001fce <TIM_Base_SetConfig+0x76>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a2c      	ldr	r2, [pc, #176]	; (800205c <TIM_Base_SetConfig+0x104>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00f      	beq.n	8001fce <TIM_Base_SetConfig+0x76>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a2b      	ldr	r2, [pc, #172]	; (8002060 <TIM_Base_SetConfig+0x108>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00b      	beq.n	8001fce <TIM_Base_SetConfig+0x76>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a2a      	ldr	r2, [pc, #168]	; (8002064 <TIM_Base_SetConfig+0x10c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d007      	beq.n	8001fce <TIM_Base_SetConfig+0x76>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a29      	ldr	r2, [pc, #164]	; (8002068 <TIM_Base_SetConfig+0x110>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d003      	beq.n	8001fce <TIM_Base_SetConfig+0x76>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a28      	ldr	r2, [pc, #160]	; (800206c <TIM_Base_SetConfig+0x114>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d108      	bne.n	8001fe0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4a27      	ldr	r2, [pc, #156]	; (8002070 <TIM_Base_SetConfig+0x118>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2280      	movs	r2, #128	; 0x80
 8001fe4:	4393      	bics	r3, r2
 8001fe6:	001a      	movs	r2, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a13      	ldr	r2, [pc, #76]	; (8002058 <TIM_Base_SetConfig+0x100>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00b      	beq.n	8002026 <TIM_Base_SetConfig+0xce>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a14      	ldr	r2, [pc, #80]	; (8002064 <TIM_Base_SetConfig+0x10c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d007      	beq.n	8002026 <TIM_Base_SetConfig+0xce>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a13      	ldr	r2, [pc, #76]	; (8002068 <TIM_Base_SetConfig+0x110>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d003      	beq.n	8002026 <TIM_Base_SetConfig+0xce>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a12      	ldr	r2, [pc, #72]	; (800206c <TIM_Base_SetConfig+0x114>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d103      	bne.n	800202e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	691a      	ldr	r2, [r3, #16]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	2201      	movs	r2, #1
 800203a:	4013      	ands	r3, r2
 800203c:	2b01      	cmp	r3, #1
 800203e:	d106      	bne.n	800204e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	2201      	movs	r2, #1
 8002046:	4393      	bics	r3, r2
 8002048:	001a      	movs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	611a      	str	r2, [r3, #16]
  }
}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	46bd      	mov	sp, r7
 8002052:	b004      	add	sp, #16
 8002054:	bd80      	pop	{r7, pc}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	40012c00 	.word	0x40012c00
 800205c:	40000400 	.word	0x40000400
 8002060:	40002000 	.word	0x40002000
 8002064:	40014000 	.word	0x40014000
 8002068:	40014400 	.word	0x40014400
 800206c:	40014800 	.word	0x40014800
 8002070:	fffffcff 	.word	0xfffffcff

08002074 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800207c:	46c0      	nop			; (mov r8, r8)
 800207e:	46bd      	mov	sp, r7
 8002080:	b002      	add	sp, #8
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	b002      	add	sp, #8
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e044      	b.n	8002130 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d107      	bne.n	80020be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2278      	movs	r2, #120	; 0x78
 80020b2:	2100      	movs	r1, #0
 80020b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	0018      	movs	r0, r3
 80020ba:	f7fe fb37 	bl	800072c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2224      	movs	r2, #36	; 0x24
 80020c2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2101      	movs	r1, #1
 80020d0:	438a      	bics	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	0018      	movs	r0, r3
 80020e0:	f000 fa54 	bl	800258c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	0018      	movs	r0, r3
 80020e8:	f000 f8c8 	bl	800227c <UART_SetConfig>
 80020ec:	0003      	movs	r3, r0
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e01c      	b.n	8002130 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	490d      	ldr	r1, [pc, #52]	; (8002138 <HAL_UART_Init+0xa4>)
 8002102:	400a      	ands	r2, r1
 8002104:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	212a      	movs	r1, #42	; 0x2a
 8002112:	438a      	bics	r2, r1
 8002114:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2101      	movs	r1, #1
 8002122:	430a      	orrs	r2, r1
 8002124:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	0018      	movs	r0, r3
 800212a:	f000 fae3 	bl	80026f4 <UART_CheckIdleState>
 800212e:	0003      	movs	r3, r0
}
 8002130:	0018      	movs	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	b002      	add	sp, #8
 8002136:	bd80      	pop	{r7, pc}
 8002138:	ffffb7ff 	.word	0xffffb7ff

0800213c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af02      	add	r7, sp, #8
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	1dbb      	adds	r3, r7, #6
 800214a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002150:	2b20      	cmp	r3, #32
 8002152:	d000      	beq.n	8002156 <HAL_UART_Transmit+0x1a>
 8002154:	e08d      	b.n	8002272 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_UART_Transmit+0x28>
 800215c:	1dbb      	adds	r3, r7, #6
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e085      	b.n	8002274 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	015b      	lsls	r3, r3, #5
 8002170:	429a      	cmp	r2, r3
 8002172:	d109      	bne.n	8002188 <HAL_UART_Transmit+0x4c>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d105      	bne.n	8002188 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2201      	movs	r2, #1
 8002180:	4013      	ands	r3, r2
 8002182:	d001      	beq.n	8002188 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e075      	b.n	8002274 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2284      	movs	r2, #132	; 0x84
 800218c:	2100      	movs	r1, #0
 800218e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2221      	movs	r2, #33	; 0x21
 8002194:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002196:	f7fe fcbf 	bl	8000b18 <HAL_GetTick>
 800219a:	0003      	movs	r3, r0
 800219c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1dba      	adds	r2, r7, #6
 80021a2:	2150      	movs	r1, #80	; 0x50
 80021a4:	8812      	ldrh	r2, [r2, #0]
 80021a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1dba      	adds	r2, r7, #6
 80021ac:	2152      	movs	r1, #82	; 0x52
 80021ae:	8812      	ldrh	r2, [r2, #0]
 80021b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	2380      	movs	r3, #128	; 0x80
 80021b8:	015b      	lsls	r3, r3, #5
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d108      	bne.n	80021d0 <HAL_UART_Transmit+0x94>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d104      	bne.n	80021d0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	e003      	b.n	80021d8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021d8:	e030      	b.n	800223c <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	0013      	movs	r3, r2
 80021e4:	2200      	movs	r2, #0
 80021e6:	2180      	movs	r1, #128	; 0x80
 80021e8:	f000 fb2c 	bl	8002844 <UART_WaitOnFlagUntilTimeout>
 80021ec:	1e03      	subs	r3, r0, #0
 80021ee:	d004      	beq.n	80021fa <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2220      	movs	r2, #32
 80021f4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e03c      	b.n	8002274 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10b      	bne.n	8002218 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	881a      	ldrh	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	05d2      	lsls	r2, r2, #23
 800220a:	0dd2      	lsrs	r2, r2, #23
 800220c:	b292      	uxth	r2, r2
 800220e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	3302      	adds	r3, #2
 8002214:	61bb      	str	r3, [r7, #24]
 8002216:	e008      	b.n	800222a <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	781a      	ldrb	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	b292      	uxth	r2, r2
 8002222:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	3301      	adds	r3, #1
 8002228:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2252      	movs	r2, #82	; 0x52
 800222e:	5a9b      	ldrh	r3, [r3, r2]
 8002230:	b29b      	uxth	r3, r3
 8002232:	3b01      	subs	r3, #1
 8002234:	b299      	uxth	r1, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2252      	movs	r2, #82	; 0x52
 800223a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2252      	movs	r2, #82	; 0x52
 8002240:	5a9b      	ldrh	r3, [r3, r2]
 8002242:	b29b      	uxth	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1c8      	bne.n	80021da <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	0013      	movs	r3, r2
 8002252:	2200      	movs	r2, #0
 8002254:	2140      	movs	r1, #64	; 0x40
 8002256:	f000 faf5 	bl	8002844 <UART_WaitOnFlagUntilTimeout>
 800225a:	1e03      	subs	r3, r0, #0
 800225c:	d004      	beq.n	8002268 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2220      	movs	r2, #32
 8002262:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e005      	b.n	8002274 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2220      	movs	r2, #32
 800226c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	e000      	b.n	8002274 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8002272:	2302      	movs	r3, #2
  }
}
 8002274:	0018      	movs	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	b008      	add	sp, #32
 800227a:	bd80      	pop	{r7, pc}

0800227c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002284:	231e      	movs	r3, #30
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4aaf      	ldr	r2, [pc, #700]	; (8002568 <UART_SetConfig+0x2ec>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	0019      	movs	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	4aaa      	ldr	r2, [pc, #680]	; (800256c <UART_SetConfig+0x2f0>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	0019      	movs	r1, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	4313      	orrs	r3, r2
 80022e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	4aa1      	ldr	r2, [pc, #644]	; (8002570 <UART_SetConfig+0x2f4>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	0019      	movs	r1, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a9d      	ldr	r2, [pc, #628]	; (8002574 <UART_SetConfig+0x2f8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d127      	bne.n	8002352 <UART_SetConfig+0xd6>
 8002302:	4b9d      	ldr	r3, [pc, #628]	; (8002578 <UART_SetConfig+0x2fc>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	2203      	movs	r2, #3
 8002308:	4013      	ands	r3, r2
 800230a:	2b03      	cmp	r3, #3
 800230c:	d00d      	beq.n	800232a <UART_SetConfig+0xae>
 800230e:	d81b      	bhi.n	8002348 <UART_SetConfig+0xcc>
 8002310:	2b02      	cmp	r3, #2
 8002312:	d014      	beq.n	800233e <UART_SetConfig+0xc2>
 8002314:	d818      	bhi.n	8002348 <UART_SetConfig+0xcc>
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <UART_SetConfig+0xa4>
 800231a:	2b01      	cmp	r3, #1
 800231c:	d00a      	beq.n	8002334 <UART_SetConfig+0xb8>
 800231e:	e013      	b.n	8002348 <UART_SetConfig+0xcc>
 8002320:	231f      	movs	r3, #31
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
 8002328:	e065      	b.n	80023f6 <UART_SetConfig+0x17a>
 800232a:	231f      	movs	r3, #31
 800232c:	18fb      	adds	r3, r7, r3
 800232e:	2202      	movs	r2, #2
 8002330:	701a      	strb	r2, [r3, #0]
 8002332:	e060      	b.n	80023f6 <UART_SetConfig+0x17a>
 8002334:	231f      	movs	r3, #31
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	2204      	movs	r2, #4
 800233a:	701a      	strb	r2, [r3, #0]
 800233c:	e05b      	b.n	80023f6 <UART_SetConfig+0x17a>
 800233e:	231f      	movs	r3, #31
 8002340:	18fb      	adds	r3, r7, r3
 8002342:	2208      	movs	r2, #8
 8002344:	701a      	strb	r2, [r3, #0]
 8002346:	e056      	b.n	80023f6 <UART_SetConfig+0x17a>
 8002348:	231f      	movs	r3, #31
 800234a:	18fb      	adds	r3, r7, r3
 800234c:	2210      	movs	r2, #16
 800234e:	701a      	strb	r2, [r3, #0]
 8002350:	e051      	b.n	80023f6 <UART_SetConfig+0x17a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a89      	ldr	r2, [pc, #548]	; (800257c <UART_SetConfig+0x300>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d134      	bne.n	80023c6 <UART_SetConfig+0x14a>
 800235c:	4b86      	ldr	r3, [pc, #536]	; (8002578 <UART_SetConfig+0x2fc>)
 800235e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002360:	23c0      	movs	r3, #192	; 0xc0
 8002362:	029b      	lsls	r3, r3, #10
 8002364:	4013      	ands	r3, r2
 8002366:	22c0      	movs	r2, #192	; 0xc0
 8002368:	0292      	lsls	r2, r2, #10
 800236a:	4293      	cmp	r3, r2
 800236c:	d017      	beq.n	800239e <UART_SetConfig+0x122>
 800236e:	22c0      	movs	r2, #192	; 0xc0
 8002370:	0292      	lsls	r2, r2, #10
 8002372:	4293      	cmp	r3, r2
 8002374:	d822      	bhi.n	80023bc <UART_SetConfig+0x140>
 8002376:	2280      	movs	r2, #128	; 0x80
 8002378:	0292      	lsls	r2, r2, #10
 800237a:	4293      	cmp	r3, r2
 800237c:	d019      	beq.n	80023b2 <UART_SetConfig+0x136>
 800237e:	2280      	movs	r2, #128	; 0x80
 8002380:	0292      	lsls	r2, r2, #10
 8002382:	4293      	cmp	r3, r2
 8002384:	d81a      	bhi.n	80023bc <UART_SetConfig+0x140>
 8002386:	2b00      	cmp	r3, #0
 8002388:	d004      	beq.n	8002394 <UART_SetConfig+0x118>
 800238a:	2280      	movs	r2, #128	; 0x80
 800238c:	0252      	lsls	r2, r2, #9
 800238e:	4293      	cmp	r3, r2
 8002390:	d00a      	beq.n	80023a8 <UART_SetConfig+0x12c>
 8002392:	e013      	b.n	80023bc <UART_SetConfig+0x140>
 8002394:	231f      	movs	r3, #31
 8002396:	18fb      	adds	r3, r7, r3
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
 800239c:	e02b      	b.n	80023f6 <UART_SetConfig+0x17a>
 800239e:	231f      	movs	r3, #31
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	2202      	movs	r2, #2
 80023a4:	701a      	strb	r2, [r3, #0]
 80023a6:	e026      	b.n	80023f6 <UART_SetConfig+0x17a>
 80023a8:	231f      	movs	r3, #31
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	2204      	movs	r2, #4
 80023ae:	701a      	strb	r2, [r3, #0]
 80023b0:	e021      	b.n	80023f6 <UART_SetConfig+0x17a>
 80023b2:	231f      	movs	r3, #31
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	2208      	movs	r2, #8
 80023b8:	701a      	strb	r2, [r3, #0]
 80023ba:	e01c      	b.n	80023f6 <UART_SetConfig+0x17a>
 80023bc:	231f      	movs	r3, #31
 80023be:	18fb      	adds	r3, r7, r3
 80023c0:	2210      	movs	r2, #16
 80023c2:	701a      	strb	r2, [r3, #0]
 80023c4:	e017      	b.n	80023f6 <UART_SetConfig+0x17a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a6d      	ldr	r2, [pc, #436]	; (8002580 <UART_SetConfig+0x304>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d104      	bne.n	80023da <UART_SetConfig+0x15e>
 80023d0:	231f      	movs	r3, #31
 80023d2:	18fb      	adds	r3, r7, r3
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
 80023d8:	e00d      	b.n	80023f6 <UART_SetConfig+0x17a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a69      	ldr	r2, [pc, #420]	; (8002584 <UART_SetConfig+0x308>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d104      	bne.n	80023ee <UART_SetConfig+0x172>
 80023e4:	231f      	movs	r3, #31
 80023e6:	18fb      	adds	r3, r7, r3
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
 80023ec:	e003      	b.n	80023f6 <UART_SetConfig+0x17a>
 80023ee:	231f      	movs	r3, #31
 80023f0:	18fb      	adds	r3, r7, r3
 80023f2:	2210      	movs	r2, #16
 80023f4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69da      	ldr	r2, [r3, #28]
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	021b      	lsls	r3, r3, #8
 80023fe:	429a      	cmp	r2, r3
 8002400:	d15c      	bne.n	80024bc <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8002402:	231f      	movs	r3, #31
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b08      	cmp	r3, #8
 800240a:	d015      	beq.n	8002438 <UART_SetConfig+0x1bc>
 800240c:	dc18      	bgt.n	8002440 <UART_SetConfig+0x1c4>
 800240e:	2b04      	cmp	r3, #4
 8002410:	d00d      	beq.n	800242e <UART_SetConfig+0x1b2>
 8002412:	dc15      	bgt.n	8002440 <UART_SetConfig+0x1c4>
 8002414:	2b00      	cmp	r3, #0
 8002416:	d002      	beq.n	800241e <UART_SetConfig+0x1a2>
 8002418:	2b02      	cmp	r3, #2
 800241a:	d005      	beq.n	8002428 <UART_SetConfig+0x1ac>
 800241c:	e010      	b.n	8002440 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800241e:	f7ff faa5 	bl	800196c <HAL_RCC_GetPCLK1Freq>
 8002422:	0003      	movs	r3, r0
 8002424:	61bb      	str	r3, [r7, #24]
        break;
 8002426:	e012      	b.n	800244e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002428:	4b57      	ldr	r3, [pc, #348]	; (8002588 <UART_SetConfig+0x30c>)
 800242a:	61bb      	str	r3, [r7, #24]
        break;
 800242c:	e00f      	b.n	800244e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800242e:	f7ff fa21 	bl	8001874 <HAL_RCC_GetSysClockFreq>
 8002432:	0003      	movs	r3, r0
 8002434:	61bb      	str	r3, [r7, #24]
        break;
 8002436:	e00a      	b.n	800244e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	61bb      	str	r3, [r7, #24]
        break;
 800243e:	e006      	b.n	800244e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002444:	231e      	movs	r3, #30
 8002446:	18fb      	adds	r3, r7, r3
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
        break;
 800244c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d100      	bne.n	8002456 <UART_SetConfig+0x1da>
 8002454:	e07a      	b.n	800254c <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	005a      	lsls	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	085b      	lsrs	r3, r3, #1
 8002460:	18d2      	adds	r2, r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	0019      	movs	r1, r3
 8002468:	0010      	movs	r0, r2
 800246a:	f7fd fe5f 	bl	800012c <__udivsi3>
 800246e:	0003      	movs	r3, r0
 8002470:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	2b0f      	cmp	r3, #15
 8002476:	d91c      	bls.n	80024b2 <UART_SetConfig+0x236>
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	025b      	lsls	r3, r3, #9
 800247e:	429a      	cmp	r2, r3
 8002480:	d217      	bcs.n	80024b2 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	b29a      	uxth	r2, r3
 8002486:	200e      	movs	r0, #14
 8002488:	183b      	adds	r3, r7, r0
 800248a:	210f      	movs	r1, #15
 800248c:	438a      	bics	r2, r1
 800248e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	085b      	lsrs	r3, r3, #1
 8002494:	b29b      	uxth	r3, r3
 8002496:	2207      	movs	r2, #7
 8002498:	4013      	ands	r3, r2
 800249a:	b299      	uxth	r1, r3
 800249c:	183b      	adds	r3, r7, r0
 800249e:	183a      	adds	r2, r7, r0
 80024a0:	8812      	ldrh	r2, [r2, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	183a      	adds	r2, r7, r0
 80024ac:	8812      	ldrh	r2, [r2, #0]
 80024ae:	60da      	str	r2, [r3, #12]
 80024b0:	e04c      	b.n	800254c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80024b2:	231e      	movs	r3, #30
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	e047      	b.n	800254c <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80024bc:	231f      	movs	r3, #31
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d015      	beq.n	80024f2 <UART_SetConfig+0x276>
 80024c6:	dc18      	bgt.n	80024fa <UART_SetConfig+0x27e>
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d00d      	beq.n	80024e8 <UART_SetConfig+0x26c>
 80024cc:	dc15      	bgt.n	80024fa <UART_SetConfig+0x27e>
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <UART_SetConfig+0x25c>
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d005      	beq.n	80024e2 <UART_SetConfig+0x266>
 80024d6:	e010      	b.n	80024fa <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024d8:	f7ff fa48 	bl	800196c <HAL_RCC_GetPCLK1Freq>
 80024dc:	0003      	movs	r3, r0
 80024de:	61bb      	str	r3, [r7, #24]
        break;
 80024e0:	e012      	b.n	8002508 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024e2:	4b29      	ldr	r3, [pc, #164]	; (8002588 <UART_SetConfig+0x30c>)
 80024e4:	61bb      	str	r3, [r7, #24]
        break;
 80024e6:	e00f      	b.n	8002508 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024e8:	f7ff f9c4 	bl	8001874 <HAL_RCC_GetSysClockFreq>
 80024ec:	0003      	movs	r3, r0
 80024ee:	61bb      	str	r3, [r7, #24]
        break;
 80024f0:	e00a      	b.n	8002508 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	021b      	lsls	r3, r3, #8
 80024f6:	61bb      	str	r3, [r7, #24]
        break;
 80024f8:	e006      	b.n	8002508 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80024fe:	231e      	movs	r3, #30
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
        break;
 8002506:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d01e      	beq.n	800254c <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	085a      	lsrs	r2, r3, #1
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	18d2      	adds	r2, r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	0019      	movs	r1, r3
 800251e:	0010      	movs	r0, r2
 8002520:	f7fd fe04 	bl	800012c <__udivsi3>
 8002524:	0003      	movs	r3, r0
 8002526:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	2b0f      	cmp	r3, #15
 800252c:	d90a      	bls.n	8002544 <UART_SetConfig+0x2c8>
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	025b      	lsls	r3, r3, #9
 8002534:	429a      	cmp	r2, r3
 8002536:	d205      	bcs.n	8002544 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	b29a      	uxth	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	e003      	b.n	800254c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8002544:	231e      	movs	r3, #30
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002558:	231e      	movs	r3, #30
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	781b      	ldrb	r3, [r3, #0]
}
 800255e:	0018      	movs	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	b008      	add	sp, #32
 8002564:	bd80      	pop	{r7, pc}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	efff69f3 	.word	0xefff69f3
 800256c:	ffffcfff 	.word	0xffffcfff
 8002570:	fffff4ff 	.word	0xfffff4ff
 8002574:	40013800 	.word	0x40013800
 8002578:	40021000 	.word	0x40021000
 800257c:	40004400 	.word	0x40004400
 8002580:	40004800 	.word	0x40004800
 8002584:	40004c00 	.word	0x40004c00
 8002588:	007a1200 	.word	0x007a1200

0800258c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	2208      	movs	r2, #8
 800259a:	4013      	ands	r3, r2
 800259c:	d00b      	beq.n	80025b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4a4a      	ldr	r2, [pc, #296]	; (80026d0 <UART_AdvFeatureConfig+0x144>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	0019      	movs	r1, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	2201      	movs	r2, #1
 80025bc:	4013      	ands	r3, r2
 80025be:	d00b      	beq.n	80025d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4a43      	ldr	r2, [pc, #268]	; (80026d4 <UART_AdvFeatureConfig+0x148>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	0019      	movs	r1, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	2202      	movs	r2, #2
 80025de:	4013      	ands	r3, r2
 80025e0:	d00b      	beq.n	80025fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4a3b      	ldr	r2, [pc, #236]	; (80026d8 <UART_AdvFeatureConfig+0x14c>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	0019      	movs	r1, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	2204      	movs	r2, #4
 8002600:	4013      	ands	r3, r2
 8002602:	d00b      	beq.n	800261c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4a34      	ldr	r2, [pc, #208]	; (80026dc <UART_AdvFeatureConfig+0x150>)
 800260c:	4013      	ands	r3, r2
 800260e:	0019      	movs	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	2210      	movs	r2, #16
 8002622:	4013      	ands	r3, r2
 8002624:	d00b      	beq.n	800263e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	4a2c      	ldr	r2, [pc, #176]	; (80026e0 <UART_AdvFeatureConfig+0x154>)
 800262e:	4013      	ands	r3, r2
 8002630:	0019      	movs	r1, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	2220      	movs	r2, #32
 8002644:	4013      	ands	r3, r2
 8002646:	d00b      	beq.n	8002660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	4a25      	ldr	r2, [pc, #148]	; (80026e4 <UART_AdvFeatureConfig+0x158>)
 8002650:	4013      	ands	r3, r2
 8002652:	0019      	movs	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	2240      	movs	r2, #64	; 0x40
 8002666:	4013      	ands	r3, r2
 8002668:	d01d      	beq.n	80026a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4a1d      	ldr	r2, [pc, #116]	; (80026e8 <UART_AdvFeatureConfig+0x15c>)
 8002672:	4013      	ands	r3, r2
 8002674:	0019      	movs	r1, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002686:	2380      	movs	r3, #128	; 0x80
 8002688:	035b      	lsls	r3, r3, #13
 800268a:	429a      	cmp	r2, r3
 800268c:	d10b      	bne.n	80026a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a15      	ldr	r2, [pc, #84]	; (80026ec <UART_AdvFeatureConfig+0x160>)
 8002696:	4013      	ands	r3, r2
 8002698:	0019      	movs	r1, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	2280      	movs	r2, #128	; 0x80
 80026ac:	4013      	ands	r3, r2
 80026ae:	d00b      	beq.n	80026c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4a0e      	ldr	r2, [pc, #56]	; (80026f0 <UART_AdvFeatureConfig+0x164>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	0019      	movs	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	605a      	str	r2, [r3, #4]
  }
}
 80026c8:	46c0      	nop			; (mov r8, r8)
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b002      	add	sp, #8
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	ffff7fff 	.word	0xffff7fff
 80026d4:	fffdffff 	.word	0xfffdffff
 80026d8:	fffeffff 	.word	0xfffeffff
 80026dc:	fffbffff 	.word	0xfffbffff
 80026e0:	ffffefff 	.word	0xffffefff
 80026e4:	ffffdfff 	.word	0xffffdfff
 80026e8:	ffefffff 	.word	0xffefffff
 80026ec:	ff9fffff 	.word	0xff9fffff
 80026f0:	fff7ffff 	.word	0xfff7ffff

080026f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b092      	sub	sp, #72	; 0x48
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2284      	movs	r2, #132	; 0x84
 8002700:	2100      	movs	r1, #0
 8002702:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002704:	f7fe fa08 	bl	8000b18 <HAL_GetTick>
 8002708:	0003      	movs	r3, r0
 800270a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2208      	movs	r2, #8
 8002714:	4013      	ands	r3, r2
 8002716:	2b08      	cmp	r3, #8
 8002718:	d12c      	bne.n	8002774 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800271a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800271c:	2280      	movs	r2, #128	; 0x80
 800271e:	0391      	lsls	r1, r2, #14
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	4a46      	ldr	r2, [pc, #280]	; (800283c <UART_CheckIdleState+0x148>)
 8002724:	9200      	str	r2, [sp, #0]
 8002726:	2200      	movs	r2, #0
 8002728:	f000 f88c 	bl	8002844 <UART_WaitOnFlagUntilTimeout>
 800272c:	1e03      	subs	r3, r0, #0
 800272e:	d021      	beq.n	8002774 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002730:	f3ef 8310 	mrs	r3, PRIMASK
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002738:	63bb      	str	r3, [r7, #56]	; 0x38
 800273a:	2301      	movs	r3, #1
 800273c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800273e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002740:	f383 8810 	msr	PRIMASK, r3
}
 8002744:	46c0      	nop			; (mov r8, r8)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2180      	movs	r1, #128	; 0x80
 8002752:	438a      	bics	r2, r1
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002758:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800275a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275c:	f383 8810 	msr	PRIMASK, r3
}
 8002760:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2220      	movs	r2, #32
 8002766:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2278      	movs	r2, #120	; 0x78
 800276c:	2100      	movs	r1, #0
 800276e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e05f      	b.n	8002834 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2204      	movs	r2, #4
 800277c:	4013      	ands	r3, r2
 800277e:	2b04      	cmp	r3, #4
 8002780:	d146      	bne.n	8002810 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	03d1      	lsls	r1, r2, #15
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	4a2c      	ldr	r2, [pc, #176]	; (800283c <UART_CheckIdleState+0x148>)
 800278c:	9200      	str	r2, [sp, #0]
 800278e:	2200      	movs	r2, #0
 8002790:	f000 f858 	bl	8002844 <UART_WaitOnFlagUntilTimeout>
 8002794:	1e03      	subs	r3, r0, #0
 8002796:	d03b      	beq.n	8002810 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002798:	f3ef 8310 	mrs	r3, PRIMASK
 800279c:	60fb      	str	r3, [r7, #12]
  return(result);
 800279e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027a0:	637b      	str	r3, [r7, #52]	; 0x34
 80027a2:	2301      	movs	r3, #1
 80027a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f383 8810 	msr	PRIMASK, r3
}
 80027ac:	46c0      	nop			; (mov r8, r8)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4921      	ldr	r1, [pc, #132]	; (8002840 <UART_CheckIdleState+0x14c>)
 80027ba:	400a      	ands	r2, r1
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f383 8810 	msr	PRIMASK, r3
}
 80027c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ca:	f3ef 8310 	mrs	r3, PRIMASK
 80027ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80027d0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d2:	633b      	str	r3, [r7, #48]	; 0x30
 80027d4:	2301      	movs	r3, #1
 80027d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f383 8810 	msr	PRIMASK, r3
}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2101      	movs	r1, #1
 80027ec:	438a      	bics	r2, r1
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	f383 8810 	msr	PRIMASK, r3
}
 80027fa:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2280      	movs	r2, #128	; 0x80
 8002800:	2120      	movs	r1, #32
 8002802:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2278      	movs	r2, #120	; 0x78
 8002808:	2100      	movs	r1, #0
 800280a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e011      	b.n	8002834 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2280      	movs	r2, #128	; 0x80
 800281a:	2120      	movs	r1, #32
 800281c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2278      	movs	r2, #120	; 0x78
 800282e:	2100      	movs	r1, #0
 8002830:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	0018      	movs	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	b010      	add	sp, #64	; 0x40
 800283a:	bd80      	pop	{r7, pc}
 800283c:	01ffffff 	.word	0x01ffffff
 8002840:	fffffedf 	.word	0xfffffedf

08002844 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	1dfb      	adds	r3, r7, #7
 8002852:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002854:	e051      	b.n	80028fa <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	3301      	adds	r3, #1
 800285a:	d04e      	beq.n	80028fa <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285c:	f7fe f95c 	bl	8000b18 <HAL_GetTick>
 8002860:	0002      	movs	r2, r0
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	429a      	cmp	r2, r3
 800286a:	d302      	bcc.n	8002872 <UART_WaitOnFlagUntilTimeout+0x2e>
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e051      	b.n	800291a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2204      	movs	r2, #4
 800287e:	4013      	ands	r3, r2
 8002880:	d03b      	beq.n	80028fa <UART_WaitOnFlagUntilTimeout+0xb6>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b80      	cmp	r3, #128	; 0x80
 8002886:	d038      	beq.n	80028fa <UART_WaitOnFlagUntilTimeout+0xb6>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b40      	cmp	r3, #64	; 0x40
 800288c:	d035      	beq.n	80028fa <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	2208      	movs	r2, #8
 8002896:	4013      	ands	r3, r2
 8002898:	2b08      	cmp	r3, #8
 800289a:	d111      	bne.n	80028c0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2208      	movs	r2, #8
 80028a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	0018      	movs	r0, r3
 80028a8:	f000 f83c 	bl	8002924 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2284      	movs	r2, #132	; 0x84
 80028b0:	2108      	movs	r1, #8
 80028b2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2278      	movs	r2, #120	; 0x78
 80028b8:	2100      	movs	r1, #0
 80028ba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e02c      	b.n	800291a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	69da      	ldr	r2, [r3, #28]
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	401a      	ands	r2, r3
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d112      	bne.n	80028fa <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2280      	movs	r2, #128	; 0x80
 80028da:	0112      	lsls	r2, r2, #4
 80028dc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	0018      	movs	r0, r3
 80028e2:	f000 f81f 	bl	8002924 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2284      	movs	r2, #132	; 0x84
 80028ea:	2120      	movs	r1, #32
 80028ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2278      	movs	r2, #120	; 0x78
 80028f2:	2100      	movs	r1, #0
 80028f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e00f      	b.n	800291a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	4013      	ands	r3, r2
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	425a      	negs	r2, r3
 800290a:	4153      	adcs	r3, r2
 800290c:	b2db      	uxtb	r3, r3
 800290e:	001a      	movs	r2, r3
 8002910:	1dfb      	adds	r3, r7, #7
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d09e      	beq.n	8002856 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	0018      	movs	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	b004      	add	sp, #16
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08e      	sub	sp, #56	; 0x38
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800292c:	f3ef 8310 	mrs	r3, PRIMASK
 8002930:	617b      	str	r3, [r7, #20]
  return(result);
 8002932:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002934:	637b      	str	r3, [r7, #52]	; 0x34
 8002936:	2301      	movs	r3, #1
 8002938:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	f383 8810 	msr	PRIMASK, r3
}
 8002940:	46c0      	nop			; (mov r8, r8)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4926      	ldr	r1, [pc, #152]	; (80029e8 <UART_EndRxTransfer+0xc4>)
 800294e:	400a      	ands	r2, r1
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002954:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f383 8810 	msr	PRIMASK, r3
}
 800295c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800295e:	f3ef 8310 	mrs	r3, PRIMASK
 8002962:	623b      	str	r3, [r7, #32]
  return(result);
 8002964:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002966:	633b      	str	r3, [r7, #48]	; 0x30
 8002968:	2301      	movs	r3, #1
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	f383 8810 	msr	PRIMASK, r3
}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2101      	movs	r1, #1
 8002980:	438a      	bics	r2, r1
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002986:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298a:	f383 8810 	msr	PRIMASK, r3
}
 800298e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002994:	2b01      	cmp	r3, #1
 8002996:	d118      	bne.n	80029ca <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002998:	f3ef 8310 	mrs	r3, PRIMASK
 800299c:	60bb      	str	r3, [r7, #8]
  return(result);
 800299e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029a2:	2301      	movs	r3, #1
 80029a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f383 8810 	msr	PRIMASK, r3
}
 80029ac:	46c0      	nop			; (mov r8, r8)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2110      	movs	r1, #16
 80029ba:	438a      	bics	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	f383 8810 	msr	PRIMASK, r3
}
 80029c8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2280      	movs	r2, #128	; 0x80
 80029ce:	2120      	movs	r1, #32
 80029d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	46bd      	mov	sp, r7
 80029e2:	b00e      	add	sp, #56	; 0x38
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	fffffedf 	.word	0xfffffedf

080029ec <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3308      	adds	r3, #8
 80029f8:	001a      	movs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	4252      	negs	r2, r2
 8002a04:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3308      	adds	r3, #8
 8002a0a:	001a      	movs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3308      	adds	r3, #8
 8002a14:	001a      	movs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a20:	46c0      	nop			; (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b002      	add	sp, #8
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b002      	add	sp, #8
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	3301      	adds	r3, #1
 8002a52:	d103      	bne.n	8002a5c <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	e00c      	b.n	8002a76 <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3308      	adds	r3, #8
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	e002      	b.n	8002a6a <vListInsert+0x2c>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d2f6      	bcs.n	8002a64 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	601a      	str	r2, [r3, #0]
}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	b004      	add	sp, #16
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6892      	ldr	r2, [r2, #8]
 8002ac0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6852      	ldr	r2, [r2, #4]
 8002aca:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d103      	bne.n	8002ade <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	1e5a      	subs	r2, r3, #1
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
}
 8002af2:	0018      	movs	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	b004      	add	sp, #16
 8002af8:	bd80      	pop	{r7, pc}

08002afa <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002afa:	b5b0      	push	{r4, r5, r7, lr}
 8002afc:	b084      	sub	sp, #16
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002b04:	2301      	movs	r3, #1
 8002b06:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <xQueueGenericReset+0x1c>
 8002b12:	b672      	cpsid	i
 8002b14:	e7fe      	b.n	8002b14 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d100      	bne.n	8002b1e <xQueueGenericReset+0x24>
 8002b1c:	e06a      	b.n	8002bf4 <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d066      	beq.n	8002bf4 <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2e:	2400      	movs	r4, #0
 8002b30:	0c15      	lsrs	r5, r2, #16
 8002b32:	0c19      	lsrs	r1, r3, #16
 8002b34:	b2a8      	uxth	r0, r5
 8002b36:	2800      	cmp	r0, #0
 8002b38:	d104      	bne.n	8002b44 <xQueueGenericReset+0x4a>
 8002b3a:	b288      	uxth	r0, r1
 8002b3c:	2800      	cmp	r0, #0
 8002b3e:	d013      	beq.n	8002b68 <xQueueGenericReset+0x6e>
 8002b40:	1c10      	adds	r0, r2, #0
 8002b42:	e004      	b.n	8002b4e <xQueueGenericReset+0x54>
 8002b44:	b289      	uxth	r1, r1
 8002b46:	2900      	cmp	r1, #0
 8002b48:	d10d      	bne.n	8002b66 <xQueueGenericReset+0x6c>
 8002b4a:	1c29      	adds	r1, r5, #0
 8002b4c:	1c18      	adds	r0, r3, #0
 8002b4e:	b292      	uxth	r2, r2
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	435a      	muls	r2, r3
 8002b54:	b283      	uxth	r3, r0
 8002b56:	b289      	uxth	r1, r1
 8002b58:	434b      	muls	r3, r1
 8002b5a:	0c12      	lsrs	r2, r2, #16
 8002b5c:	189b      	adds	r3, r3, r2
 8002b5e:	141b      	asrs	r3, r3, #16
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d000      	beq.n	8002b68 <xQueueGenericReset+0x6e>
 8002b66:	2401      	movs	r4, #1
 8002b68:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 8002b6a:	d143      	bne.n	8002bf4 <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 8002b6c:	f002 f858 	bl	8004c20 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	434b      	muls	r3, r1
 8002b7e:	18d2      	adds	r2, r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2200      	movs	r2, #0
 8002b88:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9a:	1e59      	subs	r1, r3, #1
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	434b      	muls	r3, r1
 8002ba2:	18d2      	adds	r2, r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2244      	movs	r2, #68	; 0x44
 8002bac:	21ff      	movs	r1, #255	; 0xff
 8002bae:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2245      	movs	r2, #69	; 0x45
 8002bb4:	21ff      	movs	r1, #255	; 0xff
 8002bb6:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10d      	bne.n	8002bda <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d013      	beq.n	8002bee <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	3310      	adds	r3, #16
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f001 f8f4 	bl	8003db8 <xTaskRemoveFromEventList>
 8002bd0:	1e03      	subs	r3, r0, #0
 8002bd2:	d00c      	beq.n	8002bee <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002bd4:	f002 f814 	bl	8004c00 <vPortYield>
 8002bd8:	e009      	b.n	8002bee <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	3310      	adds	r3, #16
 8002bde:	0018      	movs	r0, r3
 8002be0:	f7ff ff04 	bl	80029ec <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	3324      	adds	r3, #36	; 0x24
 8002be8:	0018      	movs	r0, r3
 8002bea:	f7ff feff 	bl	80029ec <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002bee:	f002 f829 	bl	8004c44 <vPortExitCritical>
 8002bf2:	e001      	b.n	8002bf8 <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <xQueueGenericReset+0x108>
 8002bfe:	b672      	cpsid	i
 8002c00:	e7fe      	b.n	8002c00 <xQueueGenericReset+0x106>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002c02:	68fb      	ldr	r3, [r7, #12]
}
 8002c04:	0018      	movs	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b004      	add	sp, #16
 8002c0a:	bdb0      	pop	{r4, r5, r7, pc}

08002c0c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c0e:	b08b      	sub	sp, #44	; 0x2c
 8002c10:	af02      	add	r7, sp, #8
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	1dfb      	adds	r3, r7, #7
 8002c18:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d047      	beq.n	8002cb4 <xQueueGenericCreate+0xa8>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002c24:	2000      	movs	r0, #0
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	0c19      	lsrs	r1, r3, #16
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	1c1e      	adds	r6, r3, #0
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	0c1b      	lsrs	r3, r3, #16
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	1c15      	adds	r5, r2, #0
 8002c36:	b28a      	uxth	r2, r1
 8002c38:	2a00      	cmp	r2, #0
 8002c3a:	d105      	bne.n	8002c48 <xQueueGenericCreate+0x3c>
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	2a00      	cmp	r2, #0
 8002c40:	d013      	beq.n	8002c6a <xQueueGenericCreate+0x5e>
 8002c42:	1c19      	adds	r1, r3, #0
 8002c44:	1c34      	adds	r4, r6, #0
 8002c46:	e003      	b.n	8002c50 <xQueueGenericCreate+0x44>
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10c      	bne.n	8002c68 <xQueueGenericCreate+0x5c>
 8002c4e:	1c2c      	adds	r4, r5, #0
 8002c50:	b2b3      	uxth	r3, r6
 8002c52:	b2aa      	uxth	r2, r5
 8002c54:	435a      	muls	r2, r3
 8002c56:	b2a3      	uxth	r3, r4
 8002c58:	b289      	uxth	r1, r1
 8002c5a:	434b      	muls	r3, r1
 8002c5c:	0c12      	lsrs	r2, r2, #16
 8002c5e:	189b      	adds	r3, r3, r2
 8002c60:	141b      	asrs	r3, r3, #16
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d000      	beq.n	8002c6a <xQueueGenericCreate+0x5e>
 8002c68:	2001      	movs	r0, #1
 8002c6a:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002c6c:	d122      	bne.n	8002cb4 <xQueueGenericCreate+0xa8>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002c74:	3351      	adds	r3, #81	; 0x51
 8002c76:	d81d      	bhi.n	8002cb4 <xQueueGenericCreate+0xa8>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	4353      	muls	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	3350      	adds	r3, #80	; 0x50
 8002c84:	0018      	movs	r0, r3
 8002c86:	f002 f863 	bl	8004d50 <pvPortMalloc>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d014      	beq.n	8002cbe <xQueueGenericCreate+0xb2>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	3350      	adds	r3, #80	; 0x50
 8002c9c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c9e:	1dfb      	adds	r3, r7, #7
 8002ca0:	781c      	ldrb	r4, [r3, #0]
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	0023      	movs	r3, r4
 8002cae:	f000 f80b 	bl	8002cc8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002cb2:	e004      	b.n	8002cbe <xQueueGenericCreate+0xb2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <xQueueGenericCreate+0xb2>
 8002cba:	b672      	cpsid	i
 8002cbc:	e7fe      	b.n	8002cbc <xQueueGenericCreate+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002cbe:	69fb      	ldr	r3, [r7, #28]
    }
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b009      	add	sp, #36	; 0x24
 8002cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cc8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	001a      	movs	r2, r3
 8002cd6:	1cfb      	adds	r3, r7, #3
 8002cd8:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d103      	bne.n	8002ce8 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	e002      	b.n	8002cee <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f7ff fefb 	bl	8002afa <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	1cfa      	adds	r2, r7, #3
 8002d08:	214c      	movs	r1, #76	; 0x4c
 8002d0a:	7812      	ldrb	r2, [r2, #0]
 8002d0c:	545a      	strb	r2, [r3, r1]
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b004      	add	sp, #16
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b08a      	sub	sp, #40	; 0x28
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d24:	2300      	movs	r3, #0
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <xQueueGenericSend+0x20>
 8002d32:	b672      	cpsid	i
 8002d34:	e7fe      	b.n	8002d34 <xQueueGenericSend+0x1e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d103      	bne.n	8002d44 <xQueueGenericSend+0x2e>
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <xQueueGenericSend+0x32>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <xQueueGenericSend+0x34>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <xQueueGenericSend+0x3c>
 8002d4e:	b672      	cpsid	i
 8002d50:	e7fe      	b.n	8002d50 <xQueueGenericSend+0x3a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d103      	bne.n	8002d60 <xQueueGenericSend+0x4a>
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <xQueueGenericSend+0x4e>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <xQueueGenericSend+0x50>
 8002d64:	2300      	movs	r3, #0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <xQueueGenericSend+0x58>
 8002d6a:	b672      	cpsid	i
 8002d6c:	e7fe      	b.n	8002d6c <xQueueGenericSend+0x56>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d6e:	f001 fa0d 	bl	800418c <xTaskGetSchedulerState>
 8002d72:	1e03      	subs	r3, r0, #0
 8002d74:	d102      	bne.n	8002d7c <xQueueGenericSend+0x66>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <xQueueGenericSend+0x6a>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <xQueueGenericSend+0x6c>
 8002d80:	2300      	movs	r3, #0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <xQueueGenericSend+0x74>
 8002d86:	b672      	cpsid	i
 8002d88:	e7fe      	b.n	8002d88 <xQueueGenericSend+0x72>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002d8a:	f001 ff49 	bl	8004c20 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d302      	bcc.n	8002da0 <xQueueGenericSend+0x8a>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d11e      	bne.n	8002dde <xQueueGenericSend+0xc8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	68b9      	ldr	r1, [r7, #8]
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	0018      	movs	r0, r3
 8002da8:	f000 fa19 	bl	80031de <prvCopyDataToQueue>
 8002dac:	0003      	movs	r3, r0
 8002dae:	61fb      	str	r3, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d009      	beq.n	8002dcc <xQueueGenericSend+0xb6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	3324      	adds	r3, #36	; 0x24
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f000 fffb 	bl	8003db8 <xTaskRemoveFromEventList>
 8002dc2:	1e03      	subs	r3, r0, #0
 8002dc4:	d007      	beq.n	8002dd6 <xQueueGenericSend+0xc0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002dc6:	f001 ff1b 	bl	8004c00 <vPortYield>
 8002dca:	e004      	b.n	8002dd6 <xQueueGenericSend+0xc0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <xQueueGenericSend+0xc0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8002dd2:	f001 ff15 	bl	8004c00 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002dd6:	f001 ff35 	bl	8004c44 <vPortExitCritical>
                return pdPASS;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e05b      	b.n	8002e96 <xQueueGenericSend+0x180>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d103      	bne.n	8002dec <xQueueGenericSend+0xd6>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002de4:	f001 ff2e 	bl	8004c44 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	e054      	b.n	8002e96 <xQueueGenericSend+0x180>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <xQueueGenericSend+0xea>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002df2:	2314      	movs	r3, #20
 8002df4:	18fb      	adds	r3, r7, r3
 8002df6:	0018      	movs	r0, r3
 8002df8:	f001 f8a8 	bl	8003f4c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002e00:	f001 ff20 	bl	8004c44 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002e04:	f000 fd1c 	bl	8003840 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e08:	f001 ff0a 	bl	8004c20 <vPortEnterCritical>
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	2244      	movs	r2, #68	; 0x44
 8002e10:	5c9b      	ldrb	r3, [r3, r2]
 8002e12:	b25b      	sxtb	r3, r3
 8002e14:	3301      	adds	r3, #1
 8002e16:	d103      	bne.n	8002e20 <xQueueGenericSend+0x10a>
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	2244      	movs	r2, #68	; 0x44
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	5499      	strb	r1, [r3, r2]
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	2245      	movs	r2, #69	; 0x45
 8002e24:	5c9b      	ldrb	r3, [r3, r2]
 8002e26:	b25b      	sxtb	r3, r3
 8002e28:	3301      	adds	r3, #1
 8002e2a:	d103      	bne.n	8002e34 <xQueueGenericSend+0x11e>
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	2245      	movs	r2, #69	; 0x45
 8002e30:	2100      	movs	r1, #0
 8002e32:	5499      	strb	r1, [r3, r2]
 8002e34:	f001 ff06 	bl	8004c44 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e38:	1d3a      	adds	r2, r7, #4
 8002e3a:	2314      	movs	r3, #20
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	0011      	movs	r1, r2
 8002e40:	0018      	movs	r0, r3
 8002e42:	f001 f897 	bl	8003f74 <xTaskCheckForTimeOut>
 8002e46:	1e03      	subs	r3, r0, #0
 8002e48:	d11e      	bne.n	8002e88 <xQueueGenericSend+0x172>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f000 facb 	bl	80033e8 <prvIsQueueFull>
 8002e52:	1e03      	subs	r3, r0, #0
 8002e54:	d011      	beq.n	8002e7a <xQueueGenericSend+0x164>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	3310      	adds	r3, #16
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	0011      	movs	r1, r2
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f000 ff4e 	bl	8003d00 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	0018      	movs	r0, r3
 8002e68:	f000 fa4a 	bl	8003300 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002e6c:	f000 fcf4 	bl	8003858 <xTaskResumeAll>
 8002e70:	1e03      	subs	r3, r0, #0
 8002e72:	d18a      	bne.n	8002d8a <xQueueGenericSend+0x74>
                {
                    portYIELD_WITHIN_API();
 8002e74:	f001 fec4 	bl	8004c00 <vPortYield>
 8002e78:	e787      	b.n	8002d8a <xQueueGenericSend+0x74>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f000 fa3f 	bl	8003300 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002e82:	f000 fce9 	bl	8003858 <xTaskResumeAll>
 8002e86:	e780      	b.n	8002d8a <xQueueGenericSend+0x74>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f000 fa38 	bl	8003300 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002e90:	f000 fce2 	bl	8003858 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002e94:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002e96:	0018      	movs	r0, r3
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	b00a      	add	sp, #40	; 0x28
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b08a      	sub	sp, #40	; 0x28
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <xQueueReceive+0x1e>
 8002eb8:	b672      	cpsid	i
 8002eba:	e7fe      	b.n	8002eba <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d103      	bne.n	8002eca <xQueueReceive+0x2c>
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <xQueueReceive+0x30>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <xQueueReceive+0x32>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <xQueueReceive+0x3a>
 8002ed4:	b672      	cpsid	i
 8002ed6:	e7fe      	b.n	8002ed6 <xQueueReceive+0x38>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ed8:	f001 f958 	bl	800418c <xTaskGetSchedulerState>
 8002edc:	1e03      	subs	r3, r0, #0
 8002ede:	d102      	bne.n	8002ee6 <xQueueReceive+0x48>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <xQueueReceive+0x4c>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <xQueueReceive+0x4e>
 8002eea:	2300      	movs	r3, #0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <xQueueReceive+0x56>
 8002ef0:	b672      	cpsid	i
 8002ef2:	e7fe      	b.n	8002ef2 <xQueueReceive+0x54>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002ef4:	f001 fe94 	bl	8004c20 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01a      	beq.n	8002f3a <xQueueReceive+0x9c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	0011      	movs	r1, r2
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f000 f9d2 	bl	80032b4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	1e5a      	subs	r2, r3, #1
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <xQueueReceive+0x94>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	3310      	adds	r3, #16
 8002f24:	0018      	movs	r0, r3
 8002f26:	f000 ff47 	bl	8003db8 <xTaskRemoveFromEventList>
 8002f2a:	1e03      	subs	r3, r0, #0
 8002f2c:	d001      	beq.n	8002f32 <xQueueReceive+0x94>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002f2e:	f001 fe67 	bl	8004c00 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002f32:	f001 fe87 	bl	8004c44 <vPortExitCritical>
                return pdPASS;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e062      	b.n	8003000 <xQueueReceive+0x162>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d103      	bne.n	8002f48 <xQueueReceive+0xaa>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002f40:	f001 fe80 	bl	8004c44 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002f44:	2300      	movs	r3, #0
 8002f46:	e05b      	b.n	8003000 <xQueueReceive+0x162>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <xQueueReceive+0xbe>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002f4e:	2314      	movs	r3, #20
 8002f50:	18fb      	adds	r3, r7, r3
 8002f52:	0018      	movs	r0, r3
 8002f54:	f000 fffa 	bl	8003f4c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002f5c:	f001 fe72 	bl	8004c44 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002f60:	f000 fc6e 	bl	8003840 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002f64:	f001 fe5c 	bl	8004c20 <vPortEnterCritical>
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	2244      	movs	r2, #68	; 0x44
 8002f6c:	5c9b      	ldrb	r3, [r3, r2]
 8002f6e:	b25b      	sxtb	r3, r3
 8002f70:	3301      	adds	r3, #1
 8002f72:	d103      	bne.n	8002f7c <xQueueReceive+0xde>
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	2244      	movs	r2, #68	; 0x44
 8002f78:	2100      	movs	r1, #0
 8002f7a:	5499      	strb	r1, [r3, r2]
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	2245      	movs	r2, #69	; 0x45
 8002f80:	5c9b      	ldrb	r3, [r3, r2]
 8002f82:	b25b      	sxtb	r3, r3
 8002f84:	3301      	adds	r3, #1
 8002f86:	d103      	bne.n	8002f90 <xQueueReceive+0xf2>
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	2245      	movs	r2, #69	; 0x45
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	5499      	strb	r1, [r3, r2]
 8002f90:	f001 fe58 	bl	8004c44 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f94:	1d3a      	adds	r2, r7, #4
 8002f96:	2314      	movs	r3, #20
 8002f98:	18fb      	adds	r3, r7, r3
 8002f9a:	0011      	movs	r1, r2
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f000 ffe9 	bl	8003f74 <xTaskCheckForTimeOut>
 8002fa2:	1e03      	subs	r3, r0, #0
 8002fa4:	d11e      	bne.n	8002fe4 <xQueueReceive+0x146>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f000 fa07 	bl	80033bc <prvIsQueueEmpty>
 8002fae:	1e03      	subs	r3, r0, #0
 8002fb0:	d011      	beq.n	8002fd6 <xQueueReceive+0x138>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	3324      	adds	r3, #36	; 0x24
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	0011      	movs	r1, r2
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f000 fea0 	bl	8003d00 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f000 f99c 	bl	8003300 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002fc8:	f000 fc46 	bl	8003858 <xTaskResumeAll>
 8002fcc:	1e03      	subs	r3, r0, #0
 8002fce:	d191      	bne.n	8002ef4 <xQueueReceive+0x56>
                {
                    portYIELD_WITHIN_API();
 8002fd0:	f001 fe16 	bl	8004c00 <vPortYield>
 8002fd4:	e78e      	b.n	8002ef4 <xQueueReceive+0x56>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f000 f991 	bl	8003300 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002fde:	f000 fc3b 	bl	8003858 <xTaskResumeAll>
 8002fe2:	e787      	b.n	8002ef4 <xQueueReceive+0x56>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f000 f98a 	bl	8003300 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002fec:	f000 fc34 	bl	8003858 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f000 f9e2 	bl	80033bc <prvIsQueueEmpty>
 8002ff8:	1e03      	subs	r3, r0, #0
 8002ffa:	d100      	bne.n	8002ffe <xQueueReceive+0x160>
 8002ffc:	e77a      	b.n	8002ef4 <xQueueReceive+0x56>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002ffe:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	b00a      	add	sp, #40	; 0x28
 8003006:	bd80      	pop	{r7, pc}

08003008 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08a      	sub	sp, #40	; 0x28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003012:	2300      	movs	r3, #0
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800301a:	2300      	movs	r3, #0
 800301c:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <xQueueSemaphoreTake+0x20>
 8003024:	b672      	cpsid	i
 8003026:	e7fe      	b.n	8003026 <xQueueSemaphoreTake+0x1e>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <xQueueSemaphoreTake+0x2c>
 8003030:	b672      	cpsid	i
 8003032:	e7fe      	b.n	8003032 <xQueueSemaphoreTake+0x2a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003034:	f001 f8aa 	bl	800418c <xTaskGetSchedulerState>
 8003038:	1e03      	subs	r3, r0, #0
 800303a:	d102      	bne.n	8003042 <xQueueSemaphoreTake+0x3a>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <xQueueSemaphoreTake+0x3e>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <xQueueSemaphoreTake+0x40>
 8003046:	2300      	movs	r3, #0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <xQueueSemaphoreTake+0x48>
 800304c:	b672      	cpsid	i
 800304e:	e7fe      	b.n	800304e <xQueueSemaphoreTake+0x46>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003050:	f001 fde6 	bl	8004c20 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003058:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01d      	beq.n	800309c <xQueueSemaphoreTake+0x94>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	1e5a      	subs	r2, r3, #1
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d104      	bne.n	800307a <xQueueSemaphoreTake+0x72>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003070:	f001 fa50 	bl	8004514 <pvTaskIncrementMutexHeldCount>
 8003074:	0002      	movs	r2, r0
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d008      	beq.n	8003094 <xQueueSemaphoreTake+0x8c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3310      	adds	r3, #16
 8003086:	0018      	movs	r0, r3
 8003088:	f000 fe96 	bl	8003db8 <xTaskRemoveFromEventList>
 800308c:	1e03      	subs	r3, r0, #0
 800308e:	d001      	beq.n	8003094 <xQueueSemaphoreTake+0x8c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003090:	f001 fdb6 	bl	8004c00 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003094:	f001 fdd6 	bl	8004c44 <vPortExitCritical>
                return pdPASS;
 8003098:	2301      	movs	r3, #1
 800309a:	e086      	b.n	80031aa <xQueueSemaphoreTake+0x1a2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d103      	bne.n	80030aa <xQueueSemaphoreTake+0xa2>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80030a2:	f001 fdcf 	bl	8004c44 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80030a6:	2300      	movs	r3, #0
 80030a8:	e07f      	b.n	80031aa <xQueueSemaphoreTake+0x1a2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d106      	bne.n	80030be <xQueueSemaphoreTake+0xb6>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80030b0:	230c      	movs	r3, #12
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	0018      	movs	r0, r3
 80030b6:	f000 ff49 	bl	8003f4c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80030ba:	2301      	movs	r3, #1
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80030be:	f001 fdc1 	bl	8004c44 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80030c2:	f000 fbbd 	bl	8003840 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80030c6:	f001 fdab 	bl	8004c20 <vPortEnterCritical>
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	2244      	movs	r2, #68	; 0x44
 80030ce:	5c9b      	ldrb	r3, [r3, r2]
 80030d0:	b25b      	sxtb	r3, r3
 80030d2:	3301      	adds	r3, #1
 80030d4:	d103      	bne.n	80030de <xQueueSemaphoreTake+0xd6>
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	2244      	movs	r2, #68	; 0x44
 80030da:	2100      	movs	r1, #0
 80030dc:	5499      	strb	r1, [r3, r2]
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	2245      	movs	r2, #69	; 0x45
 80030e2:	5c9b      	ldrb	r3, [r3, r2]
 80030e4:	b25b      	sxtb	r3, r3
 80030e6:	3301      	adds	r3, #1
 80030e8:	d103      	bne.n	80030f2 <xQueueSemaphoreTake+0xea>
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	2245      	movs	r2, #69	; 0x45
 80030ee:	2100      	movs	r1, #0
 80030f0:	5499      	strb	r1, [r3, r2]
 80030f2:	f001 fda7 	bl	8004c44 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030f6:	003a      	movs	r2, r7
 80030f8:	230c      	movs	r3, #12
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	0011      	movs	r1, r2
 80030fe:	0018      	movs	r0, r3
 8003100:	f000 ff38 	bl	8003f74 <xTaskCheckForTimeOut>
 8003104:	1e03      	subs	r3, r0, #0
 8003106:	d12e      	bne.n	8003166 <xQueueSemaphoreTake+0x15e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	0018      	movs	r0, r3
 800310c:	f000 f956 	bl	80033bc <prvIsQueueEmpty>
 8003110:	1e03      	subs	r3, r0, #0
 8003112:	d021      	beq.n	8003158 <xQueueSemaphoreTake+0x150>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10a      	bne.n	8003132 <xQueueSemaphoreTake+0x12a>
                    {
                        taskENTER_CRITICAL();
 800311c:	f001 fd80 	bl	8004c20 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	0018      	movs	r0, r3
 8003126:	f001 f84d 	bl	80041c4 <xTaskPriorityInherit>
 800312a:	0003      	movs	r3, r0
 800312c:	623b      	str	r3, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 800312e:	f001 fd89 	bl	8004c44 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3324      	adds	r3, #36	; 0x24
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	0011      	movs	r1, r2
 800313a:	0018      	movs	r0, r3
 800313c:	f000 fde0 	bl	8003d00 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	0018      	movs	r0, r3
 8003144:	f000 f8dc 	bl	8003300 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003148:	f000 fb86 	bl	8003858 <xTaskResumeAll>
 800314c:	1e03      	subs	r3, r0, #0
 800314e:	d000      	beq.n	8003152 <xQueueSemaphoreTake+0x14a>
 8003150:	e77e      	b.n	8003050 <xQueueSemaphoreTake+0x48>
                {
                    portYIELD_WITHIN_API();
 8003152:	f001 fd55 	bl	8004c00 <vPortYield>
 8003156:	e77b      	b.n	8003050 <xQueueSemaphoreTake+0x48>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	0018      	movs	r0, r3
 800315c:	f000 f8d0 	bl	8003300 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003160:	f000 fb7a 	bl	8003858 <xTaskResumeAll>
 8003164:	e774      	b.n	8003050 <xQueueSemaphoreTake+0x48>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	0018      	movs	r0, r3
 800316a:	f000 f8c9 	bl	8003300 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800316e:	f000 fb73 	bl	8003858 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	0018      	movs	r0, r3
 8003176:	f000 f921 	bl	80033bc <prvIsQueueEmpty>
 800317a:	1e03      	subs	r3, r0, #0
 800317c:	d100      	bne.n	8003180 <xQueueSemaphoreTake+0x178>
 800317e:	e767      	b.n	8003050 <xQueueSemaphoreTake+0x48>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d010      	beq.n	80031a8 <xQueueSemaphoreTake+0x1a0>
                    {
                        taskENTER_CRITICAL();
 8003186:	f001 fd4b 	bl	8004c20 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	0018      	movs	r0, r3
 800318e:	f000 f810 	bl	80031b2 <prvGetDisinheritPriorityAfterTimeout>
 8003192:	0003      	movs	r3, r0
 8003194:	617b      	str	r3, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	0011      	movs	r1, r2
 800319e:	0018      	movs	r0, r3
 80031a0:	f001 f922 	bl	80043e8 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80031a4:	f001 fd4e 	bl	8004c44 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80031a8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80031aa:	0018      	movs	r0, r3
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b00a      	add	sp, #40	; 0x28
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b084      	sub	sp, #16
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d006      	beq.n	80031d0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2205      	movs	r2, #5
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	e001      	b.n	80031d4 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80031d4:	68fb      	ldr	r3, [r7, #12]
    }
 80031d6:	0018      	movs	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	b004      	add	sp, #16
 80031dc:	bd80      	pop	{r7, pc}

080031de <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b086      	sub	sp, #24
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f2:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10e      	bne.n	800321a <prvCopyDataToQueue+0x3c>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d14e      	bne.n	80032a2 <prvCopyDataToQueue+0xc4>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	0018      	movs	r0, r3
 800320a:	f001 f86b 	bl	80042e4 <xTaskPriorityDisinherit>
 800320e:	0003      	movs	r3, r0
 8003210:	617b      	str	r3, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	e043      	b.n	80032a2 <prvCopyDataToQueue+0xc4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d119      	bne.n	8003254 <prvCopyDataToQueue+0x76>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6858      	ldr	r0, [r3, #4]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	0019      	movs	r1, r3
 800322c:	f001 ff60 	bl	80050f0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003238:	18d2      	adds	r2, r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	429a      	cmp	r2, r3
 8003248:	d32b      	bcc.n	80032a2 <prvCopyDataToQueue+0xc4>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	e026      	b.n	80032a2 <prvCopyDataToQueue+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	68d8      	ldr	r0, [r3, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	0019      	movs	r1, r3
 8003260:	f001 ff46 	bl	80050f0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	425b      	negs	r3, r3
 800326e:	18d2      	adds	r2, r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d207      	bcs.n	8003290 <prvCopyDataToQueue+0xb2>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	425b      	negs	r3, r3
 800328a:	18d2      	adds	r2, r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d105      	bne.n	80032a2 <prvCopyDataToQueue+0xc4>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <prvCopyDataToQueue+0xc4>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	3b01      	subs	r3, #1
 80032a0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80032aa:	697b      	ldr	r3, [r7, #20]
}
 80032ac:	0018      	movs	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b006      	add	sp, #24
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d018      	beq.n	80032f8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	18d2      	adds	r2, r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d303      	bcc.n	80032e8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68d9      	ldr	r1, [r3, #12]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	0018      	movs	r0, r3
 80032f4:	f001 fefc 	bl	80050f0 <memcpy>
    }
}
 80032f8:	46c0      	nop			; (mov r8, r8)
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b002      	add	sp, #8
 80032fe:	bd80      	pop	{r7, pc}

08003300 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003308:	f001 fc8a 	bl	8004c20 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800330c:	230f      	movs	r3, #15
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	2145      	movs	r1, #69	; 0x45
 8003314:	5c52      	ldrb	r2, [r2, r1]
 8003316:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003318:	e013      	b.n	8003342 <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	2b00      	cmp	r3, #0
 8003320:	d016      	beq.n	8003350 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3324      	adds	r3, #36	; 0x24
 8003326:	0018      	movs	r0, r3
 8003328:	f000 fd46 	bl	8003db8 <xTaskRemoveFromEventList>
 800332c:	1e03      	subs	r3, r0, #0
 800332e:	d001      	beq.n	8003334 <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003330:	f000 fe74 	bl	800401c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003334:	210f      	movs	r1, #15
 8003336:	187b      	adds	r3, r7, r1
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	3b01      	subs	r3, #1
 800333c:	b2da      	uxtb	r2, r3
 800333e:	187b      	adds	r3, r7, r1
 8003340:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003342:	230f      	movs	r3, #15
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	b25b      	sxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	dce5      	bgt.n	800331a <prvUnlockQueue+0x1a>
 800334e:	e000      	b.n	8003352 <prvUnlockQueue+0x52>
                    break;
 8003350:	46c0      	nop			; (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2245      	movs	r2, #69	; 0x45
 8003356:	21ff      	movs	r1, #255	; 0xff
 8003358:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 800335a:	f001 fc73 	bl	8004c44 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800335e:	f001 fc5f 	bl	8004c20 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003362:	230e      	movs	r3, #14
 8003364:	18fb      	adds	r3, r7, r3
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	2144      	movs	r1, #68	; 0x44
 800336a:	5c52      	ldrb	r2, [r2, r1]
 800336c:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800336e:	e013      	b.n	8003398 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d016      	beq.n	80033a6 <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3310      	adds	r3, #16
 800337c:	0018      	movs	r0, r3
 800337e:	f000 fd1b 	bl	8003db8 <xTaskRemoveFromEventList>
 8003382:	1e03      	subs	r3, r0, #0
 8003384:	d001      	beq.n	800338a <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8003386:	f000 fe49 	bl	800401c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800338a:	210e      	movs	r1, #14
 800338c:	187b      	adds	r3, r7, r1
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	3b01      	subs	r3, #1
 8003392:	b2da      	uxtb	r2, r3
 8003394:	187b      	adds	r3, r7, r1
 8003396:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003398:	230e      	movs	r3, #14
 800339a:	18fb      	adds	r3, r7, r3
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	b25b      	sxtb	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	dce5      	bgt.n	8003370 <prvUnlockQueue+0x70>
 80033a4:	e000      	b.n	80033a8 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 80033a6:	46c0      	nop			; (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2244      	movs	r2, #68	; 0x44
 80033ac:	21ff      	movs	r1, #255	; 0xff
 80033ae:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 80033b0:	f001 fc48 	bl	8004c44 <vPortExitCritical>
}
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b004      	add	sp, #16
 80033ba:	bd80      	pop	{r7, pc}

080033bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80033c4:	f001 fc2c 	bl	8004c20 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d102      	bne.n	80033d6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80033d0:	2301      	movs	r3, #1
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	e001      	b.n	80033da <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80033da:	f001 fc33 	bl	8004c44 <vPortExitCritical>

    return xReturn;
 80033de:	68fb      	ldr	r3, [r7, #12]
}
 80033e0:	0018      	movs	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b004      	add	sp, #16
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80033f0:	f001 fc16 	bl	8004c20 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d102      	bne.n	8003406 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003400:	2301      	movs	r3, #1
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	e001      	b.n	800340a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800340a:	f001 fc1b 	bl	8004c44 <vPortExitCritical>

    return xReturn;
 800340e:	68fb      	ldr	r3, [r7, #12]
}
 8003410:	0018      	movs	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	b004      	add	sp, #16
 8003416:	bd80      	pop	{r7, pc}

08003418 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <vQueueAddToRegistry+0x18>
 800342c:	b672      	cpsid	i
 800342e:	e7fe      	b.n	800342e <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d025      	beq.n	8003482 <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	e01f      	b.n	800347c <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800343c:	4a17      	ldr	r2, [pc, #92]	; (800349c <vQueueAddToRegistry+0x84>)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	18d3      	adds	r3, r2, r3
 8003444:	3304      	adds	r3, #4
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	429a      	cmp	r2, r3
 800344c:	d105      	bne.n	800345a <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	00da      	lsls	r2, r3, #3
 8003452:	4b12      	ldr	r3, [pc, #72]	; (800349c <vQueueAddToRegistry+0x84>)
 8003454:	18d3      	adds	r3, r2, r3
 8003456:	60bb      	str	r3, [r7, #8]
                    break;
 8003458:	e013      	b.n	8003482 <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10a      	bne.n	8003476 <vQueueAddToRegistry+0x5e>
 8003460:	4b0e      	ldr	r3, [pc, #56]	; (800349c <vQueueAddToRegistry+0x84>)
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	00d2      	lsls	r2, r2, #3
 8003466:	58d3      	ldr	r3, [r2, r3]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d104      	bne.n	8003476 <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	00da      	lsls	r2, r3, #3
 8003470:	4b0a      	ldr	r3, [pc, #40]	; (800349c <vQueueAddToRegistry+0x84>)
 8003472:	18d3      	adds	r3, r2, r3
 8003474:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	3301      	adds	r3, #1
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b07      	cmp	r3, #7
 8003480:	d9dc      	bls.n	800343c <vQueueAddToRegistry+0x24>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003494:	46c0      	nop			; (mov r8, r8)
 8003496:	46bd      	mov	sp, r7
 8003498:	b004      	add	sp, #16
 800349a:	bd80      	pop	{r7, pc}
 800349c:	200001d8 	.word	0x200001d8

080034a0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80034b0:	f001 fbb6 	bl	8004c20 <vPortEnterCritical>
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2244      	movs	r2, #68	; 0x44
 80034b8:	5c9b      	ldrb	r3, [r3, r2]
 80034ba:	b25b      	sxtb	r3, r3
 80034bc:	3301      	adds	r3, #1
 80034be:	d103      	bne.n	80034c8 <vQueueWaitForMessageRestricted+0x28>
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2244      	movs	r2, #68	; 0x44
 80034c4:	2100      	movs	r1, #0
 80034c6:	5499      	strb	r1, [r3, r2]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2245      	movs	r2, #69	; 0x45
 80034cc:	5c9b      	ldrb	r3, [r3, r2]
 80034ce:	b25b      	sxtb	r3, r3
 80034d0:	3301      	adds	r3, #1
 80034d2:	d103      	bne.n	80034dc <vQueueWaitForMessageRestricted+0x3c>
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	2245      	movs	r2, #69	; 0x45
 80034d8:	2100      	movs	r1, #0
 80034da:	5499      	strb	r1, [r3, r2]
 80034dc:	f001 fbb2 	bl	8004c44 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d106      	bne.n	80034f6 <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	3324      	adds	r3, #36	; 0x24
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	0018      	movs	r0, r3
 80034f2:	f000 fc23 	bl	8003d3c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	0018      	movs	r0, r3
 80034fa:	f7ff ff01 	bl	8003300 <prvUnlockQueue>
    }
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	46bd      	mov	sp, r7
 8003502:	b006      	add	sp, #24
 8003504:	bd80      	pop	{r7, pc}

08003506 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003506:	b590      	push	{r4, r7, lr}
 8003508:	b08d      	sub	sp, #52	; 0x34
 800350a:	af04      	add	r7, sp, #16
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	603b      	str	r3, [r7, #0]
 8003512:	1dbb      	adds	r3, r7, #6
 8003514:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003516:	1dbb      	adds	r3, r7, #6
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	0018      	movs	r0, r3
 800351e:	f001 fc17 	bl	8004d50 <pvPortMalloc>
 8003522:	0003      	movs	r3, r0
 8003524:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d016      	beq.n	800355a <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800352c:	2054      	movs	r0, #84	; 0x54
 800352e:	f001 fc0f 	bl	8004d50 <pvPortMalloc>
 8003532:	0003      	movs	r3, r0
 8003534:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d009      	beq.n	8003550 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	2254      	movs	r2, #84	; 0x54
 8003540:	2100      	movs	r1, #0
 8003542:	0018      	movs	r0, r3
 8003544:	f001 fddd 	bl	8005102 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	631a      	str	r2, [r3, #48]	; 0x30
 800354e:	e006      	b.n	800355e <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	0018      	movs	r0, r3
 8003554:	f001 fca4 	bl	8004ea0 <vPortFree>
 8003558:	e001      	b.n	800355e <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d016      	beq.n	8003592 <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003564:	1dbb      	adds	r3, r7, #6
 8003566:	881a      	ldrh	r2, [r3, #0]
 8003568:	683c      	ldr	r4, [r7, #0]
 800356a:	68b9      	ldr	r1, [r7, #8]
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	2300      	movs	r3, #0
 8003570:	9303      	str	r3, [sp, #12]
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	9302      	str	r3, [sp, #8]
 8003576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003578:	9301      	str	r3, [sp, #4]
 800357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	0023      	movs	r3, r4
 8003580:	f000 f810 	bl	80035a4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	0018      	movs	r0, r3
 8003588:	f000 f88c 	bl	80036a4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800358c:	2301      	movs	r3, #1
 800358e:	61bb      	str	r3, [r7, #24]
 8003590:	e002      	b.n	8003598 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003592:	2301      	movs	r3, #1
 8003594:	425b      	negs	r3, r3
 8003596:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003598:	69bb      	ldr	r3, [r7, #24]
    }
 800359a:	0018      	movs	r0, r3
 800359c:	46bd      	mov	sp, r7
 800359e:	b009      	add	sp, #36	; 0x24
 80035a0:	bd90      	pop	{r4, r7, pc}
	...

080035a4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80035b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	001a      	movs	r2, r3
 80035bc:	21a5      	movs	r1, #165	; 0xa5
 80035be:	f001 fda0 	bl	8005102 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4935      	ldr	r1, [pc, #212]	; (80036a0 <prvInitialiseNewTask+0xfc>)
 80035ca:	468c      	mov	ip, r1
 80035cc:	4463      	add	r3, ip
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	18d3      	adds	r3, r2, r3
 80035d2:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	2207      	movs	r2, #7
 80035d8:	4393      	bics	r3, r2
 80035da:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	2207      	movs	r2, #7
 80035e0:	4013      	ands	r3, r2
 80035e2:	d001      	beq.n	80035e8 <prvInitialiseNewTask+0x44>
 80035e4:	b672      	cpsid	i
 80035e6:	e7fe      	b.n	80035e6 <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d01f      	beq.n	800362e <prvInitialiseNewTask+0x8a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	e013      	b.n	800361c <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	18d3      	adds	r3, r2, r3
 80035fa:	7818      	ldrb	r0, [r3, #0]
 80035fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035fe:	2134      	movs	r1, #52	; 0x34
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	18d3      	adds	r3, r2, r3
 8003604:	185b      	adds	r3, r3, r1
 8003606:	1c02      	adds	r2, r0, #0
 8003608:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	18d3      	adds	r3, r2, r3
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d006      	beq.n	8003624 <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	3301      	adds	r3, #1
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2b04      	cmp	r3, #4
 8003620:	d9e8      	bls.n	80035f4 <prvInitialiseNewTask+0x50>
 8003622:	e000      	b.n	8003626 <prvInitialiseNewTask+0x82>
            {
                break;
 8003624:	46c0      	nop			; (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003628:	2238      	movs	r2, #56	; 0x38
 800362a:	2100      	movs	r1, #0
 800362c:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	2b04      	cmp	r3, #4
 8003632:	d901      	bls.n	8003638 <prvInitialiseNewTask+0x94>
 8003634:	b672      	cpsid	i
 8003636:	e7fe      	b.n	8003636 <prvInitialiseNewTask+0x92>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	2b04      	cmp	r3, #4
 800363c:	d901      	bls.n	8003642 <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800363e:	2304      	movs	r3, #4
 8003640:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003644:	6a3a      	ldr	r2, [r7, #32]
 8003646:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364a:	6a3a      	ldr	r2, [r7, #32]
 800364c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	3304      	adds	r3, #4
 8003652:	0018      	movs	r0, r3
 8003654:	f7ff f9e8 	bl	8002a28 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365a:	3318      	adds	r3, #24
 800365c:	0018      	movs	r0, r3
 800365e:	f7ff f9e3 	bl	8002a28 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003666:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	2205      	movs	r2, #5
 800366c:	1ad2      	subs	r2, r2, r3
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003676:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	68f9      	ldr	r1, [r7, #12]
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	0018      	movs	r0, r3
 8003680:	f001 fa36 	bl	8004af0 <pxPortInitialiseStack>
 8003684:	0002      	movs	r2, r0
 8003686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003688:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <prvInitialiseNewTask+0xf2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003694:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	46bd      	mov	sp, r7
 800369a:	b006      	add	sp, #24
 800369c:	bd80      	pop	{r7, pc}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	3fffffff 	.word	0x3fffffff

080036a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80036ac:	f001 fab8 	bl	8004c20 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80036b0:	4b3d      	ldr	r3, [pc, #244]	; (80037a8 <prvAddNewTaskToReadyList+0x104>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	4b3c      	ldr	r3, [pc, #240]	; (80037a8 <prvAddNewTaskToReadyList+0x104>)
 80036b8:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 80036ba:	4b3c      	ldr	r3, [pc, #240]	; (80037ac <prvAddNewTaskToReadyList+0x108>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80036c2:	4b3a      	ldr	r3, [pc, #232]	; (80037ac <prvAddNewTaskToReadyList+0x108>)
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036c8:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <prvAddNewTaskToReadyList+0x104>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d110      	bne.n	80036f2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80036d0:	f000 fcbe 	bl	8004050 <prvInitialiseTaskLists>
 80036d4:	e00d      	b.n	80036f2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80036d6:	4b36      	ldr	r3, [pc, #216]	; (80037b0 <prvAddNewTaskToReadyList+0x10c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036de:	4b33      	ldr	r3, [pc, #204]	; (80037ac <prvAddNewTaskToReadyList+0x108>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d802      	bhi.n	80036f2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80036ec:	4b2f      	ldr	r3, [pc, #188]	; (80037ac <prvAddNewTaskToReadyList+0x108>)
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80036f2:	4b30      	ldr	r3, [pc, #192]	; (80037b4 <prvAddNewTaskToReadyList+0x110>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	4b2e      	ldr	r3, [pc, #184]	; (80037b4 <prvAddNewTaskToReadyList+0x110>)
 80036fa:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80036fc:	4b2d      	ldr	r3, [pc, #180]	; (80037b4 <prvAddNewTaskToReadyList+0x110>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003708:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <prvAddNewTaskToReadyList+0x114>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d903      	bls.n	8003718 <prvAddNewTaskToReadyList+0x74>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003714:	4b28      	ldr	r3, [pc, #160]	; (80037b8 <prvAddNewTaskToReadyList+0x114>)
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800371c:	4927      	ldr	r1, [pc, #156]	; (80037bc <prvAddNewTaskToReadyList+0x118>)
 800371e:	0013      	movs	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	189b      	adds	r3, r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	18cb      	adds	r3, r1, r3
 8003728:	3304      	adds	r3, #4
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	609a      	str	r2, [r3, #8]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	60da      	str	r2, [r3, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	3204      	adds	r2, #4
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	1d1a      	adds	r2, r3, #4
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	609a      	str	r2, [r3, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003752:	0013      	movs	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	189b      	adds	r3, r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4a18      	ldr	r2, [pc, #96]	; (80037bc <prvAddNewTaskToReadyList+0x118>)
 800375c:	189a      	adds	r2, r3, r2
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	615a      	str	r2, [r3, #20]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003766:	4915      	ldr	r1, [pc, #84]	; (80037bc <prvAddNewTaskToReadyList+0x118>)
 8003768:	0013      	movs	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	189b      	adds	r3, r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	585b      	ldr	r3, [r3, r1]
 8003772:	1c58      	adds	r0, r3, #1
 8003774:	4911      	ldr	r1, [pc, #68]	; (80037bc <prvAddNewTaskToReadyList+0x118>)
 8003776:	0013      	movs	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	189b      	adds	r3, r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003780:	f001 fa60 	bl	8004c44 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003784:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <prvAddNewTaskToReadyList+0x10c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800378c:	4b07      	ldr	r3, [pc, #28]	; (80037ac <prvAddNewTaskToReadyList+0x108>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	429a      	cmp	r2, r3
 8003798:	d201      	bcs.n	800379e <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800379a:	f001 fa31 	bl	8004c00 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b004      	add	sp, #16
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	200002f0 	.word	0x200002f0
 80037ac:	20000218 	.word	0x20000218
 80037b0:	200002fc 	.word	0x200002fc
 80037b4:	2000030c 	.word	0x2000030c
 80037b8:	200002f8 	.word	0x200002f8
 80037bc:	2000021c 	.word	0x2000021c

080037c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80037c6:	4917      	ldr	r1, [pc, #92]	; (8003824 <vTaskStartScheduler+0x64>)
 80037c8:	4817      	ldr	r0, [pc, #92]	; (8003828 <vTaskStartScheduler+0x68>)
 80037ca:	4b18      	ldr	r3, [pc, #96]	; (800382c <vTaskStartScheduler+0x6c>)
 80037cc:	9301      	str	r3, [sp, #4]
 80037ce:	2300      	movs	r3, #0
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	2300      	movs	r3, #0
 80037d4:	223c      	movs	r2, #60	; 0x3c
 80037d6:	f7ff fe96 	bl	8003506 <xTaskCreate>
 80037da:	0003      	movs	r3, r0
 80037dc:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d103      	bne.n	80037ec <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 80037e4:	f000 ff16 	bl	8004614 <xTimerCreateTimerTask>
 80037e8:	0003      	movs	r3, r0
 80037ea:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d10d      	bne.n	800380e <vTaskStartScheduler+0x4e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 80037f2:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80037f4:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <vTaskStartScheduler+0x70>)
 80037f6:	2201      	movs	r2, #1
 80037f8:	4252      	negs	r2, r2
 80037fa:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80037fc:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <vTaskStartScheduler+0x74>)
 80037fe:	2201      	movs	r2, #1
 8003800:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003802:	4b0d      	ldr	r3, [pc, #52]	; (8003838 <vTaskStartScheduler+0x78>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003808:	f001 f9d6 	bl	8004bb8 <xPortStartScheduler>
 800380c:	e004      	b.n	8003818 <vTaskStartScheduler+0x58>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3301      	adds	r3, #1
 8003812:	d101      	bne.n	8003818 <vTaskStartScheduler+0x58>
 8003814:	b672      	cpsid	i
 8003816:	e7fe      	b.n	8003816 <vTaskStartScheduler+0x56>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003818:	4b08      	ldr	r3, [pc, #32]	; (800383c <vTaskStartScheduler+0x7c>)
 800381a:	681b      	ldr	r3, [r3, #0]
}
 800381c:	46c0      	nop			; (mov r8, r8)
 800381e:	46bd      	mov	sp, r7
 8003820:	b002      	add	sp, #8
 8003822:	bd80      	pop	{r7, pc}
 8003824:	080066d4 	.word	0x080066d4
 8003828:	08004031 	.word	0x08004031
 800382c:	20000314 	.word	0x20000314
 8003830:	20000310 	.word	0x20000310
 8003834:	200002fc 	.word	0x200002fc
 8003838:	200002f4 	.word	0x200002f4
 800383c:	2000000c 	.word	0x2000000c

08003840 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <vTaskSuspendAll+0x14>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	4b02      	ldr	r3, [pc, #8]	; (8003854 <vTaskSuspendAll+0x14>)
 800384c:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	20000318 	.word	0x20000318

08003858 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003862:	2300      	movs	r3, #0
 8003864:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003866:	4b68      	ldr	r3, [pc, #416]	; (8003a08 <xTaskResumeAll+0x1b0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <xTaskResumeAll+0x1a>
 800386e:	b672      	cpsid	i
 8003870:	e7fe      	b.n	8003870 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003872:	f001 f9d5 	bl	8004c20 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003876:	4b64      	ldr	r3, [pc, #400]	; (8003a08 <xTaskResumeAll+0x1b0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	1e5a      	subs	r2, r3, #1
 800387c:	4b62      	ldr	r3, [pc, #392]	; (8003a08 <xTaskResumeAll+0x1b0>)
 800387e:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003880:	4b61      	ldr	r3, [pc, #388]	; (8003a08 <xTaskResumeAll+0x1b0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d000      	beq.n	800388a <xTaskResumeAll+0x32>
 8003888:	e0b7      	b.n	80039fa <xTaskResumeAll+0x1a2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800388a:	4b60      	ldr	r3, [pc, #384]	; (8003a0c <xTaskResumeAll+0x1b4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d100      	bne.n	8003894 <xTaskResumeAll+0x3c>
 8003892:	e0b2      	b.n	80039fa <xTaskResumeAll+0x1a2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003894:	e089      	b.n	80039aa <xTaskResumeAll+0x152>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003896:	4b5e      	ldr	r3, [pc, #376]	; (8003a10 <xTaskResumeAll+0x1b8>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	60bb      	str	r3, [r7, #8]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	6a12      	ldr	r2, [r2, #32]
 80038ac:	609a      	str	r2, [r3, #8]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	69d2      	ldr	r2, [r2, #28]
 80038b6:	605a      	str	r2, [r3, #4]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	3318      	adds	r3, #24
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d103      	bne.n	80038cc <xTaskResumeAll+0x74>
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	6a1a      	ldr	r2, [r3, #32]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	605a      	str	r2, [r3, #4]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2200      	movs	r2, #0
 80038d0:	629a      	str	r2, [r3, #40]	; 0x28
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	1e5a      	subs	r2, r3, #1
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	607b      	str	r3, [r7, #4]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	68d2      	ldr	r2, [r2, #12]
 80038ea:	609a      	str	r2, [r3, #8]
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	6892      	ldr	r2, [r2, #8]
 80038f4:	605a      	str	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	3304      	adds	r3, #4
 80038fe:	429a      	cmp	r2, r3
 8003900:	d103      	bne.n	800390a <xTaskResumeAll+0xb2>
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2200      	movs	r2, #0
 800390e:	615a      	str	r2, [r3, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	1e5a      	subs	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391e:	4b3d      	ldr	r3, [pc, #244]	; (8003a14 <xTaskResumeAll+0x1bc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d903      	bls.n	800392e <xTaskResumeAll+0xd6>
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392a:	4b3a      	ldr	r3, [pc, #232]	; (8003a14 <xTaskResumeAll+0x1bc>)
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003932:	4939      	ldr	r1, [pc, #228]	; (8003a18 <xTaskResumeAll+0x1c0>)
 8003934:	0013      	movs	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	189b      	adds	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	18cb      	adds	r3, r1, r3
 800393e:	3304      	adds	r3, #4
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	609a      	str	r2, [r3, #8]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	60da      	str	r2, [r3, #12]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	3204      	adds	r2, #4
 800395a:	605a      	str	r2, [r3, #4]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	1d1a      	adds	r2, r3, #4
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003968:	0013      	movs	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	189b      	adds	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4a29      	ldr	r2, [pc, #164]	; (8003a18 <xTaskResumeAll+0x1c0>)
 8003972:	189a      	adds	r2, r3, r2
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	615a      	str	r2, [r3, #20]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397c:	4926      	ldr	r1, [pc, #152]	; (8003a18 <xTaskResumeAll+0x1c0>)
 800397e:	0013      	movs	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	189b      	adds	r3, r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	585b      	ldr	r3, [r3, r1]
 8003988:	1c58      	adds	r0, r3, #1
 800398a:	4923      	ldr	r1, [pc, #140]	; (8003a18 <xTaskResumeAll+0x1c0>)
 800398c:	0013      	movs	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	189b      	adds	r3, r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399a:	4b20      	ldr	r3, [pc, #128]	; (8003a1c <xTaskResumeAll+0x1c4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d302      	bcc.n	80039aa <xTaskResumeAll+0x152>
                    {
                        xYieldPending = pdTRUE;
 80039a4:	4b1e      	ldr	r3, [pc, #120]	; (8003a20 <xTaskResumeAll+0x1c8>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039aa:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <xTaskResumeAll+0x1b8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d000      	beq.n	80039b4 <xTaskResumeAll+0x15c>
 80039b2:	e770      	b.n	8003896 <xTaskResumeAll+0x3e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <xTaskResumeAll+0x166>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80039ba:	f000 fbcd 	bl	8004158 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80039be:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <xTaskResumeAll+0x1cc>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00f      	beq.n	80039ea <xTaskResumeAll+0x192>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80039ca:	f000 f83b 	bl	8003a44 <xTaskIncrementTick>
 80039ce:	1e03      	subs	r3, r0, #0
 80039d0:	d002      	beq.n	80039d8 <xTaskResumeAll+0x180>
                            {
                                xYieldPending = pdTRUE;
 80039d2:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <xTaskResumeAll+0x1c8>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3b01      	subs	r3, #1
 80039dc:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1f2      	bne.n	80039ca <xTaskResumeAll+0x172>

                        xPendedTicks = 0;
 80039e4:	4b0f      	ldr	r3, [pc, #60]	; (8003a24 <xTaskResumeAll+0x1cc>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80039ea:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <xTaskResumeAll+0x1c8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <xTaskResumeAll+0x1a2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80039f2:	2301      	movs	r3, #1
 80039f4:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80039f6:	f001 f903 	bl	8004c00 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80039fa:	f001 f923 	bl	8004c44 <vPortExitCritical>

    return xAlreadyYielded;
 80039fe:	693b      	ldr	r3, [r7, #16]
}
 8003a00:	0018      	movs	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b006      	add	sp, #24
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	20000318 	.word	0x20000318
 8003a0c:	200002f0 	.word	0x200002f0
 8003a10:	200002b0 	.word	0x200002b0
 8003a14:	200002f8 	.word	0x200002f8
 8003a18:	2000021c 	.word	0x2000021c
 8003a1c:	20000218 	.word	0x20000218
 8003a20:	20000304 	.word	0x20000304
 8003a24:	20000300 	.word	0x20000300

08003a28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003a2e:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <xTaskGetTickCount+0x18>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003a34:	687b      	ldr	r3, [r7, #4]
}
 8003a36:	0018      	movs	r0, r3
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b002      	add	sp, #8
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	200002f4 	.word	0x200002f4

08003a44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a4e:	4b78      	ldr	r3, [pc, #480]	; (8003c30 <xTaskIncrementTick+0x1ec>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d000      	beq.n	8003a58 <xTaskIncrementTick+0x14>
 8003a56:	e0e0      	b.n	8003c1a <xTaskIncrementTick+0x1d6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a58:	4b76      	ldr	r3, [pc, #472]	; (8003c34 <xTaskIncrementTick+0x1f0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003a60:	4b74      	ldr	r3, [pc, #464]	; (8003c34 <xTaskIncrementTick+0x1f0>)
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d117      	bne.n	8003a9c <xTaskIncrementTick+0x58>
        {
            taskSWITCH_DELAYED_LISTS();
 8003a6c:	4b72      	ldr	r3, [pc, #456]	; (8003c38 <xTaskIncrementTick+0x1f4>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <xTaskIncrementTick+0x36>
 8003a76:	b672      	cpsid	i
 8003a78:	e7fe      	b.n	8003a78 <xTaskIncrementTick+0x34>
 8003a7a:	4b6f      	ldr	r3, [pc, #444]	; (8003c38 <xTaskIncrementTick+0x1f4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	4b6e      	ldr	r3, [pc, #440]	; (8003c3c <xTaskIncrementTick+0x1f8>)
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	4b6c      	ldr	r3, [pc, #432]	; (8003c38 <xTaskIncrementTick+0x1f4>)
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	4b6c      	ldr	r3, [pc, #432]	; (8003c3c <xTaskIncrementTick+0x1f8>)
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	4b6c      	ldr	r3, [pc, #432]	; (8003c40 <xTaskIncrementTick+0x1fc>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	4b6a      	ldr	r3, [pc, #424]	; (8003c40 <xTaskIncrementTick+0x1fc>)
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	f000 fb5e 	bl	8004158 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003a9c:	4b69      	ldr	r3, [pc, #420]	; (8003c44 <xTaskIncrementTick+0x200>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d200      	bcs.n	8003aa8 <xTaskIncrementTick+0x64>
 8003aa6:	e0a4      	b.n	8003bf2 <xTaskIncrementTick+0x1ae>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aa8:	4b63      	ldr	r3, [pc, #396]	; (8003c38 <xTaskIncrementTick+0x1f4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d104      	bne.n	8003abc <xTaskIncrementTick+0x78>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ab2:	4b64      	ldr	r3, [pc, #400]	; (8003c44 <xTaskIncrementTick+0x200>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	4252      	negs	r2, r2
 8003ab8:	601a      	str	r2, [r3, #0]
                    break;
 8003aba:	e09a      	b.n	8003bf2 <xTaskIncrementTick+0x1ae>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003abc:	4b5e      	ldr	r3, [pc, #376]	; (8003c38 <xTaskIncrementTick+0x1f4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d203      	bcs.n	8003adc <xTaskIncrementTick+0x98>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003ad4:	4b5b      	ldr	r3, [pc, #364]	; (8003c44 <xTaskIncrementTick+0x200>)
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003ada:	e08a      	b.n	8003bf2 <xTaskIncrementTick+0x1ae>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	68d2      	ldr	r2, [r2, #12]
 8003aea:	609a      	str	r2, [r3, #8]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	6892      	ldr	r2, [r2, #8]
 8003af4:	605a      	str	r2, [r3, #4]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	3304      	adds	r3, #4
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d103      	bne.n	8003b0a <xTaskIncrementTick+0xc6>
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	605a      	str	r2, [r3, #4]
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	615a      	str	r2, [r3, #20]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	1e5a      	subs	r2, r3, #1
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d01e      	beq.n	8003b60 <xTaskIncrementTick+0x11c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	607b      	str	r3, [r7, #4]
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	6a12      	ldr	r2, [r2, #32]
 8003b30:	609a      	str	r2, [r3, #8]
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	69d2      	ldr	r2, [r2, #28]
 8003b3a:	605a      	str	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	3318      	adds	r3, #24
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d103      	bne.n	8003b50 <xTaskIncrementTick+0x10c>
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	6a1a      	ldr	r2, [r3, #32]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	605a      	str	r2, [r3, #4]
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	2200      	movs	r2, #0
 8003b54:	629a      	str	r2, [r3, #40]	; 0x28
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	1e5a      	subs	r2, r3, #1
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b64:	4b38      	ldr	r3, [pc, #224]	; (8003c48 <xTaskIncrementTick+0x204>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d903      	bls.n	8003b74 <xTaskIncrementTick+0x130>
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b70:	4b35      	ldr	r3, [pc, #212]	; (8003c48 <xTaskIncrementTick+0x204>)
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b78:	4934      	ldr	r1, [pc, #208]	; (8003c4c <xTaskIncrementTick+0x208>)
 8003b7a:	0013      	movs	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	189b      	adds	r3, r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	18cb      	adds	r3, r1, r3
 8003b84:	3304      	adds	r3, #4
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	603b      	str	r3, [r7, #0]
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	60da      	str	r2, [r3, #12]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	3204      	adds	r2, #4
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1d1a      	adds	r2, r3, #4
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	609a      	str	r2, [r3, #8]
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bae:	0013      	movs	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	189b      	adds	r3, r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4a25      	ldr	r2, [pc, #148]	; (8003c4c <xTaskIncrementTick+0x208>)
 8003bb8:	189a      	adds	r2, r3, r2
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	615a      	str	r2, [r3, #20]
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc2:	4922      	ldr	r1, [pc, #136]	; (8003c4c <xTaskIncrementTick+0x208>)
 8003bc4:	0013      	movs	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	189b      	adds	r3, r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	585b      	ldr	r3, [r3, r1]
 8003bce:	1c58      	adds	r0, r3, #1
 8003bd0:	491e      	ldr	r1, [pc, #120]	; (8003c4c <xTaskIncrementTick+0x208>)
 8003bd2:	0013      	movs	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	189b      	adds	r3, r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be0:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <xTaskIncrementTick+0x20c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d800      	bhi.n	8003bec <xTaskIncrementTick+0x1a8>
 8003bea:	e75d      	b.n	8003aa8 <xTaskIncrementTick+0x64>
                        {
                            xSwitchRequired = pdTRUE;
 8003bec:	2301      	movs	r3, #1
 8003bee:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bf0:	e75a      	b.n	8003aa8 <xTaskIncrementTick+0x64>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003bf2:	4b17      	ldr	r3, [pc, #92]	; (8003c50 <xTaskIncrementTick+0x20c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf8:	4914      	ldr	r1, [pc, #80]	; (8003c4c <xTaskIncrementTick+0x208>)
 8003bfa:	0013      	movs	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	189b      	adds	r3, r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	585b      	ldr	r3, [r3, r1]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d901      	bls.n	8003c0c <xTaskIncrementTick+0x1c8>
            {
                xSwitchRequired = pdTRUE;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003c0c:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <xTaskIncrementTick+0x210>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d007      	beq.n	8003c24 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8003c14:	2301      	movs	r3, #1
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	e004      	b.n	8003c24 <xTaskIncrementTick+0x1e0>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003c1a:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <xTaskIncrementTick+0x214>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	4b0d      	ldr	r3, [pc, #52]	; (8003c58 <xTaskIncrementTick+0x214>)
 8003c22:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003c24:	69fb      	ldr	r3, [r7, #28]
}
 8003c26:	0018      	movs	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b008      	add	sp, #32
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	20000318 	.word	0x20000318
 8003c34:	200002f4 	.word	0x200002f4
 8003c38:	200002a8 	.word	0x200002a8
 8003c3c:	200002ac 	.word	0x200002ac
 8003c40:	20000308 	.word	0x20000308
 8003c44:	20000310 	.word	0x20000310
 8003c48:	200002f8 	.word	0x200002f8
 8003c4c:	2000021c 	.word	0x2000021c
 8003c50:	20000218 	.word	0x20000218
 8003c54:	20000304 	.word	0x20000304
 8003c58:	20000300 	.word	0x20000300

08003c5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c62:	4b22      	ldr	r3, [pc, #136]	; (8003cec <vTaskSwitchContext+0x90>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003c6a:	4b21      	ldr	r3, [pc, #132]	; (8003cf0 <vTaskSwitchContext+0x94>)
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003c70:	e037      	b.n	8003ce2 <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 8003c72:	4b1f      	ldr	r3, [pc, #124]	; (8003cf0 <vTaskSwitchContext+0x94>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c78:	4b1e      	ldr	r3, [pc, #120]	; (8003cf4 <vTaskSwitchContext+0x98>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	607b      	str	r3, [r7, #4]
 8003c7e:	e007      	b.n	8003c90 <vTaskSwitchContext+0x34>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <vTaskSwitchContext+0x2e>
 8003c86:	b672      	cpsid	i
 8003c88:	e7fe      	b.n	8003c88 <vTaskSwitchContext+0x2c>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	607b      	str	r3, [r7, #4]
 8003c90:	4919      	ldr	r1, [pc, #100]	; (8003cf8 <vTaskSwitchContext+0x9c>)
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	0013      	movs	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	189b      	adds	r3, r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	585b      	ldr	r3, [r3, r1]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0ee      	beq.n	8003c80 <vTaskSwitchContext+0x24>
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	0013      	movs	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	189b      	adds	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4a12      	ldr	r2, [pc, #72]	; (8003cf8 <vTaskSwitchContext+0x9c>)
 8003cae:	189b      	adds	r3, r3, r2
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	605a      	str	r2, [r3, #4]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	3308      	adds	r3, #8
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d104      	bne.n	8003cd2 <vTaskSwitchContext+0x76>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <vTaskSwitchContext+0xa0>)
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <vTaskSwitchContext+0x98>)
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	601a      	str	r2, [r3, #0]
}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b002      	add	sp, #8
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	46c0      	nop			; (mov r8, r8)
 8003cec:	20000318 	.word	0x20000318
 8003cf0:	20000304 	.word	0x20000304
 8003cf4:	200002f8 	.word	0x200002f8
 8003cf8:	2000021c 	.word	0x2000021c
 8003cfc:	20000218 	.word	0x20000218

08003d00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <vTaskPlaceOnEventList+0x14>
 8003d10:	b672      	cpsid	i
 8003d12:	e7fe      	b.n	8003d12 <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d14:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <vTaskPlaceOnEventList+0x38>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3318      	adds	r3, #24
 8003d1a:	001a      	movs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	0011      	movs	r1, r2
 8003d20:	0018      	movs	r0, r3
 8003d22:	f7fe fe8c 	bl	8002a3e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2101      	movs	r1, #1
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f000 fc04 	bl	8004538 <prvAddCurrentTaskToDelayedList>
}
 8003d30:	46c0      	nop			; (mov r8, r8)
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b002      	add	sp, #8
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	20000218 	.word	0x20000218

08003d3c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <vTaskPlaceOnEventListRestricted+0x16>
 8003d4e:	b672      	cpsid	i
 8003d50:	e7fe      	b.n	8003d50 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <vTaskPlaceOnEventListRestricted+0x78>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	61da      	str	r2, [r3, #28]
 8003d60:	4b14      	ldr	r3, [pc, #80]	; (8003db4 <vTaskPlaceOnEventListRestricted+0x78>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	6892      	ldr	r2, [r2, #8]
 8003d68:	621a      	str	r2, [r3, #32]
 8003d6a:	4b12      	ldr	r3, [pc, #72]	; (8003db4 <vTaskPlaceOnEventListRestricted+0x78>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	3218      	adds	r2, #24
 8003d74:	605a      	str	r2, [r3, #4]
 8003d76:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <vTaskPlaceOnEventListRestricted+0x78>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3318      	adds	r3, #24
 8003d7c:	001a      	movs	r2, r3
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	609a      	str	r2, [r3, #8]
 8003d82:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <vTaskPlaceOnEventListRestricted+0x78>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	629a      	str	r2, [r3, #40]	; 0x28
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <vTaskPlaceOnEventListRestricted+0x64>
        {
            xTicksToWait = portMAX_DELAY;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	425b      	negs	r3, r3
 8003d9e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	0011      	movs	r1, r2
 8003da6:	0018      	movs	r0, r3
 8003da8:	f000 fbc6 	bl	8004538 <prvAddCurrentTaskToDelayedList>
    }
 8003dac:	46c0      	nop			; (mov r8, r8)
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b006      	add	sp, #24
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	20000218 	.word	0x20000218

08003db8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <xTaskRemoveFromEventList+0x1a>
 8003dce:	b672      	cpsid	i
 8003dd0:	e7fe      	b.n	8003dd0 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	6a12      	ldr	r2, [r2, #32]
 8003de0:	609a      	str	r2, [r3, #8]
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	69d2      	ldr	r2, [r2, #28]
 8003dea:	605a      	str	r2, [r3, #4]
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	3318      	adds	r3, #24
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d103      	bne.n	8003e00 <xTaskRemoveFromEventList+0x48>
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	6a1a      	ldr	r2, [r3, #32]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	605a      	str	r2, [r3, #4]
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2200      	movs	r2, #0
 8003e04:	629a      	str	r2, [r3, #40]	; 0x28
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	1e5a      	subs	r2, r3, #1
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e10:	4b48      	ldr	r3, [pc, #288]	; (8003f34 <xTaskRemoveFromEventList+0x17c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d15d      	bne.n	8003ed4 <xTaskRemoveFromEventList+0x11c>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	68d2      	ldr	r2, [r2, #12]
 8003e26:	609a      	str	r2, [r3, #8]
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	6892      	ldr	r2, [r2, #8]
 8003e30:	605a      	str	r2, [r3, #4]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d103      	bne.n	8003e46 <xTaskRemoveFromEventList+0x8e>
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	605a      	str	r2, [r3, #4]
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	615a      	str	r2, [r3, #20]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	1e5a      	subs	r2, r3, #1
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5a:	4b37      	ldr	r3, [pc, #220]	; (8003f38 <xTaskRemoveFromEventList+0x180>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d903      	bls.n	8003e6a <xTaskRemoveFromEventList+0xb2>
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e66:	4b34      	ldr	r3, [pc, #208]	; (8003f38 <xTaskRemoveFromEventList+0x180>)
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6e:	4933      	ldr	r1, [pc, #204]	; (8003f3c <xTaskRemoveFromEventList+0x184>)
 8003e70:	0013      	movs	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	189b      	adds	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	18cb      	adds	r3, r1, r3
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	60bb      	str	r3, [r7, #8]
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	609a      	str	r2, [r3, #8]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	60da      	str	r2, [r3, #12]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	3204      	adds	r2, #4
 8003e96:	605a      	str	r2, [r3, #4]
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	1d1a      	adds	r2, r3, #4
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	609a      	str	r2, [r3, #8]
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea4:	0013      	movs	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	189b      	adds	r3, r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4a23      	ldr	r2, [pc, #140]	; (8003f3c <xTaskRemoveFromEventList+0x184>)
 8003eae:	189a      	adds	r2, r3, r2
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	615a      	str	r2, [r3, #20]
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb8:	4920      	ldr	r1, [pc, #128]	; (8003f3c <xTaskRemoveFromEventList+0x184>)
 8003eba:	0013      	movs	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	189b      	adds	r3, r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	585b      	ldr	r3, [r3, r1]
 8003ec4:	1c58      	adds	r0, r3, #1
 8003ec6:	491d      	ldr	r1, [pc, #116]	; (8003f3c <xTaskRemoveFromEventList+0x184>)
 8003ec8:	0013      	movs	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	189b      	adds	r3, r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	5058      	str	r0, [r3, r1]
 8003ed2:	e01b      	b.n	8003f0c <xTaskRemoveFromEventList+0x154>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ed4:	4b1a      	ldr	r3, [pc, #104]	; (8003f40 <xTaskRemoveFromEventList+0x188>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	61da      	str	r2, [r3, #28]
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	621a      	str	r2, [r3, #32]
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	3218      	adds	r2, #24
 8003ef0:	605a      	str	r2, [r3, #4]
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	3318      	adds	r3, #24
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	609a      	str	r2, [r3, #8]
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	4a10      	ldr	r2, [pc, #64]	; (8003f40 <xTaskRemoveFromEventList+0x188>)
 8003f00:	629a      	str	r2, [r3, #40]	; 0x28
 8003f02:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <xTaskRemoveFromEventList+0x188>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <xTaskRemoveFromEventList+0x188>)
 8003f0a:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f10:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <xTaskRemoveFromEventList+0x18c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d905      	bls.n	8003f26 <xTaskRemoveFromEventList+0x16e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <xTaskRemoveFromEventList+0x190>)
 8003f20:	2201      	movs	r2, #1
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	e001      	b.n	8003f2a <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        xReturn = pdFALSE;
 8003f26:	2300      	movs	r3, #0
 8003f28:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8003f2a:	69fb      	ldr	r3, [r7, #28]
}
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	b008      	add	sp, #32
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20000318 	.word	0x20000318
 8003f38:	200002f8 	.word	0x200002f8
 8003f3c:	2000021c 	.word	0x2000021c
 8003f40:	200002b0 	.word	0x200002b0
 8003f44:	20000218 	.word	0x20000218
 8003f48:	20000304 	.word	0x20000304

08003f4c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f54:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <vTaskInternalSetTimeOutState+0x20>)
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003f5c:	4b04      	ldr	r3, [pc, #16]	; (8003f70 <vTaskInternalSetTimeOutState+0x24>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	605a      	str	r2, [r3, #4]
}
 8003f64:	46c0      	nop			; (mov r8, r8)
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b002      	add	sp, #8
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000308 	.word	0x20000308
 8003f70:	200002f4 	.word	0x200002f4

08003f74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <xTaskCheckForTimeOut+0x14>
 8003f84:	b672      	cpsid	i
 8003f86:	e7fe      	b.n	8003f86 <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <xTaskCheckForTimeOut+0x1e>
 8003f8e:	b672      	cpsid	i
 8003f90:	e7fe      	b.n	8003f90 <xTaskCheckForTimeOut+0x1c>

    taskENTER_CRITICAL();
 8003f92:	f000 fe45 	bl	8004c20 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003f96:	4b1f      	ldr	r3, [pc, #124]	; (8004014 <xTaskCheckForTimeOut+0xa0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3301      	adds	r3, #1
 8003fac:	d102      	bne.n	8003fb4 <xTaskCheckForTimeOut+0x40>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	e027      	b.n	8004004 <xTaskCheckForTimeOut+0x90>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	4b17      	ldr	r3, [pc, #92]	; (8004018 <xTaskCheckForTimeOut+0xa4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d00a      	beq.n	8003fd6 <xTaskCheckForTimeOut+0x62>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d305      	bcc.n	8003fd6 <xTaskCheckForTimeOut+0x62>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	e016      	b.n	8004004 <xTaskCheckForTimeOut+0x90>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d20c      	bcs.n	8003ffa <xTaskCheckForTimeOut+0x86>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	1ad2      	subs	r2, r2, r3
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f7ff ffac 	bl	8003f4c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	e004      	b.n	8004004 <xTaskCheckForTimeOut+0x90>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004000:	2301      	movs	r3, #1
 8004002:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8004004:	f000 fe1e 	bl	8004c44 <vPortExitCritical>

    return xReturn;
 8004008:	697b      	ldr	r3, [r7, #20]
}
 800400a:	0018      	movs	r0, r3
 800400c:	46bd      	mov	sp, r7
 800400e:	b006      	add	sp, #24
 8004010:	bd80      	pop	{r7, pc}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	200002f4 	.word	0x200002f4
 8004018:	20000308 	.word	0x20000308

0800401c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004020:	4b02      	ldr	r3, [pc, #8]	; (800402c <vTaskMissedYield+0x10>)
 8004022:	2201      	movs	r2, #1
 8004024:	601a      	str	r2, [r3, #0]
}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	20000304 	.word	0x20000304

08004030 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004038:	f000 f84e 	bl	80040d8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800403c:	4b03      	ldr	r3, [pc, #12]	; (800404c <prvIdleTask+0x1c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d9f9      	bls.n	8004038 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004044:	f000 fddc 	bl	8004c00 <vPortYield>
        prvCheckTasksWaitingTermination();
 8004048:	e7f6      	b.n	8004038 <prvIdleTask+0x8>
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	2000021c 	.word	0x2000021c

08004050 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004056:	2300      	movs	r3, #0
 8004058:	607b      	str	r3, [r7, #4]
 800405a:	e00c      	b.n	8004076 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	0013      	movs	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	189b      	adds	r3, r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4a14      	ldr	r2, [pc, #80]	; (80040b8 <prvInitialiseTaskLists+0x68>)
 8004068:	189b      	adds	r3, r3, r2
 800406a:	0018      	movs	r0, r3
 800406c:	f7fe fcbe 	bl	80029ec <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3301      	adds	r3, #1
 8004074:	607b      	str	r3, [r7, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b04      	cmp	r3, #4
 800407a:	d9ef      	bls.n	800405c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800407c:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <prvInitialiseTaskLists+0x6c>)
 800407e:	0018      	movs	r0, r3
 8004080:	f7fe fcb4 	bl	80029ec <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004084:	4b0e      	ldr	r3, [pc, #56]	; (80040c0 <prvInitialiseTaskLists+0x70>)
 8004086:	0018      	movs	r0, r3
 8004088:	f7fe fcb0 	bl	80029ec <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800408c:	4b0d      	ldr	r3, [pc, #52]	; (80040c4 <prvInitialiseTaskLists+0x74>)
 800408e:	0018      	movs	r0, r3
 8004090:	f7fe fcac 	bl	80029ec <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004094:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <prvInitialiseTaskLists+0x78>)
 8004096:	0018      	movs	r0, r3
 8004098:	f7fe fca8 	bl	80029ec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800409c:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <prvInitialiseTaskLists+0x7c>)
 800409e:	0018      	movs	r0, r3
 80040a0:	f7fe fca4 	bl	80029ec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80040a4:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <prvInitialiseTaskLists+0x80>)
 80040a6:	4a05      	ldr	r2, [pc, #20]	; (80040bc <prvInitialiseTaskLists+0x6c>)
 80040a8:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80040aa:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <prvInitialiseTaskLists+0x84>)
 80040ac:	4a04      	ldr	r2, [pc, #16]	; (80040c0 <prvInitialiseTaskLists+0x70>)
 80040ae:	601a      	str	r2, [r3, #0]
}
 80040b0:	46c0      	nop			; (mov r8, r8)
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b002      	add	sp, #8
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	2000021c 	.word	0x2000021c
 80040bc:	20000280 	.word	0x20000280
 80040c0:	20000294 	.word	0x20000294
 80040c4:	200002b0 	.word	0x200002b0
 80040c8:	200002c4 	.word	0x200002c4
 80040cc:	200002dc 	.word	0x200002dc
 80040d0:	200002a8 	.word	0x200002a8
 80040d4:	200002ac 	.word	0x200002ac

080040d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040de:	e01a      	b.n	8004116 <prvCheckTasksWaitingTermination+0x3e>
        {
            taskENTER_CRITICAL();
 80040e0:	f000 fd9e 	bl	8004c20 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040e4:	4b10      	ldr	r3, [pc, #64]	; (8004128 <prvCheckTasksWaitingTermination+0x50>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3304      	adds	r3, #4
 80040f0:	0018      	movs	r0, r3
 80040f2:	f7fe fcda 	bl	8002aaa <uxListRemove>
                --uxCurrentNumberOfTasks;
 80040f6:	4b0d      	ldr	r3, [pc, #52]	; (800412c <prvCheckTasksWaitingTermination+0x54>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	1e5a      	subs	r2, r3, #1
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <prvCheckTasksWaitingTermination+0x54>)
 80040fe:	601a      	str	r2, [r3, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <prvCheckTasksWaitingTermination+0x58>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	1e5a      	subs	r2, r3, #1
 8004106:	4b0a      	ldr	r3, [pc, #40]	; (8004130 <prvCheckTasksWaitingTermination+0x58>)
 8004108:	601a      	str	r2, [r3, #0]
            }
            taskEXIT_CRITICAL();
 800410a:	f000 fd9b 	bl	8004c44 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	0018      	movs	r0, r3
 8004112:	f000 f80f 	bl	8004134 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004116:	4b06      	ldr	r3, [pc, #24]	; (8004130 <prvCheckTasksWaitingTermination+0x58>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1e0      	bne.n	80040e0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	46c0      	nop			; (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	b002      	add	sp, #8
 8004126:	bd80      	pop	{r7, pc}
 8004128:	200002c4 	.word	0x200002c4
 800412c:	200002f0 	.word	0x200002f0
 8004130:	200002d8 	.word	0x200002d8

08004134 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	0018      	movs	r0, r3
 8004142:	f000 fead 	bl	8004ea0 <vPortFree>
            vPortFree( pxTCB );
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	0018      	movs	r0, r3
 800414a:	f000 fea9 	bl	8004ea0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	46bd      	mov	sp, r7
 8004152:	b002      	add	sp, #8
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800415c:	4b09      	ldr	r3, [pc, #36]	; (8004184 <prvResetNextTaskUnblockTime+0x2c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d104      	bne.n	8004170 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004166:	4b08      	ldr	r3, [pc, #32]	; (8004188 <prvResetNextTaskUnblockTime+0x30>)
 8004168:	2201      	movs	r2, #1
 800416a:	4252      	negs	r2, r2
 800416c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800416e:	e005      	b.n	800417c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004170:	4b04      	ldr	r3, [pc, #16]	; (8004184 <prvResetNextTaskUnblockTime+0x2c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	4b03      	ldr	r3, [pc, #12]	; (8004188 <prvResetNextTaskUnblockTime+0x30>)
 800417a:	601a      	str	r2, [r3, #0]
}
 800417c:	46c0      	nop			; (mov r8, r8)
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	200002a8 	.word	0x200002a8
 8004188:	20000310 	.word	0x20000310

0800418c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004192:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <xTaskGetSchedulerState+0x30>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d102      	bne.n	80041a0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800419a:	2301      	movs	r3, #1
 800419c:	607b      	str	r3, [r7, #4]
 800419e:	e008      	b.n	80041b2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041a0:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <xTaskGetSchedulerState+0x34>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d102      	bne.n	80041ae <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80041a8:	2302      	movs	r3, #2
 80041aa:	607b      	str	r3, [r7, #4]
 80041ac:	e001      	b.n	80041b2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80041ae:	2300      	movs	r3, #0
 80041b0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80041b2:	687b      	ldr	r3, [r7, #4]
    }
 80041b4:	0018      	movs	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b002      	add	sp, #8
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	200002fc 	.word	0x200002fc
 80041c0:	20000318 	.word	0x20000318

080041c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d100      	bne.n	80041dc <xTaskPriorityInherit+0x18>
 80041da:	e077      	b.n	80042cc <xTaskPriorityInherit+0x108>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e0:	4b3d      	ldr	r3, [pc, #244]	; (80042d8 <xTaskPriorityInherit+0x114>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d267      	bcs.n	80042ba <xTaskPriorityInherit+0xf6>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	db06      	blt.n	8004200 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041f2:	4b39      	ldr	r3, [pc, #228]	; (80042d8 <xTaskPriorityInherit+0x114>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	2205      	movs	r2, #5
 80041fa:	1ad2      	subs	r2, r2, r3
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	6959      	ldr	r1, [r3, #20]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004208:	0013      	movs	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	189b      	adds	r3, r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4a32      	ldr	r2, [pc, #200]	; (80042dc <xTaskPriorityInherit+0x118>)
 8004212:	189b      	adds	r3, r3, r2
 8004214:	4299      	cmp	r1, r3
 8004216:	d148      	bne.n	80042aa <xTaskPriorityInherit+0xe6>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	3304      	adds	r3, #4
 800421c:	0018      	movs	r0, r3
 800421e:	f7fe fc44 	bl	8002aaa <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004222:	4b2d      	ldr	r3, [pc, #180]	; (80042d8 <xTaskPriorityInherit+0x114>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004230:	4b2b      	ldr	r3, [pc, #172]	; (80042e0 <xTaskPriorityInherit+0x11c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d903      	bls.n	8004240 <xTaskPriorityInherit+0x7c>
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423c:	4b28      	ldr	r3, [pc, #160]	; (80042e0 <xTaskPriorityInherit+0x11c>)
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004244:	4925      	ldr	r1, [pc, #148]	; (80042dc <xTaskPriorityInherit+0x118>)
 8004246:	0013      	movs	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	189b      	adds	r3, r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	18cb      	adds	r3, r1, r3
 8004250:	3304      	adds	r3, #4
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	60da      	str	r2, [r3, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	3204      	adds	r2, #4
 800426c:	605a      	str	r2, [r3, #4]
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1d1a      	adds	r2, r3, #4
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	609a      	str	r2, [r3, #8]
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427a:	0013      	movs	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	189b      	adds	r3, r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4a16      	ldr	r2, [pc, #88]	; (80042dc <xTaskPriorityInherit+0x118>)
 8004284:	189a      	adds	r2, r3, r2
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	615a      	str	r2, [r3, #20]
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428e:	4913      	ldr	r1, [pc, #76]	; (80042dc <xTaskPriorityInherit+0x118>)
 8004290:	0013      	movs	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	189b      	adds	r3, r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	585b      	ldr	r3, [r3, r1]
 800429a:	1c58      	adds	r0, r3, #1
 800429c:	490f      	ldr	r1, [pc, #60]	; (80042dc <xTaskPriorityInherit+0x118>)
 800429e:	0013      	movs	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	189b      	adds	r3, r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	5058      	str	r0, [r3, r1]
 80042a8:	e004      	b.n	80042b4 <xTaskPriorityInherit+0xf0>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80042aa:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <xTaskPriorityInherit+0x114>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80042b4:	2301      	movs	r3, #1
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	e008      	b.n	80042cc <xTaskPriorityInherit+0x108>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042be:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <xTaskPriorityInherit+0x114>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d201      	bcs.n	80042cc <xTaskPriorityInherit+0x108>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80042c8:	2301      	movs	r3, #1
 80042ca:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80042cc:	697b      	ldr	r3, [r7, #20]
    }
 80042ce:	0018      	movs	r0, r3
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b006      	add	sp, #24
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	20000218 	.word	0x20000218
 80042dc:	2000021c 	.word	0x2000021c
 80042e0:	200002f8 	.word	0x200002f8

080042e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d06a      	beq.n	80043d0 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80042fa:	4b38      	ldr	r3, [pc, #224]	; (80043dc <xTaskPriorityDisinherit+0xf8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	429a      	cmp	r2, r3
 8004302:	d001      	beq.n	8004308 <xTaskPriorityDisinherit+0x24>
 8004304:	b672      	cpsid	i
 8004306:	e7fe      	b.n	8004306 <xTaskPriorityDisinherit+0x22>
            configASSERT( pxTCB->uxMutexesHeld );
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <xTaskPriorityDisinherit+0x30>
 8004310:	b672      	cpsid	i
 8004312:	e7fe      	b.n	8004312 <xTaskPriorityDisinherit+0x2e>
            ( pxTCB->uxMutexesHeld )--;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004318:	1e5a      	subs	r2, r3, #1
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004326:	429a      	cmp	r2, r3
 8004328:	d052      	beq.n	80043d0 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800432e:	2b00      	cmp	r3, #0
 8004330:	d14e      	bne.n	80043d0 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	3304      	adds	r3, #4
 8004336:	0018      	movs	r0, r3
 8004338:	f7fe fbb7 	bl	8002aaa <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	2205      	movs	r2, #5
 800434a:	1ad2      	subs	r2, r2, r3
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004354:	4b22      	ldr	r3, [pc, #136]	; (80043e0 <xTaskPriorityDisinherit+0xfc>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d903      	bls.n	8004364 <xTaskPriorityDisinherit+0x80>
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004360:	4b1f      	ldr	r3, [pc, #124]	; (80043e0 <xTaskPriorityDisinherit+0xfc>)
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004368:	491e      	ldr	r1, [pc, #120]	; (80043e4 <xTaskPriorityDisinherit+0x100>)
 800436a:	0013      	movs	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	189b      	adds	r3, r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	18cb      	adds	r3, r1, r3
 8004374:	3304      	adds	r3, #4
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	609a      	str	r2, [r3, #8]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	60da      	str	r2, [r3, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	3204      	adds	r2, #4
 8004390:	605a      	str	r2, [r3, #4]
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1d1a      	adds	r2, r3, #4
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	609a      	str	r2, [r3, #8]
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800439e:	0013      	movs	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	189b      	adds	r3, r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4a0f      	ldr	r2, [pc, #60]	; (80043e4 <xTaskPriorityDisinherit+0x100>)
 80043a8:	189a      	adds	r2, r3, r2
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	615a      	str	r2, [r3, #20]
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b2:	490c      	ldr	r1, [pc, #48]	; (80043e4 <xTaskPriorityDisinherit+0x100>)
 80043b4:	0013      	movs	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	189b      	adds	r3, r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	585b      	ldr	r3, [r3, r1]
 80043be:	1c58      	adds	r0, r3, #1
 80043c0:	4908      	ldr	r1, [pc, #32]	; (80043e4 <xTaskPriorityDisinherit+0x100>)
 80043c2:	0013      	movs	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	189b      	adds	r3, r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	5058      	str	r0, [r3, r1]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80043cc:	2301      	movs	r3, #1
 80043ce:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80043d0:	697b      	ldr	r3, [r7, #20]
    }
 80043d2:	0018      	movs	r0, r3
 80043d4:	46bd      	mov	sp, r7
 80043d6:	b006      	add	sp, #24
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	20000218 	.word	0x20000218
 80043e0:	200002f8 	.word	0x200002f8
 80043e4:	2000021c 	.word	0x2000021c

080043e8 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80043f6:	2301      	movs	r3, #1
 80043f8:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d100      	bne.n	8004402 <vTaskPriorityDisinheritAfterTimeout+0x1a>
 8004400:	e07e      	b.n	8004500 <vTaskPriorityDisinheritAfterTimeout+0x118>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <vTaskPriorityDisinheritAfterTimeout+0x26>
 800440a:	b672      	cpsid	i
 800440c:	e7fe      	b.n	800440c <vTaskPriorityDisinheritAfterTimeout+0x24>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d902      	bls.n	800441e <vTaskPriorityDisinheritAfterTimeout+0x36>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	61fb      	str	r3, [r7, #28]
 800441c:	e002      	b.n	8004424 <vTaskPriorityDisinheritAfterTimeout+0x3c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	429a      	cmp	r2, r3
 800442c:	d068      	beq.n	8004500 <vTaskPriorityDisinheritAfterTimeout+0x118>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	429a      	cmp	r2, r3
 8004436:	d163      	bne.n	8004500 <vTaskPriorityDisinheritAfterTimeout+0x118>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004438:	4b33      	ldr	r3, [pc, #204]	; (8004508 <vTaskPriorityDisinheritAfterTimeout+0x120>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	429a      	cmp	r2, r3
 8004440:	d101      	bne.n	8004446 <vTaskPriorityDisinheritAfterTimeout+0x5e>
 8004442:	b672      	cpsid	i
 8004444:	e7fe      	b.n	8004444 <vTaskPriorityDisinheritAfterTimeout+0x5c>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	69fa      	ldr	r2, [r7, #28]
 8004450:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	2b00      	cmp	r3, #0
 8004458:	db04      	blt.n	8004464 <vTaskPriorityDisinheritAfterTimeout+0x7c>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	2205      	movs	r2, #5
 800445e:	1ad2      	subs	r2, r2, r3
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	6959      	ldr	r1, [r3, #20]
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	0013      	movs	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	189b      	adds	r3, r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4a26      	ldr	r2, [pc, #152]	; (800450c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8004474:	189b      	adds	r3, r3, r2
 8004476:	4299      	cmp	r1, r3
 8004478:	d142      	bne.n	8004500 <vTaskPriorityDisinheritAfterTimeout+0x118>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	3304      	adds	r3, #4
 800447e:	0018      	movs	r0, r3
 8004480:	f7fe fb13 	bl	8002aaa <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004488:	4b21      	ldr	r3, [pc, #132]	; (8004510 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	429a      	cmp	r2, r3
 800448e:	d903      	bls.n	8004498 <vTaskPriorityDisinheritAfterTimeout+0xb0>
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004494:	4b1e      	ldr	r3, [pc, #120]	; (8004510 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449c:	491b      	ldr	r1, [pc, #108]	; (800450c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800449e:	0013      	movs	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	189b      	adds	r3, r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	18cb      	adds	r3, r1, r3
 80044a8:	3304      	adds	r3, #4
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	609a      	str	r2, [r3, #8]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	60da      	str	r2, [r3, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	3204      	adds	r2, #4
 80044c4:	605a      	str	r2, [r3, #4]
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	1d1a      	adds	r2, r3, #4
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	609a      	str	r2, [r3, #8]
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d2:	0013      	movs	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	189b      	adds	r3, r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4a0c      	ldr	r2, [pc, #48]	; (800450c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80044dc:	189a      	adds	r2, r3, r2
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	615a      	str	r2, [r3, #20]
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e6:	4909      	ldr	r1, [pc, #36]	; (800450c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80044e8:	0013      	movs	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	189b      	adds	r3, r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	585b      	ldr	r3, [r3, r1]
 80044f2:	1c58      	adds	r0, r3, #1
 80044f4:	4905      	ldr	r1, [pc, #20]	; (800450c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80044f6:	0013      	movs	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	189b      	adds	r3, r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	5058      	str	r0, [r3, r1]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004500:	46c0      	nop			; (mov r8, r8)
 8004502:	46bd      	mov	sp, r7
 8004504:	b008      	add	sp, #32
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20000218 	.word	0x20000218
 800450c:	2000021c 	.word	0x2000021c
 8004510:	200002f8 	.word	0x200002f8

08004514 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004518:	4b06      	ldr	r3, [pc, #24]	; (8004534 <pvTaskIncrementMutexHeldCount+0x20>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d004      	beq.n	800452a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004520:	4b04      	ldr	r3, [pc, #16]	; (8004534 <pvTaskIncrementMutexHeldCount+0x20>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004526:	3201      	adds	r2, #1
 8004528:	649a      	str	r2, [r3, #72]	; 0x48
        }

        return pxCurrentTCB;
 800452a:	4b02      	ldr	r3, [pc, #8]	; (8004534 <pvTaskIncrementMutexHeldCount+0x20>)
 800452c:	681b      	ldr	r3, [r3, #0]
    }
 800452e:	0018      	movs	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	20000218 	.word	0x20000218

08004538 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004542:	4b2e      	ldr	r3, [pc, #184]	; (80045fc <prvAddCurrentTaskToDelayedList+0xc4>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004548:	4b2d      	ldr	r3, [pc, #180]	; (8004600 <prvAddCurrentTaskToDelayedList+0xc8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3304      	adds	r3, #4
 800454e:	0018      	movs	r0, r3
 8004550:	f7fe faab 	bl	8002aaa <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3301      	adds	r3, #1
 8004558:	d124      	bne.n	80045a4 <prvAddCurrentTaskToDelayedList+0x6c>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d021      	beq.n	80045a4 <prvAddCurrentTaskToDelayedList+0x6c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004560:	4b28      	ldr	r3, [pc, #160]	; (8004604 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	613b      	str	r3, [r7, #16]
 8004566:	4b26      	ldr	r3, [pc, #152]	; (8004600 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	609a      	str	r2, [r3, #8]
 800456e:	4b24      	ldr	r3, [pc, #144]	; (8004600 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	6892      	ldr	r2, [r2, #8]
 8004576:	60da      	str	r2, [r3, #12]
 8004578:	4b21      	ldr	r3, [pc, #132]	; (8004600 <prvAddCurrentTaskToDelayedList+0xc8>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	3204      	adds	r2, #4
 8004582:	605a      	str	r2, [r3, #4]
 8004584:	4b1e      	ldr	r3, [pc, #120]	; (8004600 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	1d1a      	adds	r2, r3, #4
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	609a      	str	r2, [r3, #8]
 800458e:	4b1c      	ldr	r3, [pc, #112]	; (8004600 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a1c      	ldr	r2, [pc, #112]	; (8004604 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004594:	615a      	str	r2, [r3, #20]
 8004596:	4b1b      	ldr	r3, [pc, #108]	; (8004604 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	4b19      	ldr	r3, [pc, #100]	; (8004604 <prvAddCurrentTaskToDelayedList+0xcc>)
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	46c0      	nop			; (mov r8, r8)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80045a2:	e026      	b.n	80045f2 <prvAddCurrentTaskToDelayedList+0xba>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	18d3      	adds	r3, r2, r3
 80045aa:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045ac:	4b14      	ldr	r3, [pc, #80]	; (8004600 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d209      	bcs.n	80045d0 <prvAddCurrentTaskToDelayedList+0x98>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045bc:	4b12      	ldr	r3, [pc, #72]	; (8004608 <prvAddCurrentTaskToDelayedList+0xd0>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3304      	adds	r3, #4
 80045c6:	0019      	movs	r1, r3
 80045c8:	0010      	movs	r0, r2
 80045ca:	f7fe fa38 	bl	8002a3e <vListInsert>
}
 80045ce:	e010      	b.n	80045f2 <prvAddCurrentTaskToDelayedList+0xba>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045d0:	4b0e      	ldr	r3, [pc, #56]	; (800460c <prvAddCurrentTaskToDelayedList+0xd4>)
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3304      	adds	r3, #4
 80045da:	0019      	movs	r1, r3
 80045dc:	0010      	movs	r0, r2
 80045de:	f7fe fa2e 	bl	8002a3e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80045e2:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <prvAddCurrentTaskToDelayedList+0xd8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d202      	bcs.n	80045f2 <prvAddCurrentTaskToDelayedList+0xba>
                    xNextTaskUnblockTime = xTimeToWake;
 80045ec:	4b08      	ldr	r3, [pc, #32]	; (8004610 <prvAddCurrentTaskToDelayedList+0xd8>)
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	601a      	str	r2, [r3, #0]
}
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	46bd      	mov	sp, r7
 80045f6:	b006      	add	sp, #24
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	46c0      	nop			; (mov r8, r8)
 80045fc:	200002f4 	.word	0x200002f4
 8004600:	20000218 	.word	0x20000218
 8004604:	200002dc 	.word	0x200002dc
 8004608:	200002ac 	.word	0x200002ac
 800460c:	200002a8 	.word	0x200002a8
 8004610:	20000310 	.word	0x20000310

08004614 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800461a:	2300      	movs	r3, #0
 800461c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800461e:	f000 fa2d 	bl	8004a7c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004622:	4b0d      	ldr	r3, [pc, #52]	; (8004658 <xTimerCreateTimerTask+0x44>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00b      	beq.n	8004642 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800462a:	490c      	ldr	r1, [pc, #48]	; (800465c <xTimerCreateTimerTask+0x48>)
 800462c:	480c      	ldr	r0, [pc, #48]	; (8004660 <xTimerCreateTimerTask+0x4c>)
 800462e:	4b0d      	ldr	r3, [pc, #52]	; (8004664 <xTimerCreateTimerTask+0x50>)
 8004630:	9301      	str	r3, [sp, #4]
 8004632:	2302      	movs	r3, #2
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	2300      	movs	r3, #0
 8004638:	2250      	movs	r2, #80	; 0x50
 800463a:	f7fe ff64 	bl	8003506 <xTaskCreate>
 800463e:	0003      	movs	r3, r0
 8004640:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <xTimerCreateTimerTask+0x38>
 8004648:	b672      	cpsid	i
 800464a:	e7fe      	b.n	800464a <xTimerCreateTimerTask+0x36>
        return xReturn;
 800464c:	687b      	ldr	r3, [r7, #4]
    }
 800464e:	0018      	movs	r0, r3
 8004650:	46bd      	mov	sp, r7
 8004652:	b002      	add	sp, #8
 8004654:	bd80      	pop	{r7, pc}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	2000034c 	.word	0x2000034c
 800465c:	080066dc 	.word	0x080066dc
 8004660:	08004711 	.word	0x08004711
 8004664:	20000350 	.word	0x20000350

08004668 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004674:	e009      	b.n	800468a <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	18d3      	adds	r3, r2, r3
 800467e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	0010      	movs	r0, r2
 8004688:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	18d1      	adds	r1, r2, r3
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f8d8 	bl	800484c <prvInsertTimerInActiveList>
 800469c:	1e03      	subs	r3, r0, #0
 800469e:	d1ea      	bne.n	8004676 <prvReloadTimer+0xe>
        }
    }
 80046a0:	46c0      	nop			; (mov r8, r8)
 80046a2:	46c0      	nop			; (mov r8, r8)
 80046a4:	46bd      	mov	sp, r7
 80046a6:	b004      	add	sp, #16
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046b6:	4b15      	ldr	r3, [pc, #84]	; (800470c <prvProcessExpiredTimer+0x60>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	3304      	adds	r3, #4
 80046c4:	0018      	movs	r0, r3
 80046c6:	f7fe f9f0 	bl	8002aaa <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2228      	movs	r2, #40	; 0x28
 80046ce:	5c9b      	ldrb	r3, [r3, r2]
 80046d0:	001a      	movs	r2, r3
 80046d2:	2304      	movs	r3, #4
 80046d4:	4013      	ands	r3, r2
 80046d6:	d006      	beq.n	80046e6 <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	0018      	movs	r0, r3
 80046e0:	f7ff ffc2 	bl	8004668 <prvReloadTimer>
 80046e4:	e008      	b.n	80046f8 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2228      	movs	r2, #40	; 0x28
 80046ea:	5c9b      	ldrb	r3, [r3, r2]
 80046ec:	2201      	movs	r2, #1
 80046ee:	4393      	bics	r3, r2
 80046f0:	b2d9      	uxtb	r1, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2228      	movs	r2, #40	; 0x28
 80046f6:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	0010      	movs	r0, r2
 8004700:	4798      	blx	r3
    }
 8004702:	46c0      	nop			; (mov r8, r8)
 8004704:	46bd      	mov	sp, r7
 8004706:	b004      	add	sp, #16
 8004708:	bd80      	pop	{r7, pc}
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	20000344 	.word	0x20000344

08004710 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004718:	2308      	movs	r3, #8
 800471a:	18fb      	adds	r3, r7, r3
 800471c:	0018      	movs	r0, r3
 800471e:	f000 f853 	bl	80047c8 <prvGetNextExpireTime>
 8004722:	0003      	movs	r3, r0
 8004724:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	0011      	movs	r1, r2
 800472c:	0018      	movs	r0, r3
 800472e:	f000 f803 	bl	8004738 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004732:	f000 f8cd 	bl	80048d0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004736:	e7ef      	b.n	8004718 <prvTimerTask+0x8>

08004738 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004742:	f7ff f87d 	bl	8003840 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004746:	2308      	movs	r3, #8
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	0018      	movs	r0, r3
 800474c:	f000 f85e 	bl	800480c <prvSampleTimeNow>
 8004750:	0003      	movs	r3, r0
 8004752:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d12b      	bne.n	80047b2 <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10c      	bne.n	800477a <prvProcessTimerOrBlockTask+0x42>
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	429a      	cmp	r2, r3
 8004766:	d808      	bhi.n	800477a <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8004768:	f7ff f876 	bl	8003858 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	0011      	movs	r1, r2
 8004772:	0018      	movs	r0, r3
 8004774:	f7ff ff9a 	bl	80046ac <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004778:	e01d      	b.n	80047b6 <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004780:	4b0f      	ldr	r3, [pc, #60]	; (80047c0 <prvProcessTimerOrBlockTask+0x88>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <prvProcessTimerOrBlockTask+0x56>
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <prvProcessTimerOrBlockTask+0x58>
 800478e:	2300      	movs	r3, #0
 8004790:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004792:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <prvProcessTimerOrBlockTask+0x8c>)
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	0019      	movs	r1, r3
 80047a0:	f7fe fe7e 	bl	80034a0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80047a4:	f7ff f858 	bl	8003858 <xTaskResumeAll>
 80047a8:	1e03      	subs	r3, r0, #0
 80047aa:	d104      	bne.n	80047b6 <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 80047ac:	f000 fa28 	bl	8004c00 <vPortYield>
    }
 80047b0:	e001      	b.n	80047b6 <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 80047b2:	f7ff f851 	bl	8003858 <xTaskResumeAll>
    }
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b004      	add	sp, #16
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	46c0      	nop			; (mov r8, r8)
 80047c0:	20000348 	.word	0x20000348
 80047c4:	2000034c 	.word	0x2000034c

080047c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047d0:	4b0d      	ldr	r3, [pc, #52]	; (8004808 <prvGetNextExpireTime+0x40>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <prvGetNextExpireTime+0x16>
 80047da:	2201      	movs	r2, #1
 80047dc:	e000      	b.n	80047e0 <prvGetNextExpireTime+0x18>
 80047de:	2200      	movs	r2, #0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d105      	bne.n	80047f8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047ec:	4b06      	ldr	r3, [pc, #24]	; (8004808 <prvGetNextExpireTime+0x40>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	e001      	b.n	80047fc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80047fc:	68fb      	ldr	r3, [r7, #12]
    }
 80047fe:	0018      	movs	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	b004      	add	sp, #16
 8004804:	bd80      	pop	{r7, pc}
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	20000344 	.word	0x20000344

0800480c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004814:	f7ff f908 	bl	8003a28 <xTaskGetTickCount>
 8004818:	0003      	movs	r3, r0
 800481a:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 800481c:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <prvSampleTimeNow+0x3c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	429a      	cmp	r2, r3
 8004824:	d205      	bcs.n	8004832 <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8004826:	f000 f901 	bl	8004a2c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	e002      	b.n	8004838 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004838:	4b03      	ldr	r3, [pc, #12]	; (8004848 <prvSampleTimeNow+0x3c>)
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 800483e:	68fb      	ldr	r3, [r7, #12]
    }
 8004840:	0018      	movs	r0, r3
 8004842:	46bd      	mov	sp, r7
 8004844:	b004      	add	sp, #16
 8004846:	bd80      	pop	{r7, pc}
 8004848:	20000354 	.word	0x20000354

0800484c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
 8004858:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800485a:	2300      	movs	r3, #0
 800485c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	429a      	cmp	r2, r3
 8004870:	d812      	bhi.n	8004898 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	1ad2      	subs	r2, r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	429a      	cmp	r2, r3
 800487e:	d302      	bcc.n	8004886 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004880:	2301      	movs	r3, #1
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	e01b      	b.n	80048be <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004886:	4b10      	ldr	r3, [pc, #64]	; (80048c8 <prvInsertTimerInActiveList+0x7c>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3304      	adds	r3, #4
 800488e:	0019      	movs	r1, r3
 8004890:	0010      	movs	r0, r2
 8004892:	f7fe f8d4 	bl	8002a3e <vListInsert>
 8004896:	e012      	b.n	80048be <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d206      	bcs.n	80048ae <prvInsertTimerInActiveList+0x62>
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d302      	bcc.n	80048ae <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80048a8:	2301      	movs	r3, #1
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	e007      	b.n	80048be <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048ae:	4b07      	ldr	r3, [pc, #28]	; (80048cc <prvInsertTimerInActiveList+0x80>)
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	3304      	adds	r3, #4
 80048b6:	0019      	movs	r1, r3
 80048b8:	0010      	movs	r0, r2
 80048ba:	f7fe f8c0 	bl	8002a3e <vListInsert>
            }
        }

        return xProcessTimerNow;
 80048be:	697b      	ldr	r3, [r7, #20]
    }
 80048c0:	0018      	movs	r0, r3
 80048c2:	46bd      	mov	sp, r7
 80048c4:	b006      	add	sp, #24
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	20000348 	.word	0x20000348
 80048cc:	20000344 	.word	0x20000344

080048d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048d6:	e095      	b.n	8004a04 <prvProcessReceivedCommands+0x134>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80048d8:	1d3b      	adds	r3, r7, #4
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	da00      	bge.n	80048e2 <prvProcessReceivedCommands+0x12>
 80048e0:	e08f      	b.n	8004a02 <prvProcessReceivedCommands+0x132>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80048e2:	1d3b      	adds	r3, r7, #4
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d004      	beq.n	80048fa <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	3304      	adds	r3, #4
 80048f4:	0018      	movs	r0, r3
 80048f6:	f7fe f8d8 	bl	8002aaa <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048fa:	003b      	movs	r3, r7
 80048fc:	0018      	movs	r0, r3
 80048fe:	f7ff ff85 	bl	800480c <prvSampleTimeNow>
 8004902:	0003      	movs	r3, r0
 8004904:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 8004906:	1d3b      	adds	r3, r7, #4
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b09      	cmp	r3, #9
 800490c:	d900      	bls.n	8004910 <prvProcessReceivedCommands+0x40>
 800490e:	e079      	b.n	8004a04 <prvProcessReceivedCommands+0x134>
 8004910:	009a      	lsls	r2, r3, #2
 8004912:	4b44      	ldr	r3, [pc, #272]	; (8004a24 <prvProcessReceivedCommands+0x154>)
 8004914:	18d3      	adds	r3, r2, r3
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2228      	movs	r2, #40	; 0x28
 800491e:	5c9b      	ldrb	r3, [r3, r2]
 8004920:	2201      	movs	r2, #1
 8004922:	4313      	orrs	r3, r2
 8004924:	b2d9      	uxtb	r1, r3
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2228      	movs	r2, #40	; 0x28
 800492a:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800492c:	1d3b      	adds	r3, r7, #4
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	18d1      	adds	r1, r2, r3
 8004936:	1d3b      	adds	r3, r7, #4
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	6978      	ldr	r0, [r7, #20]
 800493e:	f7ff ff85 	bl	800484c <prvInsertTimerInActiveList>
 8004942:	1e03      	subs	r3, r0, #0
 8004944:	d05e      	beq.n	8004a04 <prvProcessReceivedCommands+0x134>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2228      	movs	r2, #40	; 0x28
 800494a:	5c9b      	ldrb	r3, [r3, r2]
 800494c:	001a      	movs	r2, r3
 800494e:	2304      	movs	r3, #4
 8004950:	4013      	ands	r3, r2
 8004952:	d00a      	beq.n	800496a <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004954:	1d3b      	adds	r3, r7, #4
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	18d1      	adds	r1, r2, r3
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	0018      	movs	r0, r3
 8004964:	f7ff fe80 	bl	8004668 <prvReloadTimer>
 8004968:	e008      	b.n	800497c <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2228      	movs	r2, #40	; 0x28
 800496e:	5c9b      	ldrb	r3, [r3, r2]
 8004970:	2201      	movs	r2, #1
 8004972:	4393      	bics	r3, r2
 8004974:	b2d9      	uxtb	r1, r3
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2228      	movs	r2, #40	; 0x28
 800497a:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	0010      	movs	r0, r2
 8004984:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004986:	e03d      	b.n	8004a04 <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2228      	movs	r2, #40	; 0x28
 800498c:	5c9b      	ldrb	r3, [r3, r2]
 800498e:	2201      	movs	r2, #1
 8004990:	4393      	bics	r3, r2
 8004992:	b2d9      	uxtb	r1, r3
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2228      	movs	r2, #40	; 0x28
 8004998:	5499      	strb	r1, [r3, r2]
                        break;
 800499a:	e033      	b.n	8004a04 <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2228      	movs	r2, #40	; 0x28
 80049a0:	5c9b      	ldrb	r3, [r3, r2]
 80049a2:	2201      	movs	r2, #1
 80049a4:	4313      	orrs	r3, r2
 80049a6:	b2d9      	uxtb	r1, r3
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2228      	movs	r2, #40	; 0x28
 80049ac:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80049ae:	1d3b      	adds	r3, r7, #4
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <prvProcessReceivedCommands+0xf2>
 80049be:	b672      	cpsid	i
 80049c0:	e7fe      	b.n	80049c0 <prvProcessReceivedCommands+0xf0>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	18d1      	adds	r1, r2, r3
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	6978      	ldr	r0, [r7, #20]
 80049d0:	f7ff ff3c 	bl	800484c <prvInsertTimerInActiveList>
                        break;
 80049d4:	e016      	b.n	8004a04 <prvProcessReceivedCommands+0x134>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2228      	movs	r2, #40	; 0x28
 80049da:	5c9b      	ldrb	r3, [r3, r2]
 80049dc:	001a      	movs	r2, r3
 80049de:	2302      	movs	r3, #2
 80049e0:	4013      	ands	r3, r2
 80049e2:	d104      	bne.n	80049ee <prvProcessReceivedCommands+0x11e>
                            {
                                vPortFree( pxTimer );
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	0018      	movs	r0, r3
 80049e8:	f000 fa5a 	bl	8004ea0 <vPortFree>
 80049ec:	e00a      	b.n	8004a04 <prvProcessReceivedCommands+0x134>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2228      	movs	r2, #40	; 0x28
 80049f2:	5c9b      	ldrb	r3, [r3, r2]
 80049f4:	2201      	movs	r2, #1
 80049f6:	4393      	bics	r3, r2
 80049f8:	b2d9      	uxtb	r1, r3
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2228      	movs	r2, #40	; 0x28
 80049fe:	5499      	strb	r1, [r3, r2]
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004a00:	e000      	b.n	8004a04 <prvProcessReceivedCommands+0x134>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004a02:	46c0      	nop			; (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a04:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <prvProcessReceivedCommands+0x158>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	1d39      	adds	r1, r7, #4
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	f7fe fa46 	bl	8002e9e <xQueueReceive>
 8004a12:	1e03      	subs	r3, r0, #0
 8004a14:	d000      	beq.n	8004a18 <prvProcessReceivedCommands+0x148>
 8004a16:	e75f      	b.n	80048d8 <prvProcessReceivedCommands+0x8>
        }
    }
 8004a18:	46c0      	nop			; (mov r8, r8)
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	b006      	add	sp, #24
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	46c0      	nop			; (mov r8, r8)
 8004a24:	08006724 	.word	0x08006724
 8004a28:	2000034c 	.word	0x2000034c

08004a2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a32:	e00b      	b.n	8004a4c <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a34:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <prvSwitchTimerLists+0x48>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004a3e:	2301      	movs	r3, #1
 8004a40:	425a      	negs	r2, r3
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	0011      	movs	r1, r2
 8004a46:	0018      	movs	r0, r3
 8004a48:	f7ff fe30 	bl	80046ac <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a4c:	4b09      	ldr	r3, [pc, #36]	; (8004a74 <prvSwitchTimerLists+0x48>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1ee      	bne.n	8004a34 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004a56:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <prvSwitchTimerLists+0x48>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004a5c:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <prvSwitchTimerLists+0x4c>)
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	4b04      	ldr	r3, [pc, #16]	; (8004a74 <prvSwitchTimerLists+0x48>)
 8004a62:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8004a64:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <prvSwitchTimerLists+0x4c>)
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	601a      	str	r2, [r3, #0]
    }
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	b002      	add	sp, #8
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	20000344 	.word	0x20000344
 8004a78:	20000348 	.word	0x20000348

08004a7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004a80:	f000 f8ce 	bl	8004c20 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004a84:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <prvCheckForValidListAndQueue+0x5c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d120      	bne.n	8004ace <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8004a8c:	4b13      	ldr	r3, [pc, #76]	; (8004adc <prvCheckForValidListAndQueue+0x60>)
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f7fd ffac 	bl	80029ec <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004a94:	4b12      	ldr	r3, [pc, #72]	; (8004ae0 <prvCheckForValidListAndQueue+0x64>)
 8004a96:	0018      	movs	r0, r3
 8004a98:	f7fd ffa8 	bl	80029ec <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004a9c:	4b11      	ldr	r3, [pc, #68]	; (8004ae4 <prvCheckForValidListAndQueue+0x68>)
 8004a9e:	4a0f      	ldr	r2, [pc, #60]	; (8004adc <prvCheckForValidListAndQueue+0x60>)
 8004aa0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004aa2:	4b11      	ldr	r3, [pc, #68]	; (8004ae8 <prvCheckForValidListAndQueue+0x6c>)
 8004aa4:	4a0e      	ldr	r2, [pc, #56]	; (8004ae0 <prvCheckForValidListAndQueue+0x64>)
 8004aa6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	210c      	movs	r1, #12
 8004aac:	2005      	movs	r0, #5
 8004aae:	f7fe f8ad 	bl	8002c0c <xQueueGenericCreate>
 8004ab2:	0002      	movs	r2, r0
 8004ab4:	4b08      	ldr	r3, [pc, #32]	; (8004ad8 <prvCheckForValidListAndQueue+0x5c>)
 8004ab6:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004ab8:	4b07      	ldr	r3, [pc, #28]	; (8004ad8 <prvCheckForValidListAndQueue+0x5c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d006      	beq.n	8004ace <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ac0:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <prvCheckForValidListAndQueue+0x5c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a09      	ldr	r2, [pc, #36]	; (8004aec <prvCheckForValidListAndQueue+0x70>)
 8004ac6:	0011      	movs	r1, r2
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f7fe fca5 	bl	8003418 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004ace:	f000 f8b9 	bl	8004c44 <vPortExitCritical>
    }
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	2000034c 	.word	0x2000034c
 8004adc:	2000031c 	.word	0x2000031c
 8004ae0:	20000330 	.word	0x20000330
 8004ae4:	20000344 	.word	0x20000344
 8004ae8:	20000348 	.word	0x20000348
 8004aec:	080066e4 	.word	0x080066e4

08004af0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	3b04      	subs	r3, #4
 8004b00:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2280      	movs	r2, #128	; 0x80
 8004b06:	0452      	lsls	r2, r2, #17
 8004b08:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3b04      	subs	r3, #4
 8004b0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	3b04      	subs	r3, #4
 8004b1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8004b1c:	4a08      	ldr	r2, [pc, #32]	; (8004b40 <pxPortInitialiseStack+0x50>)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3b14      	subs	r3, #20
 8004b26:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	3b20      	subs	r3, #32
 8004b32:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004b34:	68fb      	ldr	r3, [r7, #12]
}
 8004b36:	0018      	movs	r0, r3
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	b004      	add	sp, #16
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	08004b45 	.word	0x08004b45

08004b44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004b4e:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <prvTaskExitError+0x2c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3301      	adds	r3, #1
 8004b54:	d001      	beq.n	8004b5a <prvTaskExitError+0x16>
 8004b56:	b672      	cpsid	i
 8004b58:	e7fe      	b.n	8004b58 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8004b5a:	b672      	cpsid	i

    while( ulDummy == 0 )
 8004b5c:	46c0      	nop			; (mov r8, r8)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0fc      	beq.n	8004b5e <prvTaskExitError+0x1a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004b64:	46c0      	nop			; (mov r8, r8)
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	b002      	add	sp, #8
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	20000010 	.word	0x20000010

08004b74 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8004b78:	46c0      	nop			; (mov r8, r8)
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8004b80:	4a0b      	ldr	r2, [pc, #44]	; (8004bb0 <pxCurrentTCBConst2>)
 8004b82:	6813      	ldr	r3, [r2, #0]
 8004b84:	6818      	ldr	r0, [r3, #0]
 8004b86:	3020      	adds	r0, #32
 8004b88:	f380 8809 	msr	PSP, r0
 8004b8c:	2002      	movs	r0, #2
 8004b8e:	f380 8814 	msr	CONTROL, r0
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004b98:	46ae      	mov	lr, r5
 8004b9a:	bc08      	pop	{r3}
 8004b9c:	bc04      	pop	{r2}
 8004b9e:	b662      	cpsie	i
 8004ba0:	4718      	bx	r3
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	46c0      	nop			; (mov r8, r8)
 8004ba6:	46c0      	nop			; (mov r8, r8)
 8004ba8:	46c0      	nop			; (mov r8, r8)
 8004baa:	46c0      	nop			; (mov r8, r8)
 8004bac:	46c0      	nop			; (mov r8, r8)
 8004bae:	46c0      	nop			; (mov r8, r8)

08004bb0 <pxCurrentTCBConst2>:
 8004bb0:	20000218 	.word	0x20000218
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8004bb4:	46c0      	nop			; (mov r8, r8)
 8004bb6:	46c0      	nop			; (mov r8, r8)

08004bb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004bbc:	4b0e      	ldr	r3, [pc, #56]	; (8004bf8 <xPortStartScheduler+0x40>)
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	4b0d      	ldr	r3, [pc, #52]	; (8004bf8 <xPortStartScheduler+0x40>)
 8004bc2:	21ff      	movs	r1, #255	; 0xff
 8004bc4:	0409      	lsls	r1, r1, #16
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004bca:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <xPortStartScheduler+0x40>)
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	4b0a      	ldr	r3, [pc, #40]	; (8004bf8 <xPortStartScheduler+0x40>)
 8004bd0:	21ff      	movs	r1, #255	; 0xff
 8004bd2:	0609      	lsls	r1, r1, #24
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004bd8:	f000 f898 	bl	8004d0c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004bdc:	4b07      	ldr	r3, [pc, #28]	; (8004bfc <xPortStartScheduler+0x44>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8004be2:	f7ff ffcd 	bl	8004b80 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004be6:	f7ff f839 	bl	8003c5c <vTaskSwitchContext>
    prvTaskExitError();
 8004bea:	f7ff ffab 	bl	8004b44 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	e000ed20 	.word	0xe000ed20
 8004bfc:	20000010 	.word	0x20000010

08004c00 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c04:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <vPortYield+0x1c>)
 8004c06:	2280      	movs	r2, #128	; 0x80
 8004c08:	0552      	lsls	r2, r2, #21
 8004c0a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8004c0c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8004c10:	f3bf 8f6f 	isb	sy
}
 8004c14:	46c0      	nop			; (mov r8, r8)
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	e000ed04 	.word	0xe000ed04

08004c20 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004c24:	b672      	cpsid	i
    uxCriticalNesting++;
 8004c26:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <vPortEnterCritical+0x20>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	4b04      	ldr	r3, [pc, #16]	; (8004c40 <vPortEnterCritical+0x20>)
 8004c2e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8004c30:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8004c34:	f3bf 8f6f 	isb	sy
}
 8004c38:	46c0      	nop			; (mov r8, r8)
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	20000010 	.word	0x20000010

08004c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004c48:	4b09      	ldr	r3, [pc, #36]	; (8004c70 <vPortExitCritical+0x2c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <vPortExitCritical+0x10>
 8004c50:	b672      	cpsid	i
 8004c52:	e7fe      	b.n	8004c52 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004c54:	4b06      	ldr	r3, [pc, #24]	; (8004c70 <vPortExitCritical+0x2c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	1e5a      	subs	r2, r3, #1
 8004c5a:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <vPortExitCritical+0x2c>)
 8004c5c:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8004c5e:	4b04      	ldr	r3, [pc, #16]	; (8004c70 <vPortExitCritical+0x2c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d100      	bne.n	8004c68 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004c66:	b662      	cpsie	i
    }
}
 8004c68:	46c0      	nop			; (mov r8, r8)
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	20000010 	.word	0x20000010

08004c74 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8004c74:	f3ef 8010 	mrs	r0, PRIMASK
 8004c78:	b672      	cpsid	i
 8004c7a:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8004c7c:	46c0      	nop			; (mov r8, r8)
 8004c7e:	0018      	movs	r0, r3

08004c80 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8004c80:	f380 8810 	msr	PRIMASK, r0
 8004c84:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8004c86:	46c0      	nop			; (mov r8, r8)
	...

08004c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004c90:	f3ef 8009 	mrs	r0, PSP
 8004c94:	4b0e      	ldr	r3, [pc, #56]	; (8004cd0 <pxCurrentTCBConst>)
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	3820      	subs	r0, #32
 8004c9a:	6010      	str	r0, [r2, #0]
 8004c9c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004c9e:	4644      	mov	r4, r8
 8004ca0:	464d      	mov	r5, r9
 8004ca2:	4656      	mov	r6, sl
 8004ca4:	465f      	mov	r7, fp
 8004ca6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004ca8:	b508      	push	{r3, lr}
 8004caa:	b672      	cpsid	i
 8004cac:	f7fe ffd6 	bl	8003c5c <vTaskSwitchContext>
 8004cb0:	b662      	cpsie	i
 8004cb2:	bc0c      	pop	{r2, r3}
 8004cb4:	6811      	ldr	r1, [r2, #0]
 8004cb6:	6808      	ldr	r0, [r1, #0]
 8004cb8:	3010      	adds	r0, #16
 8004cba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004cbc:	46a0      	mov	r8, r4
 8004cbe:	46a9      	mov	r9, r5
 8004cc0:	46b2      	mov	sl, r6
 8004cc2:	46bb      	mov	fp, r7
 8004cc4:	f380 8809 	msr	PSP, r0
 8004cc8:	3820      	subs	r0, #32
 8004cca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004ccc:	4718      	bx	r3
 8004cce:	46c0      	nop			; (mov r8, r8)

08004cd0 <pxCurrentTCBConst>:
 8004cd0:	20000218 	.word	0x20000218
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8004cd4:	46c0      	nop			; (mov r8, r8)
 8004cd6:	46c0      	nop			; (mov r8, r8)

08004cd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cde:	f7ff ffc9 	bl	8004c74 <ulSetInterruptMaskFromISR>
 8004ce2:	0003      	movs	r3, r0
 8004ce4:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004ce6:	f7fe fead 	bl	8003a44 <xTaskIncrementTick>
 8004cea:	1e03      	subs	r3, r0, #0
 8004cec:	d003      	beq.n	8004cf6 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004cee:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <SysTick_Handler+0x30>)
 8004cf0:	2280      	movs	r2, #128	; 0x80
 8004cf2:	0552      	lsls	r2, r2, #21
 8004cf4:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	f7ff ffc1 	bl	8004c80 <vClearInterruptMaskFromISR>
}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b002      	add	sp, #8
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	e000ed04 	.word	0xe000ed04

08004d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d10:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <vPortSetupTimerInterrupt+0x34>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d16:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <vPortSetupTimerInterrupt+0x38>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d1c:	4b0a      	ldr	r3, [pc, #40]	; (8004d48 <vPortSetupTimerInterrupt+0x3c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	22fa      	movs	r2, #250	; 0xfa
 8004d22:	0091      	lsls	r1, r2, #2
 8004d24:	0018      	movs	r0, r3
 8004d26:	f7fb fa01 	bl	800012c <__udivsi3>
 8004d2a:	0003      	movs	r3, r0
 8004d2c:	001a      	movs	r2, r3
 8004d2e:	4b07      	ldr	r3, [pc, #28]	; (8004d4c <vPortSetupTimerInterrupt+0x40>)
 8004d30:	3a01      	subs	r2, #1
 8004d32:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d34:	4b02      	ldr	r3, [pc, #8]	; (8004d40 <vPortSetupTimerInterrupt+0x34>)
 8004d36:	2207      	movs	r2, #7
 8004d38:	601a      	str	r2, [r3, #0]
}
 8004d3a:	46c0      	nop			; (mov r8, r8)
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	e000e010 	.word	0xe000e010
 8004d44:	e000e018 	.word	0xe000e018
 8004d48:	20000000 	.word	0x20000000
 8004d4c:	e000e014 	.word	0xe000e014

08004d50 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004d5c:	f7fe fd70 	bl	8003840 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004d60:	4b4a      	ldr	r3, [pc, #296]	; (8004e8c <pvPortMalloc+0x13c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004d68:	f000 f8e6 	bl	8004f38 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d012      	beq.n	8004d98 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004d72:	2208      	movs	r2, #8
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2107      	movs	r1, #7
 8004d78:	400b      	ands	r3, r1
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	3308      	adds	r3, #8
 8004d7e:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	43db      	mvns	r3, r3
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d804      	bhi.n	8004d94 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	18d3      	adds	r3, r2, r3
 8004d90:	607b      	str	r3, [r7, #4]
 8004d92:	e001      	b.n	8004d98 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004d94:	2300      	movs	r3, #0
 8004d96:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	db68      	blt.n	8004e70 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d065      	beq.n	8004e70 <pvPortMalloc+0x120>
 8004da4:	4b3a      	ldr	r3, [pc, #232]	; (8004e90 <pvPortMalloc+0x140>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d860      	bhi.n	8004e70 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004dae:	4b39      	ldr	r3, [pc, #228]	; (8004e94 <pvPortMalloc+0x144>)
 8004db0:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8004db2:	4b38      	ldr	r3, [pc, #224]	; (8004e94 <pvPortMalloc+0x144>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004db8:	e004      	b.n	8004dc4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d903      	bls.n	8004dd6 <pvPortMalloc+0x86>
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f1      	bne.n	8004dba <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004dd6:	4b2d      	ldr	r3, [pc, #180]	; (8004e8c <pvPortMalloc+0x13c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69fa      	ldr	r2, [r7, #28]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d047      	beq.n	8004e70 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2208      	movs	r2, #8
 8004de6:	189b      	adds	r3, r3, r2
 8004de8:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	1ad2      	subs	r2, r2, r3
 8004dfa:	2308      	movs	r3, #8
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d916      	bls.n	8004e30 <pvPortMalloc+0xe0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e02:	69fa      	ldr	r2, [r7, #28]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	18d3      	adds	r3, r2, r3
 8004e08:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2207      	movs	r2, #7
 8004e0e:	4013      	ands	r3, r2
 8004e10:	d001      	beq.n	8004e16 <pvPortMalloc+0xc6>
 8004e12:	b672      	cpsid	i
 8004e14:	e7fe      	b.n	8004e14 <pvPortMalloc+0xc4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	1ad2      	subs	r2, r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	f000 f8de 	bl	8004fec <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e30:	4b17      	ldr	r3, [pc, #92]	; (8004e90 <pvPortMalloc+0x140>)
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	1ad2      	subs	r2, r2, r3
 8004e3a:	4b15      	ldr	r3, [pc, #84]	; (8004e90 <pvPortMalloc+0x140>)
 8004e3c:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e3e:	4b14      	ldr	r3, [pc, #80]	; (8004e90 <pvPortMalloc+0x140>)
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	4b15      	ldr	r3, [pc, #84]	; (8004e98 <pvPortMalloc+0x148>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d203      	bcs.n	8004e52 <pvPortMalloc+0x102>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e4a:	4b11      	ldr	r3, [pc, #68]	; (8004e90 <pvPortMalloc+0x140>)
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	4b12      	ldr	r3, [pc, #72]	; (8004e98 <pvPortMalloc+0x148>)
 8004e50:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2280      	movs	r2, #128	; 0x80
 8004e58:	0612      	lsls	r2, r2, #24
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004e66:	4b0d      	ldr	r3, [pc, #52]	; (8004e9c <pvPortMalloc+0x14c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <pvPortMalloc+0x14c>)
 8004e6e:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004e70:	f7fe fcf2 	bl	8003858 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2207      	movs	r2, #7
 8004e78:	4013      	ands	r3, r2
 8004e7a:	d001      	beq.n	8004e80 <pvPortMalloc+0x130>
 8004e7c:	b672      	cpsid	i
 8004e7e:	e7fe      	b.n	8004e7e <pvPortMalloc+0x12e>
    return pvReturn;
 8004e80:	697b      	ldr	r3, [r7, #20]
}
 8004e82:	0018      	movs	r0, r3
 8004e84:	46bd      	mov	sp, r7
 8004e86:	b008      	add	sp, #32
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	20001cc4 	.word	0x20001cc4
 8004e90:	20001cc8 	.word	0x20001cc8
 8004e94:	20001cbc 	.word	0x20001cbc
 8004e98:	20001ccc 	.word	0x20001ccc
 8004e9c:	20001cd0 	.word	0x20001cd0

08004ea0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d039      	beq.n	8004f26 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004eb2:	2308      	movs	r3, #8
 8004eb4:	425b      	negs	r3, r3
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	18d3      	adds	r3, r2, r3
 8004eba:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	db01      	blt.n	8004ecc <vPortFree+0x2c>
 8004ec8:	b672      	cpsid	i
 8004eca:	e7fe      	b.n	8004eca <vPortFree+0x2a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <vPortFree+0x38>
 8004ed4:	b672      	cpsid	i
 8004ed6:	e7fe      	b.n	8004ed6 <vPortFree+0x36>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	0fdb      	lsrs	r3, r3, #31
 8004ede:	1c1a      	adds	r2, r3, #0
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d01d      	beq.n	8004f26 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d119      	bne.n	8004f26 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	085a      	lsrs	r2, r3, #1
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004efe:	f7fe fc9f 	bl	8003840 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <vPortFree+0x90>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	18d2      	adds	r2, r2, r3
 8004f0c:	4b08      	ldr	r3, [pc, #32]	; (8004f30 <vPortFree+0x90>)
 8004f0e:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	0018      	movs	r0, r3
 8004f14:	f000 f86a 	bl	8004fec <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004f18:	4b06      	ldr	r3, [pc, #24]	; (8004f34 <vPortFree+0x94>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <vPortFree+0x94>)
 8004f20:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 8004f22:	f7fe fc99 	bl	8003858 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b004      	add	sp, #16
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	20001cc8 	.word	0x20001cc8
 8004f34:	20001cd4 	.word	0x20001cd4

08004f38 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f3e:	4b25      	ldr	r3, [pc, #148]	; (8004fd4 <prvHeapInit+0x9c>)
 8004f40:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004f42:	4b25      	ldr	r3, [pc, #148]	; (8004fd8 <prvHeapInit+0xa0>)
 8004f44:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2207      	movs	r2, #7
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	d00c      	beq.n	8004f68 <prvHeapInit+0x30>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	3307      	adds	r3, #7
 8004f52:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2207      	movs	r2, #7
 8004f58:	4393      	bics	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	1ad2      	subs	r2, r2, r3
 8004f62:	4b1d      	ldr	r3, [pc, #116]	; (8004fd8 <prvHeapInit+0xa0>)
 8004f64:	18d3      	adds	r3, r2, r3
 8004f66:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f6c:	4b1b      	ldr	r3, [pc, #108]	; (8004fdc <prvHeapInit+0xa4>)
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004f72:	4b1a      	ldr	r3, [pc, #104]	; (8004fdc <prvHeapInit+0xa4>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	18d3      	adds	r3, r2, r3
 8004f7e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004f80:	2208      	movs	r2, #8
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	1a9b      	subs	r3, r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2207      	movs	r2, #7
 8004f8c:	4393      	bics	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4b13      	ldr	r3, [pc, #76]	; (8004fe0 <prvHeapInit+0xa8>)
 8004f94:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 8004f96:	4b12      	ldr	r3, [pc, #72]	; (8004fe0 <prvHeapInit+0xa8>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004f9e:	4b10      	ldr	r3, [pc, #64]	; (8004fe0 <prvHeapInit+0xa8>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	1ad2      	subs	r2, r2, r3
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004fb4:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <prvHeapInit+0xa8>)
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	4b08      	ldr	r3, [pc, #32]	; (8004fe4 <prvHeapInit+0xac>)
 8004fc2:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	4b07      	ldr	r3, [pc, #28]	; (8004fe8 <prvHeapInit+0xb0>)
 8004fca:	601a      	str	r2, [r3, #0]
}
 8004fcc:	46c0      	nop			; (mov r8, r8)
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	b004      	add	sp, #16
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	00001964 	.word	0x00001964
 8004fd8:	20000358 	.word	0x20000358
 8004fdc:	20001cbc 	.word	0x20001cbc
 8004fe0:	20001cc4 	.word	0x20001cc4
 8004fe4:	20001ccc 	.word	0x20001ccc
 8004fe8:	20001cc8 	.word	0x20001cc8

08004fec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ff4:	4b27      	ldr	r3, [pc, #156]	; (8005094 <prvInsertBlockIntoFreeList+0xa8>)
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	e002      	b.n	8005000 <prvInsertBlockIntoFreeList+0x14>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	429a      	cmp	r2, r3
 8005008:	d8f7      	bhi.n	8004ffa <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	18d3      	adds	r3, r2, r3
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	429a      	cmp	r2, r3
 800501a:	d108      	bne.n	800502e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	18d2      	adds	r2, r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	18d2      	adds	r2, r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d118      	bne.n	8005074 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	4b14      	ldr	r3, [pc, #80]	; (8005098 <prvInsertBlockIntoFreeList+0xac>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d00d      	beq.n	800506a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	18d2      	adds	r2, r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	e008      	b.n	800507c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800506a:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <prvInsertBlockIntoFreeList+0xac>)
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	e003      	b.n	800507c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	429a      	cmp	r2, r3
 8005082:	d002      	beq.n	800508a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800508a:	46c0      	nop			; (mov r8, r8)
 800508c:	46bd      	mov	sp, r7
 800508e:	b004      	add	sp, #16
 8005090:	bd80      	pop	{r7, pc}
 8005092:	46c0      	nop			; (mov r8, r8)
 8005094:	20001cbc 	.word	0x20001cbc
 8005098:	20001cc4 	.word	0x20001cc4

0800509c <__errno>:
 800509c:	4b01      	ldr	r3, [pc, #4]	; (80050a4 <__errno+0x8>)
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	4770      	bx	lr
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	20000014 	.word	0x20000014

080050a8 <__libc_init_array>:
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	2600      	movs	r6, #0
 80050ac:	4d0c      	ldr	r5, [pc, #48]	; (80050e0 <__libc_init_array+0x38>)
 80050ae:	4c0d      	ldr	r4, [pc, #52]	; (80050e4 <__libc_init_array+0x3c>)
 80050b0:	1b64      	subs	r4, r4, r5
 80050b2:	10a4      	asrs	r4, r4, #2
 80050b4:	42a6      	cmp	r6, r4
 80050b6:	d109      	bne.n	80050cc <__libc_init_array+0x24>
 80050b8:	2600      	movs	r6, #0
 80050ba:	f001 fa7d 	bl	80065b8 <_init>
 80050be:	4d0a      	ldr	r5, [pc, #40]	; (80050e8 <__libc_init_array+0x40>)
 80050c0:	4c0a      	ldr	r4, [pc, #40]	; (80050ec <__libc_init_array+0x44>)
 80050c2:	1b64      	subs	r4, r4, r5
 80050c4:	10a4      	asrs	r4, r4, #2
 80050c6:	42a6      	cmp	r6, r4
 80050c8:	d105      	bne.n	80050d6 <__libc_init_array+0x2e>
 80050ca:	bd70      	pop	{r4, r5, r6, pc}
 80050cc:	00b3      	lsls	r3, r6, #2
 80050ce:	58eb      	ldr	r3, [r5, r3]
 80050d0:	4798      	blx	r3
 80050d2:	3601      	adds	r6, #1
 80050d4:	e7ee      	b.n	80050b4 <__libc_init_array+0xc>
 80050d6:	00b3      	lsls	r3, r6, #2
 80050d8:	58eb      	ldr	r3, [r5, r3]
 80050da:	4798      	blx	r3
 80050dc:	3601      	adds	r6, #1
 80050de:	e7f2      	b.n	80050c6 <__libc_init_array+0x1e>
 80050e0:	08006894 	.word	0x08006894
 80050e4:	08006894 	.word	0x08006894
 80050e8:	08006894 	.word	0x08006894
 80050ec:	08006898 	.word	0x08006898

080050f0 <memcpy>:
 80050f0:	2300      	movs	r3, #0
 80050f2:	b510      	push	{r4, lr}
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d100      	bne.n	80050fa <memcpy+0xa>
 80050f8:	bd10      	pop	{r4, pc}
 80050fa:	5ccc      	ldrb	r4, [r1, r3]
 80050fc:	54c4      	strb	r4, [r0, r3]
 80050fe:	3301      	adds	r3, #1
 8005100:	e7f8      	b.n	80050f4 <memcpy+0x4>

08005102 <memset>:
 8005102:	0003      	movs	r3, r0
 8005104:	1882      	adds	r2, r0, r2
 8005106:	4293      	cmp	r3, r2
 8005108:	d100      	bne.n	800510c <memset+0xa>
 800510a:	4770      	bx	lr
 800510c:	7019      	strb	r1, [r3, #0]
 800510e:	3301      	adds	r3, #1
 8005110:	e7f9      	b.n	8005106 <memset+0x4>
	...

08005114 <rand>:
 8005114:	4b16      	ldr	r3, [pc, #88]	; (8005170 <rand+0x5c>)
 8005116:	b510      	push	{r4, lr}
 8005118:	681c      	ldr	r4, [r3, #0]
 800511a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800511c:	2b00      	cmp	r3, #0
 800511e:	d116      	bne.n	800514e <rand+0x3a>
 8005120:	2018      	movs	r0, #24
 8005122:	f000 f883 	bl	800522c <malloc>
 8005126:	1e02      	subs	r2, r0, #0
 8005128:	63a0      	str	r0, [r4, #56]	; 0x38
 800512a:	d104      	bne.n	8005136 <rand+0x22>
 800512c:	214e      	movs	r1, #78	; 0x4e
 800512e:	4b11      	ldr	r3, [pc, #68]	; (8005174 <rand+0x60>)
 8005130:	4811      	ldr	r0, [pc, #68]	; (8005178 <rand+0x64>)
 8005132:	f000 f84d 	bl	80051d0 <__assert_func>
 8005136:	4b11      	ldr	r3, [pc, #68]	; (800517c <rand+0x68>)
 8005138:	2100      	movs	r1, #0
 800513a:	6003      	str	r3, [r0, #0]
 800513c:	4b10      	ldr	r3, [pc, #64]	; (8005180 <rand+0x6c>)
 800513e:	6043      	str	r3, [r0, #4]
 8005140:	4b10      	ldr	r3, [pc, #64]	; (8005184 <rand+0x70>)
 8005142:	6083      	str	r3, [r0, #8]
 8005144:	230b      	movs	r3, #11
 8005146:	8183      	strh	r3, [r0, #12]
 8005148:	2001      	movs	r0, #1
 800514a:	6110      	str	r0, [r2, #16]
 800514c:	6151      	str	r1, [r2, #20]
 800514e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005150:	4a0d      	ldr	r2, [pc, #52]	; (8005188 <rand+0x74>)
 8005152:	6920      	ldr	r0, [r4, #16]
 8005154:	6961      	ldr	r1, [r4, #20]
 8005156:	4b0d      	ldr	r3, [pc, #52]	; (800518c <rand+0x78>)
 8005158:	f7fb f874 	bl	8000244 <__aeabi_lmul>
 800515c:	2201      	movs	r2, #1
 800515e:	2300      	movs	r3, #0
 8005160:	1880      	adds	r0, r0, r2
 8005162:	4159      	adcs	r1, r3
 8005164:	6120      	str	r0, [r4, #16]
 8005166:	6161      	str	r1, [r4, #20]
 8005168:	0048      	lsls	r0, r1, #1
 800516a:	0840      	lsrs	r0, r0, #1
 800516c:	bd10      	pop	{r4, pc}
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	20000014 	.word	0x20000014
 8005174:	08006750 	.word	0x08006750
 8005178:	08006767 	.word	0x08006767
 800517c:	abcd330e 	.word	0xabcd330e
 8005180:	e66d1234 	.word	0xe66d1234
 8005184:	0005deec 	.word	0x0005deec
 8005188:	4c957f2d 	.word	0x4c957f2d
 800518c:	5851f42d 	.word	0x5851f42d

08005190 <siprintf>:
 8005190:	b40e      	push	{r1, r2, r3}
 8005192:	b500      	push	{lr}
 8005194:	490b      	ldr	r1, [pc, #44]	; (80051c4 <siprintf+0x34>)
 8005196:	b09c      	sub	sp, #112	; 0x70
 8005198:	ab1d      	add	r3, sp, #116	; 0x74
 800519a:	9002      	str	r0, [sp, #8]
 800519c:	9006      	str	r0, [sp, #24]
 800519e:	9107      	str	r1, [sp, #28]
 80051a0:	9104      	str	r1, [sp, #16]
 80051a2:	4809      	ldr	r0, [pc, #36]	; (80051c8 <siprintf+0x38>)
 80051a4:	4909      	ldr	r1, [pc, #36]	; (80051cc <siprintf+0x3c>)
 80051a6:	cb04      	ldmia	r3!, {r2}
 80051a8:	9105      	str	r1, [sp, #20]
 80051aa:	6800      	ldr	r0, [r0, #0]
 80051ac:	a902      	add	r1, sp, #8
 80051ae:	9301      	str	r3, [sp, #4]
 80051b0:	f000 f98a 	bl	80054c8 <_svfiprintf_r>
 80051b4:	2300      	movs	r3, #0
 80051b6:	9a02      	ldr	r2, [sp, #8]
 80051b8:	7013      	strb	r3, [r2, #0]
 80051ba:	b01c      	add	sp, #112	; 0x70
 80051bc:	bc08      	pop	{r3}
 80051be:	b003      	add	sp, #12
 80051c0:	4718      	bx	r3
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	7fffffff 	.word	0x7fffffff
 80051c8:	20000014 	.word	0x20000014
 80051cc:	ffff0208 	.word	0xffff0208

080051d0 <__assert_func>:
 80051d0:	b530      	push	{r4, r5, lr}
 80051d2:	0014      	movs	r4, r2
 80051d4:	001a      	movs	r2, r3
 80051d6:	4b09      	ldr	r3, [pc, #36]	; (80051fc <__assert_func+0x2c>)
 80051d8:	0005      	movs	r5, r0
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	b085      	sub	sp, #20
 80051de:	68d8      	ldr	r0, [r3, #12]
 80051e0:	4b07      	ldr	r3, [pc, #28]	; (8005200 <__assert_func+0x30>)
 80051e2:	2c00      	cmp	r4, #0
 80051e4:	d101      	bne.n	80051ea <__assert_func+0x1a>
 80051e6:	4b07      	ldr	r3, [pc, #28]	; (8005204 <__assert_func+0x34>)
 80051e8:	001c      	movs	r4, r3
 80051ea:	9301      	str	r3, [sp, #4]
 80051ec:	9100      	str	r1, [sp, #0]
 80051ee:	002b      	movs	r3, r5
 80051f0:	4905      	ldr	r1, [pc, #20]	; (8005208 <__assert_func+0x38>)
 80051f2:	9402      	str	r4, [sp, #8]
 80051f4:	f000 f80a 	bl	800520c <fiprintf>
 80051f8:	f000 fe2a 	bl	8005e50 <abort>
 80051fc:	20000014 	.word	0x20000014
 8005200:	080067c2 	.word	0x080067c2
 8005204:	080067fd 	.word	0x080067fd
 8005208:	080067cf 	.word	0x080067cf

0800520c <fiprintf>:
 800520c:	b40e      	push	{r1, r2, r3}
 800520e:	b503      	push	{r0, r1, lr}
 8005210:	0001      	movs	r1, r0
 8005212:	ab03      	add	r3, sp, #12
 8005214:	4804      	ldr	r0, [pc, #16]	; (8005228 <fiprintf+0x1c>)
 8005216:	cb04      	ldmia	r3!, {r2}
 8005218:	6800      	ldr	r0, [r0, #0]
 800521a:	9301      	str	r3, [sp, #4]
 800521c:	f000 fa7c 	bl	8005718 <_vfiprintf_r>
 8005220:	b002      	add	sp, #8
 8005222:	bc08      	pop	{r3}
 8005224:	b003      	add	sp, #12
 8005226:	4718      	bx	r3
 8005228:	20000014 	.word	0x20000014

0800522c <malloc>:
 800522c:	b510      	push	{r4, lr}
 800522e:	4b03      	ldr	r3, [pc, #12]	; (800523c <malloc+0x10>)
 8005230:	0001      	movs	r1, r0
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	f000 f870 	bl	8005318 <_malloc_r>
 8005238:	bd10      	pop	{r4, pc}
 800523a:	46c0      	nop			; (mov r8, r8)
 800523c:	20000014 	.word	0x20000014

08005240 <_free_r>:
 8005240:	b570      	push	{r4, r5, r6, lr}
 8005242:	0005      	movs	r5, r0
 8005244:	2900      	cmp	r1, #0
 8005246:	d010      	beq.n	800526a <_free_r+0x2a>
 8005248:	1f0c      	subs	r4, r1, #4
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	da00      	bge.n	8005252 <_free_r+0x12>
 8005250:	18e4      	adds	r4, r4, r3
 8005252:	0028      	movs	r0, r5
 8005254:	f001 f860 	bl	8006318 <__malloc_lock>
 8005258:	4a1d      	ldr	r2, [pc, #116]	; (80052d0 <_free_r+0x90>)
 800525a:	6813      	ldr	r3, [r2, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d105      	bne.n	800526c <_free_r+0x2c>
 8005260:	6063      	str	r3, [r4, #4]
 8005262:	6014      	str	r4, [r2, #0]
 8005264:	0028      	movs	r0, r5
 8005266:	f001 f85f 	bl	8006328 <__malloc_unlock>
 800526a:	bd70      	pop	{r4, r5, r6, pc}
 800526c:	42a3      	cmp	r3, r4
 800526e:	d908      	bls.n	8005282 <_free_r+0x42>
 8005270:	6821      	ldr	r1, [r4, #0]
 8005272:	1860      	adds	r0, r4, r1
 8005274:	4283      	cmp	r3, r0
 8005276:	d1f3      	bne.n	8005260 <_free_r+0x20>
 8005278:	6818      	ldr	r0, [r3, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	1841      	adds	r1, r0, r1
 800527e:	6021      	str	r1, [r4, #0]
 8005280:	e7ee      	b.n	8005260 <_free_r+0x20>
 8005282:	001a      	movs	r2, r3
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <_free_r+0x4e>
 800528a:	42a3      	cmp	r3, r4
 800528c:	d9f9      	bls.n	8005282 <_free_r+0x42>
 800528e:	6811      	ldr	r1, [r2, #0]
 8005290:	1850      	adds	r0, r2, r1
 8005292:	42a0      	cmp	r0, r4
 8005294:	d10b      	bne.n	80052ae <_free_r+0x6e>
 8005296:	6820      	ldr	r0, [r4, #0]
 8005298:	1809      	adds	r1, r1, r0
 800529a:	1850      	adds	r0, r2, r1
 800529c:	6011      	str	r1, [r2, #0]
 800529e:	4283      	cmp	r3, r0
 80052a0:	d1e0      	bne.n	8005264 <_free_r+0x24>
 80052a2:	6818      	ldr	r0, [r3, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	1841      	adds	r1, r0, r1
 80052a8:	6011      	str	r1, [r2, #0]
 80052aa:	6053      	str	r3, [r2, #4]
 80052ac:	e7da      	b.n	8005264 <_free_r+0x24>
 80052ae:	42a0      	cmp	r0, r4
 80052b0:	d902      	bls.n	80052b8 <_free_r+0x78>
 80052b2:	230c      	movs	r3, #12
 80052b4:	602b      	str	r3, [r5, #0]
 80052b6:	e7d5      	b.n	8005264 <_free_r+0x24>
 80052b8:	6821      	ldr	r1, [r4, #0]
 80052ba:	1860      	adds	r0, r4, r1
 80052bc:	4283      	cmp	r3, r0
 80052be:	d103      	bne.n	80052c8 <_free_r+0x88>
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	1841      	adds	r1, r0, r1
 80052c6:	6021      	str	r1, [r4, #0]
 80052c8:	6063      	str	r3, [r4, #4]
 80052ca:	6054      	str	r4, [r2, #4]
 80052cc:	e7ca      	b.n	8005264 <_free_r+0x24>
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	20001cd8 	.word	0x20001cd8

080052d4 <sbrk_aligned>:
 80052d4:	b570      	push	{r4, r5, r6, lr}
 80052d6:	4e0f      	ldr	r6, [pc, #60]	; (8005314 <sbrk_aligned+0x40>)
 80052d8:	000d      	movs	r5, r1
 80052da:	6831      	ldr	r1, [r6, #0]
 80052dc:	0004      	movs	r4, r0
 80052de:	2900      	cmp	r1, #0
 80052e0:	d102      	bne.n	80052e8 <sbrk_aligned+0x14>
 80052e2:	f000 fcd5 	bl	8005c90 <_sbrk_r>
 80052e6:	6030      	str	r0, [r6, #0]
 80052e8:	0029      	movs	r1, r5
 80052ea:	0020      	movs	r0, r4
 80052ec:	f000 fcd0 	bl	8005c90 <_sbrk_r>
 80052f0:	1c43      	adds	r3, r0, #1
 80052f2:	d00a      	beq.n	800530a <sbrk_aligned+0x36>
 80052f4:	2303      	movs	r3, #3
 80052f6:	1cc5      	adds	r5, r0, #3
 80052f8:	439d      	bics	r5, r3
 80052fa:	42a8      	cmp	r0, r5
 80052fc:	d007      	beq.n	800530e <sbrk_aligned+0x3a>
 80052fe:	1a29      	subs	r1, r5, r0
 8005300:	0020      	movs	r0, r4
 8005302:	f000 fcc5 	bl	8005c90 <_sbrk_r>
 8005306:	1c43      	adds	r3, r0, #1
 8005308:	d101      	bne.n	800530e <sbrk_aligned+0x3a>
 800530a:	2501      	movs	r5, #1
 800530c:	426d      	negs	r5, r5
 800530e:	0028      	movs	r0, r5
 8005310:	bd70      	pop	{r4, r5, r6, pc}
 8005312:	46c0      	nop			; (mov r8, r8)
 8005314:	20001cdc 	.word	0x20001cdc

08005318 <_malloc_r>:
 8005318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800531a:	2203      	movs	r2, #3
 800531c:	1ccb      	adds	r3, r1, #3
 800531e:	4393      	bics	r3, r2
 8005320:	3308      	adds	r3, #8
 8005322:	0006      	movs	r6, r0
 8005324:	001f      	movs	r7, r3
 8005326:	2b0c      	cmp	r3, #12
 8005328:	d232      	bcs.n	8005390 <_malloc_r+0x78>
 800532a:	270c      	movs	r7, #12
 800532c:	42b9      	cmp	r1, r7
 800532e:	d831      	bhi.n	8005394 <_malloc_r+0x7c>
 8005330:	0030      	movs	r0, r6
 8005332:	f000 fff1 	bl	8006318 <__malloc_lock>
 8005336:	4d32      	ldr	r5, [pc, #200]	; (8005400 <_malloc_r+0xe8>)
 8005338:	682b      	ldr	r3, [r5, #0]
 800533a:	001c      	movs	r4, r3
 800533c:	2c00      	cmp	r4, #0
 800533e:	d12e      	bne.n	800539e <_malloc_r+0x86>
 8005340:	0039      	movs	r1, r7
 8005342:	0030      	movs	r0, r6
 8005344:	f7ff ffc6 	bl	80052d4 <sbrk_aligned>
 8005348:	0004      	movs	r4, r0
 800534a:	1c43      	adds	r3, r0, #1
 800534c:	d11e      	bne.n	800538c <_malloc_r+0x74>
 800534e:	682c      	ldr	r4, [r5, #0]
 8005350:	0025      	movs	r5, r4
 8005352:	2d00      	cmp	r5, #0
 8005354:	d14a      	bne.n	80053ec <_malloc_r+0xd4>
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	0029      	movs	r1, r5
 800535a:	18e3      	adds	r3, r4, r3
 800535c:	0030      	movs	r0, r6
 800535e:	9301      	str	r3, [sp, #4]
 8005360:	f000 fc96 	bl	8005c90 <_sbrk_r>
 8005364:	9b01      	ldr	r3, [sp, #4]
 8005366:	4283      	cmp	r3, r0
 8005368:	d143      	bne.n	80053f2 <_malloc_r+0xda>
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	3703      	adds	r7, #3
 800536e:	1aff      	subs	r7, r7, r3
 8005370:	2303      	movs	r3, #3
 8005372:	439f      	bics	r7, r3
 8005374:	3708      	adds	r7, #8
 8005376:	2f0c      	cmp	r7, #12
 8005378:	d200      	bcs.n	800537c <_malloc_r+0x64>
 800537a:	270c      	movs	r7, #12
 800537c:	0039      	movs	r1, r7
 800537e:	0030      	movs	r0, r6
 8005380:	f7ff ffa8 	bl	80052d4 <sbrk_aligned>
 8005384:	1c43      	adds	r3, r0, #1
 8005386:	d034      	beq.n	80053f2 <_malloc_r+0xda>
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	19df      	adds	r7, r3, r7
 800538c:	6027      	str	r7, [r4, #0]
 800538e:	e013      	b.n	80053b8 <_malloc_r+0xa0>
 8005390:	2b00      	cmp	r3, #0
 8005392:	dacb      	bge.n	800532c <_malloc_r+0x14>
 8005394:	230c      	movs	r3, #12
 8005396:	2500      	movs	r5, #0
 8005398:	6033      	str	r3, [r6, #0]
 800539a:	0028      	movs	r0, r5
 800539c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800539e:	6822      	ldr	r2, [r4, #0]
 80053a0:	1bd1      	subs	r1, r2, r7
 80053a2:	d420      	bmi.n	80053e6 <_malloc_r+0xce>
 80053a4:	290b      	cmp	r1, #11
 80053a6:	d917      	bls.n	80053d8 <_malloc_r+0xc0>
 80053a8:	19e2      	adds	r2, r4, r7
 80053aa:	6027      	str	r7, [r4, #0]
 80053ac:	42a3      	cmp	r3, r4
 80053ae:	d111      	bne.n	80053d4 <_malloc_r+0xbc>
 80053b0:	602a      	str	r2, [r5, #0]
 80053b2:	6863      	ldr	r3, [r4, #4]
 80053b4:	6011      	str	r1, [r2, #0]
 80053b6:	6053      	str	r3, [r2, #4]
 80053b8:	0030      	movs	r0, r6
 80053ba:	0025      	movs	r5, r4
 80053bc:	f000 ffb4 	bl	8006328 <__malloc_unlock>
 80053c0:	2207      	movs	r2, #7
 80053c2:	350b      	adds	r5, #11
 80053c4:	1d23      	adds	r3, r4, #4
 80053c6:	4395      	bics	r5, r2
 80053c8:	1aea      	subs	r2, r5, r3
 80053ca:	429d      	cmp	r5, r3
 80053cc:	d0e5      	beq.n	800539a <_malloc_r+0x82>
 80053ce:	1b5b      	subs	r3, r3, r5
 80053d0:	50a3      	str	r3, [r4, r2]
 80053d2:	e7e2      	b.n	800539a <_malloc_r+0x82>
 80053d4:	605a      	str	r2, [r3, #4]
 80053d6:	e7ec      	b.n	80053b2 <_malloc_r+0x9a>
 80053d8:	6862      	ldr	r2, [r4, #4]
 80053da:	42a3      	cmp	r3, r4
 80053dc:	d101      	bne.n	80053e2 <_malloc_r+0xca>
 80053de:	602a      	str	r2, [r5, #0]
 80053e0:	e7ea      	b.n	80053b8 <_malloc_r+0xa0>
 80053e2:	605a      	str	r2, [r3, #4]
 80053e4:	e7e8      	b.n	80053b8 <_malloc_r+0xa0>
 80053e6:	0023      	movs	r3, r4
 80053e8:	6864      	ldr	r4, [r4, #4]
 80053ea:	e7a7      	b.n	800533c <_malloc_r+0x24>
 80053ec:	002c      	movs	r4, r5
 80053ee:	686d      	ldr	r5, [r5, #4]
 80053f0:	e7af      	b.n	8005352 <_malloc_r+0x3a>
 80053f2:	230c      	movs	r3, #12
 80053f4:	0030      	movs	r0, r6
 80053f6:	6033      	str	r3, [r6, #0]
 80053f8:	f000 ff96 	bl	8006328 <__malloc_unlock>
 80053fc:	e7cd      	b.n	800539a <_malloc_r+0x82>
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	20001cd8 	.word	0x20001cd8

08005404 <__ssputs_r>:
 8005404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005406:	688e      	ldr	r6, [r1, #8]
 8005408:	b085      	sub	sp, #20
 800540a:	0007      	movs	r7, r0
 800540c:	000c      	movs	r4, r1
 800540e:	9203      	str	r2, [sp, #12]
 8005410:	9301      	str	r3, [sp, #4]
 8005412:	429e      	cmp	r6, r3
 8005414:	d83c      	bhi.n	8005490 <__ssputs_r+0x8c>
 8005416:	2390      	movs	r3, #144	; 0x90
 8005418:	898a      	ldrh	r2, [r1, #12]
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	421a      	tst	r2, r3
 800541e:	d034      	beq.n	800548a <__ssputs_r+0x86>
 8005420:	6909      	ldr	r1, [r1, #16]
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	6960      	ldr	r0, [r4, #20]
 8005426:	1a5b      	subs	r3, r3, r1
 8005428:	9302      	str	r3, [sp, #8]
 800542a:	2303      	movs	r3, #3
 800542c:	4343      	muls	r3, r0
 800542e:	0fdd      	lsrs	r5, r3, #31
 8005430:	18ed      	adds	r5, r5, r3
 8005432:	9b01      	ldr	r3, [sp, #4]
 8005434:	9802      	ldr	r0, [sp, #8]
 8005436:	3301      	adds	r3, #1
 8005438:	181b      	adds	r3, r3, r0
 800543a:	106d      	asrs	r5, r5, #1
 800543c:	42ab      	cmp	r3, r5
 800543e:	d900      	bls.n	8005442 <__ssputs_r+0x3e>
 8005440:	001d      	movs	r5, r3
 8005442:	0553      	lsls	r3, r2, #21
 8005444:	d532      	bpl.n	80054ac <__ssputs_r+0xa8>
 8005446:	0029      	movs	r1, r5
 8005448:	0038      	movs	r0, r7
 800544a:	f7ff ff65 	bl	8005318 <_malloc_r>
 800544e:	1e06      	subs	r6, r0, #0
 8005450:	d109      	bne.n	8005466 <__ssputs_r+0x62>
 8005452:	230c      	movs	r3, #12
 8005454:	603b      	str	r3, [r7, #0]
 8005456:	2340      	movs	r3, #64	; 0x40
 8005458:	2001      	movs	r0, #1
 800545a:	89a2      	ldrh	r2, [r4, #12]
 800545c:	4240      	negs	r0, r0
 800545e:	4313      	orrs	r3, r2
 8005460:	81a3      	strh	r3, [r4, #12]
 8005462:	b005      	add	sp, #20
 8005464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005466:	9a02      	ldr	r2, [sp, #8]
 8005468:	6921      	ldr	r1, [r4, #16]
 800546a:	f7ff fe41 	bl	80050f0 <memcpy>
 800546e:	89a3      	ldrh	r3, [r4, #12]
 8005470:	4a14      	ldr	r2, [pc, #80]	; (80054c4 <__ssputs_r+0xc0>)
 8005472:	401a      	ands	r2, r3
 8005474:	2380      	movs	r3, #128	; 0x80
 8005476:	4313      	orrs	r3, r2
 8005478:	81a3      	strh	r3, [r4, #12]
 800547a:	9b02      	ldr	r3, [sp, #8]
 800547c:	6126      	str	r6, [r4, #16]
 800547e:	18f6      	adds	r6, r6, r3
 8005480:	6026      	str	r6, [r4, #0]
 8005482:	6165      	str	r5, [r4, #20]
 8005484:	9e01      	ldr	r6, [sp, #4]
 8005486:	1aed      	subs	r5, r5, r3
 8005488:	60a5      	str	r5, [r4, #8]
 800548a:	9b01      	ldr	r3, [sp, #4]
 800548c:	429e      	cmp	r6, r3
 800548e:	d900      	bls.n	8005492 <__ssputs_r+0x8e>
 8005490:	9e01      	ldr	r6, [sp, #4]
 8005492:	0032      	movs	r2, r6
 8005494:	9903      	ldr	r1, [sp, #12]
 8005496:	6820      	ldr	r0, [r4, #0]
 8005498:	f000 ff2b 	bl	80062f2 <memmove>
 800549c:	68a3      	ldr	r3, [r4, #8]
 800549e:	2000      	movs	r0, #0
 80054a0:	1b9b      	subs	r3, r3, r6
 80054a2:	60a3      	str	r3, [r4, #8]
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	199e      	adds	r6, r3, r6
 80054a8:	6026      	str	r6, [r4, #0]
 80054aa:	e7da      	b.n	8005462 <__ssputs_r+0x5e>
 80054ac:	002a      	movs	r2, r5
 80054ae:	0038      	movs	r0, r7
 80054b0:	f000 ff42 	bl	8006338 <_realloc_r>
 80054b4:	1e06      	subs	r6, r0, #0
 80054b6:	d1e0      	bne.n	800547a <__ssputs_r+0x76>
 80054b8:	0038      	movs	r0, r7
 80054ba:	6921      	ldr	r1, [r4, #16]
 80054bc:	f7ff fec0 	bl	8005240 <_free_r>
 80054c0:	e7c7      	b.n	8005452 <__ssputs_r+0x4e>
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	fffffb7f 	.word	0xfffffb7f

080054c8 <_svfiprintf_r>:
 80054c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ca:	b0a1      	sub	sp, #132	; 0x84
 80054cc:	9003      	str	r0, [sp, #12]
 80054ce:	001d      	movs	r5, r3
 80054d0:	898b      	ldrh	r3, [r1, #12]
 80054d2:	000f      	movs	r7, r1
 80054d4:	0016      	movs	r6, r2
 80054d6:	061b      	lsls	r3, r3, #24
 80054d8:	d511      	bpl.n	80054fe <_svfiprintf_r+0x36>
 80054da:	690b      	ldr	r3, [r1, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10e      	bne.n	80054fe <_svfiprintf_r+0x36>
 80054e0:	2140      	movs	r1, #64	; 0x40
 80054e2:	f7ff ff19 	bl	8005318 <_malloc_r>
 80054e6:	6038      	str	r0, [r7, #0]
 80054e8:	6138      	str	r0, [r7, #16]
 80054ea:	2800      	cmp	r0, #0
 80054ec:	d105      	bne.n	80054fa <_svfiprintf_r+0x32>
 80054ee:	230c      	movs	r3, #12
 80054f0:	9a03      	ldr	r2, [sp, #12]
 80054f2:	3801      	subs	r0, #1
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	b021      	add	sp, #132	; 0x84
 80054f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054fa:	2340      	movs	r3, #64	; 0x40
 80054fc:	617b      	str	r3, [r7, #20]
 80054fe:	2300      	movs	r3, #0
 8005500:	ac08      	add	r4, sp, #32
 8005502:	6163      	str	r3, [r4, #20]
 8005504:	3320      	adds	r3, #32
 8005506:	7663      	strb	r3, [r4, #25]
 8005508:	3310      	adds	r3, #16
 800550a:	76a3      	strb	r3, [r4, #26]
 800550c:	9507      	str	r5, [sp, #28]
 800550e:	0035      	movs	r5, r6
 8005510:	782b      	ldrb	r3, [r5, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <_svfiprintf_r+0x52>
 8005516:	2b25      	cmp	r3, #37	; 0x25
 8005518:	d147      	bne.n	80055aa <_svfiprintf_r+0xe2>
 800551a:	1bab      	subs	r3, r5, r6
 800551c:	9305      	str	r3, [sp, #20]
 800551e:	42b5      	cmp	r5, r6
 8005520:	d00c      	beq.n	800553c <_svfiprintf_r+0x74>
 8005522:	0032      	movs	r2, r6
 8005524:	0039      	movs	r1, r7
 8005526:	9803      	ldr	r0, [sp, #12]
 8005528:	f7ff ff6c 	bl	8005404 <__ssputs_r>
 800552c:	1c43      	adds	r3, r0, #1
 800552e:	d100      	bne.n	8005532 <_svfiprintf_r+0x6a>
 8005530:	e0ae      	b.n	8005690 <_svfiprintf_r+0x1c8>
 8005532:	6962      	ldr	r2, [r4, #20]
 8005534:	9b05      	ldr	r3, [sp, #20]
 8005536:	4694      	mov	ip, r2
 8005538:	4463      	add	r3, ip
 800553a:	6163      	str	r3, [r4, #20]
 800553c:	782b      	ldrb	r3, [r5, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d100      	bne.n	8005544 <_svfiprintf_r+0x7c>
 8005542:	e0a5      	b.n	8005690 <_svfiprintf_r+0x1c8>
 8005544:	2201      	movs	r2, #1
 8005546:	2300      	movs	r3, #0
 8005548:	4252      	negs	r2, r2
 800554a:	6062      	str	r2, [r4, #4]
 800554c:	a904      	add	r1, sp, #16
 800554e:	3254      	adds	r2, #84	; 0x54
 8005550:	1852      	adds	r2, r2, r1
 8005552:	1c6e      	adds	r6, r5, #1
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	60e3      	str	r3, [r4, #12]
 8005558:	60a3      	str	r3, [r4, #8]
 800555a:	7013      	strb	r3, [r2, #0]
 800555c:	65a3      	str	r3, [r4, #88]	; 0x58
 800555e:	2205      	movs	r2, #5
 8005560:	7831      	ldrb	r1, [r6, #0]
 8005562:	4854      	ldr	r0, [pc, #336]	; (80056b4 <_svfiprintf_r+0x1ec>)
 8005564:	f000 feba 	bl	80062dc <memchr>
 8005568:	1c75      	adds	r5, r6, #1
 800556a:	2800      	cmp	r0, #0
 800556c:	d11f      	bne.n	80055ae <_svfiprintf_r+0xe6>
 800556e:	6822      	ldr	r2, [r4, #0]
 8005570:	06d3      	lsls	r3, r2, #27
 8005572:	d504      	bpl.n	800557e <_svfiprintf_r+0xb6>
 8005574:	2353      	movs	r3, #83	; 0x53
 8005576:	a904      	add	r1, sp, #16
 8005578:	185b      	adds	r3, r3, r1
 800557a:	2120      	movs	r1, #32
 800557c:	7019      	strb	r1, [r3, #0]
 800557e:	0713      	lsls	r3, r2, #28
 8005580:	d504      	bpl.n	800558c <_svfiprintf_r+0xc4>
 8005582:	2353      	movs	r3, #83	; 0x53
 8005584:	a904      	add	r1, sp, #16
 8005586:	185b      	adds	r3, r3, r1
 8005588:	212b      	movs	r1, #43	; 0x2b
 800558a:	7019      	strb	r1, [r3, #0]
 800558c:	7833      	ldrb	r3, [r6, #0]
 800558e:	2b2a      	cmp	r3, #42	; 0x2a
 8005590:	d016      	beq.n	80055c0 <_svfiprintf_r+0xf8>
 8005592:	0035      	movs	r5, r6
 8005594:	2100      	movs	r1, #0
 8005596:	200a      	movs	r0, #10
 8005598:	68e3      	ldr	r3, [r4, #12]
 800559a:	782a      	ldrb	r2, [r5, #0]
 800559c:	1c6e      	adds	r6, r5, #1
 800559e:	3a30      	subs	r2, #48	; 0x30
 80055a0:	2a09      	cmp	r2, #9
 80055a2:	d94e      	bls.n	8005642 <_svfiprintf_r+0x17a>
 80055a4:	2900      	cmp	r1, #0
 80055a6:	d111      	bne.n	80055cc <_svfiprintf_r+0x104>
 80055a8:	e017      	b.n	80055da <_svfiprintf_r+0x112>
 80055aa:	3501      	adds	r5, #1
 80055ac:	e7b0      	b.n	8005510 <_svfiprintf_r+0x48>
 80055ae:	4b41      	ldr	r3, [pc, #260]	; (80056b4 <_svfiprintf_r+0x1ec>)
 80055b0:	6822      	ldr	r2, [r4, #0]
 80055b2:	1ac0      	subs	r0, r0, r3
 80055b4:	2301      	movs	r3, #1
 80055b6:	4083      	lsls	r3, r0
 80055b8:	4313      	orrs	r3, r2
 80055ba:	002e      	movs	r6, r5
 80055bc:	6023      	str	r3, [r4, #0]
 80055be:	e7ce      	b.n	800555e <_svfiprintf_r+0x96>
 80055c0:	9b07      	ldr	r3, [sp, #28]
 80055c2:	1d19      	adds	r1, r3, #4
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	9107      	str	r1, [sp, #28]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	db01      	blt.n	80055d0 <_svfiprintf_r+0x108>
 80055cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80055ce:	e004      	b.n	80055da <_svfiprintf_r+0x112>
 80055d0:	425b      	negs	r3, r3
 80055d2:	60e3      	str	r3, [r4, #12]
 80055d4:	2302      	movs	r3, #2
 80055d6:	4313      	orrs	r3, r2
 80055d8:	6023      	str	r3, [r4, #0]
 80055da:	782b      	ldrb	r3, [r5, #0]
 80055dc:	2b2e      	cmp	r3, #46	; 0x2e
 80055de:	d10a      	bne.n	80055f6 <_svfiprintf_r+0x12e>
 80055e0:	786b      	ldrb	r3, [r5, #1]
 80055e2:	2b2a      	cmp	r3, #42	; 0x2a
 80055e4:	d135      	bne.n	8005652 <_svfiprintf_r+0x18a>
 80055e6:	9b07      	ldr	r3, [sp, #28]
 80055e8:	3502      	adds	r5, #2
 80055ea:	1d1a      	adds	r2, r3, #4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	9207      	str	r2, [sp, #28]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	db2b      	blt.n	800564c <_svfiprintf_r+0x184>
 80055f4:	9309      	str	r3, [sp, #36]	; 0x24
 80055f6:	4e30      	ldr	r6, [pc, #192]	; (80056b8 <_svfiprintf_r+0x1f0>)
 80055f8:	2203      	movs	r2, #3
 80055fa:	0030      	movs	r0, r6
 80055fc:	7829      	ldrb	r1, [r5, #0]
 80055fe:	f000 fe6d 	bl	80062dc <memchr>
 8005602:	2800      	cmp	r0, #0
 8005604:	d006      	beq.n	8005614 <_svfiprintf_r+0x14c>
 8005606:	2340      	movs	r3, #64	; 0x40
 8005608:	1b80      	subs	r0, r0, r6
 800560a:	4083      	lsls	r3, r0
 800560c:	6822      	ldr	r2, [r4, #0]
 800560e:	3501      	adds	r5, #1
 8005610:	4313      	orrs	r3, r2
 8005612:	6023      	str	r3, [r4, #0]
 8005614:	7829      	ldrb	r1, [r5, #0]
 8005616:	2206      	movs	r2, #6
 8005618:	4828      	ldr	r0, [pc, #160]	; (80056bc <_svfiprintf_r+0x1f4>)
 800561a:	1c6e      	adds	r6, r5, #1
 800561c:	7621      	strb	r1, [r4, #24]
 800561e:	f000 fe5d 	bl	80062dc <memchr>
 8005622:	2800      	cmp	r0, #0
 8005624:	d03c      	beq.n	80056a0 <_svfiprintf_r+0x1d8>
 8005626:	4b26      	ldr	r3, [pc, #152]	; (80056c0 <_svfiprintf_r+0x1f8>)
 8005628:	2b00      	cmp	r3, #0
 800562a:	d125      	bne.n	8005678 <_svfiprintf_r+0x1b0>
 800562c:	2207      	movs	r2, #7
 800562e:	9b07      	ldr	r3, [sp, #28]
 8005630:	3307      	adds	r3, #7
 8005632:	4393      	bics	r3, r2
 8005634:	3308      	adds	r3, #8
 8005636:	9307      	str	r3, [sp, #28]
 8005638:	6963      	ldr	r3, [r4, #20]
 800563a:	9a04      	ldr	r2, [sp, #16]
 800563c:	189b      	adds	r3, r3, r2
 800563e:	6163      	str	r3, [r4, #20]
 8005640:	e765      	b.n	800550e <_svfiprintf_r+0x46>
 8005642:	4343      	muls	r3, r0
 8005644:	0035      	movs	r5, r6
 8005646:	2101      	movs	r1, #1
 8005648:	189b      	adds	r3, r3, r2
 800564a:	e7a6      	b.n	800559a <_svfiprintf_r+0xd2>
 800564c:	2301      	movs	r3, #1
 800564e:	425b      	negs	r3, r3
 8005650:	e7d0      	b.n	80055f4 <_svfiprintf_r+0x12c>
 8005652:	2300      	movs	r3, #0
 8005654:	200a      	movs	r0, #10
 8005656:	001a      	movs	r2, r3
 8005658:	3501      	adds	r5, #1
 800565a:	6063      	str	r3, [r4, #4]
 800565c:	7829      	ldrb	r1, [r5, #0]
 800565e:	1c6e      	adds	r6, r5, #1
 8005660:	3930      	subs	r1, #48	; 0x30
 8005662:	2909      	cmp	r1, #9
 8005664:	d903      	bls.n	800566e <_svfiprintf_r+0x1a6>
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0c5      	beq.n	80055f6 <_svfiprintf_r+0x12e>
 800566a:	9209      	str	r2, [sp, #36]	; 0x24
 800566c:	e7c3      	b.n	80055f6 <_svfiprintf_r+0x12e>
 800566e:	4342      	muls	r2, r0
 8005670:	0035      	movs	r5, r6
 8005672:	2301      	movs	r3, #1
 8005674:	1852      	adds	r2, r2, r1
 8005676:	e7f1      	b.n	800565c <_svfiprintf_r+0x194>
 8005678:	ab07      	add	r3, sp, #28
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	003a      	movs	r2, r7
 800567e:	0021      	movs	r1, r4
 8005680:	4b10      	ldr	r3, [pc, #64]	; (80056c4 <_svfiprintf_r+0x1fc>)
 8005682:	9803      	ldr	r0, [sp, #12]
 8005684:	e000      	b.n	8005688 <_svfiprintf_r+0x1c0>
 8005686:	bf00      	nop
 8005688:	9004      	str	r0, [sp, #16]
 800568a:	9b04      	ldr	r3, [sp, #16]
 800568c:	3301      	adds	r3, #1
 800568e:	d1d3      	bne.n	8005638 <_svfiprintf_r+0x170>
 8005690:	89bb      	ldrh	r3, [r7, #12]
 8005692:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005694:	065b      	lsls	r3, r3, #25
 8005696:	d400      	bmi.n	800569a <_svfiprintf_r+0x1d2>
 8005698:	e72d      	b.n	80054f6 <_svfiprintf_r+0x2e>
 800569a:	2001      	movs	r0, #1
 800569c:	4240      	negs	r0, r0
 800569e:	e72a      	b.n	80054f6 <_svfiprintf_r+0x2e>
 80056a0:	ab07      	add	r3, sp, #28
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	003a      	movs	r2, r7
 80056a6:	0021      	movs	r1, r4
 80056a8:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <_svfiprintf_r+0x1fc>)
 80056aa:	9803      	ldr	r0, [sp, #12]
 80056ac:	f000 f9de 	bl	8005a6c <_printf_i>
 80056b0:	e7ea      	b.n	8005688 <_svfiprintf_r+0x1c0>
 80056b2:	46c0      	nop			; (mov r8, r8)
 80056b4:	080067fe 	.word	0x080067fe
 80056b8:	08006804 	.word	0x08006804
 80056bc:	08006808 	.word	0x08006808
 80056c0:	00000000 	.word	0x00000000
 80056c4:	08005405 	.word	0x08005405

080056c8 <__sfputc_r>:
 80056c8:	6893      	ldr	r3, [r2, #8]
 80056ca:	b510      	push	{r4, lr}
 80056cc:	3b01      	subs	r3, #1
 80056ce:	6093      	str	r3, [r2, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	da04      	bge.n	80056de <__sfputc_r+0x16>
 80056d4:	6994      	ldr	r4, [r2, #24]
 80056d6:	42a3      	cmp	r3, r4
 80056d8:	db07      	blt.n	80056ea <__sfputc_r+0x22>
 80056da:	290a      	cmp	r1, #10
 80056dc:	d005      	beq.n	80056ea <__sfputc_r+0x22>
 80056de:	6813      	ldr	r3, [r2, #0]
 80056e0:	1c58      	adds	r0, r3, #1
 80056e2:	6010      	str	r0, [r2, #0]
 80056e4:	7019      	strb	r1, [r3, #0]
 80056e6:	0008      	movs	r0, r1
 80056e8:	bd10      	pop	{r4, pc}
 80056ea:	f000 fae3 	bl	8005cb4 <__swbuf_r>
 80056ee:	0001      	movs	r1, r0
 80056f0:	e7f9      	b.n	80056e6 <__sfputc_r+0x1e>

080056f2 <__sfputs_r>:
 80056f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f4:	0006      	movs	r6, r0
 80056f6:	000f      	movs	r7, r1
 80056f8:	0014      	movs	r4, r2
 80056fa:	18d5      	adds	r5, r2, r3
 80056fc:	42ac      	cmp	r4, r5
 80056fe:	d101      	bne.n	8005704 <__sfputs_r+0x12>
 8005700:	2000      	movs	r0, #0
 8005702:	e007      	b.n	8005714 <__sfputs_r+0x22>
 8005704:	7821      	ldrb	r1, [r4, #0]
 8005706:	003a      	movs	r2, r7
 8005708:	0030      	movs	r0, r6
 800570a:	f7ff ffdd 	bl	80056c8 <__sfputc_r>
 800570e:	3401      	adds	r4, #1
 8005710:	1c43      	adds	r3, r0, #1
 8005712:	d1f3      	bne.n	80056fc <__sfputs_r+0xa>
 8005714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005718 <_vfiprintf_r>:
 8005718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800571a:	b0a1      	sub	sp, #132	; 0x84
 800571c:	0006      	movs	r6, r0
 800571e:	000c      	movs	r4, r1
 8005720:	001f      	movs	r7, r3
 8005722:	9203      	str	r2, [sp, #12]
 8005724:	2800      	cmp	r0, #0
 8005726:	d004      	beq.n	8005732 <_vfiprintf_r+0x1a>
 8005728:	6983      	ldr	r3, [r0, #24]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <_vfiprintf_r+0x1a>
 800572e:	f000 fcc5 	bl	80060bc <__sinit>
 8005732:	4b8e      	ldr	r3, [pc, #568]	; (800596c <_vfiprintf_r+0x254>)
 8005734:	429c      	cmp	r4, r3
 8005736:	d11c      	bne.n	8005772 <_vfiprintf_r+0x5a>
 8005738:	6874      	ldr	r4, [r6, #4]
 800573a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800573c:	07db      	lsls	r3, r3, #31
 800573e:	d405      	bmi.n	800574c <_vfiprintf_r+0x34>
 8005740:	89a3      	ldrh	r3, [r4, #12]
 8005742:	059b      	lsls	r3, r3, #22
 8005744:	d402      	bmi.n	800574c <_vfiprintf_r+0x34>
 8005746:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005748:	f000 fd59 	bl	80061fe <__retarget_lock_acquire_recursive>
 800574c:	89a3      	ldrh	r3, [r4, #12]
 800574e:	071b      	lsls	r3, r3, #28
 8005750:	d502      	bpl.n	8005758 <_vfiprintf_r+0x40>
 8005752:	6923      	ldr	r3, [r4, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d11d      	bne.n	8005794 <_vfiprintf_r+0x7c>
 8005758:	0021      	movs	r1, r4
 800575a:	0030      	movs	r0, r6
 800575c:	f000 fb00 	bl	8005d60 <__swsetup_r>
 8005760:	2800      	cmp	r0, #0
 8005762:	d017      	beq.n	8005794 <_vfiprintf_r+0x7c>
 8005764:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005766:	07db      	lsls	r3, r3, #31
 8005768:	d50d      	bpl.n	8005786 <_vfiprintf_r+0x6e>
 800576a:	2001      	movs	r0, #1
 800576c:	4240      	negs	r0, r0
 800576e:	b021      	add	sp, #132	; 0x84
 8005770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005772:	4b7f      	ldr	r3, [pc, #508]	; (8005970 <_vfiprintf_r+0x258>)
 8005774:	429c      	cmp	r4, r3
 8005776:	d101      	bne.n	800577c <_vfiprintf_r+0x64>
 8005778:	68b4      	ldr	r4, [r6, #8]
 800577a:	e7de      	b.n	800573a <_vfiprintf_r+0x22>
 800577c:	4b7d      	ldr	r3, [pc, #500]	; (8005974 <_vfiprintf_r+0x25c>)
 800577e:	429c      	cmp	r4, r3
 8005780:	d1db      	bne.n	800573a <_vfiprintf_r+0x22>
 8005782:	68f4      	ldr	r4, [r6, #12]
 8005784:	e7d9      	b.n	800573a <_vfiprintf_r+0x22>
 8005786:	89a3      	ldrh	r3, [r4, #12]
 8005788:	059b      	lsls	r3, r3, #22
 800578a:	d4ee      	bmi.n	800576a <_vfiprintf_r+0x52>
 800578c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800578e:	f000 fd37 	bl	8006200 <__retarget_lock_release_recursive>
 8005792:	e7ea      	b.n	800576a <_vfiprintf_r+0x52>
 8005794:	2300      	movs	r3, #0
 8005796:	ad08      	add	r5, sp, #32
 8005798:	616b      	str	r3, [r5, #20]
 800579a:	3320      	adds	r3, #32
 800579c:	766b      	strb	r3, [r5, #25]
 800579e:	3310      	adds	r3, #16
 80057a0:	76ab      	strb	r3, [r5, #26]
 80057a2:	9707      	str	r7, [sp, #28]
 80057a4:	9f03      	ldr	r7, [sp, #12]
 80057a6:	783b      	ldrb	r3, [r7, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <_vfiprintf_r+0x98>
 80057ac:	2b25      	cmp	r3, #37	; 0x25
 80057ae:	d14e      	bne.n	800584e <_vfiprintf_r+0x136>
 80057b0:	9b03      	ldr	r3, [sp, #12]
 80057b2:	1afb      	subs	r3, r7, r3
 80057b4:	9305      	str	r3, [sp, #20]
 80057b6:	9b03      	ldr	r3, [sp, #12]
 80057b8:	429f      	cmp	r7, r3
 80057ba:	d00d      	beq.n	80057d8 <_vfiprintf_r+0xc0>
 80057bc:	9b05      	ldr	r3, [sp, #20]
 80057be:	0021      	movs	r1, r4
 80057c0:	0030      	movs	r0, r6
 80057c2:	9a03      	ldr	r2, [sp, #12]
 80057c4:	f7ff ff95 	bl	80056f2 <__sfputs_r>
 80057c8:	1c43      	adds	r3, r0, #1
 80057ca:	d100      	bne.n	80057ce <_vfiprintf_r+0xb6>
 80057cc:	e0b5      	b.n	800593a <_vfiprintf_r+0x222>
 80057ce:	696a      	ldr	r2, [r5, #20]
 80057d0:	9b05      	ldr	r3, [sp, #20]
 80057d2:	4694      	mov	ip, r2
 80057d4:	4463      	add	r3, ip
 80057d6:	616b      	str	r3, [r5, #20]
 80057d8:	783b      	ldrb	r3, [r7, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d100      	bne.n	80057e0 <_vfiprintf_r+0xc8>
 80057de:	e0ac      	b.n	800593a <_vfiprintf_r+0x222>
 80057e0:	2201      	movs	r2, #1
 80057e2:	1c7b      	adds	r3, r7, #1
 80057e4:	9303      	str	r3, [sp, #12]
 80057e6:	2300      	movs	r3, #0
 80057e8:	4252      	negs	r2, r2
 80057ea:	606a      	str	r2, [r5, #4]
 80057ec:	a904      	add	r1, sp, #16
 80057ee:	3254      	adds	r2, #84	; 0x54
 80057f0:	1852      	adds	r2, r2, r1
 80057f2:	602b      	str	r3, [r5, #0]
 80057f4:	60eb      	str	r3, [r5, #12]
 80057f6:	60ab      	str	r3, [r5, #8]
 80057f8:	7013      	strb	r3, [r2, #0]
 80057fa:	65ab      	str	r3, [r5, #88]	; 0x58
 80057fc:	9b03      	ldr	r3, [sp, #12]
 80057fe:	2205      	movs	r2, #5
 8005800:	7819      	ldrb	r1, [r3, #0]
 8005802:	485d      	ldr	r0, [pc, #372]	; (8005978 <_vfiprintf_r+0x260>)
 8005804:	f000 fd6a 	bl	80062dc <memchr>
 8005808:	9b03      	ldr	r3, [sp, #12]
 800580a:	1c5f      	adds	r7, r3, #1
 800580c:	2800      	cmp	r0, #0
 800580e:	d120      	bne.n	8005852 <_vfiprintf_r+0x13a>
 8005810:	682a      	ldr	r2, [r5, #0]
 8005812:	06d3      	lsls	r3, r2, #27
 8005814:	d504      	bpl.n	8005820 <_vfiprintf_r+0x108>
 8005816:	2353      	movs	r3, #83	; 0x53
 8005818:	a904      	add	r1, sp, #16
 800581a:	185b      	adds	r3, r3, r1
 800581c:	2120      	movs	r1, #32
 800581e:	7019      	strb	r1, [r3, #0]
 8005820:	0713      	lsls	r3, r2, #28
 8005822:	d504      	bpl.n	800582e <_vfiprintf_r+0x116>
 8005824:	2353      	movs	r3, #83	; 0x53
 8005826:	a904      	add	r1, sp, #16
 8005828:	185b      	adds	r3, r3, r1
 800582a:	212b      	movs	r1, #43	; 0x2b
 800582c:	7019      	strb	r1, [r3, #0]
 800582e:	9b03      	ldr	r3, [sp, #12]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b2a      	cmp	r3, #42	; 0x2a
 8005834:	d016      	beq.n	8005864 <_vfiprintf_r+0x14c>
 8005836:	2100      	movs	r1, #0
 8005838:	68eb      	ldr	r3, [r5, #12]
 800583a:	9f03      	ldr	r7, [sp, #12]
 800583c:	783a      	ldrb	r2, [r7, #0]
 800583e:	1c78      	adds	r0, r7, #1
 8005840:	3a30      	subs	r2, #48	; 0x30
 8005842:	4684      	mov	ip, r0
 8005844:	2a09      	cmp	r2, #9
 8005846:	d94f      	bls.n	80058e8 <_vfiprintf_r+0x1d0>
 8005848:	2900      	cmp	r1, #0
 800584a:	d111      	bne.n	8005870 <_vfiprintf_r+0x158>
 800584c:	e017      	b.n	800587e <_vfiprintf_r+0x166>
 800584e:	3701      	adds	r7, #1
 8005850:	e7a9      	b.n	80057a6 <_vfiprintf_r+0x8e>
 8005852:	4b49      	ldr	r3, [pc, #292]	; (8005978 <_vfiprintf_r+0x260>)
 8005854:	682a      	ldr	r2, [r5, #0]
 8005856:	1ac0      	subs	r0, r0, r3
 8005858:	2301      	movs	r3, #1
 800585a:	4083      	lsls	r3, r0
 800585c:	4313      	orrs	r3, r2
 800585e:	602b      	str	r3, [r5, #0]
 8005860:	9703      	str	r7, [sp, #12]
 8005862:	e7cb      	b.n	80057fc <_vfiprintf_r+0xe4>
 8005864:	9b07      	ldr	r3, [sp, #28]
 8005866:	1d19      	adds	r1, r3, #4
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	9107      	str	r1, [sp, #28]
 800586c:	2b00      	cmp	r3, #0
 800586e:	db01      	blt.n	8005874 <_vfiprintf_r+0x15c>
 8005870:	930b      	str	r3, [sp, #44]	; 0x2c
 8005872:	e004      	b.n	800587e <_vfiprintf_r+0x166>
 8005874:	425b      	negs	r3, r3
 8005876:	60eb      	str	r3, [r5, #12]
 8005878:	2302      	movs	r3, #2
 800587a:	4313      	orrs	r3, r2
 800587c:	602b      	str	r3, [r5, #0]
 800587e:	783b      	ldrb	r3, [r7, #0]
 8005880:	2b2e      	cmp	r3, #46	; 0x2e
 8005882:	d10a      	bne.n	800589a <_vfiprintf_r+0x182>
 8005884:	787b      	ldrb	r3, [r7, #1]
 8005886:	2b2a      	cmp	r3, #42	; 0x2a
 8005888:	d137      	bne.n	80058fa <_vfiprintf_r+0x1e2>
 800588a:	9b07      	ldr	r3, [sp, #28]
 800588c:	3702      	adds	r7, #2
 800588e:	1d1a      	adds	r2, r3, #4
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	9207      	str	r2, [sp, #28]
 8005894:	2b00      	cmp	r3, #0
 8005896:	db2d      	blt.n	80058f4 <_vfiprintf_r+0x1dc>
 8005898:	9309      	str	r3, [sp, #36]	; 0x24
 800589a:	2203      	movs	r2, #3
 800589c:	7839      	ldrb	r1, [r7, #0]
 800589e:	4837      	ldr	r0, [pc, #220]	; (800597c <_vfiprintf_r+0x264>)
 80058a0:	f000 fd1c 	bl	80062dc <memchr>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d007      	beq.n	80058b8 <_vfiprintf_r+0x1a0>
 80058a8:	4b34      	ldr	r3, [pc, #208]	; (800597c <_vfiprintf_r+0x264>)
 80058aa:	682a      	ldr	r2, [r5, #0]
 80058ac:	1ac0      	subs	r0, r0, r3
 80058ae:	2340      	movs	r3, #64	; 0x40
 80058b0:	4083      	lsls	r3, r0
 80058b2:	4313      	orrs	r3, r2
 80058b4:	3701      	adds	r7, #1
 80058b6:	602b      	str	r3, [r5, #0]
 80058b8:	7839      	ldrb	r1, [r7, #0]
 80058ba:	1c7b      	adds	r3, r7, #1
 80058bc:	2206      	movs	r2, #6
 80058be:	4830      	ldr	r0, [pc, #192]	; (8005980 <_vfiprintf_r+0x268>)
 80058c0:	9303      	str	r3, [sp, #12]
 80058c2:	7629      	strb	r1, [r5, #24]
 80058c4:	f000 fd0a 	bl	80062dc <memchr>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d045      	beq.n	8005958 <_vfiprintf_r+0x240>
 80058cc:	4b2d      	ldr	r3, [pc, #180]	; (8005984 <_vfiprintf_r+0x26c>)
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d127      	bne.n	8005922 <_vfiprintf_r+0x20a>
 80058d2:	2207      	movs	r2, #7
 80058d4:	9b07      	ldr	r3, [sp, #28]
 80058d6:	3307      	adds	r3, #7
 80058d8:	4393      	bics	r3, r2
 80058da:	3308      	adds	r3, #8
 80058dc:	9307      	str	r3, [sp, #28]
 80058de:	696b      	ldr	r3, [r5, #20]
 80058e0:	9a04      	ldr	r2, [sp, #16]
 80058e2:	189b      	adds	r3, r3, r2
 80058e4:	616b      	str	r3, [r5, #20]
 80058e6:	e75d      	b.n	80057a4 <_vfiprintf_r+0x8c>
 80058e8:	210a      	movs	r1, #10
 80058ea:	434b      	muls	r3, r1
 80058ec:	4667      	mov	r7, ip
 80058ee:	189b      	adds	r3, r3, r2
 80058f0:	3909      	subs	r1, #9
 80058f2:	e7a3      	b.n	800583c <_vfiprintf_r+0x124>
 80058f4:	2301      	movs	r3, #1
 80058f6:	425b      	negs	r3, r3
 80058f8:	e7ce      	b.n	8005898 <_vfiprintf_r+0x180>
 80058fa:	2300      	movs	r3, #0
 80058fc:	001a      	movs	r2, r3
 80058fe:	3701      	adds	r7, #1
 8005900:	606b      	str	r3, [r5, #4]
 8005902:	7839      	ldrb	r1, [r7, #0]
 8005904:	1c78      	adds	r0, r7, #1
 8005906:	3930      	subs	r1, #48	; 0x30
 8005908:	4684      	mov	ip, r0
 800590a:	2909      	cmp	r1, #9
 800590c:	d903      	bls.n	8005916 <_vfiprintf_r+0x1fe>
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0c3      	beq.n	800589a <_vfiprintf_r+0x182>
 8005912:	9209      	str	r2, [sp, #36]	; 0x24
 8005914:	e7c1      	b.n	800589a <_vfiprintf_r+0x182>
 8005916:	230a      	movs	r3, #10
 8005918:	435a      	muls	r2, r3
 800591a:	4667      	mov	r7, ip
 800591c:	1852      	adds	r2, r2, r1
 800591e:	3b09      	subs	r3, #9
 8005920:	e7ef      	b.n	8005902 <_vfiprintf_r+0x1ea>
 8005922:	ab07      	add	r3, sp, #28
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	0022      	movs	r2, r4
 8005928:	0029      	movs	r1, r5
 800592a:	0030      	movs	r0, r6
 800592c:	4b16      	ldr	r3, [pc, #88]	; (8005988 <_vfiprintf_r+0x270>)
 800592e:	e000      	b.n	8005932 <_vfiprintf_r+0x21a>
 8005930:	bf00      	nop
 8005932:	9004      	str	r0, [sp, #16]
 8005934:	9b04      	ldr	r3, [sp, #16]
 8005936:	3301      	adds	r3, #1
 8005938:	d1d1      	bne.n	80058de <_vfiprintf_r+0x1c6>
 800593a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800593c:	07db      	lsls	r3, r3, #31
 800593e:	d405      	bmi.n	800594c <_vfiprintf_r+0x234>
 8005940:	89a3      	ldrh	r3, [r4, #12]
 8005942:	059b      	lsls	r3, r3, #22
 8005944:	d402      	bmi.n	800594c <_vfiprintf_r+0x234>
 8005946:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005948:	f000 fc5a 	bl	8006200 <__retarget_lock_release_recursive>
 800594c:	89a3      	ldrh	r3, [r4, #12]
 800594e:	065b      	lsls	r3, r3, #25
 8005950:	d500      	bpl.n	8005954 <_vfiprintf_r+0x23c>
 8005952:	e70a      	b.n	800576a <_vfiprintf_r+0x52>
 8005954:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005956:	e70a      	b.n	800576e <_vfiprintf_r+0x56>
 8005958:	ab07      	add	r3, sp, #28
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	0022      	movs	r2, r4
 800595e:	0029      	movs	r1, r5
 8005960:	0030      	movs	r0, r6
 8005962:	4b09      	ldr	r3, [pc, #36]	; (8005988 <_vfiprintf_r+0x270>)
 8005964:	f000 f882 	bl	8005a6c <_printf_i>
 8005968:	e7e3      	b.n	8005932 <_vfiprintf_r+0x21a>
 800596a:	46c0      	nop			; (mov r8, r8)
 800596c:	08006854 	.word	0x08006854
 8005970:	08006874 	.word	0x08006874
 8005974:	08006834 	.word	0x08006834
 8005978:	080067fe 	.word	0x080067fe
 800597c:	08006804 	.word	0x08006804
 8005980:	08006808 	.word	0x08006808
 8005984:	00000000 	.word	0x00000000
 8005988:	080056f3 	.word	0x080056f3

0800598c <_printf_common>:
 800598c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800598e:	0015      	movs	r5, r2
 8005990:	9301      	str	r3, [sp, #4]
 8005992:	688a      	ldr	r2, [r1, #8]
 8005994:	690b      	ldr	r3, [r1, #16]
 8005996:	000c      	movs	r4, r1
 8005998:	9000      	str	r0, [sp, #0]
 800599a:	4293      	cmp	r3, r2
 800599c:	da00      	bge.n	80059a0 <_printf_common+0x14>
 800599e:	0013      	movs	r3, r2
 80059a0:	0022      	movs	r2, r4
 80059a2:	602b      	str	r3, [r5, #0]
 80059a4:	3243      	adds	r2, #67	; 0x43
 80059a6:	7812      	ldrb	r2, [r2, #0]
 80059a8:	2a00      	cmp	r2, #0
 80059aa:	d001      	beq.n	80059b0 <_printf_common+0x24>
 80059ac:	3301      	adds	r3, #1
 80059ae:	602b      	str	r3, [r5, #0]
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	069b      	lsls	r3, r3, #26
 80059b4:	d502      	bpl.n	80059bc <_printf_common+0x30>
 80059b6:	682b      	ldr	r3, [r5, #0]
 80059b8:	3302      	adds	r3, #2
 80059ba:	602b      	str	r3, [r5, #0]
 80059bc:	6822      	ldr	r2, [r4, #0]
 80059be:	2306      	movs	r3, #6
 80059c0:	0017      	movs	r7, r2
 80059c2:	401f      	ands	r7, r3
 80059c4:	421a      	tst	r2, r3
 80059c6:	d027      	beq.n	8005a18 <_printf_common+0x8c>
 80059c8:	0023      	movs	r3, r4
 80059ca:	3343      	adds	r3, #67	; 0x43
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	1e5a      	subs	r2, r3, #1
 80059d0:	4193      	sbcs	r3, r2
 80059d2:	6822      	ldr	r2, [r4, #0]
 80059d4:	0692      	lsls	r2, r2, #26
 80059d6:	d430      	bmi.n	8005a3a <_printf_common+0xae>
 80059d8:	0022      	movs	r2, r4
 80059da:	9901      	ldr	r1, [sp, #4]
 80059dc:	9800      	ldr	r0, [sp, #0]
 80059de:	9e08      	ldr	r6, [sp, #32]
 80059e0:	3243      	adds	r2, #67	; 0x43
 80059e2:	47b0      	blx	r6
 80059e4:	1c43      	adds	r3, r0, #1
 80059e6:	d025      	beq.n	8005a34 <_printf_common+0xa8>
 80059e8:	2306      	movs	r3, #6
 80059ea:	6820      	ldr	r0, [r4, #0]
 80059ec:	682a      	ldr	r2, [r5, #0]
 80059ee:	68e1      	ldr	r1, [r4, #12]
 80059f0:	2500      	movs	r5, #0
 80059f2:	4003      	ands	r3, r0
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	d103      	bne.n	8005a00 <_printf_common+0x74>
 80059f8:	1a8d      	subs	r5, r1, r2
 80059fa:	43eb      	mvns	r3, r5
 80059fc:	17db      	asrs	r3, r3, #31
 80059fe:	401d      	ands	r5, r3
 8005a00:	68a3      	ldr	r3, [r4, #8]
 8005a02:	6922      	ldr	r2, [r4, #16]
 8005a04:	4293      	cmp	r3, r2
 8005a06:	dd01      	ble.n	8005a0c <_printf_common+0x80>
 8005a08:	1a9b      	subs	r3, r3, r2
 8005a0a:	18ed      	adds	r5, r5, r3
 8005a0c:	2700      	movs	r7, #0
 8005a0e:	42bd      	cmp	r5, r7
 8005a10:	d120      	bne.n	8005a54 <_printf_common+0xc8>
 8005a12:	2000      	movs	r0, #0
 8005a14:	e010      	b.n	8005a38 <_printf_common+0xac>
 8005a16:	3701      	adds	r7, #1
 8005a18:	68e3      	ldr	r3, [r4, #12]
 8005a1a:	682a      	ldr	r2, [r5, #0]
 8005a1c:	1a9b      	subs	r3, r3, r2
 8005a1e:	42bb      	cmp	r3, r7
 8005a20:	ddd2      	ble.n	80059c8 <_printf_common+0x3c>
 8005a22:	0022      	movs	r2, r4
 8005a24:	2301      	movs	r3, #1
 8005a26:	9901      	ldr	r1, [sp, #4]
 8005a28:	9800      	ldr	r0, [sp, #0]
 8005a2a:	9e08      	ldr	r6, [sp, #32]
 8005a2c:	3219      	adds	r2, #25
 8005a2e:	47b0      	blx	r6
 8005a30:	1c43      	adds	r3, r0, #1
 8005a32:	d1f0      	bne.n	8005a16 <_printf_common+0x8a>
 8005a34:	2001      	movs	r0, #1
 8005a36:	4240      	negs	r0, r0
 8005a38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a3a:	2030      	movs	r0, #48	; 0x30
 8005a3c:	18e1      	adds	r1, r4, r3
 8005a3e:	3143      	adds	r1, #67	; 0x43
 8005a40:	7008      	strb	r0, [r1, #0]
 8005a42:	0021      	movs	r1, r4
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	3145      	adds	r1, #69	; 0x45
 8005a48:	7809      	ldrb	r1, [r1, #0]
 8005a4a:	18a2      	adds	r2, r4, r2
 8005a4c:	3243      	adds	r2, #67	; 0x43
 8005a4e:	3302      	adds	r3, #2
 8005a50:	7011      	strb	r1, [r2, #0]
 8005a52:	e7c1      	b.n	80059d8 <_printf_common+0x4c>
 8005a54:	0022      	movs	r2, r4
 8005a56:	2301      	movs	r3, #1
 8005a58:	9901      	ldr	r1, [sp, #4]
 8005a5a:	9800      	ldr	r0, [sp, #0]
 8005a5c:	9e08      	ldr	r6, [sp, #32]
 8005a5e:	321a      	adds	r2, #26
 8005a60:	47b0      	blx	r6
 8005a62:	1c43      	adds	r3, r0, #1
 8005a64:	d0e6      	beq.n	8005a34 <_printf_common+0xa8>
 8005a66:	3701      	adds	r7, #1
 8005a68:	e7d1      	b.n	8005a0e <_printf_common+0x82>
	...

08005a6c <_printf_i>:
 8005a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a6e:	b08b      	sub	sp, #44	; 0x2c
 8005a70:	9206      	str	r2, [sp, #24]
 8005a72:	000a      	movs	r2, r1
 8005a74:	3243      	adds	r2, #67	; 0x43
 8005a76:	9307      	str	r3, [sp, #28]
 8005a78:	9005      	str	r0, [sp, #20]
 8005a7a:	9204      	str	r2, [sp, #16]
 8005a7c:	7e0a      	ldrb	r2, [r1, #24]
 8005a7e:	000c      	movs	r4, r1
 8005a80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a82:	2a78      	cmp	r2, #120	; 0x78
 8005a84:	d807      	bhi.n	8005a96 <_printf_i+0x2a>
 8005a86:	2a62      	cmp	r2, #98	; 0x62
 8005a88:	d809      	bhi.n	8005a9e <_printf_i+0x32>
 8005a8a:	2a00      	cmp	r2, #0
 8005a8c:	d100      	bne.n	8005a90 <_printf_i+0x24>
 8005a8e:	e0c1      	b.n	8005c14 <_printf_i+0x1a8>
 8005a90:	2a58      	cmp	r2, #88	; 0x58
 8005a92:	d100      	bne.n	8005a96 <_printf_i+0x2a>
 8005a94:	e08c      	b.n	8005bb0 <_printf_i+0x144>
 8005a96:	0026      	movs	r6, r4
 8005a98:	3642      	adds	r6, #66	; 0x42
 8005a9a:	7032      	strb	r2, [r6, #0]
 8005a9c:	e022      	b.n	8005ae4 <_printf_i+0x78>
 8005a9e:	0010      	movs	r0, r2
 8005aa0:	3863      	subs	r0, #99	; 0x63
 8005aa2:	2815      	cmp	r0, #21
 8005aa4:	d8f7      	bhi.n	8005a96 <_printf_i+0x2a>
 8005aa6:	f7fa fb37 	bl	8000118 <__gnu_thumb1_case_shi>
 8005aaa:	0016      	.short	0x0016
 8005aac:	fff6001f 	.word	0xfff6001f
 8005ab0:	fff6fff6 	.word	0xfff6fff6
 8005ab4:	001ffff6 	.word	0x001ffff6
 8005ab8:	fff6fff6 	.word	0xfff6fff6
 8005abc:	fff6fff6 	.word	0xfff6fff6
 8005ac0:	003600a8 	.word	0x003600a8
 8005ac4:	fff6009a 	.word	0xfff6009a
 8005ac8:	00b9fff6 	.word	0x00b9fff6
 8005acc:	0036fff6 	.word	0x0036fff6
 8005ad0:	fff6fff6 	.word	0xfff6fff6
 8005ad4:	009e      	.short	0x009e
 8005ad6:	0026      	movs	r6, r4
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	3642      	adds	r6, #66	; 0x42
 8005adc:	1d11      	adds	r1, r2, #4
 8005ade:	6019      	str	r1, [r3, #0]
 8005ae0:	6813      	ldr	r3, [r2, #0]
 8005ae2:	7033      	strb	r3, [r6, #0]
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e0a7      	b.n	8005c38 <_printf_i+0x1cc>
 8005ae8:	6808      	ldr	r0, [r1, #0]
 8005aea:	6819      	ldr	r1, [r3, #0]
 8005aec:	1d0a      	adds	r2, r1, #4
 8005aee:	0605      	lsls	r5, r0, #24
 8005af0:	d50b      	bpl.n	8005b0a <_printf_i+0x9e>
 8005af2:	680d      	ldr	r5, [r1, #0]
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	2d00      	cmp	r5, #0
 8005af8:	da03      	bge.n	8005b02 <_printf_i+0x96>
 8005afa:	232d      	movs	r3, #45	; 0x2d
 8005afc:	9a04      	ldr	r2, [sp, #16]
 8005afe:	426d      	negs	r5, r5
 8005b00:	7013      	strb	r3, [r2, #0]
 8005b02:	4b61      	ldr	r3, [pc, #388]	; (8005c88 <_printf_i+0x21c>)
 8005b04:	270a      	movs	r7, #10
 8005b06:	9303      	str	r3, [sp, #12]
 8005b08:	e01b      	b.n	8005b42 <_printf_i+0xd6>
 8005b0a:	680d      	ldr	r5, [r1, #0]
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	0641      	lsls	r1, r0, #25
 8005b10:	d5f1      	bpl.n	8005af6 <_printf_i+0x8a>
 8005b12:	b22d      	sxth	r5, r5
 8005b14:	e7ef      	b.n	8005af6 <_printf_i+0x8a>
 8005b16:	680d      	ldr	r5, [r1, #0]
 8005b18:	6819      	ldr	r1, [r3, #0]
 8005b1a:	1d08      	adds	r0, r1, #4
 8005b1c:	6018      	str	r0, [r3, #0]
 8005b1e:	062e      	lsls	r6, r5, #24
 8005b20:	d501      	bpl.n	8005b26 <_printf_i+0xba>
 8005b22:	680d      	ldr	r5, [r1, #0]
 8005b24:	e003      	b.n	8005b2e <_printf_i+0xc2>
 8005b26:	066d      	lsls	r5, r5, #25
 8005b28:	d5fb      	bpl.n	8005b22 <_printf_i+0xb6>
 8005b2a:	680d      	ldr	r5, [r1, #0]
 8005b2c:	b2ad      	uxth	r5, r5
 8005b2e:	4b56      	ldr	r3, [pc, #344]	; (8005c88 <_printf_i+0x21c>)
 8005b30:	2708      	movs	r7, #8
 8005b32:	9303      	str	r3, [sp, #12]
 8005b34:	2a6f      	cmp	r2, #111	; 0x6f
 8005b36:	d000      	beq.n	8005b3a <_printf_i+0xce>
 8005b38:	3702      	adds	r7, #2
 8005b3a:	0023      	movs	r3, r4
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	3343      	adds	r3, #67	; 0x43
 8005b40:	701a      	strb	r2, [r3, #0]
 8005b42:	6863      	ldr	r3, [r4, #4]
 8005b44:	60a3      	str	r3, [r4, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	db03      	blt.n	8005b52 <_printf_i+0xe6>
 8005b4a:	2204      	movs	r2, #4
 8005b4c:	6821      	ldr	r1, [r4, #0]
 8005b4e:	4391      	bics	r1, r2
 8005b50:	6021      	str	r1, [r4, #0]
 8005b52:	2d00      	cmp	r5, #0
 8005b54:	d102      	bne.n	8005b5c <_printf_i+0xf0>
 8005b56:	9e04      	ldr	r6, [sp, #16]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00c      	beq.n	8005b76 <_printf_i+0x10a>
 8005b5c:	9e04      	ldr	r6, [sp, #16]
 8005b5e:	0028      	movs	r0, r5
 8005b60:	0039      	movs	r1, r7
 8005b62:	f7fa fb69 	bl	8000238 <__aeabi_uidivmod>
 8005b66:	9b03      	ldr	r3, [sp, #12]
 8005b68:	3e01      	subs	r6, #1
 8005b6a:	5c5b      	ldrb	r3, [r3, r1]
 8005b6c:	7033      	strb	r3, [r6, #0]
 8005b6e:	002b      	movs	r3, r5
 8005b70:	0005      	movs	r5, r0
 8005b72:	429f      	cmp	r7, r3
 8005b74:	d9f3      	bls.n	8005b5e <_printf_i+0xf2>
 8005b76:	2f08      	cmp	r7, #8
 8005b78:	d109      	bne.n	8005b8e <_printf_i+0x122>
 8005b7a:	6823      	ldr	r3, [r4, #0]
 8005b7c:	07db      	lsls	r3, r3, #31
 8005b7e:	d506      	bpl.n	8005b8e <_printf_i+0x122>
 8005b80:	6863      	ldr	r3, [r4, #4]
 8005b82:	6922      	ldr	r2, [r4, #16]
 8005b84:	4293      	cmp	r3, r2
 8005b86:	dc02      	bgt.n	8005b8e <_printf_i+0x122>
 8005b88:	2330      	movs	r3, #48	; 0x30
 8005b8a:	3e01      	subs	r6, #1
 8005b8c:	7033      	strb	r3, [r6, #0]
 8005b8e:	9b04      	ldr	r3, [sp, #16]
 8005b90:	1b9b      	subs	r3, r3, r6
 8005b92:	6123      	str	r3, [r4, #16]
 8005b94:	9b07      	ldr	r3, [sp, #28]
 8005b96:	0021      	movs	r1, r4
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	9805      	ldr	r0, [sp, #20]
 8005b9c:	9b06      	ldr	r3, [sp, #24]
 8005b9e:	aa09      	add	r2, sp, #36	; 0x24
 8005ba0:	f7ff fef4 	bl	800598c <_printf_common>
 8005ba4:	1c43      	adds	r3, r0, #1
 8005ba6:	d14c      	bne.n	8005c42 <_printf_i+0x1d6>
 8005ba8:	2001      	movs	r0, #1
 8005baa:	4240      	negs	r0, r0
 8005bac:	b00b      	add	sp, #44	; 0x2c
 8005bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bb0:	3145      	adds	r1, #69	; 0x45
 8005bb2:	700a      	strb	r2, [r1, #0]
 8005bb4:	4a34      	ldr	r2, [pc, #208]	; (8005c88 <_printf_i+0x21c>)
 8005bb6:	9203      	str	r2, [sp, #12]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	6821      	ldr	r1, [r4, #0]
 8005bbc:	ca20      	ldmia	r2!, {r5}
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	0608      	lsls	r0, r1, #24
 8005bc2:	d516      	bpl.n	8005bf2 <_printf_i+0x186>
 8005bc4:	07cb      	lsls	r3, r1, #31
 8005bc6:	d502      	bpl.n	8005bce <_printf_i+0x162>
 8005bc8:	2320      	movs	r3, #32
 8005bca:	4319      	orrs	r1, r3
 8005bcc:	6021      	str	r1, [r4, #0]
 8005bce:	2710      	movs	r7, #16
 8005bd0:	2d00      	cmp	r5, #0
 8005bd2:	d1b2      	bne.n	8005b3a <_printf_i+0xce>
 8005bd4:	2320      	movs	r3, #32
 8005bd6:	6822      	ldr	r2, [r4, #0]
 8005bd8:	439a      	bics	r2, r3
 8005bda:	6022      	str	r2, [r4, #0]
 8005bdc:	e7ad      	b.n	8005b3a <_printf_i+0xce>
 8005bde:	2220      	movs	r2, #32
 8005be0:	6809      	ldr	r1, [r1, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	6022      	str	r2, [r4, #0]
 8005be6:	0022      	movs	r2, r4
 8005be8:	2178      	movs	r1, #120	; 0x78
 8005bea:	3245      	adds	r2, #69	; 0x45
 8005bec:	7011      	strb	r1, [r2, #0]
 8005bee:	4a27      	ldr	r2, [pc, #156]	; (8005c8c <_printf_i+0x220>)
 8005bf0:	e7e1      	b.n	8005bb6 <_printf_i+0x14a>
 8005bf2:	0648      	lsls	r0, r1, #25
 8005bf4:	d5e6      	bpl.n	8005bc4 <_printf_i+0x158>
 8005bf6:	b2ad      	uxth	r5, r5
 8005bf8:	e7e4      	b.n	8005bc4 <_printf_i+0x158>
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	680d      	ldr	r5, [r1, #0]
 8005bfe:	1d10      	adds	r0, r2, #4
 8005c00:	6949      	ldr	r1, [r1, #20]
 8005c02:	6018      	str	r0, [r3, #0]
 8005c04:	6813      	ldr	r3, [r2, #0]
 8005c06:	062e      	lsls	r6, r5, #24
 8005c08:	d501      	bpl.n	8005c0e <_printf_i+0x1a2>
 8005c0a:	6019      	str	r1, [r3, #0]
 8005c0c:	e002      	b.n	8005c14 <_printf_i+0x1a8>
 8005c0e:	066d      	lsls	r5, r5, #25
 8005c10:	d5fb      	bpl.n	8005c0a <_printf_i+0x19e>
 8005c12:	8019      	strh	r1, [r3, #0]
 8005c14:	2300      	movs	r3, #0
 8005c16:	9e04      	ldr	r6, [sp, #16]
 8005c18:	6123      	str	r3, [r4, #16]
 8005c1a:	e7bb      	b.n	8005b94 <_printf_i+0x128>
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	1d11      	adds	r1, r2, #4
 8005c20:	6019      	str	r1, [r3, #0]
 8005c22:	6816      	ldr	r6, [r2, #0]
 8005c24:	2100      	movs	r1, #0
 8005c26:	0030      	movs	r0, r6
 8005c28:	6862      	ldr	r2, [r4, #4]
 8005c2a:	f000 fb57 	bl	80062dc <memchr>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d001      	beq.n	8005c36 <_printf_i+0x1ca>
 8005c32:	1b80      	subs	r0, r0, r6
 8005c34:	6060      	str	r0, [r4, #4]
 8005c36:	6863      	ldr	r3, [r4, #4]
 8005c38:	6123      	str	r3, [r4, #16]
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	9a04      	ldr	r2, [sp, #16]
 8005c3e:	7013      	strb	r3, [r2, #0]
 8005c40:	e7a8      	b.n	8005b94 <_printf_i+0x128>
 8005c42:	6923      	ldr	r3, [r4, #16]
 8005c44:	0032      	movs	r2, r6
 8005c46:	9906      	ldr	r1, [sp, #24]
 8005c48:	9805      	ldr	r0, [sp, #20]
 8005c4a:	9d07      	ldr	r5, [sp, #28]
 8005c4c:	47a8      	blx	r5
 8005c4e:	1c43      	adds	r3, r0, #1
 8005c50:	d0aa      	beq.n	8005ba8 <_printf_i+0x13c>
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	079b      	lsls	r3, r3, #30
 8005c56:	d415      	bmi.n	8005c84 <_printf_i+0x218>
 8005c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c5a:	68e0      	ldr	r0, [r4, #12]
 8005c5c:	4298      	cmp	r0, r3
 8005c5e:	daa5      	bge.n	8005bac <_printf_i+0x140>
 8005c60:	0018      	movs	r0, r3
 8005c62:	e7a3      	b.n	8005bac <_printf_i+0x140>
 8005c64:	0022      	movs	r2, r4
 8005c66:	2301      	movs	r3, #1
 8005c68:	9906      	ldr	r1, [sp, #24]
 8005c6a:	9805      	ldr	r0, [sp, #20]
 8005c6c:	9e07      	ldr	r6, [sp, #28]
 8005c6e:	3219      	adds	r2, #25
 8005c70:	47b0      	blx	r6
 8005c72:	1c43      	adds	r3, r0, #1
 8005c74:	d098      	beq.n	8005ba8 <_printf_i+0x13c>
 8005c76:	3501      	adds	r5, #1
 8005c78:	68e3      	ldr	r3, [r4, #12]
 8005c7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c7c:	1a9b      	subs	r3, r3, r2
 8005c7e:	42ab      	cmp	r3, r5
 8005c80:	dcf0      	bgt.n	8005c64 <_printf_i+0x1f8>
 8005c82:	e7e9      	b.n	8005c58 <_printf_i+0x1ec>
 8005c84:	2500      	movs	r5, #0
 8005c86:	e7f7      	b.n	8005c78 <_printf_i+0x20c>
 8005c88:	0800680f 	.word	0x0800680f
 8005c8c:	08006820 	.word	0x08006820

08005c90 <_sbrk_r>:
 8005c90:	2300      	movs	r3, #0
 8005c92:	b570      	push	{r4, r5, r6, lr}
 8005c94:	4d06      	ldr	r5, [pc, #24]	; (8005cb0 <_sbrk_r+0x20>)
 8005c96:	0004      	movs	r4, r0
 8005c98:	0008      	movs	r0, r1
 8005c9a:	602b      	str	r3, [r5, #0]
 8005c9c:	f7fa feb0 	bl	8000a00 <_sbrk>
 8005ca0:	1c43      	adds	r3, r0, #1
 8005ca2:	d103      	bne.n	8005cac <_sbrk_r+0x1c>
 8005ca4:	682b      	ldr	r3, [r5, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d000      	beq.n	8005cac <_sbrk_r+0x1c>
 8005caa:	6023      	str	r3, [r4, #0]
 8005cac:	bd70      	pop	{r4, r5, r6, pc}
 8005cae:	46c0      	nop			; (mov r8, r8)
 8005cb0:	20001ce4 	.word	0x20001ce4

08005cb4 <__swbuf_r>:
 8005cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb6:	0005      	movs	r5, r0
 8005cb8:	000e      	movs	r6, r1
 8005cba:	0014      	movs	r4, r2
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	d004      	beq.n	8005cca <__swbuf_r+0x16>
 8005cc0:	6983      	ldr	r3, [r0, #24]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <__swbuf_r+0x16>
 8005cc6:	f000 f9f9 	bl	80060bc <__sinit>
 8005cca:	4b22      	ldr	r3, [pc, #136]	; (8005d54 <__swbuf_r+0xa0>)
 8005ccc:	429c      	cmp	r4, r3
 8005cce:	d12e      	bne.n	8005d2e <__swbuf_r+0x7a>
 8005cd0:	686c      	ldr	r4, [r5, #4]
 8005cd2:	69a3      	ldr	r3, [r4, #24]
 8005cd4:	60a3      	str	r3, [r4, #8]
 8005cd6:	89a3      	ldrh	r3, [r4, #12]
 8005cd8:	071b      	lsls	r3, r3, #28
 8005cda:	d532      	bpl.n	8005d42 <__swbuf_r+0x8e>
 8005cdc:	6923      	ldr	r3, [r4, #16]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d02f      	beq.n	8005d42 <__swbuf_r+0x8e>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	6922      	ldr	r2, [r4, #16]
 8005ce6:	b2f7      	uxtb	r7, r6
 8005ce8:	1a98      	subs	r0, r3, r2
 8005cea:	6963      	ldr	r3, [r4, #20]
 8005cec:	b2f6      	uxtb	r6, r6
 8005cee:	4283      	cmp	r3, r0
 8005cf0:	dc05      	bgt.n	8005cfe <__swbuf_r+0x4a>
 8005cf2:	0021      	movs	r1, r4
 8005cf4:	0028      	movs	r0, r5
 8005cf6:	f000 f93f 	bl	8005f78 <_fflush_r>
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	d127      	bne.n	8005d4e <__swbuf_r+0x9a>
 8005cfe:	68a3      	ldr	r3, [r4, #8]
 8005d00:	3001      	adds	r0, #1
 8005d02:	3b01      	subs	r3, #1
 8005d04:	60a3      	str	r3, [r4, #8]
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	6022      	str	r2, [r4, #0]
 8005d0c:	701f      	strb	r7, [r3, #0]
 8005d0e:	6963      	ldr	r3, [r4, #20]
 8005d10:	4283      	cmp	r3, r0
 8005d12:	d004      	beq.n	8005d1e <__swbuf_r+0x6a>
 8005d14:	89a3      	ldrh	r3, [r4, #12]
 8005d16:	07db      	lsls	r3, r3, #31
 8005d18:	d507      	bpl.n	8005d2a <__swbuf_r+0x76>
 8005d1a:	2e0a      	cmp	r6, #10
 8005d1c:	d105      	bne.n	8005d2a <__swbuf_r+0x76>
 8005d1e:	0021      	movs	r1, r4
 8005d20:	0028      	movs	r0, r5
 8005d22:	f000 f929 	bl	8005f78 <_fflush_r>
 8005d26:	2800      	cmp	r0, #0
 8005d28:	d111      	bne.n	8005d4e <__swbuf_r+0x9a>
 8005d2a:	0030      	movs	r0, r6
 8005d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d2e:	4b0a      	ldr	r3, [pc, #40]	; (8005d58 <__swbuf_r+0xa4>)
 8005d30:	429c      	cmp	r4, r3
 8005d32:	d101      	bne.n	8005d38 <__swbuf_r+0x84>
 8005d34:	68ac      	ldr	r4, [r5, #8]
 8005d36:	e7cc      	b.n	8005cd2 <__swbuf_r+0x1e>
 8005d38:	4b08      	ldr	r3, [pc, #32]	; (8005d5c <__swbuf_r+0xa8>)
 8005d3a:	429c      	cmp	r4, r3
 8005d3c:	d1c9      	bne.n	8005cd2 <__swbuf_r+0x1e>
 8005d3e:	68ec      	ldr	r4, [r5, #12]
 8005d40:	e7c7      	b.n	8005cd2 <__swbuf_r+0x1e>
 8005d42:	0021      	movs	r1, r4
 8005d44:	0028      	movs	r0, r5
 8005d46:	f000 f80b 	bl	8005d60 <__swsetup_r>
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	d0c9      	beq.n	8005ce2 <__swbuf_r+0x2e>
 8005d4e:	2601      	movs	r6, #1
 8005d50:	4276      	negs	r6, r6
 8005d52:	e7ea      	b.n	8005d2a <__swbuf_r+0x76>
 8005d54:	08006854 	.word	0x08006854
 8005d58:	08006874 	.word	0x08006874
 8005d5c:	08006834 	.word	0x08006834

08005d60 <__swsetup_r>:
 8005d60:	4b37      	ldr	r3, [pc, #220]	; (8005e40 <__swsetup_r+0xe0>)
 8005d62:	b570      	push	{r4, r5, r6, lr}
 8005d64:	681d      	ldr	r5, [r3, #0]
 8005d66:	0006      	movs	r6, r0
 8005d68:	000c      	movs	r4, r1
 8005d6a:	2d00      	cmp	r5, #0
 8005d6c:	d005      	beq.n	8005d7a <__swsetup_r+0x1a>
 8005d6e:	69ab      	ldr	r3, [r5, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d102      	bne.n	8005d7a <__swsetup_r+0x1a>
 8005d74:	0028      	movs	r0, r5
 8005d76:	f000 f9a1 	bl	80060bc <__sinit>
 8005d7a:	4b32      	ldr	r3, [pc, #200]	; (8005e44 <__swsetup_r+0xe4>)
 8005d7c:	429c      	cmp	r4, r3
 8005d7e:	d10f      	bne.n	8005da0 <__swsetup_r+0x40>
 8005d80:	686c      	ldr	r4, [r5, #4]
 8005d82:	230c      	movs	r3, #12
 8005d84:	5ee2      	ldrsh	r2, [r4, r3]
 8005d86:	b293      	uxth	r3, r2
 8005d88:	0711      	lsls	r1, r2, #28
 8005d8a:	d42d      	bmi.n	8005de8 <__swsetup_r+0x88>
 8005d8c:	06d9      	lsls	r1, r3, #27
 8005d8e:	d411      	bmi.n	8005db4 <__swsetup_r+0x54>
 8005d90:	2309      	movs	r3, #9
 8005d92:	2001      	movs	r0, #1
 8005d94:	6033      	str	r3, [r6, #0]
 8005d96:	3337      	adds	r3, #55	; 0x37
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	81a3      	strh	r3, [r4, #12]
 8005d9c:	4240      	negs	r0, r0
 8005d9e:	bd70      	pop	{r4, r5, r6, pc}
 8005da0:	4b29      	ldr	r3, [pc, #164]	; (8005e48 <__swsetup_r+0xe8>)
 8005da2:	429c      	cmp	r4, r3
 8005da4:	d101      	bne.n	8005daa <__swsetup_r+0x4a>
 8005da6:	68ac      	ldr	r4, [r5, #8]
 8005da8:	e7eb      	b.n	8005d82 <__swsetup_r+0x22>
 8005daa:	4b28      	ldr	r3, [pc, #160]	; (8005e4c <__swsetup_r+0xec>)
 8005dac:	429c      	cmp	r4, r3
 8005dae:	d1e8      	bne.n	8005d82 <__swsetup_r+0x22>
 8005db0:	68ec      	ldr	r4, [r5, #12]
 8005db2:	e7e6      	b.n	8005d82 <__swsetup_r+0x22>
 8005db4:	075b      	lsls	r3, r3, #29
 8005db6:	d513      	bpl.n	8005de0 <__swsetup_r+0x80>
 8005db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dba:	2900      	cmp	r1, #0
 8005dbc:	d008      	beq.n	8005dd0 <__swsetup_r+0x70>
 8005dbe:	0023      	movs	r3, r4
 8005dc0:	3344      	adds	r3, #68	; 0x44
 8005dc2:	4299      	cmp	r1, r3
 8005dc4:	d002      	beq.n	8005dcc <__swsetup_r+0x6c>
 8005dc6:	0030      	movs	r0, r6
 8005dc8:	f7ff fa3a 	bl	8005240 <_free_r>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	6363      	str	r3, [r4, #52]	; 0x34
 8005dd0:	2224      	movs	r2, #36	; 0x24
 8005dd2:	89a3      	ldrh	r3, [r4, #12]
 8005dd4:	4393      	bics	r3, r2
 8005dd6:	81a3      	strh	r3, [r4, #12]
 8005dd8:	2300      	movs	r3, #0
 8005dda:	6063      	str	r3, [r4, #4]
 8005ddc:	6923      	ldr	r3, [r4, #16]
 8005dde:	6023      	str	r3, [r4, #0]
 8005de0:	2308      	movs	r3, #8
 8005de2:	89a2      	ldrh	r2, [r4, #12]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	81a3      	strh	r3, [r4, #12]
 8005de8:	6923      	ldr	r3, [r4, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10b      	bne.n	8005e06 <__swsetup_r+0xa6>
 8005dee:	21a0      	movs	r1, #160	; 0xa0
 8005df0:	2280      	movs	r2, #128	; 0x80
 8005df2:	89a3      	ldrh	r3, [r4, #12]
 8005df4:	0089      	lsls	r1, r1, #2
 8005df6:	0092      	lsls	r2, r2, #2
 8005df8:	400b      	ands	r3, r1
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d003      	beq.n	8005e06 <__swsetup_r+0xa6>
 8005dfe:	0021      	movs	r1, r4
 8005e00:	0030      	movs	r0, r6
 8005e02:	f000 fa27 	bl	8006254 <__smakebuf_r>
 8005e06:	220c      	movs	r2, #12
 8005e08:	5ea3      	ldrsh	r3, [r4, r2]
 8005e0a:	2001      	movs	r0, #1
 8005e0c:	001a      	movs	r2, r3
 8005e0e:	b299      	uxth	r1, r3
 8005e10:	4002      	ands	r2, r0
 8005e12:	4203      	tst	r3, r0
 8005e14:	d00f      	beq.n	8005e36 <__swsetup_r+0xd6>
 8005e16:	2200      	movs	r2, #0
 8005e18:	60a2      	str	r2, [r4, #8]
 8005e1a:	6962      	ldr	r2, [r4, #20]
 8005e1c:	4252      	negs	r2, r2
 8005e1e:	61a2      	str	r2, [r4, #24]
 8005e20:	2000      	movs	r0, #0
 8005e22:	6922      	ldr	r2, [r4, #16]
 8005e24:	4282      	cmp	r2, r0
 8005e26:	d1ba      	bne.n	8005d9e <__swsetup_r+0x3e>
 8005e28:	060a      	lsls	r2, r1, #24
 8005e2a:	d5b8      	bpl.n	8005d9e <__swsetup_r+0x3e>
 8005e2c:	2240      	movs	r2, #64	; 0x40
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	81a3      	strh	r3, [r4, #12]
 8005e32:	3801      	subs	r0, #1
 8005e34:	e7b3      	b.n	8005d9e <__swsetup_r+0x3e>
 8005e36:	0788      	lsls	r0, r1, #30
 8005e38:	d400      	bmi.n	8005e3c <__swsetup_r+0xdc>
 8005e3a:	6962      	ldr	r2, [r4, #20]
 8005e3c:	60a2      	str	r2, [r4, #8]
 8005e3e:	e7ef      	b.n	8005e20 <__swsetup_r+0xc0>
 8005e40:	20000014 	.word	0x20000014
 8005e44:	08006854 	.word	0x08006854
 8005e48:	08006874 	.word	0x08006874
 8005e4c:	08006834 	.word	0x08006834

08005e50 <abort>:
 8005e50:	2006      	movs	r0, #6
 8005e52:	b510      	push	{r4, lr}
 8005e54:	f000 faca 	bl	80063ec <raise>
 8005e58:	2001      	movs	r0, #1
 8005e5a:	f7fa fd5f 	bl	800091c <_exit>
	...

08005e60 <__sflush_r>:
 8005e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e62:	898b      	ldrh	r3, [r1, #12]
 8005e64:	0005      	movs	r5, r0
 8005e66:	000c      	movs	r4, r1
 8005e68:	071a      	lsls	r2, r3, #28
 8005e6a:	d45f      	bmi.n	8005f2c <__sflush_r+0xcc>
 8005e6c:	684a      	ldr	r2, [r1, #4]
 8005e6e:	2a00      	cmp	r2, #0
 8005e70:	dc04      	bgt.n	8005e7c <__sflush_r+0x1c>
 8005e72:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005e74:	2a00      	cmp	r2, #0
 8005e76:	dc01      	bgt.n	8005e7c <__sflush_r+0x1c>
 8005e78:	2000      	movs	r0, #0
 8005e7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e7c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005e7e:	2f00      	cmp	r7, #0
 8005e80:	d0fa      	beq.n	8005e78 <__sflush_r+0x18>
 8005e82:	2200      	movs	r2, #0
 8005e84:	2180      	movs	r1, #128	; 0x80
 8005e86:	682e      	ldr	r6, [r5, #0]
 8005e88:	602a      	str	r2, [r5, #0]
 8005e8a:	001a      	movs	r2, r3
 8005e8c:	0149      	lsls	r1, r1, #5
 8005e8e:	400a      	ands	r2, r1
 8005e90:	420b      	tst	r3, r1
 8005e92:	d034      	beq.n	8005efe <__sflush_r+0x9e>
 8005e94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e96:	89a3      	ldrh	r3, [r4, #12]
 8005e98:	075b      	lsls	r3, r3, #29
 8005e9a:	d506      	bpl.n	8005eaa <__sflush_r+0x4a>
 8005e9c:	6863      	ldr	r3, [r4, #4]
 8005e9e:	1ac0      	subs	r0, r0, r3
 8005ea0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <__sflush_r+0x4a>
 8005ea6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ea8:	1ac0      	subs	r0, r0, r3
 8005eaa:	0002      	movs	r2, r0
 8005eac:	6a21      	ldr	r1, [r4, #32]
 8005eae:	2300      	movs	r3, #0
 8005eb0:	0028      	movs	r0, r5
 8005eb2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005eb4:	47b8      	blx	r7
 8005eb6:	89a1      	ldrh	r1, [r4, #12]
 8005eb8:	1c43      	adds	r3, r0, #1
 8005eba:	d106      	bne.n	8005eca <__sflush_r+0x6a>
 8005ebc:	682b      	ldr	r3, [r5, #0]
 8005ebe:	2b1d      	cmp	r3, #29
 8005ec0:	d831      	bhi.n	8005f26 <__sflush_r+0xc6>
 8005ec2:	4a2c      	ldr	r2, [pc, #176]	; (8005f74 <__sflush_r+0x114>)
 8005ec4:	40da      	lsrs	r2, r3
 8005ec6:	07d3      	lsls	r3, r2, #31
 8005ec8:	d52d      	bpl.n	8005f26 <__sflush_r+0xc6>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	6063      	str	r3, [r4, #4]
 8005ece:	6923      	ldr	r3, [r4, #16]
 8005ed0:	6023      	str	r3, [r4, #0]
 8005ed2:	04cb      	lsls	r3, r1, #19
 8005ed4:	d505      	bpl.n	8005ee2 <__sflush_r+0x82>
 8005ed6:	1c43      	adds	r3, r0, #1
 8005ed8:	d102      	bne.n	8005ee0 <__sflush_r+0x80>
 8005eda:	682b      	ldr	r3, [r5, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d100      	bne.n	8005ee2 <__sflush_r+0x82>
 8005ee0:	6560      	str	r0, [r4, #84]	; 0x54
 8005ee2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ee4:	602e      	str	r6, [r5, #0]
 8005ee6:	2900      	cmp	r1, #0
 8005ee8:	d0c6      	beq.n	8005e78 <__sflush_r+0x18>
 8005eea:	0023      	movs	r3, r4
 8005eec:	3344      	adds	r3, #68	; 0x44
 8005eee:	4299      	cmp	r1, r3
 8005ef0:	d002      	beq.n	8005ef8 <__sflush_r+0x98>
 8005ef2:	0028      	movs	r0, r5
 8005ef4:	f7ff f9a4 	bl	8005240 <_free_r>
 8005ef8:	2000      	movs	r0, #0
 8005efa:	6360      	str	r0, [r4, #52]	; 0x34
 8005efc:	e7bd      	b.n	8005e7a <__sflush_r+0x1a>
 8005efe:	2301      	movs	r3, #1
 8005f00:	0028      	movs	r0, r5
 8005f02:	6a21      	ldr	r1, [r4, #32]
 8005f04:	47b8      	blx	r7
 8005f06:	1c43      	adds	r3, r0, #1
 8005f08:	d1c5      	bne.n	8005e96 <__sflush_r+0x36>
 8005f0a:	682b      	ldr	r3, [r5, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d0c2      	beq.n	8005e96 <__sflush_r+0x36>
 8005f10:	2b1d      	cmp	r3, #29
 8005f12:	d001      	beq.n	8005f18 <__sflush_r+0xb8>
 8005f14:	2b16      	cmp	r3, #22
 8005f16:	d101      	bne.n	8005f1c <__sflush_r+0xbc>
 8005f18:	602e      	str	r6, [r5, #0]
 8005f1a:	e7ad      	b.n	8005e78 <__sflush_r+0x18>
 8005f1c:	2340      	movs	r3, #64	; 0x40
 8005f1e:	89a2      	ldrh	r2, [r4, #12]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	81a3      	strh	r3, [r4, #12]
 8005f24:	e7a9      	b.n	8005e7a <__sflush_r+0x1a>
 8005f26:	2340      	movs	r3, #64	; 0x40
 8005f28:	430b      	orrs	r3, r1
 8005f2a:	e7fa      	b.n	8005f22 <__sflush_r+0xc2>
 8005f2c:	690f      	ldr	r7, [r1, #16]
 8005f2e:	2f00      	cmp	r7, #0
 8005f30:	d0a2      	beq.n	8005e78 <__sflush_r+0x18>
 8005f32:	680a      	ldr	r2, [r1, #0]
 8005f34:	600f      	str	r7, [r1, #0]
 8005f36:	1bd2      	subs	r2, r2, r7
 8005f38:	9201      	str	r2, [sp, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	079b      	lsls	r3, r3, #30
 8005f3e:	d100      	bne.n	8005f42 <__sflush_r+0xe2>
 8005f40:	694a      	ldr	r2, [r1, #20]
 8005f42:	60a2      	str	r2, [r4, #8]
 8005f44:	9b01      	ldr	r3, [sp, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	dc00      	bgt.n	8005f4c <__sflush_r+0xec>
 8005f4a:	e795      	b.n	8005e78 <__sflush_r+0x18>
 8005f4c:	003a      	movs	r2, r7
 8005f4e:	0028      	movs	r0, r5
 8005f50:	9b01      	ldr	r3, [sp, #4]
 8005f52:	6a21      	ldr	r1, [r4, #32]
 8005f54:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f56:	47b0      	blx	r6
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	dc06      	bgt.n	8005f6a <__sflush_r+0x10a>
 8005f5c:	2340      	movs	r3, #64	; 0x40
 8005f5e:	2001      	movs	r0, #1
 8005f60:	89a2      	ldrh	r2, [r4, #12]
 8005f62:	4240      	negs	r0, r0
 8005f64:	4313      	orrs	r3, r2
 8005f66:	81a3      	strh	r3, [r4, #12]
 8005f68:	e787      	b.n	8005e7a <__sflush_r+0x1a>
 8005f6a:	9b01      	ldr	r3, [sp, #4]
 8005f6c:	183f      	adds	r7, r7, r0
 8005f6e:	1a1b      	subs	r3, r3, r0
 8005f70:	9301      	str	r3, [sp, #4]
 8005f72:	e7e7      	b.n	8005f44 <__sflush_r+0xe4>
 8005f74:	20400001 	.word	0x20400001

08005f78 <_fflush_r>:
 8005f78:	690b      	ldr	r3, [r1, #16]
 8005f7a:	b570      	push	{r4, r5, r6, lr}
 8005f7c:	0005      	movs	r5, r0
 8005f7e:	000c      	movs	r4, r1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d102      	bne.n	8005f8a <_fflush_r+0x12>
 8005f84:	2500      	movs	r5, #0
 8005f86:	0028      	movs	r0, r5
 8005f88:	bd70      	pop	{r4, r5, r6, pc}
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	d004      	beq.n	8005f98 <_fflush_r+0x20>
 8005f8e:	6983      	ldr	r3, [r0, #24]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <_fflush_r+0x20>
 8005f94:	f000 f892 	bl	80060bc <__sinit>
 8005f98:	4b14      	ldr	r3, [pc, #80]	; (8005fec <_fflush_r+0x74>)
 8005f9a:	429c      	cmp	r4, r3
 8005f9c:	d11b      	bne.n	8005fd6 <_fflush_r+0x5e>
 8005f9e:	686c      	ldr	r4, [r5, #4]
 8005fa0:	220c      	movs	r2, #12
 8005fa2:	5ea3      	ldrsh	r3, [r4, r2]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0ed      	beq.n	8005f84 <_fflush_r+0xc>
 8005fa8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005faa:	07d2      	lsls	r2, r2, #31
 8005fac:	d404      	bmi.n	8005fb8 <_fflush_r+0x40>
 8005fae:	059b      	lsls	r3, r3, #22
 8005fb0:	d402      	bmi.n	8005fb8 <_fflush_r+0x40>
 8005fb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fb4:	f000 f923 	bl	80061fe <__retarget_lock_acquire_recursive>
 8005fb8:	0028      	movs	r0, r5
 8005fba:	0021      	movs	r1, r4
 8005fbc:	f7ff ff50 	bl	8005e60 <__sflush_r>
 8005fc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fc2:	0005      	movs	r5, r0
 8005fc4:	07db      	lsls	r3, r3, #31
 8005fc6:	d4de      	bmi.n	8005f86 <_fflush_r+0xe>
 8005fc8:	89a3      	ldrh	r3, [r4, #12]
 8005fca:	059b      	lsls	r3, r3, #22
 8005fcc:	d4db      	bmi.n	8005f86 <_fflush_r+0xe>
 8005fce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fd0:	f000 f916 	bl	8006200 <__retarget_lock_release_recursive>
 8005fd4:	e7d7      	b.n	8005f86 <_fflush_r+0xe>
 8005fd6:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <_fflush_r+0x78>)
 8005fd8:	429c      	cmp	r4, r3
 8005fda:	d101      	bne.n	8005fe0 <_fflush_r+0x68>
 8005fdc:	68ac      	ldr	r4, [r5, #8]
 8005fde:	e7df      	b.n	8005fa0 <_fflush_r+0x28>
 8005fe0:	4b04      	ldr	r3, [pc, #16]	; (8005ff4 <_fflush_r+0x7c>)
 8005fe2:	429c      	cmp	r4, r3
 8005fe4:	d1dc      	bne.n	8005fa0 <_fflush_r+0x28>
 8005fe6:	68ec      	ldr	r4, [r5, #12]
 8005fe8:	e7da      	b.n	8005fa0 <_fflush_r+0x28>
 8005fea:	46c0      	nop			; (mov r8, r8)
 8005fec:	08006854 	.word	0x08006854
 8005ff0:	08006874 	.word	0x08006874
 8005ff4:	08006834 	.word	0x08006834

08005ff8 <std>:
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	b510      	push	{r4, lr}
 8005ffc:	0004      	movs	r4, r0
 8005ffe:	6003      	str	r3, [r0, #0]
 8006000:	6043      	str	r3, [r0, #4]
 8006002:	6083      	str	r3, [r0, #8]
 8006004:	8181      	strh	r1, [r0, #12]
 8006006:	6643      	str	r3, [r0, #100]	; 0x64
 8006008:	0019      	movs	r1, r3
 800600a:	81c2      	strh	r2, [r0, #14]
 800600c:	6103      	str	r3, [r0, #16]
 800600e:	6143      	str	r3, [r0, #20]
 8006010:	6183      	str	r3, [r0, #24]
 8006012:	2208      	movs	r2, #8
 8006014:	305c      	adds	r0, #92	; 0x5c
 8006016:	f7ff f874 	bl	8005102 <memset>
 800601a:	4b05      	ldr	r3, [pc, #20]	; (8006030 <std+0x38>)
 800601c:	6224      	str	r4, [r4, #32]
 800601e:	6263      	str	r3, [r4, #36]	; 0x24
 8006020:	4b04      	ldr	r3, [pc, #16]	; (8006034 <std+0x3c>)
 8006022:	62a3      	str	r3, [r4, #40]	; 0x28
 8006024:	4b04      	ldr	r3, [pc, #16]	; (8006038 <std+0x40>)
 8006026:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006028:	4b04      	ldr	r3, [pc, #16]	; (800603c <std+0x44>)
 800602a:	6323      	str	r3, [r4, #48]	; 0x30
 800602c:	bd10      	pop	{r4, pc}
 800602e:	46c0      	nop			; (mov r8, r8)
 8006030:	0800642d 	.word	0x0800642d
 8006034:	08006455 	.word	0x08006455
 8006038:	0800648d 	.word	0x0800648d
 800603c:	080064b9 	.word	0x080064b9

08006040 <_cleanup_r>:
 8006040:	b510      	push	{r4, lr}
 8006042:	4902      	ldr	r1, [pc, #8]	; (800604c <_cleanup_r+0xc>)
 8006044:	f000 f8ba 	bl	80061bc <_fwalk_reent>
 8006048:	bd10      	pop	{r4, pc}
 800604a:	46c0      	nop			; (mov r8, r8)
 800604c:	08005f79 	.word	0x08005f79

08006050 <__sfmoreglue>:
 8006050:	b570      	push	{r4, r5, r6, lr}
 8006052:	2568      	movs	r5, #104	; 0x68
 8006054:	1e4a      	subs	r2, r1, #1
 8006056:	4355      	muls	r5, r2
 8006058:	000e      	movs	r6, r1
 800605a:	0029      	movs	r1, r5
 800605c:	3174      	adds	r1, #116	; 0x74
 800605e:	f7ff f95b 	bl	8005318 <_malloc_r>
 8006062:	1e04      	subs	r4, r0, #0
 8006064:	d008      	beq.n	8006078 <__sfmoreglue+0x28>
 8006066:	2100      	movs	r1, #0
 8006068:	002a      	movs	r2, r5
 800606a:	6001      	str	r1, [r0, #0]
 800606c:	6046      	str	r6, [r0, #4]
 800606e:	300c      	adds	r0, #12
 8006070:	60a0      	str	r0, [r4, #8]
 8006072:	3268      	adds	r2, #104	; 0x68
 8006074:	f7ff f845 	bl	8005102 <memset>
 8006078:	0020      	movs	r0, r4
 800607a:	bd70      	pop	{r4, r5, r6, pc}

0800607c <__sfp_lock_acquire>:
 800607c:	b510      	push	{r4, lr}
 800607e:	4802      	ldr	r0, [pc, #8]	; (8006088 <__sfp_lock_acquire+0xc>)
 8006080:	f000 f8bd 	bl	80061fe <__retarget_lock_acquire_recursive>
 8006084:	bd10      	pop	{r4, pc}
 8006086:	46c0      	nop			; (mov r8, r8)
 8006088:	20001ce1 	.word	0x20001ce1

0800608c <__sfp_lock_release>:
 800608c:	b510      	push	{r4, lr}
 800608e:	4802      	ldr	r0, [pc, #8]	; (8006098 <__sfp_lock_release+0xc>)
 8006090:	f000 f8b6 	bl	8006200 <__retarget_lock_release_recursive>
 8006094:	bd10      	pop	{r4, pc}
 8006096:	46c0      	nop			; (mov r8, r8)
 8006098:	20001ce1 	.word	0x20001ce1

0800609c <__sinit_lock_acquire>:
 800609c:	b510      	push	{r4, lr}
 800609e:	4802      	ldr	r0, [pc, #8]	; (80060a8 <__sinit_lock_acquire+0xc>)
 80060a0:	f000 f8ad 	bl	80061fe <__retarget_lock_acquire_recursive>
 80060a4:	bd10      	pop	{r4, pc}
 80060a6:	46c0      	nop			; (mov r8, r8)
 80060a8:	20001ce2 	.word	0x20001ce2

080060ac <__sinit_lock_release>:
 80060ac:	b510      	push	{r4, lr}
 80060ae:	4802      	ldr	r0, [pc, #8]	; (80060b8 <__sinit_lock_release+0xc>)
 80060b0:	f000 f8a6 	bl	8006200 <__retarget_lock_release_recursive>
 80060b4:	bd10      	pop	{r4, pc}
 80060b6:	46c0      	nop			; (mov r8, r8)
 80060b8:	20001ce2 	.word	0x20001ce2

080060bc <__sinit>:
 80060bc:	b513      	push	{r0, r1, r4, lr}
 80060be:	0004      	movs	r4, r0
 80060c0:	f7ff ffec 	bl	800609c <__sinit_lock_acquire>
 80060c4:	69a3      	ldr	r3, [r4, #24]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <__sinit+0x14>
 80060ca:	f7ff ffef 	bl	80060ac <__sinit_lock_release>
 80060ce:	bd13      	pop	{r0, r1, r4, pc}
 80060d0:	64a3      	str	r3, [r4, #72]	; 0x48
 80060d2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80060d4:	6523      	str	r3, [r4, #80]	; 0x50
 80060d6:	4b13      	ldr	r3, [pc, #76]	; (8006124 <__sinit+0x68>)
 80060d8:	4a13      	ldr	r2, [pc, #76]	; (8006128 <__sinit+0x6c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80060de:	9301      	str	r3, [sp, #4]
 80060e0:	42a3      	cmp	r3, r4
 80060e2:	d101      	bne.n	80060e8 <__sinit+0x2c>
 80060e4:	2301      	movs	r3, #1
 80060e6:	61a3      	str	r3, [r4, #24]
 80060e8:	0020      	movs	r0, r4
 80060ea:	f000 f81f 	bl	800612c <__sfp>
 80060ee:	6060      	str	r0, [r4, #4]
 80060f0:	0020      	movs	r0, r4
 80060f2:	f000 f81b 	bl	800612c <__sfp>
 80060f6:	60a0      	str	r0, [r4, #8]
 80060f8:	0020      	movs	r0, r4
 80060fa:	f000 f817 	bl	800612c <__sfp>
 80060fe:	2200      	movs	r2, #0
 8006100:	2104      	movs	r1, #4
 8006102:	60e0      	str	r0, [r4, #12]
 8006104:	6860      	ldr	r0, [r4, #4]
 8006106:	f7ff ff77 	bl	8005ff8 <std>
 800610a:	2201      	movs	r2, #1
 800610c:	2109      	movs	r1, #9
 800610e:	68a0      	ldr	r0, [r4, #8]
 8006110:	f7ff ff72 	bl	8005ff8 <std>
 8006114:	2202      	movs	r2, #2
 8006116:	2112      	movs	r1, #18
 8006118:	68e0      	ldr	r0, [r4, #12]
 800611a:	f7ff ff6d 	bl	8005ff8 <std>
 800611e:	2301      	movs	r3, #1
 8006120:	61a3      	str	r3, [r4, #24]
 8006122:	e7d2      	b.n	80060ca <__sinit+0xe>
 8006124:	0800674c 	.word	0x0800674c
 8006128:	08006041 	.word	0x08006041

0800612c <__sfp>:
 800612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612e:	0007      	movs	r7, r0
 8006130:	f7ff ffa4 	bl	800607c <__sfp_lock_acquire>
 8006134:	4b1f      	ldr	r3, [pc, #124]	; (80061b4 <__sfp+0x88>)
 8006136:	681e      	ldr	r6, [r3, #0]
 8006138:	69b3      	ldr	r3, [r6, #24]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d102      	bne.n	8006144 <__sfp+0x18>
 800613e:	0030      	movs	r0, r6
 8006140:	f7ff ffbc 	bl	80060bc <__sinit>
 8006144:	3648      	adds	r6, #72	; 0x48
 8006146:	68b4      	ldr	r4, [r6, #8]
 8006148:	6873      	ldr	r3, [r6, #4]
 800614a:	3b01      	subs	r3, #1
 800614c:	d504      	bpl.n	8006158 <__sfp+0x2c>
 800614e:	6833      	ldr	r3, [r6, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d022      	beq.n	800619a <__sfp+0x6e>
 8006154:	6836      	ldr	r6, [r6, #0]
 8006156:	e7f6      	b.n	8006146 <__sfp+0x1a>
 8006158:	220c      	movs	r2, #12
 800615a:	5ea5      	ldrsh	r5, [r4, r2]
 800615c:	2d00      	cmp	r5, #0
 800615e:	d11a      	bne.n	8006196 <__sfp+0x6a>
 8006160:	0020      	movs	r0, r4
 8006162:	4b15      	ldr	r3, [pc, #84]	; (80061b8 <__sfp+0x8c>)
 8006164:	3058      	adds	r0, #88	; 0x58
 8006166:	60e3      	str	r3, [r4, #12]
 8006168:	6665      	str	r5, [r4, #100]	; 0x64
 800616a:	f000 f847 	bl	80061fc <__retarget_lock_init_recursive>
 800616e:	f7ff ff8d 	bl	800608c <__sfp_lock_release>
 8006172:	0020      	movs	r0, r4
 8006174:	2208      	movs	r2, #8
 8006176:	0029      	movs	r1, r5
 8006178:	6025      	str	r5, [r4, #0]
 800617a:	60a5      	str	r5, [r4, #8]
 800617c:	6065      	str	r5, [r4, #4]
 800617e:	6125      	str	r5, [r4, #16]
 8006180:	6165      	str	r5, [r4, #20]
 8006182:	61a5      	str	r5, [r4, #24]
 8006184:	305c      	adds	r0, #92	; 0x5c
 8006186:	f7fe ffbc 	bl	8005102 <memset>
 800618a:	6365      	str	r5, [r4, #52]	; 0x34
 800618c:	63a5      	str	r5, [r4, #56]	; 0x38
 800618e:	64a5      	str	r5, [r4, #72]	; 0x48
 8006190:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006192:	0020      	movs	r0, r4
 8006194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006196:	3468      	adds	r4, #104	; 0x68
 8006198:	e7d7      	b.n	800614a <__sfp+0x1e>
 800619a:	2104      	movs	r1, #4
 800619c:	0038      	movs	r0, r7
 800619e:	f7ff ff57 	bl	8006050 <__sfmoreglue>
 80061a2:	1e04      	subs	r4, r0, #0
 80061a4:	6030      	str	r0, [r6, #0]
 80061a6:	d1d5      	bne.n	8006154 <__sfp+0x28>
 80061a8:	f7ff ff70 	bl	800608c <__sfp_lock_release>
 80061ac:	230c      	movs	r3, #12
 80061ae:	603b      	str	r3, [r7, #0]
 80061b0:	e7ef      	b.n	8006192 <__sfp+0x66>
 80061b2:	46c0      	nop			; (mov r8, r8)
 80061b4:	0800674c 	.word	0x0800674c
 80061b8:	ffff0001 	.word	0xffff0001

080061bc <_fwalk_reent>:
 80061bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061be:	0004      	movs	r4, r0
 80061c0:	0006      	movs	r6, r0
 80061c2:	2700      	movs	r7, #0
 80061c4:	9101      	str	r1, [sp, #4]
 80061c6:	3448      	adds	r4, #72	; 0x48
 80061c8:	6863      	ldr	r3, [r4, #4]
 80061ca:	68a5      	ldr	r5, [r4, #8]
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	9b00      	ldr	r3, [sp, #0]
 80061d0:	3b01      	subs	r3, #1
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	d504      	bpl.n	80061e0 <_fwalk_reent+0x24>
 80061d6:	6824      	ldr	r4, [r4, #0]
 80061d8:	2c00      	cmp	r4, #0
 80061da:	d1f5      	bne.n	80061c8 <_fwalk_reent+0xc>
 80061dc:	0038      	movs	r0, r7
 80061de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061e0:	89ab      	ldrh	r3, [r5, #12]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d908      	bls.n	80061f8 <_fwalk_reent+0x3c>
 80061e6:	220e      	movs	r2, #14
 80061e8:	5eab      	ldrsh	r3, [r5, r2]
 80061ea:	3301      	adds	r3, #1
 80061ec:	d004      	beq.n	80061f8 <_fwalk_reent+0x3c>
 80061ee:	0029      	movs	r1, r5
 80061f0:	0030      	movs	r0, r6
 80061f2:	9b01      	ldr	r3, [sp, #4]
 80061f4:	4798      	blx	r3
 80061f6:	4307      	orrs	r7, r0
 80061f8:	3568      	adds	r5, #104	; 0x68
 80061fa:	e7e8      	b.n	80061ce <_fwalk_reent+0x12>

080061fc <__retarget_lock_init_recursive>:
 80061fc:	4770      	bx	lr

080061fe <__retarget_lock_acquire_recursive>:
 80061fe:	4770      	bx	lr

08006200 <__retarget_lock_release_recursive>:
 8006200:	4770      	bx	lr
	...

08006204 <__swhatbuf_r>:
 8006204:	b570      	push	{r4, r5, r6, lr}
 8006206:	000e      	movs	r6, r1
 8006208:	001d      	movs	r5, r3
 800620a:	230e      	movs	r3, #14
 800620c:	5ec9      	ldrsh	r1, [r1, r3]
 800620e:	0014      	movs	r4, r2
 8006210:	b096      	sub	sp, #88	; 0x58
 8006212:	2900      	cmp	r1, #0
 8006214:	da08      	bge.n	8006228 <__swhatbuf_r+0x24>
 8006216:	220c      	movs	r2, #12
 8006218:	5eb3      	ldrsh	r3, [r6, r2]
 800621a:	2200      	movs	r2, #0
 800621c:	602a      	str	r2, [r5, #0]
 800621e:	061b      	lsls	r3, r3, #24
 8006220:	d411      	bmi.n	8006246 <__swhatbuf_r+0x42>
 8006222:	2380      	movs	r3, #128	; 0x80
 8006224:	00db      	lsls	r3, r3, #3
 8006226:	e00f      	b.n	8006248 <__swhatbuf_r+0x44>
 8006228:	466a      	mov	r2, sp
 800622a:	f000 f971 	bl	8006510 <_fstat_r>
 800622e:	2800      	cmp	r0, #0
 8006230:	dbf1      	blt.n	8006216 <__swhatbuf_r+0x12>
 8006232:	23f0      	movs	r3, #240	; 0xf0
 8006234:	9901      	ldr	r1, [sp, #4]
 8006236:	021b      	lsls	r3, r3, #8
 8006238:	4019      	ands	r1, r3
 800623a:	4b05      	ldr	r3, [pc, #20]	; (8006250 <__swhatbuf_r+0x4c>)
 800623c:	18c9      	adds	r1, r1, r3
 800623e:	424b      	negs	r3, r1
 8006240:	4159      	adcs	r1, r3
 8006242:	6029      	str	r1, [r5, #0]
 8006244:	e7ed      	b.n	8006222 <__swhatbuf_r+0x1e>
 8006246:	2340      	movs	r3, #64	; 0x40
 8006248:	2000      	movs	r0, #0
 800624a:	6023      	str	r3, [r4, #0]
 800624c:	b016      	add	sp, #88	; 0x58
 800624e:	bd70      	pop	{r4, r5, r6, pc}
 8006250:	ffffe000 	.word	0xffffe000

08006254 <__smakebuf_r>:
 8006254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006256:	2602      	movs	r6, #2
 8006258:	898b      	ldrh	r3, [r1, #12]
 800625a:	0005      	movs	r5, r0
 800625c:	000c      	movs	r4, r1
 800625e:	4233      	tst	r3, r6
 8006260:	d006      	beq.n	8006270 <__smakebuf_r+0x1c>
 8006262:	0023      	movs	r3, r4
 8006264:	3347      	adds	r3, #71	; 0x47
 8006266:	6023      	str	r3, [r4, #0]
 8006268:	6123      	str	r3, [r4, #16]
 800626a:	2301      	movs	r3, #1
 800626c:	6163      	str	r3, [r4, #20]
 800626e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006270:	466a      	mov	r2, sp
 8006272:	ab01      	add	r3, sp, #4
 8006274:	f7ff ffc6 	bl	8006204 <__swhatbuf_r>
 8006278:	9900      	ldr	r1, [sp, #0]
 800627a:	0007      	movs	r7, r0
 800627c:	0028      	movs	r0, r5
 800627e:	f7ff f84b 	bl	8005318 <_malloc_r>
 8006282:	2800      	cmp	r0, #0
 8006284:	d108      	bne.n	8006298 <__smakebuf_r+0x44>
 8006286:	220c      	movs	r2, #12
 8006288:	5ea3      	ldrsh	r3, [r4, r2]
 800628a:	059a      	lsls	r2, r3, #22
 800628c:	d4ef      	bmi.n	800626e <__smakebuf_r+0x1a>
 800628e:	2203      	movs	r2, #3
 8006290:	4393      	bics	r3, r2
 8006292:	431e      	orrs	r6, r3
 8006294:	81a6      	strh	r6, [r4, #12]
 8006296:	e7e4      	b.n	8006262 <__smakebuf_r+0xe>
 8006298:	4b0f      	ldr	r3, [pc, #60]	; (80062d8 <__smakebuf_r+0x84>)
 800629a:	62ab      	str	r3, [r5, #40]	; 0x28
 800629c:	2380      	movs	r3, #128	; 0x80
 800629e:	89a2      	ldrh	r2, [r4, #12]
 80062a0:	6020      	str	r0, [r4, #0]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	81a3      	strh	r3, [r4, #12]
 80062a6:	9b00      	ldr	r3, [sp, #0]
 80062a8:	6120      	str	r0, [r4, #16]
 80062aa:	6163      	str	r3, [r4, #20]
 80062ac:	9b01      	ldr	r3, [sp, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00d      	beq.n	80062ce <__smakebuf_r+0x7a>
 80062b2:	0028      	movs	r0, r5
 80062b4:	230e      	movs	r3, #14
 80062b6:	5ee1      	ldrsh	r1, [r4, r3]
 80062b8:	f000 f93c 	bl	8006534 <_isatty_r>
 80062bc:	2800      	cmp	r0, #0
 80062be:	d006      	beq.n	80062ce <__smakebuf_r+0x7a>
 80062c0:	2203      	movs	r2, #3
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	4393      	bics	r3, r2
 80062c6:	001a      	movs	r2, r3
 80062c8:	2301      	movs	r3, #1
 80062ca:	4313      	orrs	r3, r2
 80062cc:	81a3      	strh	r3, [r4, #12]
 80062ce:	89a0      	ldrh	r0, [r4, #12]
 80062d0:	4307      	orrs	r7, r0
 80062d2:	81a7      	strh	r7, [r4, #12]
 80062d4:	e7cb      	b.n	800626e <__smakebuf_r+0x1a>
 80062d6:	46c0      	nop			; (mov r8, r8)
 80062d8:	08006041 	.word	0x08006041

080062dc <memchr>:
 80062dc:	b2c9      	uxtb	r1, r1
 80062de:	1882      	adds	r2, r0, r2
 80062e0:	4290      	cmp	r0, r2
 80062e2:	d101      	bne.n	80062e8 <memchr+0xc>
 80062e4:	2000      	movs	r0, #0
 80062e6:	4770      	bx	lr
 80062e8:	7803      	ldrb	r3, [r0, #0]
 80062ea:	428b      	cmp	r3, r1
 80062ec:	d0fb      	beq.n	80062e6 <memchr+0xa>
 80062ee:	3001      	adds	r0, #1
 80062f0:	e7f6      	b.n	80062e0 <memchr+0x4>

080062f2 <memmove>:
 80062f2:	b510      	push	{r4, lr}
 80062f4:	4288      	cmp	r0, r1
 80062f6:	d902      	bls.n	80062fe <memmove+0xc>
 80062f8:	188b      	adds	r3, r1, r2
 80062fa:	4298      	cmp	r0, r3
 80062fc:	d303      	bcc.n	8006306 <memmove+0x14>
 80062fe:	2300      	movs	r3, #0
 8006300:	e007      	b.n	8006312 <memmove+0x20>
 8006302:	5c8b      	ldrb	r3, [r1, r2]
 8006304:	5483      	strb	r3, [r0, r2]
 8006306:	3a01      	subs	r2, #1
 8006308:	d2fb      	bcs.n	8006302 <memmove+0x10>
 800630a:	bd10      	pop	{r4, pc}
 800630c:	5ccc      	ldrb	r4, [r1, r3]
 800630e:	54c4      	strb	r4, [r0, r3]
 8006310:	3301      	adds	r3, #1
 8006312:	429a      	cmp	r2, r3
 8006314:	d1fa      	bne.n	800630c <memmove+0x1a>
 8006316:	e7f8      	b.n	800630a <memmove+0x18>

08006318 <__malloc_lock>:
 8006318:	b510      	push	{r4, lr}
 800631a:	4802      	ldr	r0, [pc, #8]	; (8006324 <__malloc_lock+0xc>)
 800631c:	f7ff ff6f 	bl	80061fe <__retarget_lock_acquire_recursive>
 8006320:	bd10      	pop	{r4, pc}
 8006322:	46c0      	nop			; (mov r8, r8)
 8006324:	20001ce0 	.word	0x20001ce0

08006328 <__malloc_unlock>:
 8006328:	b510      	push	{r4, lr}
 800632a:	4802      	ldr	r0, [pc, #8]	; (8006334 <__malloc_unlock+0xc>)
 800632c:	f7ff ff68 	bl	8006200 <__retarget_lock_release_recursive>
 8006330:	bd10      	pop	{r4, pc}
 8006332:	46c0      	nop			; (mov r8, r8)
 8006334:	20001ce0 	.word	0x20001ce0

08006338 <_realloc_r>:
 8006338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800633a:	0007      	movs	r7, r0
 800633c:	000e      	movs	r6, r1
 800633e:	0014      	movs	r4, r2
 8006340:	2900      	cmp	r1, #0
 8006342:	d105      	bne.n	8006350 <_realloc_r+0x18>
 8006344:	0011      	movs	r1, r2
 8006346:	f7fe ffe7 	bl	8005318 <_malloc_r>
 800634a:	0005      	movs	r5, r0
 800634c:	0028      	movs	r0, r5
 800634e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006350:	2a00      	cmp	r2, #0
 8006352:	d103      	bne.n	800635c <_realloc_r+0x24>
 8006354:	f7fe ff74 	bl	8005240 <_free_r>
 8006358:	0025      	movs	r5, r4
 800635a:	e7f7      	b.n	800634c <_realloc_r+0x14>
 800635c:	f000 f910 	bl	8006580 <_malloc_usable_size_r>
 8006360:	9001      	str	r0, [sp, #4]
 8006362:	4284      	cmp	r4, r0
 8006364:	d803      	bhi.n	800636e <_realloc_r+0x36>
 8006366:	0035      	movs	r5, r6
 8006368:	0843      	lsrs	r3, r0, #1
 800636a:	42a3      	cmp	r3, r4
 800636c:	d3ee      	bcc.n	800634c <_realloc_r+0x14>
 800636e:	0021      	movs	r1, r4
 8006370:	0038      	movs	r0, r7
 8006372:	f7fe ffd1 	bl	8005318 <_malloc_r>
 8006376:	1e05      	subs	r5, r0, #0
 8006378:	d0e8      	beq.n	800634c <_realloc_r+0x14>
 800637a:	9b01      	ldr	r3, [sp, #4]
 800637c:	0022      	movs	r2, r4
 800637e:	429c      	cmp	r4, r3
 8006380:	d900      	bls.n	8006384 <_realloc_r+0x4c>
 8006382:	001a      	movs	r2, r3
 8006384:	0031      	movs	r1, r6
 8006386:	0028      	movs	r0, r5
 8006388:	f7fe feb2 	bl	80050f0 <memcpy>
 800638c:	0031      	movs	r1, r6
 800638e:	0038      	movs	r0, r7
 8006390:	f7fe ff56 	bl	8005240 <_free_r>
 8006394:	e7da      	b.n	800634c <_realloc_r+0x14>

08006396 <_raise_r>:
 8006396:	b570      	push	{r4, r5, r6, lr}
 8006398:	0004      	movs	r4, r0
 800639a:	000d      	movs	r5, r1
 800639c:	291f      	cmp	r1, #31
 800639e:	d904      	bls.n	80063aa <_raise_r+0x14>
 80063a0:	2316      	movs	r3, #22
 80063a2:	6003      	str	r3, [r0, #0]
 80063a4:	2001      	movs	r0, #1
 80063a6:	4240      	negs	r0, r0
 80063a8:	bd70      	pop	{r4, r5, r6, pc}
 80063aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d004      	beq.n	80063ba <_raise_r+0x24>
 80063b0:	008a      	lsls	r2, r1, #2
 80063b2:	189b      	adds	r3, r3, r2
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	2a00      	cmp	r2, #0
 80063b8:	d108      	bne.n	80063cc <_raise_r+0x36>
 80063ba:	0020      	movs	r0, r4
 80063bc:	f000 f832 	bl	8006424 <_getpid_r>
 80063c0:	002a      	movs	r2, r5
 80063c2:	0001      	movs	r1, r0
 80063c4:	0020      	movs	r0, r4
 80063c6:	f000 f81b 	bl	8006400 <_kill_r>
 80063ca:	e7ed      	b.n	80063a8 <_raise_r+0x12>
 80063cc:	2000      	movs	r0, #0
 80063ce:	2a01      	cmp	r2, #1
 80063d0:	d0ea      	beq.n	80063a8 <_raise_r+0x12>
 80063d2:	1c51      	adds	r1, r2, #1
 80063d4:	d103      	bne.n	80063de <_raise_r+0x48>
 80063d6:	2316      	movs	r3, #22
 80063d8:	3001      	adds	r0, #1
 80063da:	6023      	str	r3, [r4, #0]
 80063dc:	e7e4      	b.n	80063a8 <_raise_r+0x12>
 80063de:	2400      	movs	r4, #0
 80063e0:	0028      	movs	r0, r5
 80063e2:	601c      	str	r4, [r3, #0]
 80063e4:	4790      	blx	r2
 80063e6:	0020      	movs	r0, r4
 80063e8:	e7de      	b.n	80063a8 <_raise_r+0x12>
	...

080063ec <raise>:
 80063ec:	b510      	push	{r4, lr}
 80063ee:	4b03      	ldr	r3, [pc, #12]	; (80063fc <raise+0x10>)
 80063f0:	0001      	movs	r1, r0
 80063f2:	6818      	ldr	r0, [r3, #0]
 80063f4:	f7ff ffcf 	bl	8006396 <_raise_r>
 80063f8:	bd10      	pop	{r4, pc}
 80063fa:	46c0      	nop			; (mov r8, r8)
 80063fc:	20000014 	.word	0x20000014

08006400 <_kill_r>:
 8006400:	2300      	movs	r3, #0
 8006402:	b570      	push	{r4, r5, r6, lr}
 8006404:	4d06      	ldr	r5, [pc, #24]	; (8006420 <_kill_r+0x20>)
 8006406:	0004      	movs	r4, r0
 8006408:	0008      	movs	r0, r1
 800640a:	0011      	movs	r1, r2
 800640c:	602b      	str	r3, [r5, #0]
 800640e:	f7fa fa75 	bl	80008fc <_kill>
 8006412:	1c43      	adds	r3, r0, #1
 8006414:	d103      	bne.n	800641e <_kill_r+0x1e>
 8006416:	682b      	ldr	r3, [r5, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d000      	beq.n	800641e <_kill_r+0x1e>
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	bd70      	pop	{r4, r5, r6, pc}
 8006420:	20001ce4 	.word	0x20001ce4

08006424 <_getpid_r>:
 8006424:	b510      	push	{r4, lr}
 8006426:	f7fa fa63 	bl	80008f0 <_getpid>
 800642a:	bd10      	pop	{r4, pc}

0800642c <__sread>:
 800642c:	b570      	push	{r4, r5, r6, lr}
 800642e:	000c      	movs	r4, r1
 8006430:	250e      	movs	r5, #14
 8006432:	5f49      	ldrsh	r1, [r1, r5]
 8006434:	f000 f8ac 	bl	8006590 <_read_r>
 8006438:	2800      	cmp	r0, #0
 800643a:	db03      	blt.n	8006444 <__sread+0x18>
 800643c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800643e:	181b      	adds	r3, r3, r0
 8006440:	6563      	str	r3, [r4, #84]	; 0x54
 8006442:	bd70      	pop	{r4, r5, r6, pc}
 8006444:	89a3      	ldrh	r3, [r4, #12]
 8006446:	4a02      	ldr	r2, [pc, #8]	; (8006450 <__sread+0x24>)
 8006448:	4013      	ands	r3, r2
 800644a:	81a3      	strh	r3, [r4, #12]
 800644c:	e7f9      	b.n	8006442 <__sread+0x16>
 800644e:	46c0      	nop			; (mov r8, r8)
 8006450:	ffffefff 	.word	0xffffefff

08006454 <__swrite>:
 8006454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006456:	001f      	movs	r7, r3
 8006458:	898b      	ldrh	r3, [r1, #12]
 800645a:	0005      	movs	r5, r0
 800645c:	000c      	movs	r4, r1
 800645e:	0016      	movs	r6, r2
 8006460:	05db      	lsls	r3, r3, #23
 8006462:	d505      	bpl.n	8006470 <__swrite+0x1c>
 8006464:	230e      	movs	r3, #14
 8006466:	5ec9      	ldrsh	r1, [r1, r3]
 8006468:	2200      	movs	r2, #0
 800646a:	2302      	movs	r3, #2
 800646c:	f000 f874 	bl	8006558 <_lseek_r>
 8006470:	89a3      	ldrh	r3, [r4, #12]
 8006472:	4a05      	ldr	r2, [pc, #20]	; (8006488 <__swrite+0x34>)
 8006474:	0028      	movs	r0, r5
 8006476:	4013      	ands	r3, r2
 8006478:	81a3      	strh	r3, [r4, #12]
 800647a:	0032      	movs	r2, r6
 800647c:	230e      	movs	r3, #14
 800647e:	5ee1      	ldrsh	r1, [r4, r3]
 8006480:	003b      	movs	r3, r7
 8006482:	f000 f81f 	bl	80064c4 <_write_r>
 8006486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006488:	ffffefff 	.word	0xffffefff

0800648c <__sseek>:
 800648c:	b570      	push	{r4, r5, r6, lr}
 800648e:	000c      	movs	r4, r1
 8006490:	250e      	movs	r5, #14
 8006492:	5f49      	ldrsh	r1, [r1, r5]
 8006494:	f000 f860 	bl	8006558 <_lseek_r>
 8006498:	89a3      	ldrh	r3, [r4, #12]
 800649a:	1c42      	adds	r2, r0, #1
 800649c:	d103      	bne.n	80064a6 <__sseek+0x1a>
 800649e:	4a05      	ldr	r2, [pc, #20]	; (80064b4 <__sseek+0x28>)
 80064a0:	4013      	ands	r3, r2
 80064a2:	81a3      	strh	r3, [r4, #12]
 80064a4:	bd70      	pop	{r4, r5, r6, pc}
 80064a6:	2280      	movs	r2, #128	; 0x80
 80064a8:	0152      	lsls	r2, r2, #5
 80064aa:	4313      	orrs	r3, r2
 80064ac:	81a3      	strh	r3, [r4, #12]
 80064ae:	6560      	str	r0, [r4, #84]	; 0x54
 80064b0:	e7f8      	b.n	80064a4 <__sseek+0x18>
 80064b2:	46c0      	nop			; (mov r8, r8)
 80064b4:	ffffefff 	.word	0xffffefff

080064b8 <__sclose>:
 80064b8:	b510      	push	{r4, lr}
 80064ba:	230e      	movs	r3, #14
 80064bc:	5ec9      	ldrsh	r1, [r1, r3]
 80064be:	f000 f815 	bl	80064ec <_close_r>
 80064c2:	bd10      	pop	{r4, pc}

080064c4 <_write_r>:
 80064c4:	b570      	push	{r4, r5, r6, lr}
 80064c6:	0004      	movs	r4, r0
 80064c8:	0008      	movs	r0, r1
 80064ca:	0011      	movs	r1, r2
 80064cc:	001a      	movs	r2, r3
 80064ce:	2300      	movs	r3, #0
 80064d0:	4d05      	ldr	r5, [pc, #20]	; (80064e8 <_write_r+0x24>)
 80064d2:	602b      	str	r3, [r5, #0]
 80064d4:	f7fa fa4b 	bl	800096e <_write>
 80064d8:	1c43      	adds	r3, r0, #1
 80064da:	d103      	bne.n	80064e4 <_write_r+0x20>
 80064dc:	682b      	ldr	r3, [r5, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d000      	beq.n	80064e4 <_write_r+0x20>
 80064e2:	6023      	str	r3, [r4, #0]
 80064e4:	bd70      	pop	{r4, r5, r6, pc}
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	20001ce4 	.word	0x20001ce4

080064ec <_close_r>:
 80064ec:	2300      	movs	r3, #0
 80064ee:	b570      	push	{r4, r5, r6, lr}
 80064f0:	4d06      	ldr	r5, [pc, #24]	; (800650c <_close_r+0x20>)
 80064f2:	0004      	movs	r4, r0
 80064f4:	0008      	movs	r0, r1
 80064f6:	602b      	str	r3, [r5, #0]
 80064f8:	f7fa fa55 	bl	80009a6 <_close>
 80064fc:	1c43      	adds	r3, r0, #1
 80064fe:	d103      	bne.n	8006508 <_close_r+0x1c>
 8006500:	682b      	ldr	r3, [r5, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d000      	beq.n	8006508 <_close_r+0x1c>
 8006506:	6023      	str	r3, [r4, #0]
 8006508:	bd70      	pop	{r4, r5, r6, pc}
 800650a:	46c0      	nop			; (mov r8, r8)
 800650c:	20001ce4 	.word	0x20001ce4

08006510 <_fstat_r>:
 8006510:	2300      	movs	r3, #0
 8006512:	b570      	push	{r4, r5, r6, lr}
 8006514:	4d06      	ldr	r5, [pc, #24]	; (8006530 <_fstat_r+0x20>)
 8006516:	0004      	movs	r4, r0
 8006518:	0008      	movs	r0, r1
 800651a:	0011      	movs	r1, r2
 800651c:	602b      	str	r3, [r5, #0]
 800651e:	f7fa fa4c 	bl	80009ba <_fstat>
 8006522:	1c43      	adds	r3, r0, #1
 8006524:	d103      	bne.n	800652e <_fstat_r+0x1e>
 8006526:	682b      	ldr	r3, [r5, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d000      	beq.n	800652e <_fstat_r+0x1e>
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	bd70      	pop	{r4, r5, r6, pc}
 8006530:	20001ce4 	.word	0x20001ce4

08006534 <_isatty_r>:
 8006534:	2300      	movs	r3, #0
 8006536:	b570      	push	{r4, r5, r6, lr}
 8006538:	4d06      	ldr	r5, [pc, #24]	; (8006554 <_isatty_r+0x20>)
 800653a:	0004      	movs	r4, r0
 800653c:	0008      	movs	r0, r1
 800653e:	602b      	str	r3, [r5, #0]
 8006540:	f7fa fa49 	bl	80009d6 <_isatty>
 8006544:	1c43      	adds	r3, r0, #1
 8006546:	d103      	bne.n	8006550 <_isatty_r+0x1c>
 8006548:	682b      	ldr	r3, [r5, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d000      	beq.n	8006550 <_isatty_r+0x1c>
 800654e:	6023      	str	r3, [r4, #0]
 8006550:	bd70      	pop	{r4, r5, r6, pc}
 8006552:	46c0      	nop			; (mov r8, r8)
 8006554:	20001ce4 	.word	0x20001ce4

08006558 <_lseek_r>:
 8006558:	b570      	push	{r4, r5, r6, lr}
 800655a:	0004      	movs	r4, r0
 800655c:	0008      	movs	r0, r1
 800655e:	0011      	movs	r1, r2
 8006560:	001a      	movs	r2, r3
 8006562:	2300      	movs	r3, #0
 8006564:	4d05      	ldr	r5, [pc, #20]	; (800657c <_lseek_r+0x24>)
 8006566:	602b      	str	r3, [r5, #0]
 8006568:	f7fa fa3e 	bl	80009e8 <_lseek>
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	d103      	bne.n	8006578 <_lseek_r+0x20>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d000      	beq.n	8006578 <_lseek_r+0x20>
 8006576:	6023      	str	r3, [r4, #0]
 8006578:	bd70      	pop	{r4, r5, r6, pc}
 800657a:	46c0      	nop			; (mov r8, r8)
 800657c:	20001ce4 	.word	0x20001ce4

08006580 <_malloc_usable_size_r>:
 8006580:	1f0b      	subs	r3, r1, #4
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	1f18      	subs	r0, r3, #4
 8006586:	2b00      	cmp	r3, #0
 8006588:	da01      	bge.n	800658e <_malloc_usable_size_r+0xe>
 800658a:	580b      	ldr	r3, [r1, r0]
 800658c:	18c0      	adds	r0, r0, r3
 800658e:	4770      	bx	lr

08006590 <_read_r>:
 8006590:	b570      	push	{r4, r5, r6, lr}
 8006592:	0004      	movs	r4, r0
 8006594:	0008      	movs	r0, r1
 8006596:	0011      	movs	r1, r2
 8006598:	001a      	movs	r2, r3
 800659a:	2300      	movs	r3, #0
 800659c:	4d05      	ldr	r5, [pc, #20]	; (80065b4 <_read_r+0x24>)
 800659e:	602b      	str	r3, [r5, #0]
 80065a0:	f7fa f9c8 	bl	8000934 <_read>
 80065a4:	1c43      	adds	r3, r0, #1
 80065a6:	d103      	bne.n	80065b0 <_read_r+0x20>
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d000      	beq.n	80065b0 <_read_r+0x20>
 80065ae:	6023      	str	r3, [r4, #0]
 80065b0:	bd70      	pop	{r4, r5, r6, pc}
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	20001ce4 	.word	0x20001ce4

080065b8 <_init>:
 80065b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ba:	46c0      	nop			; (mov r8, r8)
 80065bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065be:	bc08      	pop	{r3}
 80065c0:	469e      	mov	lr, r3
 80065c2:	4770      	bx	lr

080065c4 <_fini>:
 80065c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c6:	46c0      	nop			; (mov r8, r8)
 80065c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ca:	bc08      	pop	{r3}
 80065cc:	469e      	mov	lr, r3
 80065ce:	4770      	bx	lr
